// Generated by PeakRDL-regblock - A free and open-source SystemVerilog generator
//  https://github.com/SystemRDL/PeakRDL-regblock

module axi_dma_reg (
        input wire clk,
        input wire rst,

        input wire s_cpuif_req,
        input wire s_cpuif_req_is_wr,
        input wire [11:0] s_cpuif_addr,
        input wire [31:0] s_cpuif_wr_data,
        input wire [31:0] s_cpuif_wr_biten,
        output wire s_cpuif_req_stall_wr,
        output wire s_cpuif_req_stall_rd,
        output wire s_cpuif_rd_ack,
        output wire s_cpuif_rd_err,
        output wire [31:0] s_cpuif_rd_data,
        output wire s_cpuif_wr_ack,
        output wire s_cpuif_wr_err,

        input axi_dma_reg_pkg::axi_dma_reg__in_t hwif_in,
        output axi_dma_reg_pkg::axi_dma_reg__out_t hwif_out
    );

    //--------------------------------------------------------------------------
    // CPU Bus interface logic
    //--------------------------------------------------------------------------
    logic cpuif_req;
    logic cpuif_req_is_wr;
    logic [11:0] cpuif_addr;
    logic [31:0] cpuif_wr_data;
    logic [31:0] cpuif_wr_biten;
    logic cpuif_req_stall_wr;
    logic cpuif_req_stall_rd;

    logic cpuif_rd_ack;
    logic cpuif_rd_err;
    logic [31:0] cpuif_rd_data;

    logic cpuif_wr_ack;
    logic cpuif_wr_err;

    assign cpuif_req = s_cpuif_req;
    assign cpuif_req_is_wr = s_cpuif_req_is_wr;
    assign cpuif_addr = s_cpuif_addr;
    assign cpuif_wr_data = s_cpuif_wr_data;
    assign cpuif_wr_biten = s_cpuif_wr_biten;
    assign s_cpuif_req_stall_wr = cpuif_req_stall_wr;
    assign s_cpuif_req_stall_rd = cpuif_req_stall_rd;
    assign s_cpuif_rd_ack = cpuif_rd_ack;
    assign s_cpuif_rd_err = cpuif_rd_err;
    assign s_cpuif_rd_data = cpuif_rd_data;
    assign s_cpuif_wr_ack = cpuif_wr_ack;
    assign s_cpuif_wr_err = cpuif_wr_err;

    logic cpuif_req_masked;

    // Read & write latencies are balanced. Stalls not required
    assign cpuif_req_stall_rd = '0;
    assign cpuif_req_stall_wr = '0;
    assign cpuif_req_masked = cpuif_req
                            & !(!cpuif_req_is_wr & cpuif_req_stall_rd)
                            & !(cpuif_req_is_wr & cpuif_req_stall_wr);

    //--------------------------------------------------------------------------
    // Address Decode
    //--------------------------------------------------------------------------
    typedef struct packed{
        logic id;
        logic cap;
        logic ctrl;
        logic status0;
        logic status1;
        logic src_addr_l;
        logic src_addr_h;
        logic dst_addr_l;
        logic dst_addr_h;
        logic byte_count;
        logic block_size;
        logic write_data;
        logic read_data;
        struct packed{
            logic global_intr_en_r;
            logic error_intr_en_r;
            logic notif_intr_en_r;
            logic error_global_intr_r;
            logic notif_global_intr_r;
            logic error_internal_intr_r;
            logic notif_internal_intr_r;
            logic error_intr_trig_r;
            logic notif_intr_trig_r;
            logic error_cmd_dec_intr_count_r;
            logic error_axi_rd_intr_count_r;
            logic error_axi_wr_intr_count_r;
            logic error_mbox_lock_intr_count_r;
            logic error_sha_lock_intr_count_r;
            logic error_fifo_oflow_intr_count_r;
            logic error_fifo_uflow_intr_count_r;
            logic notif_txn_done_intr_count_r;
            logic notif_fifo_empty_intr_count_r;
            logic notif_fifo_not_empty_intr_count_r;
            logic notif_fifo_full_intr_count_r;
            logic notif_fifo_not_full_intr_count_r;
            logic error_cmd_dec_intr_count_incr_r;
            logic error_axi_rd_intr_count_incr_r;
            logic error_axi_wr_intr_count_incr_r;
            logic error_mbox_lock_intr_count_incr_r;
            logic error_sha_lock_intr_count_incr_r;
            logic error_fifo_oflow_intr_count_incr_r;
            logic error_fifo_uflow_intr_count_incr_r;
            logic notif_txn_done_intr_count_incr_r;
            logic notif_fifo_empty_intr_count_incr_r;
            logic notif_fifo_not_empty_intr_count_incr_r;
            logic notif_fifo_full_intr_count_incr_r;
            logic notif_fifo_not_full_intr_count_incr_r;
        } intr_block_rf;
    } decoded_reg_strb_t;
    decoded_reg_strb_t decoded_reg_strb;
    logic decoded_req;
    logic decoded_req_is_wr;
    logic [31:0] decoded_wr_data;
    logic [31:0] decoded_wr_biten;

    always_comb begin
        decoded_reg_strb.id = cpuif_req_masked & (cpuif_addr == 12'h0);
        decoded_reg_strb.cap = cpuif_req_masked & (cpuif_addr == 12'h4);
        decoded_reg_strb.ctrl = cpuif_req_masked & (cpuif_addr == 12'h8);
        decoded_reg_strb.status0 = cpuif_req_masked & (cpuif_addr == 12'hc);
        decoded_reg_strb.status1 = cpuif_req_masked & (cpuif_addr == 12'h10);
        decoded_reg_strb.src_addr_l = cpuif_req_masked & (cpuif_addr == 12'h14);
        decoded_reg_strb.src_addr_h = cpuif_req_masked & (cpuif_addr == 12'h18);
        decoded_reg_strb.dst_addr_l = cpuif_req_masked & (cpuif_addr == 12'h1c);
        decoded_reg_strb.dst_addr_h = cpuif_req_masked & (cpuif_addr == 12'h20);
        decoded_reg_strb.byte_count = cpuif_req_masked & (cpuif_addr == 12'h24);
        decoded_reg_strb.block_size = cpuif_req_masked & (cpuif_addr == 12'h28);
        decoded_reg_strb.write_data = cpuif_req_masked & (cpuif_addr == 12'h2c);
        decoded_reg_strb.read_data = cpuif_req_masked & (cpuif_addr == 12'h30);
        decoded_reg_strb.intr_block_rf.global_intr_en_r = cpuif_req_masked & (cpuif_addr == 12'h800);
        decoded_reg_strb.intr_block_rf.error_intr_en_r = cpuif_req_masked & (cpuif_addr == 12'h804);
        decoded_reg_strb.intr_block_rf.notif_intr_en_r = cpuif_req_masked & (cpuif_addr == 12'h808);
        decoded_reg_strb.intr_block_rf.error_global_intr_r = cpuif_req_masked & (cpuif_addr == 12'h80c);
        decoded_reg_strb.intr_block_rf.notif_global_intr_r = cpuif_req_masked & (cpuif_addr == 12'h810);
        decoded_reg_strb.intr_block_rf.error_internal_intr_r = cpuif_req_masked & (cpuif_addr == 12'h814);
        decoded_reg_strb.intr_block_rf.notif_internal_intr_r = cpuif_req_masked & (cpuif_addr == 12'h818);
        decoded_reg_strb.intr_block_rf.error_intr_trig_r = cpuif_req_masked & (cpuif_addr == 12'h81c);
        decoded_reg_strb.intr_block_rf.notif_intr_trig_r = cpuif_req_masked & (cpuif_addr == 12'h820);
        decoded_reg_strb.intr_block_rf.error_cmd_dec_intr_count_r = cpuif_req_masked & (cpuif_addr == 12'h900);
        decoded_reg_strb.intr_block_rf.error_axi_rd_intr_count_r = cpuif_req_masked & (cpuif_addr == 12'h904);
        decoded_reg_strb.intr_block_rf.error_axi_wr_intr_count_r = cpuif_req_masked & (cpuif_addr == 12'h908);
        decoded_reg_strb.intr_block_rf.error_mbox_lock_intr_count_r = cpuif_req_masked & (cpuif_addr == 12'h90c);
        decoded_reg_strb.intr_block_rf.error_sha_lock_intr_count_r = cpuif_req_masked & (cpuif_addr == 12'h910);
        decoded_reg_strb.intr_block_rf.error_fifo_oflow_intr_count_r = cpuif_req_masked & (cpuif_addr == 12'h914);
        decoded_reg_strb.intr_block_rf.error_fifo_uflow_intr_count_r = cpuif_req_masked & (cpuif_addr == 12'h918);
        decoded_reg_strb.intr_block_rf.notif_txn_done_intr_count_r = cpuif_req_masked & (cpuif_addr == 12'h980);
        decoded_reg_strb.intr_block_rf.notif_fifo_empty_intr_count_r = cpuif_req_masked & (cpuif_addr == 12'h984);
        decoded_reg_strb.intr_block_rf.notif_fifo_not_empty_intr_count_r = cpuif_req_masked & (cpuif_addr == 12'h988);
        decoded_reg_strb.intr_block_rf.notif_fifo_full_intr_count_r = cpuif_req_masked & (cpuif_addr == 12'h98c);
        decoded_reg_strb.intr_block_rf.notif_fifo_not_full_intr_count_r = cpuif_req_masked & (cpuif_addr == 12'h990);
        decoded_reg_strb.intr_block_rf.error_cmd_dec_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 12'ha00);
        decoded_reg_strb.intr_block_rf.error_axi_rd_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 12'ha04);
        decoded_reg_strb.intr_block_rf.error_axi_wr_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 12'ha08);
        decoded_reg_strb.intr_block_rf.error_mbox_lock_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 12'ha0c);
        decoded_reg_strb.intr_block_rf.error_sha_lock_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 12'ha10);
        decoded_reg_strb.intr_block_rf.error_fifo_oflow_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 12'ha14);
        decoded_reg_strb.intr_block_rf.error_fifo_uflow_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 12'ha18);
        decoded_reg_strb.intr_block_rf.notif_txn_done_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 12'ha1c);
        decoded_reg_strb.intr_block_rf.notif_fifo_empty_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 12'ha20);
        decoded_reg_strb.intr_block_rf.notif_fifo_not_empty_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 12'ha24);
        decoded_reg_strb.intr_block_rf.notif_fifo_full_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 12'ha28);
        decoded_reg_strb.intr_block_rf.notif_fifo_not_full_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 12'ha2c);
    end

    // Pass down signals to next stage
    assign decoded_req = cpuif_req_masked;
    assign decoded_req_is_wr = cpuif_req_is_wr;
    assign decoded_wr_data = cpuif_wr_data;
    assign decoded_wr_biten = cpuif_wr_biten;

    //--------------------------------------------------------------------------
    // Field logic
    //--------------------------------------------------------------------------
    typedef struct packed{
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } go;
            struct packed{
                logic next;
                logic load_next;
            } flush;
            struct packed{
                logic [1:0] next;
                logic load_next;
            } rd_route;
            struct packed{
                logic next;
                logic load_next;
            } rd_fixed;
            struct packed{
                logic [1:0] next;
                logic load_next;
            } wr_route;
            struct packed{
                logic next;
                logic load_next;
            } wr_fixed;
        } ctrl;
        struct packed{
            struct packed{
                logic [1:0] next;
                logic load_next;
            } axi_dma_fsm_ps;
        } status0;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } addr_l;
        } src_addr_l;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } addr_h;
        } src_addr_h;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } addr_l;
        } dst_addr_l;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } addr_h;
        } dst_addr_h;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } count;
        } byte_count;
        struct packed{
            struct packed{
                logic [11:0] next;
                logic load_next;
            } size;
        } block_size;
        struct packed{
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } error_en;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_en;
            } global_intr_en_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } error_cmd_dec_en;
                struct packed{
                    logic next;
                    logic load_next;
                } error_axi_rd_en;
                struct packed{
                    logic next;
                    logic load_next;
                } error_axi_wr_en;
                struct packed{
                    logic next;
                    logic load_next;
                } error_mbox_lock_en;
                struct packed{
                    logic next;
                    logic load_next;
                } error_sha_lock_en;
                struct packed{
                    logic next;
                    logic load_next;
                } error_fifo_oflow_en;
                struct packed{
                    logic next;
                    logic load_next;
                } error_fifo_uflow_en;
            } error_intr_en_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } notif_txn_done_en;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_fifo_empty_en;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_fifo_not_empty_en;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_fifo_full_en;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_fifo_not_full_en;
            } notif_intr_en_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } agg_sts;
            } error_global_intr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } agg_sts;
            } notif_global_intr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } error_cmd_dec_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } error_axi_rd_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } error_axi_wr_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } error_mbox_lock_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } error_sha_lock_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } error_fifo_oflow_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } error_fifo_uflow_sts;
            } error_internal_intr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } notif_txn_done_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_fifo_empty_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_fifo_not_empty_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_fifo_full_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_fifo_not_full_sts;
            } notif_internal_intr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } error_cmd_dec_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } error_axi_rd_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } error_axi_wr_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } error_mbox_lock_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } error_sha_lock_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } error_fifo_oflow_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } error_fifo_uflow_trig;
            } error_intr_trig_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } notif_txn_done_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_fifo_empty_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_fifo_not_empty_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_fifo_full_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_fifo_not_full_trig;
            } notif_intr_trig_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error_cmd_dec_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error_axi_rd_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error_axi_wr_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error_mbox_lock_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error_sha_lock_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error_fifo_oflow_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error_fifo_uflow_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } notif_txn_done_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } notif_fifo_empty_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } notif_fifo_not_empty_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } notif_fifo_full_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } notif_fifo_not_full_intr_count_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error_cmd_dec_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error_axi_rd_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error_axi_wr_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error_mbox_lock_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error_sha_lock_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error_fifo_oflow_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error_fifo_uflow_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } notif_txn_done_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } notif_fifo_empty_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } notif_fifo_not_empty_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } notif_fifo_full_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } notif_fifo_not_full_intr_count_incr_r;
        } intr_block_rf;
    } field_combo_t;
    field_combo_t field_combo;

    typedef struct packed{
        struct packed{
            struct packed{
                logic value;
            } go;
            struct packed{
                logic value;
            } flush;
            struct packed{
                logic [1:0] value;
            } rd_route;
            struct packed{
                logic value;
            } rd_fixed;
            struct packed{
                logic [1:0] value;
            } wr_route;
            struct packed{
                logic value;
            } wr_fixed;
        } ctrl;
        struct packed{
            struct packed{
                logic [1:0] value;
            } axi_dma_fsm_ps;
        } status0;
        struct packed{
            struct packed{
                logic [31:0] value;
            } addr_l;
        } src_addr_l;
        struct packed{
            struct packed{
                logic [31:0] value;
            } addr_h;
        } src_addr_h;
        struct packed{
            struct packed{
                logic [31:0] value;
            } addr_l;
        } dst_addr_l;
        struct packed{
            struct packed{
                logic [31:0] value;
            } addr_h;
        } dst_addr_h;
        struct packed{
            struct packed{
                logic [31:0] value;
            } count;
        } byte_count;
        struct packed{
            struct packed{
                logic [11:0] value;
            } size;
        } block_size;
        struct packed{
            struct packed{
                struct packed{
                    logic value;
                } error_en;
                struct packed{
                    logic value;
                } notif_en;
            } global_intr_en_r;
            struct packed{
                struct packed{
                    logic value;
                } error_cmd_dec_en;
                struct packed{
                    logic value;
                } error_axi_rd_en;
                struct packed{
                    logic value;
                } error_axi_wr_en;
                struct packed{
                    logic value;
                } error_mbox_lock_en;
                struct packed{
                    logic value;
                } error_sha_lock_en;
                struct packed{
                    logic value;
                } error_fifo_oflow_en;
                struct packed{
                    logic value;
                } error_fifo_uflow_en;
            } error_intr_en_r;
            struct packed{
                struct packed{
                    logic value;
                } notif_txn_done_en;
                struct packed{
                    logic value;
                } notif_fifo_empty_en;
                struct packed{
                    logic value;
                } notif_fifo_not_empty_en;
                struct packed{
                    logic value;
                } notif_fifo_full_en;
                struct packed{
                    logic value;
                } notif_fifo_not_full_en;
            } notif_intr_en_r;
            struct packed{
                struct packed{
                    logic value;
                } agg_sts;
            } error_global_intr_r;
            struct packed{
                struct packed{
                    logic value;
                } agg_sts;
            } notif_global_intr_r;
            struct packed{
                struct packed{
                    logic value;
                } error_cmd_dec_sts;
                struct packed{
                    logic value;
                } error_axi_rd_sts;
                struct packed{
                    logic value;
                } error_axi_wr_sts;
                struct packed{
                    logic value;
                } error_mbox_lock_sts;
                struct packed{
                    logic value;
                } error_sha_lock_sts;
                struct packed{
                    logic value;
                } error_fifo_oflow_sts;
                struct packed{
                    logic value;
                } error_fifo_uflow_sts;
            } error_internal_intr_r;
            struct packed{
                struct packed{
                    logic value;
                } notif_txn_done_sts;
                struct packed{
                    logic value;
                } notif_fifo_empty_sts;
                struct packed{
                    logic value;
                } notif_fifo_not_empty_sts;
                struct packed{
                    logic value;
                } notif_fifo_full_sts;
                struct packed{
                    logic value;
                } notif_fifo_not_full_sts;
            } notif_internal_intr_r;
            struct packed{
                struct packed{
                    logic value;
                } error_cmd_dec_trig;
                struct packed{
                    logic value;
                } error_axi_rd_trig;
                struct packed{
                    logic value;
                } error_axi_wr_trig;
                struct packed{
                    logic value;
                } error_mbox_lock_trig;
                struct packed{
                    logic value;
                } error_sha_lock_trig;
                struct packed{
                    logic value;
                } error_fifo_oflow_trig;
                struct packed{
                    logic value;
                } error_fifo_uflow_trig;
            } error_intr_trig_r;
            struct packed{
                struct packed{
                    logic value;
                } notif_txn_done_trig;
                struct packed{
                    logic value;
                } notif_fifo_empty_trig;
                struct packed{
                    logic value;
                } notif_fifo_not_empty_trig;
                struct packed{
                    logic value;
                } notif_fifo_full_trig;
                struct packed{
                    logic value;
                } notif_fifo_not_full_trig;
            } notif_intr_trig_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error_cmd_dec_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error_axi_rd_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error_axi_wr_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error_mbox_lock_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error_sha_lock_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error_fifo_oflow_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error_fifo_uflow_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } notif_txn_done_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } notif_fifo_empty_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } notif_fifo_not_empty_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } notif_fifo_full_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } notif_fifo_not_full_intr_count_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error_cmd_dec_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error_axi_rd_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error_axi_wr_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error_mbox_lock_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error_sha_lock_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error_fifo_oflow_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error_fifo_uflow_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } notif_txn_done_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } notif_fifo_empty_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } notif_fifo_not_empty_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } notif_fifo_full_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } notif_fifo_not_full_intr_count_incr_r;
        } intr_block_rf;
    } field_storage_t;
    field_storage_t field_storage;

    // Field: axi_dma_reg.ctrl.go
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.ctrl.go.value;
        load_next_c = '0;
        if(decoded_reg_strb.ctrl && decoded_req_is_wr && !(hwif_in.dma_swwel)) begin // SW write 1 set
            next_c = field_storage.ctrl.go.value | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end else if(hwif_in.ctrl.go.hwclr) begin // HW Clear
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.ctrl.go.next = next_c;
        field_combo.ctrl.go.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.ctrl.go.value <= 1'h0;
        end else if(field_combo.ctrl.go.load_next) begin
            field_storage.ctrl.go.value <= field_combo.ctrl.go.next;
        end
    end
    assign hwif_out.ctrl.go.value = field_storage.ctrl.go.value;
    assign hwif_out.ctrl.go.swmod = decoded_reg_strb.ctrl && decoded_req_is_wr;
    // Field: axi_dma_reg.ctrl.flush
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.ctrl.flush.value;
        load_next_c = '0;
        if(decoded_reg_strb.ctrl && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 set
            next_c = field_storage.ctrl.flush.value | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end else if(hwif_in.ctrl.flush.hwclr) begin // HW Clear
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.ctrl.flush.next = next_c;
        field_combo.ctrl.flush.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.ctrl.flush.value <= 1'h0;
        end else if(field_combo.ctrl.flush.load_next) begin
            field_storage.ctrl.flush.value <= field_combo.ctrl.flush.next;
        end
    end
    assign hwif_out.ctrl.flush.value = field_storage.ctrl.flush.value;
    // Field: axi_dma_reg.ctrl.rd_route
    always_comb begin
        automatic logic [1:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.ctrl.rd_route.value;
        load_next_c = '0;
        if(decoded_reg_strb.ctrl && decoded_req_is_wr && !(hwif_in.dma_swwel)) begin // SW write
            next_c = (field_storage.ctrl.rd_route.value & ~decoded_wr_biten[17:16]) | (decoded_wr_data[17:16] & decoded_wr_biten[17:16]);
            load_next_c = '1;
        end
        field_combo.ctrl.rd_route.next = next_c;
        field_combo.ctrl.rd_route.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.ctrl.rd_route.value <= 2'h0;
        end else if(field_combo.ctrl.rd_route.load_next) begin
            field_storage.ctrl.rd_route.value <= field_combo.ctrl.rd_route.next;
        end
    end
    assign hwif_out.ctrl.rd_route.value = field_storage.ctrl.rd_route.value;
    // Field: axi_dma_reg.ctrl.rd_fixed
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.ctrl.rd_fixed.value;
        load_next_c = '0;
        if(decoded_reg_strb.ctrl && decoded_req_is_wr && !(hwif_in.dma_swwel)) begin // SW write
            next_c = (field_storage.ctrl.rd_fixed.value & ~decoded_wr_biten[20:20]) | (decoded_wr_data[20:20] & decoded_wr_biten[20:20]);
            load_next_c = '1;
        end
        field_combo.ctrl.rd_fixed.next = next_c;
        field_combo.ctrl.rd_fixed.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.ctrl.rd_fixed.value <= 1'h0;
        end else if(field_combo.ctrl.rd_fixed.load_next) begin
            field_storage.ctrl.rd_fixed.value <= field_combo.ctrl.rd_fixed.next;
        end
    end
    assign hwif_out.ctrl.rd_fixed.value = field_storage.ctrl.rd_fixed.value;
    // Field: axi_dma_reg.ctrl.wr_route
    always_comb begin
        automatic logic [1:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.ctrl.wr_route.value;
        load_next_c = '0;
        if(decoded_reg_strb.ctrl && decoded_req_is_wr && !(hwif_in.dma_swwel)) begin // SW write
            next_c = (field_storage.ctrl.wr_route.value & ~decoded_wr_biten[25:24]) | (decoded_wr_data[25:24] & decoded_wr_biten[25:24]);
            load_next_c = '1;
        end
        field_combo.ctrl.wr_route.next = next_c;
        field_combo.ctrl.wr_route.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.ctrl.wr_route.value <= 2'h0;
        end else if(field_combo.ctrl.wr_route.load_next) begin
            field_storage.ctrl.wr_route.value <= field_combo.ctrl.wr_route.next;
        end
    end
    assign hwif_out.ctrl.wr_route.value = field_storage.ctrl.wr_route.value;
    // Field: axi_dma_reg.ctrl.wr_fixed
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.ctrl.wr_fixed.value;
        load_next_c = '0;
        if(decoded_reg_strb.ctrl && decoded_req_is_wr && !(hwif_in.dma_swwel)) begin // SW write
            next_c = (field_storage.ctrl.wr_fixed.value & ~decoded_wr_biten[28:28]) | (decoded_wr_data[28:28] & decoded_wr_biten[28:28]);
            load_next_c = '1;
        end
        field_combo.ctrl.wr_fixed.next = next_c;
        field_combo.ctrl.wr_fixed.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.ctrl.wr_fixed.value <= 1'h0;
        end else if(field_combo.ctrl.wr_fixed.load_next) begin
            field_storage.ctrl.wr_fixed.value <= field_combo.ctrl.wr_fixed.next;
        end
    end
    assign hwif_out.ctrl.wr_fixed.value = field_storage.ctrl.wr_fixed.value;
    // Field: axi_dma_reg.status0.axi_dma_fsm_ps
    always_comb begin
        automatic logic [1:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.status0.axi_dma_fsm_ps.value;
        load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.status0.axi_dma_fsm_ps.next;
        load_next_c = '1;
        field_combo.status0.axi_dma_fsm_ps.next = next_c;
        field_combo.status0.axi_dma_fsm_ps.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.status0.axi_dma_fsm_ps.value <= 2'h0;
        end else if(field_combo.status0.axi_dma_fsm_ps.load_next) begin
            field_storage.status0.axi_dma_fsm_ps.value <= field_combo.status0.axi_dma_fsm_ps.next;
        end
    end
    assign hwif_out.status0.axi_dma_fsm_ps.value = field_storage.status0.axi_dma_fsm_ps.value;
    // Field: axi_dma_reg.src_addr_l.addr_l
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.src_addr_l.addr_l.value;
        load_next_c = '0;
        if(decoded_reg_strb.src_addr_l && decoded_req_is_wr && !(hwif_in.dma_swwel)) begin // SW write
            next_c = (field_storage.src_addr_l.addr_l.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.src_addr_l.addr_l.next = next_c;
        field_combo.src_addr_l.addr_l.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.src_addr_l.addr_l.value <= 32'h0;
        end else if(field_combo.src_addr_l.addr_l.load_next) begin
            field_storage.src_addr_l.addr_l.value <= field_combo.src_addr_l.addr_l.next;
        end
    end
    assign hwif_out.src_addr_l.addr_l.value = field_storage.src_addr_l.addr_l.value;
    // Field: axi_dma_reg.src_addr_h.addr_h
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.src_addr_h.addr_h.value;
        load_next_c = '0;
        if(decoded_reg_strb.src_addr_h && decoded_req_is_wr && !(hwif_in.dma_swwel)) begin // SW write
            next_c = (field_storage.src_addr_h.addr_h.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.src_addr_h.addr_h.next = next_c;
        field_combo.src_addr_h.addr_h.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.src_addr_h.addr_h.value <= 32'h0;
        end else if(field_combo.src_addr_h.addr_h.load_next) begin
            field_storage.src_addr_h.addr_h.value <= field_combo.src_addr_h.addr_h.next;
        end
    end
    assign hwif_out.src_addr_h.addr_h.value = field_storage.src_addr_h.addr_h.value;
    // Field: axi_dma_reg.dst_addr_l.addr_l
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.dst_addr_l.addr_l.value;
        load_next_c = '0;
        if(decoded_reg_strb.dst_addr_l && decoded_req_is_wr && !(hwif_in.dma_swwel)) begin // SW write
            next_c = (field_storage.dst_addr_l.addr_l.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.dst_addr_l.addr_l.next = next_c;
        field_combo.dst_addr_l.addr_l.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.dst_addr_l.addr_l.value <= 32'h0;
        end else if(field_combo.dst_addr_l.addr_l.load_next) begin
            field_storage.dst_addr_l.addr_l.value <= field_combo.dst_addr_l.addr_l.next;
        end
    end
    assign hwif_out.dst_addr_l.addr_l.value = field_storage.dst_addr_l.addr_l.value;
    // Field: axi_dma_reg.dst_addr_h.addr_h
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.dst_addr_h.addr_h.value;
        load_next_c = '0;
        if(decoded_reg_strb.dst_addr_h && decoded_req_is_wr && !(hwif_in.dma_swwel)) begin // SW write
            next_c = (field_storage.dst_addr_h.addr_h.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.dst_addr_h.addr_h.next = next_c;
        field_combo.dst_addr_h.addr_h.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.dst_addr_h.addr_h.value <= 32'h0;
        end else if(field_combo.dst_addr_h.addr_h.load_next) begin
            field_storage.dst_addr_h.addr_h.value <= field_combo.dst_addr_h.addr_h.next;
        end
    end
    assign hwif_out.dst_addr_h.addr_h.value = field_storage.dst_addr_h.addr_h.value;
    // Field: axi_dma_reg.byte_count.count
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.byte_count.count.value;
        load_next_c = '0;
        if(decoded_reg_strb.byte_count && decoded_req_is_wr && !(hwif_in.dma_swwel)) begin // SW write
            next_c = (field_storage.byte_count.count.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.byte_count.count.next = next_c;
        field_combo.byte_count.count.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.byte_count.count.value <= 32'h0;
        end else if(field_combo.byte_count.count.load_next) begin
            field_storage.byte_count.count.value <= field_combo.byte_count.count.next;
        end
    end
    assign hwif_out.byte_count.count.value = field_storage.byte_count.count.value;
    // Field: axi_dma_reg.block_size.size
    always_comb begin
        automatic logic [11:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.block_size.size.value;
        load_next_c = '0;
        if(decoded_reg_strb.block_size && decoded_req_is_wr && !(hwif_in.dma_swwel)) begin // SW write
            next_c = (field_storage.block_size.size.value & ~decoded_wr_biten[11:0]) | (decoded_wr_data[11:0] & decoded_wr_biten[11:0]);
            load_next_c = '1;
        end
        field_combo.block_size.size.next = next_c;
        field_combo.block_size.size.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.block_size.size.value <= 12'h0;
        end else if(field_combo.block_size.size.load_next) begin
            field_storage.block_size.size.value <= field_combo.block_size.size.next;
        end
    end
    assign hwif_out.block_size.size.value = field_storage.block_size.size.value;
    assign hwif_out.write_data.wdata.swmod = decoded_reg_strb.write_data && decoded_req_is_wr;
    assign hwif_out.read_data.rdata.swacc = decoded_reg_strb.read_data;
    // Field: axi_dma_reg.intr_block_rf.global_intr_en_r.error_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.global_intr_en_r.error_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.global_intr_en_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.intr_block_rf.global_intr_en_r.error_en.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.global_intr_en_r.error_en.next = next_c;
        field_combo.intr_block_rf.global_intr_en_r.error_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.global_intr_en_r.error_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.global_intr_en_r.error_en.load_next) begin
            field_storage.intr_block_rf.global_intr_en_r.error_en.value <= field_combo.intr_block_rf.global_intr_en_r.error_en.next;
        end
    end
    // Field: axi_dma_reg.intr_block_rf.global_intr_en_r.notif_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.global_intr_en_r.notif_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.global_intr_en_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.intr_block_rf.global_intr_en_r.notif_en.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.global_intr_en_r.notif_en.next = next_c;
        field_combo.intr_block_rf.global_intr_en_r.notif_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.global_intr_en_r.notif_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.global_intr_en_r.notif_en.load_next) begin
            field_storage.intr_block_rf.global_intr_en_r.notif_en.value <= field_combo.intr_block_rf.global_intr_en_r.notif_en.next;
        end
    end
    // Field: axi_dma_reg.intr_block_rf.error_intr_en_r.error_cmd_dec_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_intr_en_r.error_cmd_dec_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_en_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.intr_block_rf.error_intr_en_r.error_cmd_dec_en.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_en_r.error_cmd_dec_en.next = next_c;
        field_combo.intr_block_rf.error_intr_en_r.error_cmd_dec_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.error_intr_en_r.error_cmd_dec_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_intr_en_r.error_cmd_dec_en.load_next) begin
            field_storage.intr_block_rf.error_intr_en_r.error_cmd_dec_en.value <= field_combo.intr_block_rf.error_intr_en_r.error_cmd_dec_en.next;
        end
    end
    // Field: axi_dma_reg.intr_block_rf.error_intr_en_r.error_axi_rd_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_intr_en_r.error_axi_rd_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_en_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.intr_block_rf.error_intr_en_r.error_axi_rd_en.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_en_r.error_axi_rd_en.next = next_c;
        field_combo.intr_block_rf.error_intr_en_r.error_axi_rd_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.error_intr_en_r.error_axi_rd_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_intr_en_r.error_axi_rd_en.load_next) begin
            field_storage.intr_block_rf.error_intr_en_r.error_axi_rd_en.value <= field_combo.intr_block_rf.error_intr_en_r.error_axi_rd_en.next;
        end
    end
    // Field: axi_dma_reg.intr_block_rf.error_intr_en_r.error_axi_wr_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_intr_en_r.error_axi_wr_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_en_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.intr_block_rf.error_intr_en_r.error_axi_wr_en.value & ~decoded_wr_biten[2:2]) | (decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_en_r.error_axi_wr_en.next = next_c;
        field_combo.intr_block_rf.error_intr_en_r.error_axi_wr_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.error_intr_en_r.error_axi_wr_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_intr_en_r.error_axi_wr_en.load_next) begin
            field_storage.intr_block_rf.error_intr_en_r.error_axi_wr_en.value <= field_combo.intr_block_rf.error_intr_en_r.error_axi_wr_en.next;
        end
    end
    // Field: axi_dma_reg.intr_block_rf.error_intr_en_r.error_mbox_lock_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_intr_en_r.error_mbox_lock_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_en_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.intr_block_rf.error_intr_en_r.error_mbox_lock_en.value & ~decoded_wr_biten[3:3]) | (decoded_wr_data[3:3] & decoded_wr_biten[3:3]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_en_r.error_mbox_lock_en.next = next_c;
        field_combo.intr_block_rf.error_intr_en_r.error_mbox_lock_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.error_intr_en_r.error_mbox_lock_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_intr_en_r.error_mbox_lock_en.load_next) begin
            field_storage.intr_block_rf.error_intr_en_r.error_mbox_lock_en.value <= field_combo.intr_block_rf.error_intr_en_r.error_mbox_lock_en.next;
        end
    end
    // Field: axi_dma_reg.intr_block_rf.error_intr_en_r.error_sha_lock_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_intr_en_r.error_sha_lock_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_en_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.intr_block_rf.error_intr_en_r.error_sha_lock_en.value & ~decoded_wr_biten[4:4]) | (decoded_wr_data[4:4] & decoded_wr_biten[4:4]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_en_r.error_sha_lock_en.next = next_c;
        field_combo.intr_block_rf.error_intr_en_r.error_sha_lock_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.error_intr_en_r.error_sha_lock_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_intr_en_r.error_sha_lock_en.load_next) begin
            field_storage.intr_block_rf.error_intr_en_r.error_sha_lock_en.value <= field_combo.intr_block_rf.error_intr_en_r.error_sha_lock_en.next;
        end
    end
    // Field: axi_dma_reg.intr_block_rf.error_intr_en_r.error_fifo_oflow_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_intr_en_r.error_fifo_oflow_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_en_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.intr_block_rf.error_intr_en_r.error_fifo_oflow_en.value & ~decoded_wr_biten[5:5]) | (decoded_wr_data[5:5] & decoded_wr_biten[5:5]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_en_r.error_fifo_oflow_en.next = next_c;
        field_combo.intr_block_rf.error_intr_en_r.error_fifo_oflow_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.error_intr_en_r.error_fifo_oflow_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_intr_en_r.error_fifo_oflow_en.load_next) begin
            field_storage.intr_block_rf.error_intr_en_r.error_fifo_oflow_en.value <= field_combo.intr_block_rf.error_intr_en_r.error_fifo_oflow_en.next;
        end
    end
    // Field: axi_dma_reg.intr_block_rf.error_intr_en_r.error_fifo_uflow_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_intr_en_r.error_fifo_uflow_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_en_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.intr_block_rf.error_intr_en_r.error_fifo_uflow_en.value & ~decoded_wr_biten[6:6]) | (decoded_wr_data[6:6] & decoded_wr_biten[6:6]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_en_r.error_fifo_uflow_en.next = next_c;
        field_combo.intr_block_rf.error_intr_en_r.error_fifo_uflow_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.error_intr_en_r.error_fifo_uflow_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_intr_en_r.error_fifo_uflow_en.load_next) begin
            field_storage.intr_block_rf.error_intr_en_r.error_fifo_uflow_en.value <= field_combo.intr_block_rf.error_intr_en_r.error_fifo_uflow_en.next;
        end
    end
    // Field: axi_dma_reg.intr_block_rf.notif_intr_en_r.notif_txn_done_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_intr_en_r.notif_txn_done_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_intr_en_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.intr_block_rf.notif_intr_en_r.notif_txn_done_en.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_intr_en_r.notif_txn_done_en.next = next_c;
        field_combo.intr_block_rf.notif_intr_en_r.notif_txn_done_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.notif_intr_en_r.notif_txn_done_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_intr_en_r.notif_txn_done_en.load_next) begin
            field_storage.intr_block_rf.notif_intr_en_r.notif_txn_done_en.value <= field_combo.intr_block_rf.notif_intr_en_r.notif_txn_done_en.next;
        end
    end
    // Field: axi_dma_reg.intr_block_rf.notif_intr_en_r.notif_fifo_empty_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_intr_en_r.notif_fifo_empty_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_intr_en_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.intr_block_rf.notif_intr_en_r.notif_fifo_empty_en.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_intr_en_r.notif_fifo_empty_en.next = next_c;
        field_combo.intr_block_rf.notif_intr_en_r.notif_fifo_empty_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.notif_intr_en_r.notif_fifo_empty_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_intr_en_r.notif_fifo_empty_en.load_next) begin
            field_storage.intr_block_rf.notif_intr_en_r.notif_fifo_empty_en.value <= field_combo.intr_block_rf.notif_intr_en_r.notif_fifo_empty_en.next;
        end
    end
    // Field: axi_dma_reg.intr_block_rf.notif_intr_en_r.notif_fifo_not_empty_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_intr_en_r.notif_fifo_not_empty_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_intr_en_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.intr_block_rf.notif_intr_en_r.notif_fifo_not_empty_en.value & ~decoded_wr_biten[2:2]) | (decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_intr_en_r.notif_fifo_not_empty_en.next = next_c;
        field_combo.intr_block_rf.notif_intr_en_r.notif_fifo_not_empty_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.notif_intr_en_r.notif_fifo_not_empty_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_intr_en_r.notif_fifo_not_empty_en.load_next) begin
            field_storage.intr_block_rf.notif_intr_en_r.notif_fifo_not_empty_en.value <= field_combo.intr_block_rf.notif_intr_en_r.notif_fifo_not_empty_en.next;
        end
    end
    // Field: axi_dma_reg.intr_block_rf.notif_intr_en_r.notif_fifo_full_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_intr_en_r.notif_fifo_full_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_intr_en_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.intr_block_rf.notif_intr_en_r.notif_fifo_full_en.value & ~decoded_wr_biten[3:3]) | (decoded_wr_data[3:3] & decoded_wr_biten[3:3]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_intr_en_r.notif_fifo_full_en.next = next_c;
        field_combo.intr_block_rf.notif_intr_en_r.notif_fifo_full_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.notif_intr_en_r.notif_fifo_full_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_intr_en_r.notif_fifo_full_en.load_next) begin
            field_storage.intr_block_rf.notif_intr_en_r.notif_fifo_full_en.value <= field_combo.intr_block_rf.notif_intr_en_r.notif_fifo_full_en.next;
        end
    end
    // Field: axi_dma_reg.intr_block_rf.notif_intr_en_r.notif_fifo_not_full_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_intr_en_r.notif_fifo_not_full_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_intr_en_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.intr_block_rf.notif_intr_en_r.notif_fifo_not_full_en.value & ~decoded_wr_biten[4:4]) | (decoded_wr_data[4:4] & decoded_wr_biten[4:4]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_intr_en_r.notif_fifo_not_full_en.next = next_c;
        field_combo.intr_block_rf.notif_intr_en_r.notif_fifo_not_full_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.notif_intr_en_r.notif_fifo_not_full_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_intr_en_r.notif_fifo_not_full_en.load_next) begin
            field_storage.intr_block_rf.notif_intr_en_r.notif_fifo_not_full_en.value <= field_combo.intr_block_rf.notif_intr_en_r.notif_fifo_not_full_en.next;
        end
    end
    // Field: axi_dma_reg.intr_block_rf.error_global_intr_r.agg_sts
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_global_intr_r.agg_sts.value;
        load_next_c = '0;
        
        // HW Write
        next_c = hwif_out.intr_block_rf.error_internal_intr_r.intr;
        load_next_c = '1;
        field_combo.intr_block_rf.error_global_intr_r.agg_sts.next = next_c;
        field_combo.intr_block_rf.error_global_intr_r.agg_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.error_global_intr_r.agg_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_global_intr_r.agg_sts.load_next) begin
            field_storage.intr_block_rf.error_global_intr_r.agg_sts.value <= field_combo.intr_block_rf.error_global_intr_r.agg_sts.next;
        end
    end
    assign hwif_out.intr_block_rf.error_global_intr_r.intr =
        |(field_storage.intr_block_rf.error_global_intr_r.agg_sts.value & field_storage.intr_block_rf.global_intr_en_r.error_en.value);
    // Field: axi_dma_reg.intr_block_rf.notif_global_intr_r.agg_sts
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_global_intr_r.agg_sts.value;
        load_next_c = '0;
        
        // HW Write
        next_c = hwif_out.intr_block_rf.notif_internal_intr_r.intr;
        load_next_c = '1;
        field_combo.intr_block_rf.notif_global_intr_r.agg_sts.next = next_c;
        field_combo.intr_block_rf.notif_global_intr_r.agg_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.notif_global_intr_r.agg_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_global_intr_r.agg_sts.load_next) begin
            field_storage.intr_block_rf.notif_global_intr_r.agg_sts.value <= field_combo.intr_block_rf.notif_global_intr_r.agg_sts.next;
        end
    end
    assign hwif_out.intr_block_rf.notif_global_intr_r.intr =
        |(field_storage.intr_block_rf.notif_global_intr_r.agg_sts.value & field_storage.intr_block_rf.global_intr_en_r.notif_en.value);
    // Field: axi_dma_reg.intr_block_rf.error_internal_intr_r.error_cmd_dec_sts
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_internal_intr_r.error_cmd_dec_sts.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error_cmd_dec_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error_cmd_dec_sts.value | field_storage.intr_block_rf.error_intr_trig_r.error_cmd_dec_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error_cmd_dec_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error_internal_intr_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error_cmd_dec_sts.value & ~(decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_internal_intr_r.error_cmd_dec_sts.next = next_c;
        field_combo.intr_block_rf.error_internal_intr_r.error_cmd_dec_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.intr_block_rf.error_internal_intr_r.error_cmd_dec_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_internal_intr_r.error_cmd_dec_sts.load_next) begin
            field_storage.intr_block_rf.error_internal_intr_r.error_cmd_dec_sts.value <= field_combo.intr_block_rf.error_internal_intr_r.error_cmd_dec_sts.next;
        end
    end
    // Field: axi_dma_reg.intr_block_rf.error_internal_intr_r.error_axi_rd_sts
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_internal_intr_r.error_axi_rd_sts.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error_axi_rd_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error_axi_rd_sts.value | field_storage.intr_block_rf.error_intr_trig_r.error_axi_rd_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error_axi_rd_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error_internal_intr_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error_axi_rd_sts.value & ~(decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_internal_intr_r.error_axi_rd_sts.next = next_c;
        field_combo.intr_block_rf.error_internal_intr_r.error_axi_rd_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.intr_block_rf.error_internal_intr_r.error_axi_rd_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_internal_intr_r.error_axi_rd_sts.load_next) begin
            field_storage.intr_block_rf.error_internal_intr_r.error_axi_rd_sts.value <= field_combo.intr_block_rf.error_internal_intr_r.error_axi_rd_sts.next;
        end
    end
    // Field: axi_dma_reg.intr_block_rf.error_internal_intr_r.error_axi_wr_sts
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_internal_intr_r.error_axi_wr_sts.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error_axi_wr_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error_axi_wr_sts.value | field_storage.intr_block_rf.error_intr_trig_r.error_axi_wr_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error_axi_wr_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error_internal_intr_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error_axi_wr_sts.value & ~(decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_internal_intr_r.error_axi_wr_sts.next = next_c;
        field_combo.intr_block_rf.error_internal_intr_r.error_axi_wr_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.intr_block_rf.error_internal_intr_r.error_axi_wr_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_internal_intr_r.error_axi_wr_sts.load_next) begin
            field_storage.intr_block_rf.error_internal_intr_r.error_axi_wr_sts.value <= field_combo.intr_block_rf.error_internal_intr_r.error_axi_wr_sts.next;
        end
    end
    // Field: axi_dma_reg.intr_block_rf.error_internal_intr_r.error_mbox_lock_sts
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_internal_intr_r.error_mbox_lock_sts.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error_mbox_lock_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error_mbox_lock_sts.value | field_storage.intr_block_rf.error_intr_trig_r.error_mbox_lock_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error_mbox_lock_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error_internal_intr_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error_mbox_lock_sts.value & ~(decoded_wr_data[3:3] & decoded_wr_biten[3:3]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_internal_intr_r.error_mbox_lock_sts.next = next_c;
        field_combo.intr_block_rf.error_internal_intr_r.error_mbox_lock_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.intr_block_rf.error_internal_intr_r.error_mbox_lock_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_internal_intr_r.error_mbox_lock_sts.load_next) begin
            field_storage.intr_block_rf.error_internal_intr_r.error_mbox_lock_sts.value <= field_combo.intr_block_rf.error_internal_intr_r.error_mbox_lock_sts.next;
        end
    end
    // Field: axi_dma_reg.intr_block_rf.error_internal_intr_r.error_sha_lock_sts
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_internal_intr_r.error_sha_lock_sts.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error_sha_lock_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error_sha_lock_sts.value | field_storage.intr_block_rf.error_intr_trig_r.error_sha_lock_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error_sha_lock_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error_internal_intr_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error_sha_lock_sts.value & ~(decoded_wr_data[4:4] & decoded_wr_biten[4:4]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_internal_intr_r.error_sha_lock_sts.next = next_c;
        field_combo.intr_block_rf.error_internal_intr_r.error_sha_lock_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.intr_block_rf.error_internal_intr_r.error_sha_lock_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_internal_intr_r.error_sha_lock_sts.load_next) begin
            field_storage.intr_block_rf.error_internal_intr_r.error_sha_lock_sts.value <= field_combo.intr_block_rf.error_internal_intr_r.error_sha_lock_sts.next;
        end
    end
    // Field: axi_dma_reg.intr_block_rf.error_internal_intr_r.error_fifo_oflow_sts
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_internal_intr_r.error_fifo_oflow_sts.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error_fifo_oflow_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error_fifo_oflow_sts.value | field_storage.intr_block_rf.error_intr_trig_r.error_fifo_oflow_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error_fifo_oflow_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error_internal_intr_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error_fifo_oflow_sts.value & ~(decoded_wr_data[5:5] & decoded_wr_biten[5:5]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_internal_intr_r.error_fifo_oflow_sts.next = next_c;
        field_combo.intr_block_rf.error_internal_intr_r.error_fifo_oflow_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.intr_block_rf.error_internal_intr_r.error_fifo_oflow_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_internal_intr_r.error_fifo_oflow_sts.load_next) begin
            field_storage.intr_block_rf.error_internal_intr_r.error_fifo_oflow_sts.value <= field_combo.intr_block_rf.error_internal_intr_r.error_fifo_oflow_sts.next;
        end
    end
    // Field: axi_dma_reg.intr_block_rf.error_internal_intr_r.error_fifo_uflow_sts
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_internal_intr_r.error_fifo_uflow_sts.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error_fifo_uflow_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error_fifo_uflow_sts.value | field_storage.intr_block_rf.error_intr_trig_r.error_fifo_uflow_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error_fifo_uflow_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error_internal_intr_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error_fifo_uflow_sts.value & ~(decoded_wr_data[6:6] & decoded_wr_biten[6:6]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_internal_intr_r.error_fifo_uflow_sts.next = next_c;
        field_combo.intr_block_rf.error_internal_intr_r.error_fifo_uflow_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.intr_block_rf.error_internal_intr_r.error_fifo_uflow_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_internal_intr_r.error_fifo_uflow_sts.load_next) begin
            field_storage.intr_block_rf.error_internal_intr_r.error_fifo_uflow_sts.value <= field_combo.intr_block_rf.error_internal_intr_r.error_fifo_uflow_sts.next;
        end
    end
    assign hwif_out.intr_block_rf.error_internal_intr_r.intr =
        |(field_storage.intr_block_rf.error_internal_intr_r.error_cmd_dec_sts.value & field_storage.intr_block_rf.error_intr_en_r.error_cmd_dec_en.value)
        || |(field_storage.intr_block_rf.error_internal_intr_r.error_axi_rd_sts.value & field_storage.intr_block_rf.error_intr_en_r.error_axi_rd_en.value)
        || |(field_storage.intr_block_rf.error_internal_intr_r.error_axi_wr_sts.value & field_storage.intr_block_rf.error_intr_en_r.error_axi_wr_en.value)
        || |(field_storage.intr_block_rf.error_internal_intr_r.error_mbox_lock_sts.value & field_storage.intr_block_rf.error_intr_en_r.error_mbox_lock_en.value)
        || |(field_storage.intr_block_rf.error_internal_intr_r.error_sha_lock_sts.value & field_storage.intr_block_rf.error_intr_en_r.error_sha_lock_en.value)
        || |(field_storage.intr_block_rf.error_internal_intr_r.error_fifo_oflow_sts.value & field_storage.intr_block_rf.error_intr_en_r.error_fifo_oflow_en.value)
        || |(field_storage.intr_block_rf.error_internal_intr_r.error_fifo_uflow_sts.value & field_storage.intr_block_rf.error_intr_en_r.error_fifo_uflow_en.value);
    // Field: axi_dma_reg.intr_block_rf.notif_internal_intr_r.notif_txn_done_sts
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif_txn_done_sts.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.notif_intr_trig_r.notif_txn_done_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif_txn_done_sts.value | field_storage.intr_block_rf.notif_intr_trig_r.notif_txn_done_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif_internal_intr_r.notif_txn_done_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.notif_internal_intr_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif_txn_done_sts.value & ~(decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_internal_intr_r.notif_txn_done_sts.next = next_c;
        field_combo.intr_block_rf.notif_internal_intr_r.notif_txn_done_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.notif_internal_intr_r.notif_txn_done_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_internal_intr_r.notif_txn_done_sts.load_next) begin
            field_storage.intr_block_rf.notif_internal_intr_r.notif_txn_done_sts.value <= field_combo.intr_block_rf.notif_internal_intr_r.notif_txn_done_sts.next;
        end
    end
    // Field: axi_dma_reg.intr_block_rf.notif_internal_intr_r.notif_fifo_empty_sts
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif_fifo_empty_sts.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.notif_intr_trig_r.notif_fifo_empty_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif_fifo_empty_sts.value | field_storage.intr_block_rf.notif_intr_trig_r.notif_fifo_empty_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif_internal_intr_r.notif_fifo_empty_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.notif_internal_intr_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif_fifo_empty_sts.value & ~(decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_internal_intr_r.notif_fifo_empty_sts.next = next_c;
        field_combo.intr_block_rf.notif_internal_intr_r.notif_fifo_empty_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.notif_internal_intr_r.notif_fifo_empty_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_internal_intr_r.notif_fifo_empty_sts.load_next) begin
            field_storage.intr_block_rf.notif_internal_intr_r.notif_fifo_empty_sts.value <= field_combo.intr_block_rf.notif_internal_intr_r.notif_fifo_empty_sts.next;
        end
    end
    // Field: axi_dma_reg.intr_block_rf.notif_internal_intr_r.notif_fifo_not_empty_sts
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif_fifo_not_empty_sts.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.notif_intr_trig_r.notif_fifo_not_empty_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif_fifo_not_empty_sts.value | field_storage.intr_block_rf.notif_intr_trig_r.notif_fifo_not_empty_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif_internal_intr_r.notif_fifo_not_empty_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.notif_internal_intr_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif_fifo_not_empty_sts.value & ~(decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_internal_intr_r.notif_fifo_not_empty_sts.next = next_c;
        field_combo.intr_block_rf.notif_internal_intr_r.notif_fifo_not_empty_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.notif_internal_intr_r.notif_fifo_not_empty_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_internal_intr_r.notif_fifo_not_empty_sts.load_next) begin
            field_storage.intr_block_rf.notif_internal_intr_r.notif_fifo_not_empty_sts.value <= field_combo.intr_block_rf.notif_internal_intr_r.notif_fifo_not_empty_sts.next;
        end
    end
    // Field: axi_dma_reg.intr_block_rf.notif_internal_intr_r.notif_fifo_full_sts
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif_fifo_full_sts.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.notif_intr_trig_r.notif_fifo_full_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif_fifo_full_sts.value | field_storage.intr_block_rf.notif_intr_trig_r.notif_fifo_full_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif_internal_intr_r.notif_fifo_full_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.notif_internal_intr_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif_fifo_full_sts.value & ~(decoded_wr_data[3:3] & decoded_wr_biten[3:3]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_internal_intr_r.notif_fifo_full_sts.next = next_c;
        field_combo.intr_block_rf.notif_internal_intr_r.notif_fifo_full_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.notif_internal_intr_r.notif_fifo_full_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_internal_intr_r.notif_fifo_full_sts.load_next) begin
            field_storage.intr_block_rf.notif_internal_intr_r.notif_fifo_full_sts.value <= field_combo.intr_block_rf.notif_internal_intr_r.notif_fifo_full_sts.next;
        end
    end
    // Field: axi_dma_reg.intr_block_rf.notif_internal_intr_r.notif_fifo_not_full_sts
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif_fifo_not_full_sts.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.notif_intr_trig_r.notif_fifo_not_full_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif_fifo_not_full_sts.value | field_storage.intr_block_rf.notif_intr_trig_r.notif_fifo_not_full_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif_internal_intr_r.notif_fifo_not_full_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.notif_internal_intr_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif_fifo_not_full_sts.value & ~(decoded_wr_data[4:4] & decoded_wr_biten[4:4]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_internal_intr_r.notif_fifo_not_full_sts.next = next_c;
        field_combo.intr_block_rf.notif_internal_intr_r.notif_fifo_not_full_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.notif_internal_intr_r.notif_fifo_not_full_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_internal_intr_r.notif_fifo_not_full_sts.load_next) begin
            field_storage.intr_block_rf.notif_internal_intr_r.notif_fifo_not_full_sts.value <= field_combo.intr_block_rf.notif_internal_intr_r.notif_fifo_not_full_sts.next;
        end
    end
    assign hwif_out.intr_block_rf.notif_internal_intr_r.intr =
        |(field_storage.intr_block_rf.notif_internal_intr_r.notif_txn_done_sts.value & field_storage.intr_block_rf.notif_intr_en_r.notif_txn_done_en.value)
        || |(field_storage.intr_block_rf.notif_internal_intr_r.notif_fifo_empty_sts.value & field_storage.intr_block_rf.notif_intr_en_r.notif_fifo_empty_en.value)
        || |(field_storage.intr_block_rf.notif_internal_intr_r.notif_fifo_not_empty_sts.value & field_storage.intr_block_rf.notif_intr_en_r.notif_fifo_not_empty_en.value)
        || |(field_storage.intr_block_rf.notif_internal_intr_r.notif_fifo_full_sts.value & field_storage.intr_block_rf.notif_intr_en_r.notif_fifo_full_en.value)
        || |(field_storage.intr_block_rf.notif_internal_intr_r.notif_fifo_not_full_sts.value & field_storage.intr_block_rf.notif_intr_en_r.notif_fifo_not_full_en.value);
    // Field: axi_dma_reg.intr_block_rf.error_intr_trig_r.error_cmd_dec_trig
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_intr_trig_r.error_cmd_dec_trig.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_trig_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error_cmd_dec_trig.value | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_trig_r.error_cmd_dec_trig.next = next_c;
        field_combo.intr_block_rf.error_intr_trig_r.error_cmd_dec_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.error_intr_trig_r.error_cmd_dec_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_intr_trig_r.error_cmd_dec_trig.load_next) begin
            field_storage.intr_block_rf.error_intr_trig_r.error_cmd_dec_trig.value <= field_combo.intr_block_rf.error_intr_trig_r.error_cmd_dec_trig.next;
        end
    end
    // Field: axi_dma_reg.intr_block_rf.error_intr_trig_r.error_axi_rd_trig
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_intr_trig_r.error_axi_rd_trig.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_trig_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error_axi_rd_trig.value | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_trig_r.error_axi_rd_trig.next = next_c;
        field_combo.intr_block_rf.error_intr_trig_r.error_axi_rd_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.error_intr_trig_r.error_axi_rd_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_intr_trig_r.error_axi_rd_trig.load_next) begin
            field_storage.intr_block_rf.error_intr_trig_r.error_axi_rd_trig.value <= field_combo.intr_block_rf.error_intr_trig_r.error_axi_rd_trig.next;
        end
    end
    // Field: axi_dma_reg.intr_block_rf.error_intr_trig_r.error_axi_wr_trig
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_intr_trig_r.error_axi_wr_trig.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_trig_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error_axi_wr_trig.value | (decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_trig_r.error_axi_wr_trig.next = next_c;
        field_combo.intr_block_rf.error_intr_trig_r.error_axi_wr_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.error_intr_trig_r.error_axi_wr_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_intr_trig_r.error_axi_wr_trig.load_next) begin
            field_storage.intr_block_rf.error_intr_trig_r.error_axi_wr_trig.value <= field_combo.intr_block_rf.error_intr_trig_r.error_axi_wr_trig.next;
        end
    end
    // Field: axi_dma_reg.intr_block_rf.error_intr_trig_r.error_mbox_lock_trig
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_intr_trig_r.error_mbox_lock_trig.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_trig_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error_mbox_lock_trig.value | (decoded_wr_data[3:3] & decoded_wr_biten[3:3]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_trig_r.error_mbox_lock_trig.next = next_c;
        field_combo.intr_block_rf.error_intr_trig_r.error_mbox_lock_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.error_intr_trig_r.error_mbox_lock_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_intr_trig_r.error_mbox_lock_trig.load_next) begin
            field_storage.intr_block_rf.error_intr_trig_r.error_mbox_lock_trig.value <= field_combo.intr_block_rf.error_intr_trig_r.error_mbox_lock_trig.next;
        end
    end
    // Field: axi_dma_reg.intr_block_rf.error_intr_trig_r.error_sha_lock_trig
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_intr_trig_r.error_sha_lock_trig.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_trig_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error_sha_lock_trig.value | (decoded_wr_data[4:4] & decoded_wr_biten[4:4]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_trig_r.error_sha_lock_trig.next = next_c;
        field_combo.intr_block_rf.error_intr_trig_r.error_sha_lock_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.error_intr_trig_r.error_sha_lock_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_intr_trig_r.error_sha_lock_trig.load_next) begin
            field_storage.intr_block_rf.error_intr_trig_r.error_sha_lock_trig.value <= field_combo.intr_block_rf.error_intr_trig_r.error_sha_lock_trig.next;
        end
    end
    // Field: axi_dma_reg.intr_block_rf.error_intr_trig_r.error_fifo_oflow_trig
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_intr_trig_r.error_fifo_oflow_trig.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_trig_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error_fifo_oflow_trig.value | (decoded_wr_data[5:5] & decoded_wr_biten[5:5]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_trig_r.error_fifo_oflow_trig.next = next_c;
        field_combo.intr_block_rf.error_intr_trig_r.error_fifo_oflow_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.error_intr_trig_r.error_fifo_oflow_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_intr_trig_r.error_fifo_oflow_trig.load_next) begin
            field_storage.intr_block_rf.error_intr_trig_r.error_fifo_oflow_trig.value <= field_combo.intr_block_rf.error_intr_trig_r.error_fifo_oflow_trig.next;
        end
    end
    // Field: axi_dma_reg.intr_block_rf.error_intr_trig_r.error_fifo_uflow_trig
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_intr_trig_r.error_fifo_uflow_trig.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_trig_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error_fifo_uflow_trig.value | (decoded_wr_data[6:6] & decoded_wr_biten[6:6]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_trig_r.error_fifo_uflow_trig.next = next_c;
        field_combo.intr_block_rf.error_intr_trig_r.error_fifo_uflow_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.error_intr_trig_r.error_fifo_uflow_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_intr_trig_r.error_fifo_uflow_trig.load_next) begin
            field_storage.intr_block_rf.error_intr_trig_r.error_fifo_uflow_trig.value <= field_combo.intr_block_rf.error_intr_trig_r.error_fifo_uflow_trig.next;
        end
    end
    // Field: axi_dma_reg.intr_block_rf.notif_intr_trig_r.notif_txn_done_trig
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif_txn_done_trig.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_intr_trig_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif_txn_done_trig.value | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_intr_trig_r.notif_txn_done_trig.next = next_c;
        field_combo.intr_block_rf.notif_intr_trig_r.notif_txn_done_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.notif_intr_trig_r.notif_txn_done_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_intr_trig_r.notif_txn_done_trig.load_next) begin
            field_storage.intr_block_rf.notif_intr_trig_r.notif_txn_done_trig.value <= field_combo.intr_block_rf.notif_intr_trig_r.notif_txn_done_trig.next;
        end
    end
    // Field: axi_dma_reg.intr_block_rf.notif_intr_trig_r.notif_fifo_empty_trig
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif_fifo_empty_trig.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_intr_trig_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif_fifo_empty_trig.value | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_intr_trig_r.notif_fifo_empty_trig.next = next_c;
        field_combo.intr_block_rf.notif_intr_trig_r.notif_fifo_empty_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.notif_intr_trig_r.notif_fifo_empty_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_intr_trig_r.notif_fifo_empty_trig.load_next) begin
            field_storage.intr_block_rf.notif_intr_trig_r.notif_fifo_empty_trig.value <= field_combo.intr_block_rf.notif_intr_trig_r.notif_fifo_empty_trig.next;
        end
    end
    // Field: axi_dma_reg.intr_block_rf.notif_intr_trig_r.notif_fifo_not_empty_trig
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif_fifo_not_empty_trig.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_intr_trig_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif_fifo_not_empty_trig.value | (decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_intr_trig_r.notif_fifo_not_empty_trig.next = next_c;
        field_combo.intr_block_rf.notif_intr_trig_r.notif_fifo_not_empty_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.notif_intr_trig_r.notif_fifo_not_empty_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_intr_trig_r.notif_fifo_not_empty_trig.load_next) begin
            field_storage.intr_block_rf.notif_intr_trig_r.notif_fifo_not_empty_trig.value <= field_combo.intr_block_rf.notif_intr_trig_r.notif_fifo_not_empty_trig.next;
        end
    end
    // Field: axi_dma_reg.intr_block_rf.notif_intr_trig_r.notif_fifo_full_trig
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif_fifo_full_trig.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_intr_trig_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif_fifo_full_trig.value | (decoded_wr_data[3:3] & decoded_wr_biten[3:3]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_intr_trig_r.notif_fifo_full_trig.next = next_c;
        field_combo.intr_block_rf.notif_intr_trig_r.notif_fifo_full_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.notif_intr_trig_r.notif_fifo_full_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_intr_trig_r.notif_fifo_full_trig.load_next) begin
            field_storage.intr_block_rf.notif_intr_trig_r.notif_fifo_full_trig.value <= field_combo.intr_block_rf.notif_intr_trig_r.notif_fifo_full_trig.next;
        end
    end
    // Field: axi_dma_reg.intr_block_rf.notif_intr_trig_r.notif_fifo_not_full_trig
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif_fifo_not_full_trig.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_intr_trig_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif_fifo_not_full_trig.value | (decoded_wr_data[4:4] & decoded_wr_biten[4:4]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_intr_trig_r.notif_fifo_not_full_trig.next = next_c;
        field_combo.intr_block_rf.notif_intr_trig_r.notif_fifo_not_full_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.notif_intr_trig_r.notif_fifo_not_full_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_intr_trig_r.notif_fifo_not_full_trig.load_next) begin
            field_storage.intr_block_rf.notif_intr_trig_r.notif_fifo_not_full_trig.value <= field_combo.intr_block_rf.notif_intr_trig_r.notif_fifo_not_full_trig.next;
        end
    end
    // Field: axi_dma_reg.intr_block_rf.error_cmd_dec_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_cmd_dec_intr_count_r.cnt.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_cmd_dec_intr_count_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.intr_block_rf.error_cmd_dec_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_cmd_dec_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_cmd_dec_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error_cmd_dec_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.error_cmd_dec_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error_cmd_dec_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_cmd_dec_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error_cmd_dec_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.intr_block_rf.error_cmd_dec_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.error_cmd_dec_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error_cmd_dec_intr_count_r.cnt.value <= field_combo.intr_block_rf.error_cmd_dec_intr_count_r.cnt.next;
        end
    end
    // Field: axi_dma_reg.intr_block_rf.error_axi_rd_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_axi_rd_intr_count_r.cnt.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_axi_rd_intr_count_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.intr_block_rf.error_axi_rd_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_axi_rd_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_axi_rd_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error_axi_rd_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.error_axi_rd_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error_axi_rd_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_axi_rd_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error_axi_rd_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.intr_block_rf.error_axi_rd_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.error_axi_rd_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error_axi_rd_intr_count_r.cnt.value <= field_combo.intr_block_rf.error_axi_rd_intr_count_r.cnt.next;
        end
    end
    // Field: axi_dma_reg.intr_block_rf.error_axi_wr_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_axi_wr_intr_count_r.cnt.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_axi_wr_intr_count_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.intr_block_rf.error_axi_wr_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_axi_wr_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_axi_wr_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error_axi_wr_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.error_axi_wr_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error_axi_wr_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_axi_wr_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error_axi_wr_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.intr_block_rf.error_axi_wr_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.error_axi_wr_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error_axi_wr_intr_count_r.cnt.value <= field_combo.intr_block_rf.error_axi_wr_intr_count_r.cnt.next;
        end
    end
    // Field: axi_dma_reg.intr_block_rf.error_mbox_lock_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_mbox_lock_intr_count_r.cnt.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_mbox_lock_intr_count_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.intr_block_rf.error_mbox_lock_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_mbox_lock_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_mbox_lock_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error_mbox_lock_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.error_mbox_lock_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error_mbox_lock_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_mbox_lock_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error_mbox_lock_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.intr_block_rf.error_mbox_lock_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.error_mbox_lock_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error_mbox_lock_intr_count_r.cnt.value <= field_combo.intr_block_rf.error_mbox_lock_intr_count_r.cnt.next;
        end
    end
    // Field: axi_dma_reg.intr_block_rf.error_sha_lock_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_sha_lock_intr_count_r.cnt.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_sha_lock_intr_count_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.intr_block_rf.error_sha_lock_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_sha_lock_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_sha_lock_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error_sha_lock_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.error_sha_lock_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error_sha_lock_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_sha_lock_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error_sha_lock_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.intr_block_rf.error_sha_lock_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.error_sha_lock_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error_sha_lock_intr_count_r.cnt.value <= field_combo.intr_block_rf.error_sha_lock_intr_count_r.cnt.next;
        end
    end
    // Field: axi_dma_reg.intr_block_rf.error_fifo_oflow_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_fifo_oflow_intr_count_r.cnt.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_fifo_oflow_intr_count_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.intr_block_rf.error_fifo_oflow_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_fifo_oflow_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_fifo_oflow_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error_fifo_oflow_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.error_fifo_oflow_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error_fifo_oflow_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_fifo_oflow_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error_fifo_oflow_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.intr_block_rf.error_fifo_oflow_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.error_fifo_oflow_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error_fifo_oflow_intr_count_r.cnt.value <= field_combo.intr_block_rf.error_fifo_oflow_intr_count_r.cnt.next;
        end
    end
    // Field: axi_dma_reg.intr_block_rf.error_fifo_uflow_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_fifo_uflow_intr_count_r.cnt.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_fifo_uflow_intr_count_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.intr_block_rf.error_fifo_uflow_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_fifo_uflow_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_fifo_uflow_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error_fifo_uflow_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.error_fifo_uflow_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error_fifo_uflow_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_fifo_uflow_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error_fifo_uflow_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.intr_block_rf.error_fifo_uflow_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.error_fifo_uflow_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error_fifo_uflow_intr_count_r.cnt.value <= field_combo.intr_block_rf.error_fifo_uflow_intr_count_r.cnt.next;
        end
    end
    // Field: axi_dma_reg.intr_block_rf.notif_txn_done_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_txn_done_intr_count_r.cnt.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_txn_done_intr_count_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.intr_block_rf.notif_txn_done_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_txn_done_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_txn_done_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.notif_txn_done_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.notif_txn_done_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.notif_txn_done_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_txn_done_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.notif_txn_done_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.notif_txn_done_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.notif_txn_done_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.notif_txn_done_intr_count_r.cnt.value <= field_combo.intr_block_rf.notif_txn_done_intr_count_r.cnt.next;
        end
    end
    // Field: axi_dma_reg.intr_block_rf.notif_fifo_empty_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_fifo_empty_intr_count_r.cnt.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_fifo_empty_intr_count_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.intr_block_rf.notif_fifo_empty_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_fifo_empty_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_fifo_empty_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.notif_fifo_empty_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.notif_fifo_empty_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.notif_fifo_empty_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_fifo_empty_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.notif_fifo_empty_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.notif_fifo_empty_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.notif_fifo_empty_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.notif_fifo_empty_intr_count_r.cnt.value <= field_combo.intr_block_rf.notif_fifo_empty_intr_count_r.cnt.next;
        end
    end
    // Field: axi_dma_reg.intr_block_rf.notif_fifo_not_empty_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_fifo_not_empty_intr_count_r.cnt.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_fifo_not_empty_intr_count_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.intr_block_rf.notif_fifo_not_empty_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_fifo_not_empty_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_fifo_not_empty_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.notif_fifo_not_empty_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.notif_fifo_not_empty_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.notif_fifo_not_empty_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_fifo_not_empty_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.notif_fifo_not_empty_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.notif_fifo_not_empty_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.notif_fifo_not_empty_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.notif_fifo_not_empty_intr_count_r.cnt.value <= field_combo.intr_block_rf.notif_fifo_not_empty_intr_count_r.cnt.next;
        end
    end
    // Field: axi_dma_reg.intr_block_rf.notif_fifo_full_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_fifo_full_intr_count_r.cnt.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_fifo_full_intr_count_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.intr_block_rf.notif_fifo_full_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_fifo_full_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_fifo_full_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.notif_fifo_full_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.notif_fifo_full_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.notif_fifo_full_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_fifo_full_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.notif_fifo_full_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.notif_fifo_full_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.notif_fifo_full_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.notif_fifo_full_intr_count_r.cnt.value <= field_combo.intr_block_rf.notif_fifo_full_intr_count_r.cnt.next;
        end
    end
    // Field: axi_dma_reg.intr_block_rf.notif_fifo_not_full_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_fifo_not_full_intr_count_r.cnt.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_fifo_not_full_intr_count_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.intr_block_rf.notif_fifo_not_full_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_fifo_not_full_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_fifo_not_full_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.notif_fifo_not_full_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.notif_fifo_not_full_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.notif_fifo_not_full_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_fifo_not_full_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.notif_fifo_not_full_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.notif_fifo_not_full_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.notif_fifo_not_full_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.notif_fifo_not_full_intr_count_r.cnt.value <= field_combo.intr_block_rf.notif_fifo_not_full_intr_count_r.cnt.next;
        end
    end
    // Field: axi_dma_reg.intr_block_rf.error_cmd_dec_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_cmd_dec_intr_count_incr_r.pulse.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error_cmd_dec_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error_cmd_dec_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error_cmd_dec_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_cmd_dec_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error_cmd_dec_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error_cmd_dec_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error_cmd_dec_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error_cmd_dec_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.error_cmd_dec_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error_cmd_dec_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.error_cmd_dec_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_cmd_dec_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error_cmd_dec_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error_cmd_dec_intr_count_incr_r.pulse.next;
        end
    end
    // Field: axi_dma_reg.intr_block_rf.error_axi_rd_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_axi_rd_intr_count_incr_r.pulse.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error_axi_rd_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error_axi_rd_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error_axi_rd_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_axi_rd_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error_axi_rd_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error_axi_rd_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error_axi_rd_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error_axi_rd_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.error_axi_rd_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error_axi_rd_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.error_axi_rd_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_axi_rd_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error_axi_rd_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error_axi_rd_intr_count_incr_r.pulse.next;
        end
    end
    // Field: axi_dma_reg.intr_block_rf.error_axi_wr_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_axi_wr_intr_count_incr_r.pulse.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error_axi_wr_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error_axi_wr_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error_axi_wr_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_axi_wr_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error_axi_wr_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error_axi_wr_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error_axi_wr_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error_axi_wr_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.error_axi_wr_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error_axi_wr_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.error_axi_wr_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_axi_wr_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error_axi_wr_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error_axi_wr_intr_count_incr_r.pulse.next;
        end
    end
    // Field: axi_dma_reg.intr_block_rf.error_mbox_lock_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_mbox_lock_intr_count_incr_r.pulse.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error_mbox_lock_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error_mbox_lock_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error_mbox_lock_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_mbox_lock_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error_mbox_lock_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error_mbox_lock_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error_mbox_lock_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error_mbox_lock_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.error_mbox_lock_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error_mbox_lock_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.error_mbox_lock_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_mbox_lock_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error_mbox_lock_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error_mbox_lock_intr_count_incr_r.pulse.next;
        end
    end
    // Field: axi_dma_reg.intr_block_rf.error_sha_lock_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_sha_lock_intr_count_incr_r.pulse.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error_sha_lock_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error_sha_lock_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error_sha_lock_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_sha_lock_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error_sha_lock_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error_sha_lock_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error_sha_lock_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error_sha_lock_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.error_sha_lock_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error_sha_lock_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.error_sha_lock_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_sha_lock_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error_sha_lock_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error_sha_lock_intr_count_incr_r.pulse.next;
        end
    end
    // Field: axi_dma_reg.intr_block_rf.error_fifo_oflow_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_fifo_oflow_intr_count_incr_r.pulse.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error_fifo_oflow_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error_fifo_oflow_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error_fifo_oflow_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_fifo_oflow_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error_fifo_oflow_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error_fifo_oflow_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error_fifo_oflow_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error_fifo_oflow_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.error_fifo_oflow_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error_fifo_oflow_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.error_fifo_oflow_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_fifo_oflow_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error_fifo_oflow_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error_fifo_oflow_intr_count_incr_r.pulse.next;
        end
    end
    // Field: axi_dma_reg.intr_block_rf.error_fifo_uflow_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_fifo_uflow_intr_count_incr_r.pulse.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error_fifo_uflow_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error_fifo_uflow_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error_fifo_uflow_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_fifo_uflow_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error_fifo_uflow_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error_fifo_uflow_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error_fifo_uflow_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error_fifo_uflow_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.error_fifo_uflow_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error_fifo_uflow_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.error_fifo_uflow_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_fifo_uflow_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error_fifo_uflow_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error_fifo_uflow_intr_count_incr_r.pulse.next;
        end
    end
    // Field: axi_dma_reg.intr_block_rf.notif_txn_done_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_txn_done_intr_count_incr_r.pulse.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.notif_intr_trig_r.notif_txn_done_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif_txn_done_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif_internal_intr_r.notif_txn_done_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_txn_done_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.notif_txn_done_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.notif_txn_done_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.notif_txn_done_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.notif_txn_done_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.notif_txn_done_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.notif_txn_done_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.notif_txn_done_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_txn_done_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.notif_txn_done_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.notif_txn_done_intr_count_incr_r.pulse.next;
        end
    end
    // Field: axi_dma_reg.intr_block_rf.notif_fifo_empty_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_fifo_empty_intr_count_incr_r.pulse.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.notif_intr_trig_r.notif_fifo_empty_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif_fifo_empty_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif_internal_intr_r.notif_fifo_empty_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_fifo_empty_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.notif_fifo_empty_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.notif_fifo_empty_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.notif_fifo_empty_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.notif_fifo_empty_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.notif_fifo_empty_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.notif_fifo_empty_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.notif_fifo_empty_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_fifo_empty_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.notif_fifo_empty_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.notif_fifo_empty_intr_count_incr_r.pulse.next;
        end
    end
    // Field: axi_dma_reg.intr_block_rf.notif_fifo_not_empty_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_fifo_not_empty_intr_count_incr_r.pulse.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.notif_intr_trig_r.notif_fifo_not_empty_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif_fifo_not_empty_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif_internal_intr_r.notif_fifo_not_empty_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_fifo_not_empty_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.notif_fifo_not_empty_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.notif_fifo_not_empty_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.notif_fifo_not_empty_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.notif_fifo_not_empty_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.notif_fifo_not_empty_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.notif_fifo_not_empty_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.notif_fifo_not_empty_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_fifo_not_empty_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.notif_fifo_not_empty_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.notif_fifo_not_empty_intr_count_incr_r.pulse.next;
        end
    end
    // Field: axi_dma_reg.intr_block_rf.notif_fifo_full_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_fifo_full_intr_count_incr_r.pulse.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.notif_intr_trig_r.notif_fifo_full_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif_fifo_full_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif_internal_intr_r.notif_fifo_full_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_fifo_full_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.notif_fifo_full_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.notif_fifo_full_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.notif_fifo_full_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.notif_fifo_full_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.notif_fifo_full_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.notif_fifo_full_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.notif_fifo_full_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_fifo_full_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.notif_fifo_full_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.notif_fifo_full_intr_count_incr_r.pulse.next;
        end
    end
    // Field: axi_dma_reg.intr_block_rf.notif_fifo_not_full_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_fifo_not_full_intr_count_incr_r.pulse.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.notif_intr_trig_r.notif_fifo_not_full_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif_fifo_not_full_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif_internal_intr_r.notif_fifo_not_full_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_fifo_not_full_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.notif_fifo_not_full_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.notif_fifo_not_full_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.notif_fifo_not_full_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.notif_fifo_not_full_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.notif_fifo_not_full_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.notif_fifo_not_full_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.notif_fifo_not_full_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_fifo_not_full_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.notif_fifo_not_full_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.notif_fifo_not_full_intr_count_incr_r.pulse.next;
        end
    end

    //--------------------------------------------------------------------------
    // Write response
    //--------------------------------------------------------------------------
    assign cpuif_wr_ack = decoded_req & decoded_req_is_wr;
    // Writes are always granted with no error response
    assign cpuif_wr_err = '0;

    //--------------------------------------------------------------------------
    // Readback
    //--------------------------------------------------------------------------

    logic readback_err;
    logic readback_done;
    logic [31:0] readback_data;

    // Assign readback values to a flattened array
    logic [45-1:0][31:0] readback_array;
    assign readback_array[0][31:0] = (decoded_reg_strb.id && !decoded_req_is_wr) ? 32'h67768068 : '0;
    assign readback_array[1][11:0] = (decoded_reg_strb.cap && !decoded_req_is_wr) ? hwif_in.cap.fifo_max_depth.next : '0;
    assign readback_array[1][31:12] = (decoded_reg_strb.cap && !decoded_req_is_wr) ? 20'h0 : '0;
    assign readback_array[2][0:0] = (decoded_reg_strb.ctrl && !decoded_req_is_wr) ? field_storage.ctrl.go.value : '0;
    assign readback_array[2][1:1] = (decoded_reg_strb.ctrl && !decoded_req_is_wr) ? field_storage.ctrl.flush.value : '0;
    assign readback_array[2][15:2] = (decoded_reg_strb.ctrl && !decoded_req_is_wr) ? 14'h0 : '0;
    assign readback_array[2][17:16] = (decoded_reg_strb.ctrl && !decoded_req_is_wr) ? field_storage.ctrl.rd_route.value : '0;
    assign readback_array[2][19:18] = (decoded_reg_strb.ctrl && !decoded_req_is_wr) ? 2'h0 : '0;
    assign readback_array[2][20:20] = (decoded_reg_strb.ctrl && !decoded_req_is_wr) ? field_storage.ctrl.rd_fixed.value : '0;
    assign readback_array[2][23:21] = (decoded_reg_strb.ctrl && !decoded_req_is_wr) ? 3'h0 : '0;
    assign readback_array[2][25:24] = (decoded_reg_strb.ctrl && !decoded_req_is_wr) ? field_storage.ctrl.wr_route.value : '0;
    assign readback_array[2][27:26] = (decoded_reg_strb.ctrl && !decoded_req_is_wr) ? 2'h0 : '0;
    assign readback_array[2][28:28] = (decoded_reg_strb.ctrl && !decoded_req_is_wr) ? field_storage.ctrl.wr_fixed.value : '0;
    assign readback_array[2][31:29] = (decoded_reg_strb.ctrl && !decoded_req_is_wr) ? 3'h0 : '0;
    assign readback_array[3][0:0] = (decoded_reg_strb.status0 && !decoded_req_is_wr) ? hwif_in.status0.busy.next : '0;
    assign readback_array[3][1:1] = (decoded_reg_strb.status0 && !decoded_req_is_wr) ? hwif_in.status0.error.next : '0;
    assign readback_array[3][3:2] = (decoded_reg_strb.status0 && !decoded_req_is_wr) ? 2'h0 : '0;
    assign readback_array[3][15:4] = (decoded_reg_strb.status0 && !decoded_req_is_wr) ? hwif_in.status0.fifo_depth.next : '0;
    assign readback_array[3][17:16] = (decoded_reg_strb.status0 && !decoded_req_is_wr) ? field_storage.status0.axi_dma_fsm_ps.value : '0;
    assign readback_array[3][18:18] = (decoded_reg_strb.status0 && !decoded_req_is_wr) ? hwif_in.status0.payload_available.next : '0;
    assign readback_array[3][19:19] = (decoded_reg_strb.status0 && !decoded_req_is_wr) ? hwif_in.status0.image_activated.next : '0;
    assign readback_array[3][31:20] = (decoded_reg_strb.status0 && !decoded_req_is_wr) ? 12'h0 : '0;
    assign readback_array[4][31:0] = (decoded_reg_strb.status1 && !decoded_req_is_wr) ? hwif_in.status1.bytes_remaining.next : '0;
    assign readback_array[5][31:0] = (decoded_reg_strb.src_addr_l && !decoded_req_is_wr) ? field_storage.src_addr_l.addr_l.value : '0;
    assign readback_array[6][31:0] = (decoded_reg_strb.src_addr_h && !decoded_req_is_wr) ? field_storage.src_addr_h.addr_h.value : '0;
    assign readback_array[7][31:0] = (decoded_reg_strb.dst_addr_l && !decoded_req_is_wr) ? field_storage.dst_addr_l.addr_l.value : '0;
    assign readback_array[8][31:0] = (decoded_reg_strb.dst_addr_h && !decoded_req_is_wr) ? field_storage.dst_addr_h.addr_h.value : '0;
    assign readback_array[9][31:0] = (decoded_reg_strb.byte_count && !decoded_req_is_wr) ? field_storage.byte_count.count.value : '0;
    assign readback_array[10][11:0] = (decoded_reg_strb.block_size && !decoded_req_is_wr) ? field_storage.block_size.size.value : '0;
    assign readback_array[10][31:12] = (decoded_reg_strb.block_size && !decoded_req_is_wr) ? 20'h0 : '0;
    assign readback_array[11][31:0] = (decoded_reg_strb.read_data && !decoded_req_is_wr) ? hwif_in.read_data.rdata.next : '0;
    assign readback_array[12][0:0] = (decoded_reg_strb.intr_block_rf.global_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.global_intr_en_r.error_en.value : '0;
    assign readback_array[12][1:1] = (decoded_reg_strb.intr_block_rf.global_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.global_intr_en_r.notif_en.value : '0;
    assign readback_array[12][31:2] = '0;
    assign readback_array[13][0:0] = (decoded_reg_strb.intr_block_rf.error_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_en_r.error_cmd_dec_en.value : '0;
    assign readback_array[13][1:1] = (decoded_reg_strb.intr_block_rf.error_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_en_r.error_axi_rd_en.value : '0;
    assign readback_array[13][2:2] = (decoded_reg_strb.intr_block_rf.error_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_en_r.error_axi_wr_en.value : '0;
    assign readback_array[13][3:3] = (decoded_reg_strb.intr_block_rf.error_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_en_r.error_mbox_lock_en.value : '0;
    assign readback_array[13][4:4] = (decoded_reg_strb.intr_block_rf.error_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_en_r.error_sha_lock_en.value : '0;
    assign readback_array[13][5:5] = (decoded_reg_strb.intr_block_rf.error_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_en_r.error_fifo_oflow_en.value : '0;
    assign readback_array[13][6:6] = (decoded_reg_strb.intr_block_rf.error_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_en_r.error_fifo_uflow_en.value : '0;
    assign readback_array[13][31:7] = '0;
    assign readback_array[14][0:0] = (decoded_reg_strb.intr_block_rf.notif_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_intr_en_r.notif_txn_done_en.value : '0;
    assign readback_array[14][1:1] = (decoded_reg_strb.intr_block_rf.notif_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_intr_en_r.notif_fifo_empty_en.value : '0;
    assign readback_array[14][2:2] = (decoded_reg_strb.intr_block_rf.notif_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_intr_en_r.notif_fifo_not_empty_en.value : '0;
    assign readback_array[14][3:3] = (decoded_reg_strb.intr_block_rf.notif_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_intr_en_r.notif_fifo_full_en.value : '0;
    assign readback_array[14][4:4] = (decoded_reg_strb.intr_block_rf.notif_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_intr_en_r.notif_fifo_not_full_en.value : '0;
    assign readback_array[14][31:5] = '0;
    assign readback_array[15][0:0] = (decoded_reg_strb.intr_block_rf.error_global_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_global_intr_r.agg_sts.value : '0;
    assign readback_array[15][31:1] = '0;
    assign readback_array[16][0:0] = (decoded_reg_strb.intr_block_rf.notif_global_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_global_intr_r.agg_sts.value : '0;
    assign readback_array[16][31:1] = '0;
    assign readback_array[17][0:0] = (decoded_reg_strb.intr_block_rf.error_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_internal_intr_r.error_cmd_dec_sts.value : '0;
    assign readback_array[17][1:1] = (decoded_reg_strb.intr_block_rf.error_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_internal_intr_r.error_axi_rd_sts.value : '0;
    assign readback_array[17][2:2] = (decoded_reg_strb.intr_block_rf.error_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_internal_intr_r.error_axi_wr_sts.value : '0;
    assign readback_array[17][3:3] = (decoded_reg_strb.intr_block_rf.error_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_internal_intr_r.error_mbox_lock_sts.value : '0;
    assign readback_array[17][4:4] = (decoded_reg_strb.intr_block_rf.error_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_internal_intr_r.error_sha_lock_sts.value : '0;
    assign readback_array[17][5:5] = (decoded_reg_strb.intr_block_rf.error_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_internal_intr_r.error_fifo_oflow_sts.value : '0;
    assign readback_array[17][6:6] = (decoded_reg_strb.intr_block_rf.error_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_internal_intr_r.error_fifo_uflow_sts.value : '0;
    assign readback_array[17][31:7] = '0;
    assign readback_array[18][0:0] = (decoded_reg_strb.intr_block_rf.notif_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_internal_intr_r.notif_txn_done_sts.value : '0;
    assign readback_array[18][1:1] = (decoded_reg_strb.intr_block_rf.notif_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_internal_intr_r.notif_fifo_empty_sts.value : '0;
    assign readback_array[18][2:2] = (decoded_reg_strb.intr_block_rf.notif_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_internal_intr_r.notif_fifo_not_empty_sts.value : '0;
    assign readback_array[18][3:3] = (decoded_reg_strb.intr_block_rf.notif_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_internal_intr_r.notif_fifo_full_sts.value : '0;
    assign readback_array[18][4:4] = (decoded_reg_strb.intr_block_rf.notif_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_internal_intr_r.notif_fifo_not_full_sts.value : '0;
    assign readback_array[18][31:5] = '0;
    assign readback_array[19][0:0] = (decoded_reg_strb.intr_block_rf.error_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_trig_r.error_cmd_dec_trig.value : '0;
    assign readback_array[19][1:1] = (decoded_reg_strb.intr_block_rf.error_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_trig_r.error_axi_rd_trig.value : '0;
    assign readback_array[19][2:2] = (decoded_reg_strb.intr_block_rf.error_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_trig_r.error_axi_wr_trig.value : '0;
    assign readback_array[19][3:3] = (decoded_reg_strb.intr_block_rf.error_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_trig_r.error_mbox_lock_trig.value : '0;
    assign readback_array[19][4:4] = (decoded_reg_strb.intr_block_rf.error_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_trig_r.error_sha_lock_trig.value : '0;
    assign readback_array[19][5:5] = (decoded_reg_strb.intr_block_rf.error_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_trig_r.error_fifo_oflow_trig.value : '0;
    assign readback_array[19][6:6] = (decoded_reg_strb.intr_block_rf.error_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_trig_r.error_fifo_uflow_trig.value : '0;
    assign readback_array[19][31:7] = '0;
    assign readback_array[20][0:0] = (decoded_reg_strb.intr_block_rf.notif_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_intr_trig_r.notif_txn_done_trig.value : '0;
    assign readback_array[20][1:1] = (decoded_reg_strb.intr_block_rf.notif_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_intr_trig_r.notif_fifo_empty_trig.value : '0;
    assign readback_array[20][2:2] = (decoded_reg_strb.intr_block_rf.notif_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_intr_trig_r.notif_fifo_not_empty_trig.value : '0;
    assign readback_array[20][3:3] = (decoded_reg_strb.intr_block_rf.notif_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_intr_trig_r.notif_fifo_full_trig.value : '0;
    assign readback_array[20][4:4] = (decoded_reg_strb.intr_block_rf.notif_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_intr_trig_r.notif_fifo_not_full_trig.value : '0;
    assign readback_array[20][31:5] = '0;
    assign readback_array[21][31:0] = (decoded_reg_strb.intr_block_rf.error_cmd_dec_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_cmd_dec_intr_count_r.cnt.value : '0;
    assign readback_array[22][31:0] = (decoded_reg_strb.intr_block_rf.error_axi_rd_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_axi_rd_intr_count_r.cnt.value : '0;
    assign readback_array[23][31:0] = (decoded_reg_strb.intr_block_rf.error_axi_wr_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_axi_wr_intr_count_r.cnt.value : '0;
    assign readback_array[24][31:0] = (decoded_reg_strb.intr_block_rf.error_mbox_lock_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_mbox_lock_intr_count_r.cnt.value : '0;
    assign readback_array[25][31:0] = (decoded_reg_strb.intr_block_rf.error_sha_lock_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_sha_lock_intr_count_r.cnt.value : '0;
    assign readback_array[26][31:0] = (decoded_reg_strb.intr_block_rf.error_fifo_oflow_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_fifo_oflow_intr_count_r.cnt.value : '0;
    assign readback_array[27][31:0] = (decoded_reg_strb.intr_block_rf.error_fifo_uflow_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_fifo_uflow_intr_count_r.cnt.value : '0;
    assign readback_array[28][31:0] = (decoded_reg_strb.intr_block_rf.notif_txn_done_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_txn_done_intr_count_r.cnt.value : '0;
    assign readback_array[29][31:0] = (decoded_reg_strb.intr_block_rf.notif_fifo_empty_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_fifo_empty_intr_count_r.cnt.value : '0;
    assign readback_array[30][31:0] = (decoded_reg_strb.intr_block_rf.notif_fifo_not_empty_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_fifo_not_empty_intr_count_r.cnt.value : '0;
    assign readback_array[31][31:0] = (decoded_reg_strb.intr_block_rf.notif_fifo_full_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_fifo_full_intr_count_r.cnt.value : '0;
    assign readback_array[32][31:0] = (decoded_reg_strb.intr_block_rf.notif_fifo_not_full_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_fifo_not_full_intr_count_r.cnt.value : '0;
    assign readback_array[33][0:0] = (decoded_reg_strb.intr_block_rf.error_cmd_dec_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_cmd_dec_intr_count_incr_r.pulse.value : '0;
    assign readback_array[33][31:1] = '0;
    assign readback_array[34][0:0] = (decoded_reg_strb.intr_block_rf.error_axi_rd_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_axi_rd_intr_count_incr_r.pulse.value : '0;
    assign readback_array[34][31:1] = '0;
    assign readback_array[35][0:0] = (decoded_reg_strb.intr_block_rf.error_axi_wr_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_axi_wr_intr_count_incr_r.pulse.value : '0;
    assign readback_array[35][31:1] = '0;
    assign readback_array[36][0:0] = (decoded_reg_strb.intr_block_rf.error_mbox_lock_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_mbox_lock_intr_count_incr_r.pulse.value : '0;
    assign readback_array[36][31:1] = '0;
    assign readback_array[37][0:0] = (decoded_reg_strb.intr_block_rf.error_sha_lock_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_sha_lock_intr_count_incr_r.pulse.value : '0;
    assign readback_array[37][31:1] = '0;
    assign readback_array[38][0:0] = (decoded_reg_strb.intr_block_rf.error_fifo_oflow_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_fifo_oflow_intr_count_incr_r.pulse.value : '0;
    assign readback_array[38][31:1] = '0;
    assign readback_array[39][0:0] = (decoded_reg_strb.intr_block_rf.error_fifo_uflow_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_fifo_uflow_intr_count_incr_r.pulse.value : '0;
    assign readback_array[39][31:1] = '0;
    assign readback_array[40][0:0] = (decoded_reg_strb.intr_block_rf.notif_txn_done_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_txn_done_intr_count_incr_r.pulse.value : '0;
    assign readback_array[40][31:1] = '0;
    assign readback_array[41][0:0] = (decoded_reg_strb.intr_block_rf.notif_fifo_empty_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_fifo_empty_intr_count_incr_r.pulse.value : '0;
    assign readback_array[41][31:1] = '0;
    assign readback_array[42][0:0] = (decoded_reg_strb.intr_block_rf.notif_fifo_not_empty_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_fifo_not_empty_intr_count_incr_r.pulse.value : '0;
    assign readback_array[42][31:1] = '0;
    assign readback_array[43][0:0] = (decoded_reg_strb.intr_block_rf.notif_fifo_full_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_fifo_full_intr_count_incr_r.pulse.value : '0;
    assign readback_array[43][31:1] = '0;
    assign readback_array[44][0:0] = (decoded_reg_strb.intr_block_rf.notif_fifo_not_full_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_fifo_not_full_intr_count_incr_r.pulse.value : '0;
    assign readback_array[44][31:1] = '0;

    // Reduce the array
    always_comb begin
        automatic logic [31:0] readback_data_var;
        readback_done = decoded_req & ~decoded_req_is_wr;
        readback_err = '0;
        readback_data_var = '0;
        for(int i=0; i<45; i++) readback_data_var |= readback_array[i];
        readback_data = readback_data_var;
    end

    assign cpuif_rd_ack = readback_done;
    assign cpuif_rd_data = readback_data;
    assign cpuif_rd_err = readback_err;

`CALIPTRA_ASSERT_KNOWN(ERR_HWIF_IN, hwif_in, clk, !hwif_in.cptra_pwrgood)

endmodule
