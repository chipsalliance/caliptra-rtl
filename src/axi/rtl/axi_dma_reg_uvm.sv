
// This file was autogenerated by PeakRDL-uvm
package axi_dma_reg_uvm;
    `include "uvm_macros.svh"
    import uvm_pkg::*;
    `include "axi_dma_reg_covergroups.svh"
    // Reg - axi_dma_reg::id
    class axi_dma_reg__id extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        axi_dma_reg__id_bit_cg id_bit_cg[32];
        axi_dma_reg__id_fld_cg fld_cg;
        rand uvm_reg_field id;

        function new(string name = "axi_dma_reg__id");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.id = new("id");
            this.id.configure(this, 32, 0, "RO", 0, 'h67768068, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(id_bit_cg[bt]) id_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : axi_dma_reg__id

    // Reg - axi_dma_reg::cap
    class axi_dma_reg__cap extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        axi_dma_reg__cap_bit_cg fifo_max_depth_bit_cg[12];
        axi_dma_reg__cap_bit_cg rsvd_bit_cg[20];
        axi_dma_reg__cap_fld_cg fld_cg;
        rand uvm_reg_field fifo_max_depth;
        rand uvm_reg_field rsvd;

        function new(string name = "axi_dma_reg__cap");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.fifo_max_depth = new("fifo_max_depth");
            this.fifo_max_depth.configure(this, 12, 0, "RO", 1, 'h0, 0, 1, 0);
            this.rsvd = new("rsvd");
            this.rsvd.configure(this, 20, 12, "RO", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(fifo_max_depth_bit_cg[bt]) fifo_max_depth_bit_cg[bt] = new();
                foreach(rsvd_bit_cg[bt]) rsvd_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : axi_dma_reg__cap

    // Reg - axi_dma_reg::ctrl
    class axi_dma_reg__ctrl extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        axi_dma_reg__ctrl_bit_cg go_bit_cg[1];
        axi_dma_reg__ctrl_bit_cg flush_bit_cg[1];
        axi_dma_reg__ctrl_bit_cg rsvd0_bit_cg[14];
        axi_dma_reg__ctrl_bit_cg rd_route_bit_cg[2];
        axi_dma_reg__ctrl_bit_cg rsvd1_bit_cg[2];
        axi_dma_reg__ctrl_bit_cg rd_fixed_bit_cg[1];
        axi_dma_reg__ctrl_bit_cg rsvd2_bit_cg[3];
        axi_dma_reg__ctrl_bit_cg wr_route_bit_cg[2];
        axi_dma_reg__ctrl_bit_cg rsvd3_bit_cg[2];
        axi_dma_reg__ctrl_bit_cg wr_fixed_bit_cg[1];
        axi_dma_reg__ctrl_bit_cg rsvd4_bit_cg[3];
        axi_dma_reg__ctrl_fld_cg fld_cg;
        rand uvm_reg_field go;
        rand uvm_reg_field flush;
        rand uvm_reg_field rsvd0;
        rand uvm_reg_field rd_route;
        rand uvm_reg_field rsvd1;
        rand uvm_reg_field rd_fixed;
        rand uvm_reg_field rsvd2;
        rand uvm_reg_field wr_route;
        rand uvm_reg_field rsvd3;
        rand uvm_reg_field wr_fixed;
        rand uvm_reg_field rsvd4;

        function new(string name = "axi_dma_reg__ctrl");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.go = new("go");
            this.go.configure(this, 1, 0, "W1S", 1, 'h0, 1, 1, 0);
            this.flush = new("flush");
            this.flush.configure(this, 1, 1, "W1S", 1, 'h0, 1, 1, 0);
            this.rsvd0 = new("rsvd0");
            this.rsvd0.configure(this, 14, 2, "RO", 0, 'h0, 1, 1, 0);
            this.rd_route = new("rd_route");
            this.rd_route.configure(this, 2, 16, "RW", 0, 'h0, 1, 1, 0);
            this.rsvd1 = new("rsvd1");
            this.rsvd1.configure(this, 2, 18, "RO", 0, 'h0, 1, 1, 0);
            this.rd_fixed = new("rd_fixed");
            this.rd_fixed.configure(this, 1, 20, "RW", 0, 'h0, 1, 1, 0);
            this.rsvd2 = new("rsvd2");
            this.rsvd2.configure(this, 3, 21, "RO", 0, 'h0, 1, 1, 0);
            this.wr_route = new("wr_route");
            this.wr_route.configure(this, 2, 24, "RW", 0, 'h0, 1, 1, 0);
            this.rsvd3 = new("rsvd3");
            this.rsvd3.configure(this, 2, 26, "RO", 0, 'h0, 1, 1, 0);
            this.wr_fixed = new("wr_fixed");
            this.wr_fixed.configure(this, 1, 28, "RW", 0, 'h0, 1, 1, 0);
            this.rsvd4 = new("rsvd4");
            this.rsvd4.configure(this, 3, 29, "RO", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(go_bit_cg[bt]) go_bit_cg[bt] = new();
                foreach(flush_bit_cg[bt]) flush_bit_cg[bt] = new();
                foreach(rsvd0_bit_cg[bt]) rsvd0_bit_cg[bt] = new();
                foreach(rd_route_bit_cg[bt]) rd_route_bit_cg[bt] = new();
                foreach(rsvd1_bit_cg[bt]) rsvd1_bit_cg[bt] = new();
                foreach(rd_fixed_bit_cg[bt]) rd_fixed_bit_cg[bt] = new();
                foreach(rsvd2_bit_cg[bt]) rsvd2_bit_cg[bt] = new();
                foreach(wr_route_bit_cg[bt]) wr_route_bit_cg[bt] = new();
                foreach(rsvd3_bit_cg[bt]) rsvd3_bit_cg[bt] = new();
                foreach(wr_fixed_bit_cg[bt]) wr_fixed_bit_cg[bt] = new();
                foreach(rsvd4_bit_cg[bt]) rsvd4_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : axi_dma_reg__ctrl

    // Reg - axi_dma_reg::status0
    class axi_dma_reg__status0 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        axi_dma_reg__status0_bit_cg busy_bit_cg[1];
        axi_dma_reg__status0_bit_cg error_bit_cg[1];
        axi_dma_reg__status0_bit_cg rsvd0_bit_cg[2];
        axi_dma_reg__status0_bit_cg fifo_depth_bit_cg[12];
        axi_dma_reg__status0_bit_cg axi_dma_fsm_ps_bit_cg[2];
        axi_dma_reg__status0_bit_cg rsvd1_bit_cg[14];
        axi_dma_reg__status0_fld_cg fld_cg;
        rand uvm_reg_field busy;
        rand uvm_reg_field error;
        rand uvm_reg_field rsvd0;
        rand uvm_reg_field fifo_depth;
        rand uvm_reg_field axi_dma_fsm_ps;
        rand uvm_reg_field rsvd1;

        function new(string name = "axi_dma_reg__status0");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.busy = new("busy");
            this.busy.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            this.error = new("error");
            this.error.configure(this, 1, 1, "RO", 1, 'h0, 1, 1, 0);
            this.rsvd0 = new("rsvd0");
            this.rsvd0.configure(this, 2, 2, "RO", 0, 'h0, 1, 1, 0);
            this.fifo_depth = new("fifo_depth");
            this.fifo_depth.configure(this, 12, 4, "RO", 1, 'h0, 0, 1, 0);
            this.axi_dma_fsm_ps = new("axi_dma_fsm_ps");
            this.axi_dma_fsm_ps.configure(this, 2, 16, "RO", 1, 'h0, 1, 1, 0);
            this.rsvd1 = new("rsvd1");
            this.rsvd1.configure(this, 14, 18, "RO", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(busy_bit_cg[bt]) busy_bit_cg[bt] = new();
                foreach(error_bit_cg[bt]) error_bit_cg[bt] = new();
                foreach(rsvd0_bit_cg[bt]) rsvd0_bit_cg[bt] = new();
                foreach(fifo_depth_bit_cg[bt]) fifo_depth_bit_cg[bt] = new();
                foreach(axi_dma_fsm_ps_bit_cg[bt]) axi_dma_fsm_ps_bit_cg[bt] = new();
                foreach(rsvd1_bit_cg[bt]) rsvd1_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : axi_dma_reg__status0

    // Reg - axi_dma_reg::status1
    class axi_dma_reg__status1 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        axi_dma_reg__status1_bit_cg bytes_remaining_bit_cg[32];
        axi_dma_reg__status1_fld_cg fld_cg;
        rand uvm_reg_field bytes_remaining;

        function new(string name = "axi_dma_reg__status1");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.bytes_remaining = new("bytes_remaining");
            this.bytes_remaining.configure(this, 32, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(bytes_remaining_bit_cg[bt]) bytes_remaining_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : axi_dma_reg__status1

    // Reg - axi_dma_reg::src_addr_l
    class axi_dma_reg__src_addr_l extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        axi_dma_reg__src_addr_l_bit_cg addr_l_bit_cg[32];
        axi_dma_reg__src_addr_l_fld_cg fld_cg;
        rand uvm_reg_field addr_l;

        function new(string name = "axi_dma_reg__src_addr_l");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.addr_l = new("addr_l");
            this.addr_l.configure(this, 32, 0, "RW", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(addr_l_bit_cg[bt]) addr_l_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : axi_dma_reg__src_addr_l

    // Reg - axi_dma_reg::src_addr_h
    class axi_dma_reg__src_addr_h extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        axi_dma_reg__src_addr_h_bit_cg addr_h_bit_cg[32];
        axi_dma_reg__src_addr_h_fld_cg fld_cg;
        rand uvm_reg_field addr_h;

        function new(string name = "axi_dma_reg__src_addr_h");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.addr_h = new("addr_h");
            this.addr_h.configure(this, 32, 0, "RW", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(addr_h_bit_cg[bt]) addr_h_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : axi_dma_reg__src_addr_h

    // Reg - axi_dma_reg::dst_addr_l
    class axi_dma_reg__dst_addr_l extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        axi_dma_reg__dst_addr_l_bit_cg addr_l_bit_cg[32];
        axi_dma_reg__dst_addr_l_fld_cg fld_cg;
        rand uvm_reg_field addr_l;

        function new(string name = "axi_dma_reg__dst_addr_l");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.addr_l = new("addr_l");
            this.addr_l.configure(this, 32, 0, "RW", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(addr_l_bit_cg[bt]) addr_l_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : axi_dma_reg__dst_addr_l

    // Reg - axi_dma_reg::dst_addr_h
    class axi_dma_reg__dst_addr_h extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        axi_dma_reg__dst_addr_h_bit_cg addr_h_bit_cg[32];
        axi_dma_reg__dst_addr_h_fld_cg fld_cg;
        rand uvm_reg_field addr_h;

        function new(string name = "axi_dma_reg__dst_addr_h");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.addr_h = new("addr_h");
            this.addr_h.configure(this, 32, 0, "RW", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(addr_h_bit_cg[bt]) addr_h_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : axi_dma_reg__dst_addr_h

    // Reg - axi_dma_reg::byte_count
    class axi_dma_reg__byte_count extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        axi_dma_reg__byte_count_bit_cg count_bit_cg[32];
        axi_dma_reg__byte_count_fld_cg fld_cg;
        rand uvm_reg_field count;

        function new(string name = "axi_dma_reg__byte_count");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.count = new("count");
            this.count.configure(this, 32, 0, "RW", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(count_bit_cg[bt]) count_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : axi_dma_reg__byte_count

    // Reg - axi_dma_reg::block_size
    class axi_dma_reg__block_size extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        axi_dma_reg__block_size_bit_cg size_bit_cg[12];
        axi_dma_reg__block_size_bit_cg rsvd_bit_cg[20];
        axi_dma_reg__block_size_fld_cg fld_cg;
        rand uvm_reg_field size;
        rand uvm_reg_field rsvd;

        function new(string name = "axi_dma_reg__block_size");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.size = new("size");
            this.size.configure(this, 12, 0, "RW", 0, 'h0, 1, 1, 0);
            this.rsvd = new("rsvd");
            this.rsvd.configure(this, 20, 12, "RO", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(size_bit_cg[bt]) size_bit_cg[bt] = new();
                foreach(rsvd_bit_cg[bt]) rsvd_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : axi_dma_reg__block_size

    // Reg - axi_dma_reg::write_data
    class axi_dma_reg__write_data extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        axi_dma_reg__write_data_bit_cg wdata_bit_cg[32];
        axi_dma_reg__write_data_fld_cg fld_cg;
        rand uvm_reg_field wdata;

        function new(string name = "axi_dma_reg__write_data");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.wdata = new("wdata");
            this.wdata.configure(this, 32, 0, "WO", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(wdata_bit_cg[bt]) wdata_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : axi_dma_reg__write_data

    // Reg - axi_dma_reg::read_data
    class axi_dma_reg__read_data extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        axi_dma_reg__read_data_bit_cg rdata_bit_cg[32];
        axi_dma_reg__read_data_fld_cg fld_cg;
        rand uvm_reg_field rdata;

        function new(string name = "axi_dma_reg__read_data");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.rdata = new("rdata");
            this.rdata.configure(this, 32, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(rdata_bit_cg[bt]) rdata_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : axi_dma_reg__read_data

    // Reg - axi_dma_reg::intr_block_t::global_intr_en_t
    class axi_dma_reg__intr_block_t__global_intr_en_t extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        axi_dma_reg__intr_block_t__global_intr_en_t_bit_cg error_en_bit_cg[1];
        axi_dma_reg__intr_block_t__global_intr_en_t_bit_cg notif_en_bit_cg[1];
        axi_dma_reg__intr_block_t__global_intr_en_t_fld_cg fld_cg;
        rand uvm_reg_field error_en;
        rand uvm_reg_field notif_en;

        function new(string name = "axi_dma_reg__intr_block_t__global_intr_en_t");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.error_en = new("error_en");
            this.error_en.configure(this, 1, 0, "RW", 0, 'h0, 1, 1, 0);
            this.notif_en = new("notif_en");
            this.notif_en.configure(this, 1, 1, "RW", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(error_en_bit_cg[bt]) error_en_bit_cg[bt] = new();
                foreach(notif_en_bit_cg[bt]) notif_en_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : axi_dma_reg__intr_block_t__global_intr_en_t

    // Reg - axi_dma_reg::intr_block_t::error_intr_en_t
    class axi_dma_reg__intr_block_t__error_intr_en_t extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        axi_dma_reg__intr_block_t__error_intr_en_t_bit_cg error_cmd_dec_en_bit_cg[1];
        axi_dma_reg__intr_block_t__error_intr_en_t_bit_cg error_axi_rd_en_bit_cg[1];
        axi_dma_reg__intr_block_t__error_intr_en_t_bit_cg error_axi_wr_en_bit_cg[1];
        axi_dma_reg__intr_block_t__error_intr_en_t_bit_cg error_mbox_lock_en_bit_cg[1];
        axi_dma_reg__intr_block_t__error_intr_en_t_bit_cg error_sha_lock_en_bit_cg[1];
        axi_dma_reg__intr_block_t__error_intr_en_t_bit_cg error_fifo_oflow_en_bit_cg[1];
        axi_dma_reg__intr_block_t__error_intr_en_t_bit_cg error_fifo_uflow_en_bit_cg[1];
        axi_dma_reg__intr_block_t__error_intr_en_t_fld_cg fld_cg;
        rand uvm_reg_field error_cmd_dec_en;
        rand uvm_reg_field error_axi_rd_en;
        rand uvm_reg_field error_axi_wr_en;
        rand uvm_reg_field error_mbox_lock_en;
        rand uvm_reg_field error_sha_lock_en;
        rand uvm_reg_field error_fifo_oflow_en;
        rand uvm_reg_field error_fifo_uflow_en;

        function new(string name = "axi_dma_reg__intr_block_t__error_intr_en_t");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.error_cmd_dec_en = new("error_cmd_dec_en");
            this.error_cmd_dec_en.configure(this, 1, 0, "RW", 0, 'h0, 1, 1, 0);
            this.error_axi_rd_en = new("error_axi_rd_en");
            this.error_axi_rd_en.configure(this, 1, 1, "RW", 0, 'h0, 1, 1, 0);
            this.error_axi_wr_en = new("error_axi_wr_en");
            this.error_axi_wr_en.configure(this, 1, 2, "RW", 0, 'h0, 1, 1, 0);
            this.error_mbox_lock_en = new("error_mbox_lock_en");
            this.error_mbox_lock_en.configure(this, 1, 3, "RW", 0, 'h0, 1, 1, 0);
            this.error_sha_lock_en = new("error_sha_lock_en");
            this.error_sha_lock_en.configure(this, 1, 4, "RW", 0, 'h0, 1, 1, 0);
            this.error_fifo_oflow_en = new("error_fifo_oflow_en");
            this.error_fifo_oflow_en.configure(this, 1, 5, "RW", 0, 'h0, 1, 1, 0);
            this.error_fifo_uflow_en = new("error_fifo_uflow_en");
            this.error_fifo_uflow_en.configure(this, 1, 6, "RW", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(error_cmd_dec_en_bit_cg[bt]) error_cmd_dec_en_bit_cg[bt] = new();
                foreach(error_axi_rd_en_bit_cg[bt]) error_axi_rd_en_bit_cg[bt] = new();
                foreach(error_axi_wr_en_bit_cg[bt]) error_axi_wr_en_bit_cg[bt] = new();
                foreach(error_mbox_lock_en_bit_cg[bt]) error_mbox_lock_en_bit_cg[bt] = new();
                foreach(error_sha_lock_en_bit_cg[bt]) error_sha_lock_en_bit_cg[bt] = new();
                foreach(error_fifo_oflow_en_bit_cg[bt]) error_fifo_oflow_en_bit_cg[bt] = new();
                foreach(error_fifo_uflow_en_bit_cg[bt]) error_fifo_uflow_en_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : axi_dma_reg__intr_block_t__error_intr_en_t

    // Reg - axi_dma_reg::intr_block_t::notif_intr_en_t
    class axi_dma_reg__intr_block_t__notif_intr_en_t extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        axi_dma_reg__intr_block_t__notif_intr_en_t_bit_cg notif_txn_done_en_bit_cg[1];
        axi_dma_reg__intr_block_t__notif_intr_en_t_bit_cg notif_fifo_empty_en_bit_cg[1];
        axi_dma_reg__intr_block_t__notif_intr_en_t_bit_cg notif_fifo_not_empty_en_bit_cg[1];
        axi_dma_reg__intr_block_t__notif_intr_en_t_bit_cg notif_fifo_full_en_bit_cg[1];
        axi_dma_reg__intr_block_t__notif_intr_en_t_bit_cg notif_fifo_not_full_en_bit_cg[1];
        axi_dma_reg__intr_block_t__notif_intr_en_t_fld_cg fld_cg;
        rand uvm_reg_field notif_txn_done_en;
        rand uvm_reg_field notif_fifo_empty_en;
        rand uvm_reg_field notif_fifo_not_empty_en;
        rand uvm_reg_field notif_fifo_full_en;
        rand uvm_reg_field notif_fifo_not_full_en;

        function new(string name = "axi_dma_reg__intr_block_t__notif_intr_en_t");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.notif_txn_done_en = new("notif_txn_done_en");
            this.notif_txn_done_en.configure(this, 1, 0, "RW", 0, 'h0, 1, 1, 0);
            this.notif_fifo_empty_en = new("notif_fifo_empty_en");
            this.notif_fifo_empty_en.configure(this, 1, 1, "RW", 0, 'h0, 1, 1, 0);
            this.notif_fifo_not_empty_en = new("notif_fifo_not_empty_en");
            this.notif_fifo_not_empty_en.configure(this, 1, 2, "RW", 0, 'h0, 1, 1, 0);
            this.notif_fifo_full_en = new("notif_fifo_full_en");
            this.notif_fifo_full_en.configure(this, 1, 3, "RW", 0, 'h0, 1, 1, 0);
            this.notif_fifo_not_full_en = new("notif_fifo_not_full_en");
            this.notif_fifo_not_full_en.configure(this, 1, 4, "RW", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(notif_txn_done_en_bit_cg[bt]) notif_txn_done_en_bit_cg[bt] = new();
                foreach(notif_fifo_empty_en_bit_cg[bt]) notif_fifo_empty_en_bit_cg[bt] = new();
                foreach(notif_fifo_not_empty_en_bit_cg[bt]) notif_fifo_not_empty_en_bit_cg[bt] = new();
                foreach(notif_fifo_full_en_bit_cg[bt]) notif_fifo_full_en_bit_cg[bt] = new();
                foreach(notif_fifo_not_full_en_bit_cg[bt]) notif_fifo_not_full_en_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : axi_dma_reg__intr_block_t__notif_intr_en_t

    // Reg - axi_dma_reg::intr_block_t::global_intr_t_agg_sts_dd3dcf0a
    class axi_dma_reg__intr_block_t__global_intr_t_agg_sts_dd3dcf0a extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        axi_dma_reg__intr_block_t__global_intr_t_agg_sts_dd3dcf0a_bit_cg agg_sts_bit_cg[1];
        axi_dma_reg__intr_block_t__global_intr_t_agg_sts_dd3dcf0a_fld_cg fld_cg;
        rand uvm_reg_field agg_sts;

        function new(string name = "axi_dma_reg__intr_block_t__global_intr_t_agg_sts_dd3dcf0a");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.agg_sts = new("agg_sts");
            this.agg_sts.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(agg_sts_bit_cg[bt]) agg_sts_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : axi_dma_reg__intr_block_t__global_intr_t_agg_sts_dd3dcf0a

    // Reg - axi_dma_reg::intr_block_t::global_intr_t_agg_sts_e6399b4a
    class axi_dma_reg__intr_block_t__global_intr_t_agg_sts_e6399b4a extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        axi_dma_reg__intr_block_t__global_intr_t_agg_sts_e6399b4a_bit_cg agg_sts_bit_cg[1];
        axi_dma_reg__intr_block_t__global_intr_t_agg_sts_e6399b4a_fld_cg fld_cg;
        rand uvm_reg_field agg_sts;

        function new(string name = "axi_dma_reg__intr_block_t__global_intr_t_agg_sts_e6399b4a");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.agg_sts = new("agg_sts");
            this.agg_sts.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(agg_sts_bit_cg[bt]) agg_sts_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : axi_dma_reg__intr_block_t__global_intr_t_agg_sts_e6399b4a

    // Reg - axi_dma_reg::intr_block_t::error_intr_t_error_axi_rd_sts_927e49cd_error_axi_wr_sts_f84e5c07_error_cmd_dec_sts_46039d92_error_fifo_oflow_sts_71b29a77_error_fifo_uflow_sts_119d122a_error_mbox_lock_sts_9e18c395_error_sha_lock_sts_4c7993a0
    class axi_dma_reg__intr_block_t__error_intr_t_error_axi_rd_sts_927e49cd_error_axi_wr_sts_f84e5c07_error_cmd_dec_sts_46039d92_error_fifo_oflow_sts_71b29a77_error_fifo_uflow_sts_119d122a_error_mbox_lock_sts_9e18c395_error_sha_lock_sts_4c7993a0 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        axi_dma_reg__intr_block_t__error_intr_t_error_axi_rd_sts_927e49cd_error_axi_wr_sts_f84e5c07_error_cmd_dec_sts_46039d92_error_fifo_oflow_sts_71b29a77_error_fifo_uflow_sts_119d122a_error_mbox_lock_sts_9e18c395_error_sha_lock_sts_4c7993a0_bit_cg error_cmd_dec_sts_bit_cg[1];
        axi_dma_reg__intr_block_t__error_intr_t_error_axi_rd_sts_927e49cd_error_axi_wr_sts_f84e5c07_error_cmd_dec_sts_46039d92_error_fifo_oflow_sts_71b29a77_error_fifo_uflow_sts_119d122a_error_mbox_lock_sts_9e18c395_error_sha_lock_sts_4c7993a0_bit_cg error_axi_rd_sts_bit_cg[1];
        axi_dma_reg__intr_block_t__error_intr_t_error_axi_rd_sts_927e49cd_error_axi_wr_sts_f84e5c07_error_cmd_dec_sts_46039d92_error_fifo_oflow_sts_71b29a77_error_fifo_uflow_sts_119d122a_error_mbox_lock_sts_9e18c395_error_sha_lock_sts_4c7993a0_bit_cg error_axi_wr_sts_bit_cg[1];
        axi_dma_reg__intr_block_t__error_intr_t_error_axi_rd_sts_927e49cd_error_axi_wr_sts_f84e5c07_error_cmd_dec_sts_46039d92_error_fifo_oflow_sts_71b29a77_error_fifo_uflow_sts_119d122a_error_mbox_lock_sts_9e18c395_error_sha_lock_sts_4c7993a0_bit_cg error_mbox_lock_sts_bit_cg[1];
        axi_dma_reg__intr_block_t__error_intr_t_error_axi_rd_sts_927e49cd_error_axi_wr_sts_f84e5c07_error_cmd_dec_sts_46039d92_error_fifo_oflow_sts_71b29a77_error_fifo_uflow_sts_119d122a_error_mbox_lock_sts_9e18c395_error_sha_lock_sts_4c7993a0_bit_cg error_sha_lock_sts_bit_cg[1];
        axi_dma_reg__intr_block_t__error_intr_t_error_axi_rd_sts_927e49cd_error_axi_wr_sts_f84e5c07_error_cmd_dec_sts_46039d92_error_fifo_oflow_sts_71b29a77_error_fifo_uflow_sts_119d122a_error_mbox_lock_sts_9e18c395_error_sha_lock_sts_4c7993a0_bit_cg error_fifo_oflow_sts_bit_cg[1];
        axi_dma_reg__intr_block_t__error_intr_t_error_axi_rd_sts_927e49cd_error_axi_wr_sts_f84e5c07_error_cmd_dec_sts_46039d92_error_fifo_oflow_sts_71b29a77_error_fifo_uflow_sts_119d122a_error_mbox_lock_sts_9e18c395_error_sha_lock_sts_4c7993a0_bit_cg error_fifo_uflow_sts_bit_cg[1];
        axi_dma_reg__intr_block_t__error_intr_t_error_axi_rd_sts_927e49cd_error_axi_wr_sts_f84e5c07_error_cmd_dec_sts_46039d92_error_fifo_oflow_sts_71b29a77_error_fifo_uflow_sts_119d122a_error_mbox_lock_sts_9e18c395_error_sha_lock_sts_4c7993a0_fld_cg fld_cg;
        rand uvm_reg_field error_cmd_dec_sts;
        rand uvm_reg_field error_axi_rd_sts;
        rand uvm_reg_field error_axi_wr_sts;
        rand uvm_reg_field error_mbox_lock_sts;
        rand uvm_reg_field error_sha_lock_sts;
        rand uvm_reg_field error_fifo_oflow_sts;
        rand uvm_reg_field error_fifo_uflow_sts;

        function new(string name = "axi_dma_reg__intr_block_t__error_intr_t_error_axi_rd_sts_927e49cd_error_axi_wr_sts_f84e5c07_error_cmd_dec_sts_46039d92_error_fifo_oflow_sts_71b29a77_error_fifo_uflow_sts_119d122a_error_mbox_lock_sts_9e18c395_error_sha_lock_sts_4c7993a0");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.error_cmd_dec_sts = new("error_cmd_dec_sts");
            this.error_cmd_dec_sts.configure(this, 1, 0, "W1C", 1, 'h0, 1, 1, 0);
            this.error_axi_rd_sts = new("error_axi_rd_sts");
            this.error_axi_rd_sts.configure(this, 1, 1, "W1C", 1, 'h0, 1, 1, 0);
            this.error_axi_wr_sts = new("error_axi_wr_sts");
            this.error_axi_wr_sts.configure(this, 1, 2, "W1C", 1, 'h0, 1, 1, 0);
            this.error_mbox_lock_sts = new("error_mbox_lock_sts");
            this.error_mbox_lock_sts.configure(this, 1, 3, "W1C", 1, 'h0, 1, 1, 0);
            this.error_sha_lock_sts = new("error_sha_lock_sts");
            this.error_sha_lock_sts.configure(this, 1, 4, "W1C", 1, 'h0, 1, 1, 0);
            this.error_fifo_oflow_sts = new("error_fifo_oflow_sts");
            this.error_fifo_oflow_sts.configure(this, 1, 5, "W1C", 1, 'h0, 1, 1, 0);
            this.error_fifo_uflow_sts = new("error_fifo_uflow_sts");
            this.error_fifo_uflow_sts.configure(this, 1, 6, "W1C", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(error_cmd_dec_sts_bit_cg[bt]) error_cmd_dec_sts_bit_cg[bt] = new();
                foreach(error_axi_rd_sts_bit_cg[bt]) error_axi_rd_sts_bit_cg[bt] = new();
                foreach(error_axi_wr_sts_bit_cg[bt]) error_axi_wr_sts_bit_cg[bt] = new();
                foreach(error_mbox_lock_sts_bit_cg[bt]) error_mbox_lock_sts_bit_cg[bt] = new();
                foreach(error_sha_lock_sts_bit_cg[bt]) error_sha_lock_sts_bit_cg[bt] = new();
                foreach(error_fifo_oflow_sts_bit_cg[bt]) error_fifo_oflow_sts_bit_cg[bt] = new();
                foreach(error_fifo_uflow_sts_bit_cg[bt]) error_fifo_uflow_sts_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : axi_dma_reg__intr_block_t__error_intr_t_error_axi_rd_sts_927e49cd_error_axi_wr_sts_f84e5c07_error_cmd_dec_sts_46039d92_error_fifo_oflow_sts_71b29a77_error_fifo_uflow_sts_119d122a_error_mbox_lock_sts_9e18c395_error_sha_lock_sts_4c7993a0

    // Reg - axi_dma_reg::intr_block_t::notif_intr_t_notif_fifo_empty_sts_d87d1786_notif_fifo_full_sts_64c66862_notif_fifo_not_empty_sts_1a0e2460_notif_fifo_not_full_sts_0266fe07_notif_txn_done_sts_0ee2f120
    class axi_dma_reg__intr_block_t__notif_intr_t_notif_fifo_empty_sts_d87d1786_notif_fifo_full_sts_64c66862_notif_fifo_not_empty_sts_1a0e2460_notif_fifo_not_full_sts_0266fe07_notif_txn_done_sts_0ee2f120 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        axi_dma_reg__intr_block_t__notif_intr_t_notif_fifo_empty_sts_d87d1786_notif_fifo_full_sts_64c66862_notif_fifo_not_empty_sts_1a0e2460_notif_fifo_not_full_sts_0266fe07_notif_txn_done_sts_0ee2f120_bit_cg notif_txn_done_sts_bit_cg[1];
        axi_dma_reg__intr_block_t__notif_intr_t_notif_fifo_empty_sts_d87d1786_notif_fifo_full_sts_64c66862_notif_fifo_not_empty_sts_1a0e2460_notif_fifo_not_full_sts_0266fe07_notif_txn_done_sts_0ee2f120_bit_cg notif_fifo_empty_sts_bit_cg[1];
        axi_dma_reg__intr_block_t__notif_intr_t_notif_fifo_empty_sts_d87d1786_notif_fifo_full_sts_64c66862_notif_fifo_not_empty_sts_1a0e2460_notif_fifo_not_full_sts_0266fe07_notif_txn_done_sts_0ee2f120_bit_cg notif_fifo_not_empty_sts_bit_cg[1];
        axi_dma_reg__intr_block_t__notif_intr_t_notif_fifo_empty_sts_d87d1786_notif_fifo_full_sts_64c66862_notif_fifo_not_empty_sts_1a0e2460_notif_fifo_not_full_sts_0266fe07_notif_txn_done_sts_0ee2f120_bit_cg notif_fifo_full_sts_bit_cg[1];
        axi_dma_reg__intr_block_t__notif_intr_t_notif_fifo_empty_sts_d87d1786_notif_fifo_full_sts_64c66862_notif_fifo_not_empty_sts_1a0e2460_notif_fifo_not_full_sts_0266fe07_notif_txn_done_sts_0ee2f120_bit_cg notif_fifo_not_full_sts_bit_cg[1];
        axi_dma_reg__intr_block_t__notif_intr_t_notif_fifo_empty_sts_d87d1786_notif_fifo_full_sts_64c66862_notif_fifo_not_empty_sts_1a0e2460_notif_fifo_not_full_sts_0266fe07_notif_txn_done_sts_0ee2f120_fld_cg fld_cg;
        rand uvm_reg_field notif_txn_done_sts;
        rand uvm_reg_field notif_fifo_empty_sts;
        rand uvm_reg_field notif_fifo_not_empty_sts;
        rand uvm_reg_field notif_fifo_full_sts;
        rand uvm_reg_field notif_fifo_not_full_sts;

        function new(string name = "axi_dma_reg__intr_block_t__notif_intr_t_notif_fifo_empty_sts_d87d1786_notif_fifo_full_sts_64c66862_notif_fifo_not_empty_sts_1a0e2460_notif_fifo_not_full_sts_0266fe07_notif_txn_done_sts_0ee2f120");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.notif_txn_done_sts = new("notif_txn_done_sts");
            this.notif_txn_done_sts.configure(this, 1, 0, "W1C", 1, 'h0, 1, 1, 0);
            this.notif_fifo_empty_sts = new("notif_fifo_empty_sts");
            this.notif_fifo_empty_sts.configure(this, 1, 1, "W1C", 1, 'h0, 1, 1, 0);
            this.notif_fifo_not_empty_sts = new("notif_fifo_not_empty_sts");
            this.notif_fifo_not_empty_sts.configure(this, 1, 2, "W1C", 1, 'h0, 1, 1, 0);
            this.notif_fifo_full_sts = new("notif_fifo_full_sts");
            this.notif_fifo_full_sts.configure(this, 1, 3, "W1C", 1, 'h0, 1, 1, 0);
            this.notif_fifo_not_full_sts = new("notif_fifo_not_full_sts");
            this.notif_fifo_not_full_sts.configure(this, 1, 4, "W1C", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(notif_txn_done_sts_bit_cg[bt]) notif_txn_done_sts_bit_cg[bt] = new();
                foreach(notif_fifo_empty_sts_bit_cg[bt]) notif_fifo_empty_sts_bit_cg[bt] = new();
                foreach(notif_fifo_not_empty_sts_bit_cg[bt]) notif_fifo_not_empty_sts_bit_cg[bt] = new();
                foreach(notif_fifo_full_sts_bit_cg[bt]) notif_fifo_full_sts_bit_cg[bt] = new();
                foreach(notif_fifo_not_full_sts_bit_cg[bt]) notif_fifo_not_full_sts_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : axi_dma_reg__intr_block_t__notif_intr_t_notif_fifo_empty_sts_d87d1786_notif_fifo_full_sts_64c66862_notif_fifo_not_empty_sts_1a0e2460_notif_fifo_not_full_sts_0266fe07_notif_txn_done_sts_0ee2f120

    // Reg - axi_dma_reg::intr_block_t::error_intr_trig_t
    class axi_dma_reg__intr_block_t__error_intr_trig_t extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        axi_dma_reg__intr_block_t__error_intr_trig_t_bit_cg error_cmd_dec_trig_bit_cg[1];
        axi_dma_reg__intr_block_t__error_intr_trig_t_bit_cg error_axi_rd_trig_bit_cg[1];
        axi_dma_reg__intr_block_t__error_intr_trig_t_bit_cg error_axi_wr_trig_bit_cg[1];
        axi_dma_reg__intr_block_t__error_intr_trig_t_bit_cg error_mbox_lock_trig_bit_cg[1];
        axi_dma_reg__intr_block_t__error_intr_trig_t_bit_cg error_sha_lock_trig_bit_cg[1];
        axi_dma_reg__intr_block_t__error_intr_trig_t_bit_cg error_fifo_oflow_trig_bit_cg[1];
        axi_dma_reg__intr_block_t__error_intr_trig_t_bit_cg error_fifo_uflow_trig_bit_cg[1];
        axi_dma_reg__intr_block_t__error_intr_trig_t_fld_cg fld_cg;
        rand uvm_reg_field error_cmd_dec_trig;
        rand uvm_reg_field error_axi_rd_trig;
        rand uvm_reg_field error_axi_wr_trig;
        rand uvm_reg_field error_mbox_lock_trig;
        rand uvm_reg_field error_sha_lock_trig;
        rand uvm_reg_field error_fifo_oflow_trig;
        rand uvm_reg_field error_fifo_uflow_trig;

        function new(string name = "axi_dma_reg__intr_block_t__error_intr_trig_t");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.error_cmd_dec_trig = new("error_cmd_dec_trig");
            this.error_cmd_dec_trig.configure(this, 1, 0, "W1S", 0, 'h0, 1, 1, 0);
            this.error_axi_rd_trig = new("error_axi_rd_trig");
            this.error_axi_rd_trig.configure(this, 1, 1, "W1S", 0, 'h0, 1, 1, 0);
            this.error_axi_wr_trig = new("error_axi_wr_trig");
            this.error_axi_wr_trig.configure(this, 1, 2, "W1S", 0, 'h0, 1, 1, 0);
            this.error_mbox_lock_trig = new("error_mbox_lock_trig");
            this.error_mbox_lock_trig.configure(this, 1, 3, "W1S", 0, 'h0, 1, 1, 0);
            this.error_sha_lock_trig = new("error_sha_lock_trig");
            this.error_sha_lock_trig.configure(this, 1, 4, "W1S", 0, 'h0, 1, 1, 0);
            this.error_fifo_oflow_trig = new("error_fifo_oflow_trig");
            this.error_fifo_oflow_trig.configure(this, 1, 5, "W1S", 0, 'h0, 1, 1, 0);
            this.error_fifo_uflow_trig = new("error_fifo_uflow_trig");
            this.error_fifo_uflow_trig.configure(this, 1, 6, "W1S", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(error_cmd_dec_trig_bit_cg[bt]) error_cmd_dec_trig_bit_cg[bt] = new();
                foreach(error_axi_rd_trig_bit_cg[bt]) error_axi_rd_trig_bit_cg[bt] = new();
                foreach(error_axi_wr_trig_bit_cg[bt]) error_axi_wr_trig_bit_cg[bt] = new();
                foreach(error_mbox_lock_trig_bit_cg[bt]) error_mbox_lock_trig_bit_cg[bt] = new();
                foreach(error_sha_lock_trig_bit_cg[bt]) error_sha_lock_trig_bit_cg[bt] = new();
                foreach(error_fifo_oflow_trig_bit_cg[bt]) error_fifo_oflow_trig_bit_cg[bt] = new();
                foreach(error_fifo_uflow_trig_bit_cg[bt]) error_fifo_uflow_trig_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : axi_dma_reg__intr_block_t__error_intr_trig_t

    // Reg - axi_dma_reg::intr_block_t::notif_intr_trig_t
    class axi_dma_reg__intr_block_t__notif_intr_trig_t extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        axi_dma_reg__intr_block_t__notif_intr_trig_t_bit_cg notif_txn_done_trig_bit_cg[1];
        axi_dma_reg__intr_block_t__notif_intr_trig_t_bit_cg notif_fifo_empty_trig_bit_cg[1];
        axi_dma_reg__intr_block_t__notif_intr_trig_t_bit_cg notif_fifo_not_empty_trig_bit_cg[1];
        axi_dma_reg__intr_block_t__notif_intr_trig_t_bit_cg notif_fifo_full_trig_bit_cg[1];
        axi_dma_reg__intr_block_t__notif_intr_trig_t_bit_cg notif_fifo_not_full_trig_bit_cg[1];
        axi_dma_reg__intr_block_t__notif_intr_trig_t_fld_cg fld_cg;
        rand uvm_reg_field notif_txn_done_trig;
        rand uvm_reg_field notif_fifo_empty_trig;
        rand uvm_reg_field notif_fifo_not_empty_trig;
        rand uvm_reg_field notif_fifo_full_trig;
        rand uvm_reg_field notif_fifo_not_full_trig;

        function new(string name = "axi_dma_reg__intr_block_t__notif_intr_trig_t");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.notif_txn_done_trig = new("notif_txn_done_trig");
            this.notif_txn_done_trig.configure(this, 1, 0, "W1S", 0, 'h0, 1, 1, 0);
            this.notif_fifo_empty_trig = new("notif_fifo_empty_trig");
            this.notif_fifo_empty_trig.configure(this, 1, 1, "W1S", 0, 'h0, 1, 1, 0);
            this.notif_fifo_not_empty_trig = new("notif_fifo_not_empty_trig");
            this.notif_fifo_not_empty_trig.configure(this, 1, 2, "W1S", 0, 'h0, 1, 1, 0);
            this.notif_fifo_full_trig = new("notif_fifo_full_trig");
            this.notif_fifo_full_trig.configure(this, 1, 3, "W1S", 0, 'h0, 1, 1, 0);
            this.notif_fifo_not_full_trig = new("notif_fifo_not_full_trig");
            this.notif_fifo_not_full_trig.configure(this, 1, 4, "W1S", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(notif_txn_done_trig_bit_cg[bt]) notif_txn_done_trig_bit_cg[bt] = new();
                foreach(notif_fifo_empty_trig_bit_cg[bt]) notif_fifo_empty_trig_bit_cg[bt] = new();
                foreach(notif_fifo_not_empty_trig_bit_cg[bt]) notif_fifo_not_empty_trig_bit_cg[bt] = new();
                foreach(notif_fifo_full_trig_bit_cg[bt]) notif_fifo_full_trig_bit_cg[bt] = new();
                foreach(notif_fifo_not_full_trig_bit_cg[bt]) notif_fifo_not_full_trig_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : axi_dma_reg__intr_block_t__notif_intr_trig_t

    // Reg - axi_dma_reg::intr_block_t::intr_count_t_cnt_fc5260b0
    class axi_dma_reg__intr_block_t__intr_count_t_cnt_fc5260b0 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        axi_dma_reg__intr_block_t__intr_count_t_cnt_fc5260b0_bit_cg cnt_bit_cg[32];
        axi_dma_reg__intr_block_t__intr_count_t_cnt_fc5260b0_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "axi_dma_reg__intr_block_t__intr_count_t_cnt_fc5260b0");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : axi_dma_reg__intr_block_t__intr_count_t_cnt_fc5260b0

    // Reg - axi_dma_reg::intr_block_t::intr_count_t_cnt_f6d7de6b
    class axi_dma_reg__intr_block_t__intr_count_t_cnt_f6d7de6b extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        axi_dma_reg__intr_block_t__intr_count_t_cnt_f6d7de6b_bit_cg cnt_bit_cg[32];
        axi_dma_reg__intr_block_t__intr_count_t_cnt_f6d7de6b_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "axi_dma_reg__intr_block_t__intr_count_t_cnt_f6d7de6b");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : axi_dma_reg__intr_block_t__intr_count_t_cnt_f6d7de6b

    // Reg - axi_dma_reg::intr_block_t::intr_count_t_cnt_aba31562
    class axi_dma_reg__intr_block_t__intr_count_t_cnt_aba31562 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        axi_dma_reg__intr_block_t__intr_count_t_cnt_aba31562_bit_cg cnt_bit_cg[32];
        axi_dma_reg__intr_block_t__intr_count_t_cnt_aba31562_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "axi_dma_reg__intr_block_t__intr_count_t_cnt_aba31562");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : axi_dma_reg__intr_block_t__intr_count_t_cnt_aba31562

    // Reg - axi_dma_reg::intr_block_t::intr_count_t_cnt_f73463f1
    class axi_dma_reg__intr_block_t__intr_count_t_cnt_f73463f1 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        axi_dma_reg__intr_block_t__intr_count_t_cnt_f73463f1_bit_cg cnt_bit_cg[32];
        axi_dma_reg__intr_block_t__intr_count_t_cnt_f73463f1_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "axi_dma_reg__intr_block_t__intr_count_t_cnt_f73463f1");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : axi_dma_reg__intr_block_t__intr_count_t_cnt_f73463f1

    // Reg - axi_dma_reg::intr_block_t::intr_count_t_cnt_5381f2ed
    class axi_dma_reg__intr_block_t__intr_count_t_cnt_5381f2ed extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        axi_dma_reg__intr_block_t__intr_count_t_cnt_5381f2ed_bit_cg cnt_bit_cg[32];
        axi_dma_reg__intr_block_t__intr_count_t_cnt_5381f2ed_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "axi_dma_reg__intr_block_t__intr_count_t_cnt_5381f2ed");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : axi_dma_reg__intr_block_t__intr_count_t_cnt_5381f2ed

    // Reg - axi_dma_reg::intr_block_t::intr_count_t_cnt_b056182d
    class axi_dma_reg__intr_block_t__intr_count_t_cnt_b056182d extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        axi_dma_reg__intr_block_t__intr_count_t_cnt_b056182d_bit_cg cnt_bit_cg[32];
        axi_dma_reg__intr_block_t__intr_count_t_cnt_b056182d_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "axi_dma_reg__intr_block_t__intr_count_t_cnt_b056182d");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : axi_dma_reg__intr_block_t__intr_count_t_cnt_b056182d

    // Reg - axi_dma_reg::intr_block_t::intr_count_t_cnt_91ebc86d
    class axi_dma_reg__intr_block_t__intr_count_t_cnt_91ebc86d extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        axi_dma_reg__intr_block_t__intr_count_t_cnt_91ebc86d_bit_cg cnt_bit_cg[32];
        axi_dma_reg__intr_block_t__intr_count_t_cnt_91ebc86d_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "axi_dma_reg__intr_block_t__intr_count_t_cnt_91ebc86d");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : axi_dma_reg__intr_block_t__intr_count_t_cnt_91ebc86d

    // Reg - axi_dma_reg::intr_block_t::intr_count_t_cnt_61104c6c
    class axi_dma_reg__intr_block_t__intr_count_t_cnt_61104c6c extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        axi_dma_reg__intr_block_t__intr_count_t_cnt_61104c6c_bit_cg cnt_bit_cg[32];
        axi_dma_reg__intr_block_t__intr_count_t_cnt_61104c6c_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "axi_dma_reg__intr_block_t__intr_count_t_cnt_61104c6c");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : axi_dma_reg__intr_block_t__intr_count_t_cnt_61104c6c

    // Reg - axi_dma_reg::intr_block_t::intr_count_t_cnt_9b030582
    class axi_dma_reg__intr_block_t__intr_count_t_cnt_9b030582 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        axi_dma_reg__intr_block_t__intr_count_t_cnt_9b030582_bit_cg cnt_bit_cg[32];
        axi_dma_reg__intr_block_t__intr_count_t_cnt_9b030582_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "axi_dma_reg__intr_block_t__intr_count_t_cnt_9b030582");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : axi_dma_reg__intr_block_t__intr_count_t_cnt_9b030582

    // Reg - axi_dma_reg::intr_block_t::intr_count_t_cnt_3709cb5b
    class axi_dma_reg__intr_block_t__intr_count_t_cnt_3709cb5b extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        axi_dma_reg__intr_block_t__intr_count_t_cnt_3709cb5b_bit_cg cnt_bit_cg[32];
        axi_dma_reg__intr_block_t__intr_count_t_cnt_3709cb5b_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "axi_dma_reg__intr_block_t__intr_count_t_cnt_3709cb5b");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : axi_dma_reg__intr_block_t__intr_count_t_cnt_3709cb5b

    // Reg - axi_dma_reg::intr_block_t::intr_count_t_cnt_e250b023
    class axi_dma_reg__intr_block_t__intr_count_t_cnt_e250b023 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        axi_dma_reg__intr_block_t__intr_count_t_cnt_e250b023_bit_cg cnt_bit_cg[32];
        axi_dma_reg__intr_block_t__intr_count_t_cnt_e250b023_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "axi_dma_reg__intr_block_t__intr_count_t_cnt_e250b023");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : axi_dma_reg__intr_block_t__intr_count_t_cnt_e250b023

    // Reg - axi_dma_reg::intr_block_t::intr_count_t_cnt_fed3ae2d
    class axi_dma_reg__intr_block_t__intr_count_t_cnt_fed3ae2d extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        axi_dma_reg__intr_block_t__intr_count_t_cnt_fed3ae2d_bit_cg cnt_bit_cg[32];
        axi_dma_reg__intr_block_t__intr_count_t_cnt_fed3ae2d_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "axi_dma_reg__intr_block_t__intr_count_t_cnt_fed3ae2d");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : axi_dma_reg__intr_block_t__intr_count_t_cnt_fed3ae2d

    // Reg - axi_dma_reg::intr_block_t::intr_count_incr_t_pulse_08678f4e
    class axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_08678f4e extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_08678f4e_bit_cg pulse_bit_cg[1];
        axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_08678f4e_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_08678f4e");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_08678f4e

    // Reg - axi_dma_reg::intr_block_t::intr_count_incr_t_pulse_e1020031
    class axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_e1020031 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_e1020031_bit_cg pulse_bit_cg[1];
        axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_e1020031_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_e1020031");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_e1020031

    // Reg - axi_dma_reg::intr_block_t::intr_count_incr_t_pulse_cfe70385
    class axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_cfe70385 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_cfe70385_bit_cg pulse_bit_cg[1];
        axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_cfe70385_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_cfe70385");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_cfe70385

    // Reg - axi_dma_reg::intr_block_t::intr_count_incr_t_pulse_9a8b3fa0
    class axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_9a8b3fa0 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_9a8b3fa0_bit_cg pulse_bit_cg[1];
        axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_9a8b3fa0_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_9a8b3fa0");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_9a8b3fa0

    // Reg - axi_dma_reg::intr_block_t::intr_count_incr_t_pulse_f530dcc5
    class axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_f530dcc5 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_f530dcc5_bit_cg pulse_bit_cg[1];
        axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_f530dcc5_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_f530dcc5");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_f530dcc5

    // Reg - axi_dma_reg::intr_block_t::intr_count_incr_t_pulse_60d6f4e7
    class axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_60d6f4e7 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_60d6f4e7_bit_cg pulse_bit_cg[1];
        axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_60d6f4e7_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_60d6f4e7");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_60d6f4e7

    // Reg - axi_dma_reg::intr_block_t::intr_count_incr_t_pulse_6907af43
    class axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_6907af43 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_6907af43_bit_cg pulse_bit_cg[1];
        axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_6907af43_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_6907af43");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_6907af43

    // Reg - axi_dma_reg::intr_block_t::intr_count_incr_t_pulse_f1bdde05
    class axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_f1bdde05 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_f1bdde05_bit_cg pulse_bit_cg[1];
        axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_f1bdde05_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_f1bdde05");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_f1bdde05

    // Reg - axi_dma_reg::intr_block_t::intr_count_incr_t_pulse_236c6006
    class axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_236c6006 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_236c6006_bit_cg pulse_bit_cg[1];
        axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_236c6006_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_236c6006");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_236c6006

    // Reg - axi_dma_reg::intr_block_t::intr_count_incr_t_pulse_e5e89525
    class axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_e5e89525 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_e5e89525_bit_cg pulse_bit_cg[1];
        axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_e5e89525_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_e5e89525");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_e5e89525

    // Reg - axi_dma_reg::intr_block_t::intr_count_incr_t_pulse_bfb3930b
    class axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_bfb3930b extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_bfb3930b_bit_cg pulse_bit_cg[1];
        axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_bfb3930b_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_bfb3930b");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_bfb3930b

    // Reg - axi_dma_reg::intr_block_t::intr_count_incr_t_pulse_2aa328ea
    class axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_2aa328ea extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_2aa328ea_bit_cg pulse_bit_cg[1];
        axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_2aa328ea_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_2aa328ea");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_2aa328ea

    // Regfile - axi_dma_reg::intr_block_t
    class axi_dma_reg__intr_block_t extends uvm_reg_block;
        rand axi_dma_reg__intr_block_t__global_intr_en_t global_intr_en_r;
        rand axi_dma_reg__intr_block_t__error_intr_en_t error_intr_en_r;
        rand axi_dma_reg__intr_block_t__notif_intr_en_t notif_intr_en_r;
        rand axi_dma_reg__intr_block_t__global_intr_t_agg_sts_dd3dcf0a error_global_intr_r;
        rand axi_dma_reg__intr_block_t__global_intr_t_agg_sts_e6399b4a notif_global_intr_r;
        rand axi_dma_reg__intr_block_t__error_intr_t_error_axi_rd_sts_927e49cd_error_axi_wr_sts_f84e5c07_error_cmd_dec_sts_46039d92_error_fifo_oflow_sts_71b29a77_error_fifo_uflow_sts_119d122a_error_mbox_lock_sts_9e18c395_error_sha_lock_sts_4c7993a0 error_internal_intr_r;
        rand axi_dma_reg__intr_block_t__notif_intr_t_notif_fifo_empty_sts_d87d1786_notif_fifo_full_sts_64c66862_notif_fifo_not_empty_sts_1a0e2460_notif_fifo_not_full_sts_0266fe07_notif_txn_done_sts_0ee2f120 notif_internal_intr_r;
        rand axi_dma_reg__intr_block_t__error_intr_trig_t error_intr_trig_r;
        rand axi_dma_reg__intr_block_t__notif_intr_trig_t notif_intr_trig_r;
        rand axi_dma_reg__intr_block_t__intr_count_t_cnt_fc5260b0 error_cmd_dec_intr_count_r;
        rand axi_dma_reg__intr_block_t__intr_count_t_cnt_f6d7de6b error_axi_rd_intr_count_r;
        rand axi_dma_reg__intr_block_t__intr_count_t_cnt_aba31562 error_axi_wr_intr_count_r;
        rand axi_dma_reg__intr_block_t__intr_count_t_cnt_f73463f1 error_mbox_lock_intr_count_r;
        rand axi_dma_reg__intr_block_t__intr_count_t_cnt_5381f2ed error_sha_lock_intr_count_r;
        rand axi_dma_reg__intr_block_t__intr_count_t_cnt_b056182d error_fifo_oflow_intr_count_r;
        rand axi_dma_reg__intr_block_t__intr_count_t_cnt_91ebc86d error_fifo_uflow_intr_count_r;
        rand axi_dma_reg__intr_block_t__intr_count_t_cnt_61104c6c notif_txn_done_intr_count_r;
        rand axi_dma_reg__intr_block_t__intr_count_t_cnt_9b030582 notif_fifo_empty_intr_count_r;
        rand axi_dma_reg__intr_block_t__intr_count_t_cnt_3709cb5b notif_fifo_not_empty_intr_count_r;
        rand axi_dma_reg__intr_block_t__intr_count_t_cnt_e250b023 notif_fifo_full_intr_count_r;
        rand axi_dma_reg__intr_block_t__intr_count_t_cnt_fed3ae2d notif_fifo_not_full_intr_count_r;
        rand axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_08678f4e error_cmd_dec_intr_count_incr_r;
        rand axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_e1020031 error_axi_rd_intr_count_incr_r;
        rand axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_cfe70385 error_axi_wr_intr_count_incr_r;
        rand axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_9a8b3fa0 error_mbox_lock_intr_count_incr_r;
        rand axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_f530dcc5 error_sha_lock_intr_count_incr_r;
        rand axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_60d6f4e7 error_fifo_oflow_intr_count_incr_r;
        rand axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_6907af43 error_fifo_uflow_intr_count_incr_r;
        rand axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_f1bdde05 notif_txn_done_intr_count_incr_r;
        rand axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_236c6006 notif_fifo_empty_intr_count_incr_r;
        rand axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_e5e89525 notif_fifo_not_empty_intr_count_incr_r;
        rand axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_bfb3930b notif_fifo_full_intr_count_incr_r;
        rand axi_dma_reg__intr_block_t__intr_count_incr_t_pulse_2aa328ea notif_fifo_not_full_intr_count_incr_r;

        function new(string name = "axi_dma_reg__intr_block_t");
            super.new(name);
        endfunction : new

        virtual function void build();
            this.default_map = create_map("reg_map", 0, 4, UVM_LITTLE_ENDIAN);
            this.global_intr_en_r = new("global_intr_en_r");
            this.global_intr_en_r.configure(this);

            this.global_intr_en_r.build();
            this.default_map.add_reg(this.global_intr_en_r, 'h0);
            this.error_intr_en_r = new("error_intr_en_r");
            this.error_intr_en_r.configure(this);

            this.error_intr_en_r.build();
            this.default_map.add_reg(this.error_intr_en_r, 'h4);
            this.notif_intr_en_r = new("notif_intr_en_r");
            this.notif_intr_en_r.configure(this);

            this.notif_intr_en_r.build();
            this.default_map.add_reg(this.notif_intr_en_r, 'h8);
            this.error_global_intr_r = new("error_global_intr_r");
            this.error_global_intr_r.configure(this);

            this.error_global_intr_r.build();
            this.default_map.add_reg(this.error_global_intr_r, 'hc);
            this.notif_global_intr_r = new("notif_global_intr_r");
            this.notif_global_intr_r.configure(this);

            this.notif_global_intr_r.build();
            this.default_map.add_reg(this.notif_global_intr_r, 'h10);
            this.error_internal_intr_r = new("error_internal_intr_r");
            this.error_internal_intr_r.configure(this);

            this.error_internal_intr_r.build();
            this.default_map.add_reg(this.error_internal_intr_r, 'h14);
            this.notif_internal_intr_r = new("notif_internal_intr_r");
            this.notif_internal_intr_r.configure(this);

            this.notif_internal_intr_r.build();
            this.default_map.add_reg(this.notif_internal_intr_r, 'h18);
            this.error_intr_trig_r = new("error_intr_trig_r");
            this.error_intr_trig_r.configure(this);

            this.error_intr_trig_r.build();
            this.default_map.add_reg(this.error_intr_trig_r, 'h1c);
            this.notif_intr_trig_r = new("notif_intr_trig_r");
            this.notif_intr_trig_r.configure(this);

            this.notif_intr_trig_r.build();
            this.default_map.add_reg(this.notif_intr_trig_r, 'h20);
            this.error_cmd_dec_intr_count_r = new("error_cmd_dec_intr_count_r");
            this.error_cmd_dec_intr_count_r.configure(this);

            this.error_cmd_dec_intr_count_r.build();
            this.default_map.add_reg(this.error_cmd_dec_intr_count_r, 'h100);
            this.error_axi_rd_intr_count_r = new("error_axi_rd_intr_count_r");
            this.error_axi_rd_intr_count_r.configure(this);

            this.error_axi_rd_intr_count_r.build();
            this.default_map.add_reg(this.error_axi_rd_intr_count_r, 'h104);
            this.error_axi_wr_intr_count_r = new("error_axi_wr_intr_count_r");
            this.error_axi_wr_intr_count_r.configure(this);

            this.error_axi_wr_intr_count_r.build();
            this.default_map.add_reg(this.error_axi_wr_intr_count_r, 'h108);
            this.error_mbox_lock_intr_count_r = new("error_mbox_lock_intr_count_r");
            this.error_mbox_lock_intr_count_r.configure(this);

            this.error_mbox_lock_intr_count_r.build();
            this.default_map.add_reg(this.error_mbox_lock_intr_count_r, 'h10c);
            this.error_sha_lock_intr_count_r = new("error_sha_lock_intr_count_r");
            this.error_sha_lock_intr_count_r.configure(this);

            this.error_sha_lock_intr_count_r.build();
            this.default_map.add_reg(this.error_sha_lock_intr_count_r, 'h110);
            this.error_fifo_oflow_intr_count_r = new("error_fifo_oflow_intr_count_r");
            this.error_fifo_oflow_intr_count_r.configure(this);

            this.error_fifo_oflow_intr_count_r.build();
            this.default_map.add_reg(this.error_fifo_oflow_intr_count_r, 'h114);
            this.error_fifo_uflow_intr_count_r = new("error_fifo_uflow_intr_count_r");
            this.error_fifo_uflow_intr_count_r.configure(this);

            this.error_fifo_uflow_intr_count_r.build();
            this.default_map.add_reg(this.error_fifo_uflow_intr_count_r, 'h118);
            this.notif_txn_done_intr_count_r = new("notif_txn_done_intr_count_r");
            this.notif_txn_done_intr_count_r.configure(this);

            this.notif_txn_done_intr_count_r.build();
            this.default_map.add_reg(this.notif_txn_done_intr_count_r, 'h180);
            this.notif_fifo_empty_intr_count_r = new("notif_fifo_empty_intr_count_r");
            this.notif_fifo_empty_intr_count_r.configure(this);

            this.notif_fifo_empty_intr_count_r.build();
            this.default_map.add_reg(this.notif_fifo_empty_intr_count_r, 'h184);
            this.notif_fifo_not_empty_intr_count_r = new("notif_fifo_not_empty_intr_count_r");
            this.notif_fifo_not_empty_intr_count_r.configure(this);

            this.notif_fifo_not_empty_intr_count_r.build();
            this.default_map.add_reg(this.notif_fifo_not_empty_intr_count_r, 'h188);
            this.notif_fifo_full_intr_count_r = new("notif_fifo_full_intr_count_r");
            this.notif_fifo_full_intr_count_r.configure(this);

            this.notif_fifo_full_intr_count_r.build();
            this.default_map.add_reg(this.notif_fifo_full_intr_count_r, 'h18c);
            this.notif_fifo_not_full_intr_count_r = new("notif_fifo_not_full_intr_count_r");
            this.notif_fifo_not_full_intr_count_r.configure(this);

            this.notif_fifo_not_full_intr_count_r.build();
            this.default_map.add_reg(this.notif_fifo_not_full_intr_count_r, 'h190);
            this.error_cmd_dec_intr_count_incr_r = new("error_cmd_dec_intr_count_incr_r");
            this.error_cmd_dec_intr_count_incr_r.configure(this);

            this.error_cmd_dec_intr_count_incr_r.build();
            this.default_map.add_reg(this.error_cmd_dec_intr_count_incr_r, 'h200);
            this.error_axi_rd_intr_count_incr_r = new("error_axi_rd_intr_count_incr_r");
            this.error_axi_rd_intr_count_incr_r.configure(this);

            this.error_axi_rd_intr_count_incr_r.build();
            this.default_map.add_reg(this.error_axi_rd_intr_count_incr_r, 'h204);
            this.error_axi_wr_intr_count_incr_r = new("error_axi_wr_intr_count_incr_r");
            this.error_axi_wr_intr_count_incr_r.configure(this);

            this.error_axi_wr_intr_count_incr_r.build();
            this.default_map.add_reg(this.error_axi_wr_intr_count_incr_r, 'h208);
            this.error_mbox_lock_intr_count_incr_r = new("error_mbox_lock_intr_count_incr_r");
            this.error_mbox_lock_intr_count_incr_r.configure(this);

            this.error_mbox_lock_intr_count_incr_r.build();
            this.default_map.add_reg(this.error_mbox_lock_intr_count_incr_r, 'h20c);
            this.error_sha_lock_intr_count_incr_r = new("error_sha_lock_intr_count_incr_r");
            this.error_sha_lock_intr_count_incr_r.configure(this);

            this.error_sha_lock_intr_count_incr_r.build();
            this.default_map.add_reg(this.error_sha_lock_intr_count_incr_r, 'h210);
            this.error_fifo_oflow_intr_count_incr_r = new("error_fifo_oflow_intr_count_incr_r");
            this.error_fifo_oflow_intr_count_incr_r.configure(this);

            this.error_fifo_oflow_intr_count_incr_r.build();
            this.default_map.add_reg(this.error_fifo_oflow_intr_count_incr_r, 'h214);
            this.error_fifo_uflow_intr_count_incr_r = new("error_fifo_uflow_intr_count_incr_r");
            this.error_fifo_uflow_intr_count_incr_r.configure(this);

            this.error_fifo_uflow_intr_count_incr_r.build();
            this.default_map.add_reg(this.error_fifo_uflow_intr_count_incr_r, 'h218);
            this.notif_txn_done_intr_count_incr_r = new("notif_txn_done_intr_count_incr_r");
            this.notif_txn_done_intr_count_incr_r.configure(this);

            this.notif_txn_done_intr_count_incr_r.build();
            this.default_map.add_reg(this.notif_txn_done_intr_count_incr_r, 'h21c);
            this.notif_fifo_empty_intr_count_incr_r = new("notif_fifo_empty_intr_count_incr_r");
            this.notif_fifo_empty_intr_count_incr_r.configure(this);

            this.notif_fifo_empty_intr_count_incr_r.build();
            this.default_map.add_reg(this.notif_fifo_empty_intr_count_incr_r, 'h220);
            this.notif_fifo_not_empty_intr_count_incr_r = new("notif_fifo_not_empty_intr_count_incr_r");
            this.notif_fifo_not_empty_intr_count_incr_r.configure(this);

            this.notif_fifo_not_empty_intr_count_incr_r.build();
            this.default_map.add_reg(this.notif_fifo_not_empty_intr_count_incr_r, 'h224);
            this.notif_fifo_full_intr_count_incr_r = new("notif_fifo_full_intr_count_incr_r");
            this.notif_fifo_full_intr_count_incr_r.configure(this);

            this.notif_fifo_full_intr_count_incr_r.build();
            this.default_map.add_reg(this.notif_fifo_full_intr_count_incr_r, 'h228);
            this.notif_fifo_not_full_intr_count_incr_r = new("notif_fifo_not_full_intr_count_incr_r");
            this.notif_fifo_not_full_intr_count_incr_r.configure(this);

            this.notif_fifo_not_full_intr_count_incr_r.build();
            this.default_map.add_reg(this.notif_fifo_not_full_intr_count_incr_r, 'h22c);
        endfunction : build
    endclass : axi_dma_reg__intr_block_t

    // Addrmap - axi_dma_reg
    class axi_dma_reg extends uvm_reg_block;
        rand axi_dma_reg__id id;
        rand axi_dma_reg__cap cap;
        rand axi_dma_reg__ctrl ctrl;
        rand axi_dma_reg__status0 status0;
        rand axi_dma_reg__status1 status1;
        rand axi_dma_reg__src_addr_l src_addr_l;
        rand axi_dma_reg__src_addr_h src_addr_h;
        rand axi_dma_reg__dst_addr_l dst_addr_l;
        rand axi_dma_reg__dst_addr_h dst_addr_h;
        rand axi_dma_reg__byte_count byte_count;
        rand axi_dma_reg__block_size block_size;
        rand axi_dma_reg__write_data write_data;
        rand axi_dma_reg__read_data read_data;
        rand axi_dma_reg__intr_block_t intr_block_rf;

        function new(string name = "axi_dma_reg");
            super.new(name);
        endfunction : new

        virtual function void build();
            this.default_map = create_map("reg_map", 0, 4, UVM_LITTLE_ENDIAN);
            this.id = new("id");
            this.id.configure(this);

            this.id.build();
            this.default_map.add_reg(this.id, 'h0);
            this.cap = new("cap");
            this.cap.configure(this);

            this.cap.build();
            this.default_map.add_reg(this.cap, 'h4);
            this.ctrl = new("ctrl");
            this.ctrl.configure(this);

            this.ctrl.build();
            this.default_map.add_reg(this.ctrl, 'h8);
            this.status0 = new("status0");
            this.status0.configure(this);

            this.status0.build();
            this.default_map.add_reg(this.status0, 'hc);
            this.status1 = new("status1");
            this.status1.configure(this);

            this.status1.build();
            this.default_map.add_reg(this.status1, 'h10);
            this.src_addr_l = new("src_addr_l");
            this.src_addr_l.configure(this);

            this.src_addr_l.build();
            this.default_map.add_reg(this.src_addr_l, 'h14);
            this.src_addr_h = new("src_addr_h");
            this.src_addr_h.configure(this);

            this.src_addr_h.build();
            this.default_map.add_reg(this.src_addr_h, 'h18);
            this.dst_addr_l = new("dst_addr_l");
            this.dst_addr_l.configure(this);

            this.dst_addr_l.build();
            this.default_map.add_reg(this.dst_addr_l, 'h1c);
            this.dst_addr_h = new("dst_addr_h");
            this.dst_addr_h.configure(this);

            this.dst_addr_h.build();
            this.default_map.add_reg(this.dst_addr_h, 'h20);
            this.byte_count = new("byte_count");
            this.byte_count.configure(this);

            this.byte_count.build();
            this.default_map.add_reg(this.byte_count, 'h24);
            this.block_size = new("block_size");
            this.block_size.configure(this);

            this.block_size.build();
            this.default_map.add_reg(this.block_size, 'h28);
            this.write_data = new("write_data");
            this.write_data.configure(this);

            this.write_data.build();
            this.default_map.add_reg(this.write_data, 'h2c);
            this.read_data = new("read_data");
            this.read_data.configure(this);

            this.read_data.build();
            this.default_map.add_reg(this.read_data, 'h30);
            this.intr_block_rf = new("intr_block_rf");
            this.intr_block_rf.configure(this);
            this.intr_block_rf.build();
            this.default_map.add_submap(this.intr_block_rf.default_map, 'h800);
        endfunction : build
    endclass : axi_dma_reg

    `include "axi_dma_reg_sample.svh"
endpackage: axi_dma_reg_uvm
