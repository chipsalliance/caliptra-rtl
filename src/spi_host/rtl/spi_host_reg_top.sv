// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`

`include "caliptra_prim_assert.sv"

module spi_host_reg_top #(
    parameter AHBDataWidth = 64,
    parameter AHBAddrWidth = 32
) (
  input clk_i,
  input rst_ni,

  // AMBA AHB Lite Interface
  input logic [AHBAddrWidth-1:0]  haddr_i,
  input logic [AHBDataWidth-1:0]  hwdata_i,
  input logic                     hsel_i,
  input logic                     hwrite_i,
  input logic                     hready_i,
  input logic [1:0]               htrans_i,
  input logic [2:0]               hsize_i,

  output logic                    hresp_o,
  output logic                    hreadyout_o,
  output logic [AHBDataWidth-1:0] hrdata_o,

  output logic                    fifo_rx_re,

  // To HW
  output spi_host_reg_pkg::spi_host_reg2hw_t reg2hw, // Write
  input  spi_host_reg_pkg::spi_host_hw2reg_t hw2reg, // Read

  // Integrity check errors
  output logic intg_err_o,

  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import spi_host_reg_pkg::*;

  localparam int AW = 6;
  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // ahb interface register signals
  logic           ahb_reg_dv;
  logic           ahb_reg_hld;
  logic           ahb_reg_err;
  logic           ahb_reg_write;
  logic [DW-1:0]  ahb_reg_wdata;
  logic [AW-1:0]  ahb_reg_addr;
  logic [DW-1:0]  ahb_reg_rdata;
  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;
  logic reg_busy;

  // also check for spurious write enables
  logic reg_we_err;
  logic [14:0] reg_we_check;
  caliptra_prim_reg_we_check #(
    .OneHotWidth(15)
  ) u_caliptra_prim_reg_we_check (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .oh_i  (reg_we_check),
    .en_i  (reg_we && !addrmiss),
    .err_o (reg_we_err)
  );

  logic err_q;
  always_ff @(posedge clk_i or negedge rst_ni) begin
    if (!rst_ni) begin
      err_q <= '0;
    end else if (reg_we_err) begin
      err_q <= 1'b1;
    end
  end

  // integrity error output is permanent and should be used for alert generation
  // register errors are transactional
  assign intg_err_o = err_q | reg_we_err;

  ahb_slv_sif #(
    .AHB_DATA_WIDTH    (AHBDataWidth),
    .AHB_ADDR_WIDTH    (AHBAddrWidth),
    .CLIENT_DATA_WIDTH (DW),
    .CLIENT_ADDR_WIDTH (AW)
  ) u_ahb_slv_sif (
    .hclk        (clk_i),
    .hreset_n    (rst_ni),
    .haddr_i     (haddr_i),
    .hwdata_i    (hwdata_i),
    .hsel_i      (hsel_i),
    .hwrite_i    (hwrite_i),
    .hready_i    (hready_i),
    .htrans_i    (htrans_i),
    .hsize_i     (hsize_i),
    .hresp_o     (hresp_o),
    .hreadyout_o (hreadyout_o),
    .hrdata_o    (hrdata_o),
    //component inf
    .dv          (ahb_reg_dv),
    .hld         (ahb_reg_hld),
    .err         (ahb_reg_err),
    .write       (ahb_reg_write),
    .wdata       (ahb_reg_wdata),
    .addr        (ahb_reg_addr),
    .rdata       (ahb_reg_rdata)
  );

  ahb_to_reg_adapter #(
    .DATA_WIDTH (DW),
    .ADDR_WIDTH (AW)
  ) u_ahb_to_reg_adapter (
    .clk           (clk_i),
    .rst_n         (rst_ni),
    .ahb_reg_dv    (ahb_reg_dv),
    .ahb_reg_hld   (ahb_reg_hld),
    .ahb_reg_err   (ahb_reg_err),
    .ahb_reg_write (ahb_reg_write),
    .ahb_reg_wdata (ahb_reg_wdata),
    .ahb_reg_addr  (ahb_reg_addr),
    .ahb_reg_rdata (ahb_reg_rdata),
    .reg_we        (reg_we),
    .reg_re        (reg_re),
    .reg_addr      (reg_addr),
    .reg_wdata     (reg_wdata),
    .reg_be        (reg_be),
    .reg_rdata     (reg_rdata),
    .reg_error     (reg_error),
    .reg_busy      (reg_busy)
  );

  // cdc oversampling signals

  assign reg_rdata = reg_rdata_next;
  assign reg_error = (devmode_i & addrmiss) | wr_err;

  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic intr_state_we;
  logic intr_state_error_qs;
  logic intr_state_error_wd;
  logic intr_state_spi_event_qs;
  logic intr_state_spi_event_wd;
  logic intr_enable_we;
  logic intr_enable_error_qs;
  logic intr_enable_error_wd;
  logic intr_enable_spi_event_qs;
  logic intr_enable_spi_event_wd;
  logic intr_test_we;
  logic intr_test_error_wd;
  logic intr_test_spi_event_wd;
  logic alert_test_we;
  logic alert_test_wd;
  logic control_we;
  logic [7:0] control_rx_watermark_qs;
  logic [7:0] control_rx_watermark_wd;
  logic [7:0] control_tx_watermark_qs;
  logic [7:0] control_tx_watermark_wd;
  logic control_output_en_qs;
  logic control_output_en_wd;
  logic control_sw_rst_qs;
  logic control_sw_rst_wd;
  logic control_spien_qs;
  logic control_spien_wd;
  logic [7:0] status_txqd_qs;
  logic [7:0] status_rxqd_qs;
  logic [3:0] status_cmdqd_qs;
  logic status_rxwm_qs;
  logic status_byteorder_qs;
  logic status_rxstall_qs;
  logic status_rxempty_qs;
  logic status_rxfull_qs;
  logic status_txwm_qs;
  logic status_txstall_qs;
  logic status_txempty_qs;
  logic status_txfull_qs;
  logic status_active_qs;
  logic status_ready_qs;
  logic configopts_0_we;
  logic [15:0] configopts_0_clkdiv_0_qs;
  logic [15:0] configopts_0_clkdiv_0_wd;
  logic [3:0] configopts_0_csnidle_0_qs;
  logic [3:0] configopts_0_csnidle_0_wd;
  logic [3:0] configopts_0_csntrail_0_qs;
  logic [3:0] configopts_0_csntrail_0_wd;
  logic [3:0] configopts_0_csnlead_0_qs;
  logic [3:0] configopts_0_csnlead_0_wd;
  logic configopts_0_fullcyc_0_qs;
  logic configopts_0_fullcyc_0_wd;
  logic configopts_0_cpha_0_qs;
  logic configopts_0_cpha_0_wd;
  logic configopts_0_cpol_0_qs;
  logic configopts_0_cpol_0_wd;
  logic configopts_1_we;
  logic [15:0] configopts_1_clkdiv_1_qs;
  logic [15:0] configopts_1_clkdiv_1_wd;
  logic [3:0] configopts_1_csnidle_1_qs;
  logic [3:0] configopts_1_csnidle_1_wd;
  logic [3:0] configopts_1_csntrail_1_qs;
  logic [3:0] configopts_1_csntrail_1_wd;
  logic [3:0] configopts_1_csnlead_1_qs;
  logic [3:0] configopts_1_csnlead_1_wd;
  logic configopts_1_fullcyc_1_qs;
  logic configopts_1_fullcyc_1_wd;
  logic configopts_1_cpha_1_qs;
  logic configopts_1_cpha_1_wd;
  logic configopts_1_cpol_1_qs;
  logic configopts_1_cpol_1_wd;
  logic csid_we;
  logic [31:0] csid_qs;
  logic [31:0] csid_wd;
  logic command_we;
  logic [8:0] command_len_wd;
  logic command_csaat_wd;
  logic [1:0] command_speed_wd;
  logic [1:0] command_direction_wd;
  logic [31:0] rxdata_qs;
  logic rxdata_re;
  logic txdata_we;
  logic [31:0] txdata_wd;
  logic error_enable_we;
  logic error_enable_cmdbusy_qs;
  logic error_enable_cmdbusy_wd;
  logic error_enable_overflow_qs;
  logic error_enable_overflow_wd;
  logic error_enable_underflow_qs;
  logic error_enable_underflow_wd;
  logic error_enable_cmdinval_qs;
  logic error_enable_cmdinval_wd;
  logic error_enable_csidinval_qs;
  logic error_enable_csidinval_wd;
  logic error_status_we;
  logic error_status_cmdbusy_qs;
  logic error_status_cmdbusy_wd;
  logic error_status_overflow_qs;
  logic error_status_overflow_wd;
  logic error_status_underflow_qs;
  logic error_status_underflow_wd;
  logic error_status_cmdinval_qs;
  logic error_status_cmdinval_wd;
  logic error_status_csidinval_qs;
  logic error_status_csidinval_wd;
  logic error_status_accessinval_qs;
  logic error_status_accessinval_wd;
  logic event_enable_we;
  logic event_enable_rxfull_qs;
  logic event_enable_rxfull_wd;
  logic event_enable_txempty_qs;
  logic event_enable_txempty_wd;
  logic event_enable_rxwm_qs;
  logic event_enable_rxwm_wd;
  logic event_enable_txwm_qs;
  logic event_enable_txwm_wd;
  logic event_enable_ready_qs;
  logic event_enable_ready_wd;
  logic event_enable_idle_qs;
  logic event_enable_idle_wd;

  // Register instances
  // R[intr_state]: V(False)
  //   F[error]: 0:0
  caliptra_prim_subreg #(
    .DW      (1),
    .SwAccess(caliptra_prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_intr_state_error (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_state_we),
    .wd     (intr_state_error_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.error.de),
    .d      (hw2reg.intr_state.error.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.error.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_state_error_qs)
  );

  //   F[spi_event]: 1:1
  caliptra_prim_subreg #(
    .DW      (1),
    .SwAccess(caliptra_prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_intr_state_spi_event (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_state_we),
    .wd     (intr_state_spi_event_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.spi_event.de),
    .d      (hw2reg.intr_state.spi_event.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.spi_event.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_state_spi_event_qs)
  );


  // R[intr_enable]: V(False)
  //   F[error]: 0:0
  caliptra_prim_subreg #(
    .DW      (1),
    .SwAccess(caliptra_prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_intr_enable_error (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_enable_we),
    .wd     (intr_enable_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.error.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_enable_error_qs)
  );

  //   F[spi_event]: 1:1
  caliptra_prim_subreg #(
    .DW      (1),
    .SwAccess(caliptra_prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_intr_enable_spi_event (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_enable_we),
    .wd     (intr_enable_spi_event_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.spi_event.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_enable_spi_event_qs)
  );


  // R[intr_test]: V(True)
  logic intr_test_qe;
  logic [1:0] intr_test_flds_we;
  assign intr_test_qe = &intr_test_flds_we;
  //   F[error]: 0:0
  caliptra_prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_error (
    .re     (1'b0),
    .we     (intr_test_we),
    .wd     (intr_test_error_wd),
    .d      ('0),
    .qre    (),
    .qe     (intr_test_flds_we[0]),
    .q      (reg2hw.intr_test.error.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.intr_test.error.qe = intr_test_qe;

  //   F[spi_event]: 1:1
  caliptra_prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_spi_event (
    .re     (1'b0),
    .we     (intr_test_we),
    .wd     (intr_test_spi_event_wd),
    .d      ('0),
    .qre    (),
    .qe     (intr_test_flds_we[1]),
    .q      (reg2hw.intr_test.spi_event.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.intr_test.spi_event.qe = intr_test_qe;


  // R[alert_test]: V(True)
  logic alert_test_qe;
  logic [0:0] alert_test_flds_we;
  assign alert_test_qe = &alert_test_flds_we;
  caliptra_prim_subreg_ext #(
    .DW    (1)
  ) u_alert_test (
    .re     (1'b0),
    .we     (alert_test_we),
    .wd     (alert_test_wd),
    .d      ('0),
    .qre    (),
    .qe     (alert_test_flds_we[0]),
    .q      (reg2hw.alert_test.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.alert_test.qe = alert_test_qe;


  // R[control]: V(False)
  //   F[rx_watermark]: 7:0
  caliptra_prim_subreg #(
    .DW      (8),
    .SwAccess(caliptra_prim_subreg_pkg::SwAccessRW),
    .RESVAL  (8'h7f)
  ) u_control_rx_watermark (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (control_we),
    .wd     (control_rx_watermark_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.control.rx_watermark.q),
    .ds     (),

    // to register interface (read)
    .qs     (control_rx_watermark_qs)
  );

  //   F[tx_watermark]: 15:8
  caliptra_prim_subreg #(
    .DW      (8),
    .SwAccess(caliptra_prim_subreg_pkg::SwAccessRW),
    .RESVAL  (8'h0)
  ) u_control_tx_watermark (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (control_we),
    .wd     (control_tx_watermark_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.control.tx_watermark.q),
    .ds     (),

    // to register interface (read)
    .qs     (control_tx_watermark_qs)
  );

  //   F[output_en]: 29:29
  caliptra_prim_subreg #(
    .DW      (1),
    .SwAccess(caliptra_prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_control_output_en (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (control_we),
    .wd     (control_output_en_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.control.output_en.q),
    .ds     (),

    // to register interface (read)
    .qs     (control_output_en_qs)
  );

  //   F[sw_rst]: 30:30
  caliptra_prim_subreg #(
    .DW      (1),
    .SwAccess(caliptra_prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_control_sw_rst (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (control_we),
    .wd     (control_sw_rst_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.control.sw_rst.q),
    .ds     (),

    // to register interface (read)
    .qs     (control_sw_rst_qs)
  );

  //   F[spien]: 31:31
  caliptra_prim_subreg #(
    .DW      (1),
    .SwAccess(caliptra_prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_control_spien (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (control_we),
    .wd     (control_spien_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.control.spien.q),
    .ds     (),

    // to register interface (read)
    .qs     (control_spien_qs)
  );


  // R[status]: V(False)
  //   F[txqd]: 7:0
  caliptra_prim_subreg #(
    .DW      (8),
    .SwAccess(caliptra_prim_subreg_pkg::SwAccessRO),
    .RESVAL  (8'h0)
  ) u_status_txqd (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.status.txqd.de),
    .d      (hw2reg.status.txqd.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (status_txqd_qs)
  );

  //   F[rxqd]: 15:8
  caliptra_prim_subreg #(
    .DW      (8),
    .SwAccess(caliptra_prim_subreg_pkg::SwAccessRO),
    .RESVAL  (8'h0)
  ) u_status_rxqd (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.status.rxqd.de),
    .d      (hw2reg.status.rxqd.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (status_rxqd_qs)
  );

  //   F[cmdqd]: 19:16
  caliptra_prim_subreg #(
    .DW      (4),
    .SwAccess(caliptra_prim_subreg_pkg::SwAccessRO),
    .RESVAL  (4'h0)
  ) u_status_cmdqd (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.status.cmdqd.de),
    .d      (hw2reg.status.cmdqd.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (status_cmdqd_qs)
  );

  //   F[rxwm]: 20:20
  caliptra_prim_subreg #(
    .DW      (1),
    .SwAccess(caliptra_prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0)
  ) u_status_rxwm (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.status.rxwm.de),
    .d      (hw2reg.status.rxwm.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (status_rxwm_qs)
  );

  //   F[byteorder]: 22:22
  caliptra_prim_subreg #(
    .DW      (1),
    .SwAccess(caliptra_prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0)
  ) u_status_byteorder (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.status.byteorder.de),
    .d      (hw2reg.status.byteorder.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (status_byteorder_qs)
  );

  //   F[rxstall]: 23:23
  caliptra_prim_subreg #(
    .DW      (1),
    .SwAccess(caliptra_prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0)
  ) u_status_rxstall (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.status.rxstall.de),
    .d      (hw2reg.status.rxstall.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (status_rxstall_qs)
  );

  //   F[rxempty]: 24:24
  caliptra_prim_subreg #(
    .DW      (1),
    .SwAccess(caliptra_prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0)
  ) u_status_rxempty (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.status.rxempty.de),
    .d      (hw2reg.status.rxempty.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (status_rxempty_qs)
  );

  //   F[rxfull]: 25:25
  caliptra_prim_subreg #(
    .DW      (1),
    .SwAccess(caliptra_prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0)
  ) u_status_rxfull (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.status.rxfull.de),
    .d      (hw2reg.status.rxfull.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (status_rxfull_qs)
  );

  //   F[txwm]: 26:26
  caliptra_prim_subreg #(
    .DW      (1),
    .SwAccess(caliptra_prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0)
  ) u_status_txwm (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.status.txwm.de),
    .d      (hw2reg.status.txwm.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (status_txwm_qs)
  );

  //   F[txstall]: 27:27
  caliptra_prim_subreg #(
    .DW      (1),
    .SwAccess(caliptra_prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0)
  ) u_status_txstall (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.status.txstall.de),
    .d      (hw2reg.status.txstall.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (status_txstall_qs)
  );

  //   F[txempty]: 28:28
  caliptra_prim_subreg #(
    .DW      (1),
    .SwAccess(caliptra_prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0)
  ) u_status_txempty (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.status.txempty.de),
    .d      (hw2reg.status.txempty.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (status_txempty_qs)
  );

  //   F[txfull]: 29:29
  caliptra_prim_subreg #(
    .DW      (1),
    .SwAccess(caliptra_prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0)
  ) u_status_txfull (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.status.txfull.de),
    .d      (hw2reg.status.txfull.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (status_txfull_qs)
  );

  //   F[active]: 30:30
  caliptra_prim_subreg #(
    .DW      (1),
    .SwAccess(caliptra_prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0)
  ) u_status_active (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.status.active.de),
    .d      (hw2reg.status.active.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (status_active_qs)
  );

  //   F[ready]: 31:31
  caliptra_prim_subreg #(
    .DW      (1),
    .SwAccess(caliptra_prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0)
  ) u_status_ready (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.status.ready.de),
    .d      (hw2reg.status.ready.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (status_ready_qs)
  );


  // Subregister 0 of Multireg configopts
  // R[configopts_0]: V(False)
  //   F[clkdiv_0]: 15:0
  caliptra_prim_subreg #(
    .DW      (16),
    .SwAccess(caliptra_prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0)
  ) u_configopts_0_clkdiv_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (configopts_0_we),
    .wd     (configopts_0_clkdiv_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.configopts[0].clkdiv.q),
    .ds     (),

    // to register interface (read)
    .qs     (configopts_0_clkdiv_0_qs)
  );

  //   F[csnidle_0]: 19:16
  caliptra_prim_subreg #(
    .DW      (4),
    .SwAccess(caliptra_prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h0)
  ) u_configopts_0_csnidle_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (configopts_0_we),
    .wd     (configopts_0_csnidle_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.configopts[0].csnidle.q),
    .ds     (),

    // to register interface (read)
    .qs     (configopts_0_csnidle_0_qs)
  );

  //   F[csntrail_0]: 23:20
  caliptra_prim_subreg #(
    .DW      (4),
    .SwAccess(caliptra_prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h0)
  ) u_configopts_0_csntrail_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (configopts_0_we),
    .wd     (configopts_0_csntrail_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.configopts[0].csntrail.q),
    .ds     (),

    // to register interface (read)
    .qs     (configopts_0_csntrail_0_qs)
  );

  //   F[csnlead_0]: 27:24
  caliptra_prim_subreg #(
    .DW      (4),
    .SwAccess(caliptra_prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h0)
  ) u_configopts_0_csnlead_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (configopts_0_we),
    .wd     (configopts_0_csnlead_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.configopts[0].csnlead.q),
    .ds     (),

    // to register interface (read)
    .qs     (configopts_0_csnlead_0_qs)
  );

  //   F[fullcyc_0]: 29:29
  caliptra_prim_subreg #(
    .DW      (1),
    .SwAccess(caliptra_prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_configopts_0_fullcyc_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (configopts_0_we),
    .wd     (configopts_0_fullcyc_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.configopts[0].fullcyc.q),
    .ds     (),

    // to register interface (read)
    .qs     (configopts_0_fullcyc_0_qs)
  );

  //   F[cpha_0]: 30:30
  caliptra_prim_subreg #(
    .DW      (1),
    .SwAccess(caliptra_prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_configopts_0_cpha_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (configopts_0_we),
    .wd     (configopts_0_cpha_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.configopts[0].cpha.q),
    .ds     (),

    // to register interface (read)
    .qs     (configopts_0_cpha_0_qs)
  );

  //   F[cpol_0]: 31:31
  caliptra_prim_subreg #(
    .DW      (1),
    .SwAccess(caliptra_prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_configopts_0_cpol_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (configopts_0_we),
    .wd     (configopts_0_cpol_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.configopts[0].cpol.q),
    .ds     (),

    // to register interface (read)
    .qs     (configopts_0_cpol_0_qs)
  );


  // Subregister 1 of Multireg configopts
  // R[configopts_1]: V(False)
  //   F[clkdiv_1]: 15:0
  caliptra_prim_subreg #(
    .DW      (16),
    .SwAccess(caliptra_prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0)
  ) u_configopts_1_clkdiv_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (configopts_1_we),
    .wd     (configopts_1_clkdiv_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.configopts[1].clkdiv.q),
    .ds     (),

    // to register interface (read)
    .qs     (configopts_1_clkdiv_1_qs)
  );

  //   F[csnidle_1]: 19:16
  caliptra_prim_subreg #(
    .DW      (4),
    .SwAccess(caliptra_prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h0)
  ) u_configopts_1_csnidle_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (configopts_1_we),
    .wd     (configopts_1_csnidle_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.configopts[1].csnidle.q),
    .ds     (),

    // to register interface (read)
    .qs     (configopts_1_csnidle_1_qs)
  );

  //   F[csntrail_1]: 23:20
  caliptra_prim_subreg #(
    .DW      (4),
    .SwAccess(caliptra_prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h0)
  ) u_configopts_1_csntrail_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (configopts_1_we),
    .wd     (configopts_1_csntrail_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.configopts[1].csntrail.q),
    .ds     (),

    // to register interface (read)
    .qs     (configopts_1_csntrail_1_qs)
  );

  //   F[csnlead_1]: 27:24
  caliptra_prim_subreg #(
    .DW      (4),
    .SwAccess(caliptra_prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h0)
  ) u_configopts_1_csnlead_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (configopts_1_we),
    .wd     (configopts_1_csnlead_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.configopts[1].csnlead.q),
    .ds     (),

    // to register interface (read)
    .qs     (configopts_1_csnlead_1_qs)
  );

  //   F[fullcyc_1]: 29:29
  caliptra_prim_subreg #(
    .DW      (1),
    .SwAccess(caliptra_prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_configopts_1_fullcyc_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (configopts_1_we),
    .wd     (configopts_1_fullcyc_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.configopts[1].fullcyc.q),
    .ds     (),

    // to register interface (read)
    .qs     (configopts_1_fullcyc_1_qs)
  );

  //   F[cpha_1]: 30:30
  caliptra_prim_subreg #(
    .DW      (1),
    .SwAccess(caliptra_prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_configopts_1_cpha_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (configopts_1_we),
    .wd     (configopts_1_cpha_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.configopts[1].cpha.q),
    .ds     (),

    // to register interface (read)
    .qs     (configopts_1_cpha_1_qs)
  );

  //   F[cpol_1]: 31:31
  caliptra_prim_subreg #(
    .DW      (1),
    .SwAccess(caliptra_prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_configopts_1_cpol_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (configopts_1_we),
    .wd     (configopts_1_cpol_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.configopts[1].cpol.q),
    .ds     (),

    // to register interface (read)
    .qs     (configopts_1_cpol_1_qs)
  );


  // R[csid]: V(False)
  caliptra_prim_subreg #(
    .DW      (32),
    .SwAccess(caliptra_prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_csid (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (csid_we),
    .wd     (csid_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.csid.q),
    .ds     (),

    // to register interface (read)
    .qs     (csid_qs)
  );


  // R[command]: V(True)
  logic command_qe;
  logic [3:0] command_flds_we;
  assign command_qe = &command_flds_we;
  //   F[len]: 8:0
  caliptra_prim_subreg_ext #(
    .DW    (9)
  ) u_command_len (
    .re     (1'b0),
    .we     (command_we),
    .wd     (command_len_wd),
    .d      ('0),
    .qre    (),
    .qe     (command_flds_we[0]),
    .q      (reg2hw.command.len.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.command.len.qe = command_qe;

  //   F[csaat]: 9:9
  caliptra_prim_subreg_ext #(
    .DW    (1)
  ) u_command_csaat (
    .re     (1'b0),
    .we     (command_we),
    .wd     (command_csaat_wd),
    .d      ('0),
    .qre    (),
    .qe     (command_flds_we[1]),
    .q      (reg2hw.command.csaat.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.command.csaat.qe = command_qe;

  //   F[speed]: 11:10
  caliptra_prim_subreg_ext #(
    .DW    (2)
  ) u_command_speed (
    .re     (1'b0),
    .we     (command_we),
    .wd     (command_speed_wd),
    .d      ('0),
    .qre    (),
    .qe     (command_flds_we[2]),
    .q      (reg2hw.command.speed.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.command.speed.qe = command_qe;

  //   F[direction]: 13:12
  caliptra_prim_subreg_ext #(
    .DW    (2)
  ) u_command_direction (
    .re     (1'b0),
    .we     (command_we),
    .wd     (command_direction_wd),
    .d      ('0),
    .qre    (),
    .qe     (command_flds_we[3]),
    .q      (reg2hw.command.direction.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.command.direction.qe = command_qe;


  // R[rxdata]: V(False)
  caliptra_prim_subreg #(
    .DW      (32),
    .SwAccess(caliptra_prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_rxdata (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.rxdata.de),
    .d      (hw2reg.rxdata.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (rxdata_qs)
  );
  assign fifo_rx_re = rxdata_re;

  // R[txdata]: V(True)
  logic txdata_qe;
  logic [0:0] txdata_flds_we;
  assign txdata_qe = &txdata_flds_we;
  caliptra_prim_subreg_ext #(
    .DW    (32)
  ) u_txdata (
    .re     (1'b0),
    .we     (txdata_we),
    .wd     (txdata_wd),
    .d      ('0),
    .qre    (),
    .qe     (txdata_flds_we[0]),
    .q      (reg2hw.txdata.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.txdata.qe = txdata_qe;


  // R[error_enable]: V(False)
  //   F[cmdbusy]: 0:0
  caliptra_prim_subreg #(
    .DW      (1),
    .SwAccess(caliptra_prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1)
  ) u_error_enable_cmdbusy (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (error_enable_we),
    .wd     (error_enable_cmdbusy_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.error_enable.cmdbusy.q),
    .ds     (),

    // to register interface (read)
    .qs     (error_enable_cmdbusy_qs)
  );

  //   F[overflow]: 1:1
  caliptra_prim_subreg #(
    .DW      (1),
    .SwAccess(caliptra_prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1)
  ) u_error_enable_overflow (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (error_enable_we),
    .wd     (error_enable_overflow_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.error_enable.overflow.q),
    .ds     (),

    // to register interface (read)
    .qs     (error_enable_overflow_qs)
  );

  //   F[underflow]: 2:2
  caliptra_prim_subreg #(
    .DW      (1),
    .SwAccess(caliptra_prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1)
  ) u_error_enable_underflow (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (error_enable_we),
    .wd     (error_enable_underflow_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.error_enable.underflow.q),
    .ds     (),

    // to register interface (read)
    .qs     (error_enable_underflow_qs)
  );

  //   F[cmdinval]: 3:3
  caliptra_prim_subreg #(
    .DW      (1),
    .SwAccess(caliptra_prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1)
  ) u_error_enable_cmdinval (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (error_enable_we),
    .wd     (error_enable_cmdinval_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.error_enable.cmdinval.q),
    .ds     (),

    // to register interface (read)
    .qs     (error_enable_cmdinval_qs)
  );

  //   F[csidinval]: 4:4
  caliptra_prim_subreg #(
    .DW      (1),
    .SwAccess(caliptra_prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1)
  ) u_error_enable_csidinval (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (error_enable_we),
    .wd     (error_enable_csidinval_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.error_enable.csidinval.q),
    .ds     (),

    // to register interface (read)
    .qs     (error_enable_csidinval_qs)
  );


  // R[error_status]: V(False)
  //   F[cmdbusy]: 0:0
  caliptra_prim_subreg #(
    .DW      (1),
    .SwAccess(caliptra_prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_error_status_cmdbusy (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (error_status_we),
    .wd     (error_status_cmdbusy_wd),

    // from internal hardware
    .de     (hw2reg.error_status.cmdbusy.de),
    .d      (hw2reg.error_status.cmdbusy.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.error_status.cmdbusy.q),
    .ds     (),

    // to register interface (read)
    .qs     (error_status_cmdbusy_qs)
  );

  //   F[overflow]: 1:1
  caliptra_prim_subreg #(
    .DW      (1),
    .SwAccess(caliptra_prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_error_status_overflow (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (error_status_we),
    .wd     (error_status_overflow_wd),

    // from internal hardware
    .de     (hw2reg.error_status.overflow.de),
    .d      (hw2reg.error_status.overflow.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.error_status.overflow.q),
    .ds     (),

    // to register interface (read)
    .qs     (error_status_overflow_qs)
  );

  //   F[underflow]: 2:2
  caliptra_prim_subreg #(
    .DW      (1),
    .SwAccess(caliptra_prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_error_status_underflow (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (error_status_we),
    .wd     (error_status_underflow_wd),

    // from internal hardware
    .de     (hw2reg.error_status.underflow.de),
    .d      (hw2reg.error_status.underflow.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.error_status.underflow.q),
    .ds     (),

    // to register interface (read)
    .qs     (error_status_underflow_qs)
  );

  //   F[cmdinval]: 3:3
  caliptra_prim_subreg #(
    .DW      (1),
    .SwAccess(caliptra_prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_error_status_cmdinval (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (error_status_we),
    .wd     (error_status_cmdinval_wd),

    // from internal hardware
    .de     (hw2reg.error_status.cmdinval.de),
    .d      (hw2reg.error_status.cmdinval.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.error_status.cmdinval.q),
    .ds     (),

    // to register interface (read)
    .qs     (error_status_cmdinval_qs)
  );

  //   F[csidinval]: 4:4
  caliptra_prim_subreg #(
    .DW      (1),
    .SwAccess(caliptra_prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_error_status_csidinval (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (error_status_we),
    .wd     (error_status_csidinval_wd),

    // from internal hardware
    .de     (hw2reg.error_status.csidinval.de),
    .d      (hw2reg.error_status.csidinval.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.error_status.csidinval.q),
    .ds     (),

    // to register interface (read)
    .qs     (error_status_csidinval_qs)
  );

  //   F[accessinval]: 5:5
  caliptra_prim_subreg #(
    .DW      (1),
    .SwAccess(caliptra_prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_error_status_accessinval (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (error_status_we),
    .wd     (error_status_accessinval_wd),

    // from internal hardware
    .de     (hw2reg.error_status.accessinval.de),
    .d      (hw2reg.error_status.accessinval.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.error_status.accessinval.q),
    .ds     (),

    // to register interface (read)
    .qs     (error_status_accessinval_qs)
  );


  // R[event_enable]: V(False)
  //   F[rxfull]: 0:0
  caliptra_prim_subreg #(
    .DW      (1),
    .SwAccess(caliptra_prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_event_enable_rxfull (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (event_enable_we),
    .wd     (event_enable_rxfull_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.event_enable.rxfull.q),
    .ds     (),

    // to register interface (read)
    .qs     (event_enable_rxfull_qs)
  );

  //   F[txempty]: 1:1
  caliptra_prim_subreg #(
    .DW      (1),
    .SwAccess(caliptra_prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_event_enable_txempty (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (event_enable_we),
    .wd     (event_enable_txempty_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.event_enable.txempty.q),
    .ds     (),

    // to register interface (read)
    .qs     (event_enable_txempty_qs)
  );

  //   F[rxwm]: 2:2
  caliptra_prim_subreg #(
    .DW      (1),
    .SwAccess(caliptra_prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_event_enable_rxwm (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (event_enable_we),
    .wd     (event_enable_rxwm_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.event_enable.rxwm.q),
    .ds     (),

    // to register interface (read)
    .qs     (event_enable_rxwm_qs)
  );

  //   F[txwm]: 3:3
  caliptra_prim_subreg #(
    .DW      (1),
    .SwAccess(caliptra_prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_event_enable_txwm (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (event_enable_we),
    .wd     (event_enable_txwm_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.event_enable.txwm.q),
    .ds     (),

    // to register interface (read)
    .qs     (event_enable_txwm_qs)
  );

  //   F[ready]: 4:4
  caliptra_prim_subreg #(
    .DW      (1),
    .SwAccess(caliptra_prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_event_enable_ready (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (event_enable_we),
    .wd     (event_enable_ready_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.event_enable.ready.q),
    .ds     (),

    // to register interface (read)
    .qs     (event_enable_ready_qs)
  );

  //   F[idle]: 5:5
  caliptra_prim_subreg #(
    .DW      (1),
    .SwAccess(caliptra_prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_event_enable_idle (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (event_enable_we),
    .wd     (event_enable_idle_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.event_enable.idle.q),
    .ds     (),

    // to register interface (read)
    .qs     (event_enable_idle_qs)
  );



  logic [14:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[ 0] = (reg_addr == SPI_HOST_INTR_STATE_OFFSET);
    addr_hit[ 1] = (reg_addr == SPI_HOST_INTR_ENABLE_OFFSET);
    addr_hit[ 2] = (reg_addr == SPI_HOST_INTR_TEST_OFFSET);
    addr_hit[ 3] = (reg_addr == SPI_HOST_ALERT_TEST_OFFSET);
    addr_hit[ 4] = (reg_addr == SPI_HOST_CONTROL_OFFSET);
    addr_hit[ 5] = (reg_addr == SPI_HOST_STATUS_OFFSET);
    addr_hit[ 6] = (reg_addr == SPI_HOST_CONFIGOPTS_0_OFFSET);
    addr_hit[ 7] = (reg_addr == SPI_HOST_CONFIGOPTS_1_OFFSET);
    addr_hit[ 8] = (reg_addr == SPI_HOST_CSID_OFFSET);
    addr_hit[ 9] = (reg_addr == SPI_HOST_COMMAND_OFFSET);
    addr_hit[10] = (reg_addr == SPI_HOST_RXDATA_OFFSET);
    addr_hit[11] = (reg_addr == SPI_HOST_TXDATA_OFFSET);
    addr_hit[12] = (reg_addr == SPI_HOST_ERROR_ENABLE_OFFSET);
    addr_hit[13] = (reg_addr == SPI_HOST_ERROR_STATUS_OFFSET);
    addr_hit[14] = (reg_addr == SPI_HOST_EVENT_ENABLE_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[ 0] & (|(SPI_HOST_PERMIT[ 0] & ~reg_be))) |
               (addr_hit[ 1] & (|(SPI_HOST_PERMIT[ 1] & ~reg_be))) |
               (addr_hit[ 2] & (|(SPI_HOST_PERMIT[ 2] & ~reg_be))) |
               (addr_hit[ 3] & (|(SPI_HOST_PERMIT[ 3] & ~reg_be))) |
               (addr_hit[ 4] & (|(SPI_HOST_PERMIT[ 4] & ~reg_be))) |
               (addr_hit[ 5] & (|(SPI_HOST_PERMIT[ 5] & ~reg_be))) |
               (addr_hit[ 6] & (|(SPI_HOST_PERMIT[ 6] & ~reg_be))) |
               (addr_hit[ 7] & (|(SPI_HOST_PERMIT[ 7] & ~reg_be))) |
               (addr_hit[ 8] & (|(SPI_HOST_PERMIT[ 8] & ~reg_be))) |
               (addr_hit[ 9] & (|(SPI_HOST_PERMIT[ 9] & ~reg_be))) |
               (addr_hit[10] & (|(SPI_HOST_PERMIT[10] & ~reg_be))) |
               (addr_hit[11] & (|(SPI_HOST_PERMIT[11] & ~reg_be))) |
               (addr_hit[12] & (|(SPI_HOST_PERMIT[12] & ~reg_be))) |
               (addr_hit[13] & (|(SPI_HOST_PERMIT[13] & ~reg_be))) |
               (addr_hit[14] & (|(SPI_HOST_PERMIT[14] & ~reg_be)))));
  end

  // Generate write-enables
  assign intr_state_we = addr_hit[0] & reg_we & !reg_error;

  assign intr_state_error_wd = reg_wdata[0];

  assign intr_state_spi_event_wd = reg_wdata[1];
  assign intr_enable_we = addr_hit[1] & reg_we & !reg_error;

  assign intr_enable_error_wd = reg_wdata[0];

  assign intr_enable_spi_event_wd = reg_wdata[1];
  assign intr_test_we = addr_hit[2] & reg_we & !reg_error;

  assign intr_test_error_wd = reg_wdata[0];

  assign intr_test_spi_event_wd = reg_wdata[1];
  assign alert_test_we = addr_hit[3] & reg_we & !reg_error;

  assign alert_test_wd = reg_wdata[0];
  assign control_we = addr_hit[4] & reg_we & !reg_error;

  assign control_rx_watermark_wd = reg_wdata[7:0];

  assign control_tx_watermark_wd = reg_wdata[15:8];

  assign control_output_en_wd = reg_wdata[29];

  assign control_sw_rst_wd = reg_wdata[30];

  assign control_spien_wd = reg_wdata[31];
  assign configopts_0_we = addr_hit[6] & reg_we & !reg_error;

  assign configopts_0_clkdiv_0_wd = reg_wdata[15:0];

  assign configopts_0_csnidle_0_wd = reg_wdata[19:16];

  assign configopts_0_csntrail_0_wd = reg_wdata[23:20];

  assign configopts_0_csnlead_0_wd = reg_wdata[27:24];

  assign configopts_0_fullcyc_0_wd = reg_wdata[29];

  assign configopts_0_cpha_0_wd = reg_wdata[30];

  assign configopts_0_cpol_0_wd = reg_wdata[31];
  assign configopts_1_we = addr_hit[7] & reg_we & !reg_error;

  assign configopts_1_clkdiv_1_wd = reg_wdata[15:0];

  assign configopts_1_csnidle_1_wd = reg_wdata[19:16];

  assign configopts_1_csntrail_1_wd = reg_wdata[23:20];

  assign configopts_1_csnlead_1_wd = reg_wdata[27:24];

  assign configopts_1_fullcyc_1_wd = reg_wdata[29];

  assign configopts_1_cpha_1_wd = reg_wdata[30];

  assign configopts_1_cpol_1_wd = reg_wdata[31];
  assign csid_we = addr_hit[8] & reg_we & !reg_error;

  assign csid_wd = reg_wdata[31:0];
  assign command_we = addr_hit[9] & reg_we & !reg_error;

  assign command_len_wd = reg_wdata[8:0];

  assign command_csaat_wd = reg_wdata[9];

  assign command_speed_wd = reg_wdata[11:10];

  assign command_direction_wd = reg_wdata[13:12];
  assign rxdata_re = addr_hit[10] & reg_re & !reg_error;
  assign txdata_we = addr_hit[11] & reg_we & !reg_error;

  assign txdata_wd = reg_wdata[31:0];
  assign error_enable_we = addr_hit[12] & reg_we & !reg_error;

  assign error_enable_cmdbusy_wd = reg_wdata[0];

  assign error_enable_overflow_wd = reg_wdata[1];

  assign error_enable_underflow_wd = reg_wdata[2];

  assign error_enable_cmdinval_wd = reg_wdata[3];

  assign error_enable_csidinval_wd = reg_wdata[4];
  assign error_status_we = addr_hit[13] & reg_we & !reg_error;

  assign error_status_cmdbusy_wd = reg_wdata[0];

  assign error_status_overflow_wd = reg_wdata[1];

  assign error_status_underflow_wd = reg_wdata[2];

  assign error_status_cmdinval_wd = reg_wdata[3];

  assign error_status_csidinval_wd = reg_wdata[4];

  assign error_status_accessinval_wd = reg_wdata[5];
  assign event_enable_we = addr_hit[14] & reg_we & !reg_error;

  assign event_enable_rxfull_wd = reg_wdata[0];

  assign event_enable_txempty_wd = reg_wdata[1];

  assign event_enable_rxwm_wd = reg_wdata[2];

  assign event_enable_txwm_wd = reg_wdata[3];

  assign event_enable_ready_wd = reg_wdata[4];

  assign event_enable_idle_wd = reg_wdata[5];

  // Assign write-enables to checker logic vector.
  always_comb begin
    reg_we_check = '0;
    reg_we_check[0] = intr_state_we;
    reg_we_check[1] = intr_enable_we;
    reg_we_check[2] = intr_test_we;
    reg_we_check[3] = alert_test_we;
    reg_we_check[4] = control_we;
    reg_we_check[5] = 1'b0;
    reg_we_check[6] = configopts_0_we;
    reg_we_check[7] = configopts_1_we;
    reg_we_check[8] = csid_we;
    reg_we_check[9] = command_we;
    reg_we_check[10] = 1'b0;
    reg_we_check[11] = txdata_we;
    reg_we_check[12] = error_enable_we;
    reg_we_check[13] = error_status_we;
    reg_we_check[14] = event_enable_we;
  end

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[0] = intr_state_error_qs;
        reg_rdata_next[1] = intr_state_spi_event_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[0] = intr_enable_error_qs;
        reg_rdata_next[1] = intr_enable_spi_event_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[1] = '0;
      end

      addr_hit[3]: begin
        reg_rdata_next[0] = '0;
      end

      addr_hit[4]: begin
        reg_rdata_next[7:0] = control_rx_watermark_qs;
        reg_rdata_next[15:8] = control_tx_watermark_qs;
        reg_rdata_next[29] = control_output_en_qs;
        reg_rdata_next[30] = control_sw_rst_qs;
        reg_rdata_next[31] = control_spien_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[7:0] = status_txqd_qs;
        reg_rdata_next[15:8] = status_rxqd_qs;
        reg_rdata_next[19:16] = status_cmdqd_qs;
        reg_rdata_next[20] = status_rxwm_qs;
        reg_rdata_next[22] = status_byteorder_qs;
        reg_rdata_next[23] = status_rxstall_qs;
        reg_rdata_next[24] = status_rxempty_qs;
        reg_rdata_next[25] = status_rxfull_qs;
        reg_rdata_next[26] = status_txwm_qs;
        reg_rdata_next[27] = status_txstall_qs;
        reg_rdata_next[28] = status_txempty_qs;
        reg_rdata_next[29] = status_txfull_qs;
        reg_rdata_next[30] = status_active_qs;
        reg_rdata_next[31] = status_ready_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[15:0] = configopts_0_clkdiv_0_qs;
        reg_rdata_next[19:16] = configopts_0_csnidle_0_qs;
        reg_rdata_next[23:20] = configopts_0_csntrail_0_qs;
        reg_rdata_next[27:24] = configopts_0_csnlead_0_qs;
        reg_rdata_next[29] = configopts_0_fullcyc_0_qs;
        reg_rdata_next[30] = configopts_0_cpha_0_qs;
        reg_rdata_next[31] = configopts_0_cpol_0_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[15:0] = configopts_1_clkdiv_1_qs;
        reg_rdata_next[19:16] = configopts_1_csnidle_1_qs;
        reg_rdata_next[23:20] = configopts_1_csntrail_1_qs;
        reg_rdata_next[27:24] = configopts_1_csnlead_1_qs;
        reg_rdata_next[29] = configopts_1_fullcyc_1_qs;
        reg_rdata_next[30] = configopts_1_cpha_1_qs;
        reg_rdata_next[31] = configopts_1_cpol_1_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[31:0] = csid_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[8:0] = '0;
        reg_rdata_next[9] = '0;
        reg_rdata_next[11:10] = '0;
        reg_rdata_next[13:12] = '0;
      end

      addr_hit[10]: begin
        reg_rdata_next[31:0] = rxdata_qs;
      end

      addr_hit[11]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[12]: begin
        reg_rdata_next[0] = error_enable_cmdbusy_qs;
        reg_rdata_next[1] = error_enable_overflow_qs;
        reg_rdata_next[2] = error_enable_underflow_qs;
        reg_rdata_next[3] = error_enable_cmdinval_qs;
        reg_rdata_next[4] = error_enable_csidinval_qs;
      end

      addr_hit[13]: begin
        reg_rdata_next[0] = error_status_cmdbusy_qs;
        reg_rdata_next[1] = error_status_overflow_qs;
        reg_rdata_next[2] = error_status_underflow_qs;
        reg_rdata_next[3] = error_status_cmdinval_qs;
        reg_rdata_next[4] = error_status_csidinval_qs;
        reg_rdata_next[5] = error_status_accessinval_qs;
      end

      addr_hit[14]: begin
        reg_rdata_next[0] = event_enable_rxfull_qs;
        reg_rdata_next[1] = event_enable_txempty_qs;
        reg_rdata_next[2] = event_enable_rxwm_qs;
        reg_rdata_next[3] = event_enable_txwm_qs;
        reg_rdata_next[4] = event_enable_ready_qs;
        reg_rdata_next[5] = event_enable_idle_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // shadow busy
  logic shadow_busy;
  assign shadow_busy = 1'b0;

  // register busy
  assign reg_busy = shadow_busy;

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `CALIPTRA_ASSERT_PULSE(wePulse, reg_we, clk_i, !rst_ni)
  `CALIPTRA_ASSERT_PULSE(rePulse, reg_re, clk_i, !rst_ni)

  `CALIPTRA_ASSERT(reAfterRv, $rose(reg_re || reg_we) |=> hreadyout_o, clk_i, !rst_ni)

  `CALIPTRA_ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit), clk_i, !rst_ni)

endmodule
