{
  "name": "spi_host",
  "clocking": [
    {
      "clock": "clk_i",
      "reset": "rst_ni",
      "primary": true
    }
  ],
  "bus_interfaces": [
    {
      "protocol": "tlul",
      "direction": "device"
    }
  ],
  "inter_signal_list": [
    {
      "struct": "passthrough",
      "package": "spi_device_pkg",
      "type": "req_rsp",
      "name": "passthrough",
      "act": "rsp",
      "width": "1"
    }
  ],
  "regwidth": "32",
  "param_list": [
    {
      "name": "ByteOrder",
      "desc": "Byte order to use when transmitting or receiving data.  If ByteOrder = 0,\n   the IP uses a Big-Endian ordering for the bytes in DATA.\n   The most significant byte (MSB) of DATA is transmitted first, and\n   received data is placed in the MSB location of DATA.  If ByteOrder = 1,\n   a Little-Endian ordering is used for these registers, and the LSB of each\n   gets priority for receiving and transmitting data.",
      "type": "logic",
      "default": "1"
    },
    {
      "name": "NumCS",
      "desc": "The number of active-low chip select (cs_n) lines to create.",
      "type": "int",
      "default": "2"
    },
    {
      "name": "TxDepth",
      "desc": "The size of the Tx FIFO (in words)",
      "type": "int",
      "default": "72"
    },
    {
      "name": "RxDepth",
      "desc": "The size of the Rx FIFO (in words)",
      "type": "int",
      "default": "64"
    },
    {
      "name": "CmdDepth",
      "desc": "The size of the Cmd FIFO (one segment descriptor per entry)",
      "type": "int",
      "default": "4"
    }
  ],
  "available_output_list": [
    {
      "name": "sck",
      "desc": "SPI Clock"
    },
    {
      "name": "csb",
      "desc": "Chip Select# (One hot, active low).  The size of this port should match NumCS.",
      "width": "1"
    }
  ],
  "available_inout_list": [
    {
      "name": "sd",
      "desc": "SPI data bus",
      "width": "4"
    }
  ],
  "interrupt_list": [
    {
      "name": "error",
      "desc": "Error-related interrupts, see !!ERROR_ENABLE register for more\n   information."
    },
    {
      "name": "spi_event",
      "desc": "Event-related interrupts, see !!EVENT_ENABLE register for more\n   information."
    }
  ],
  "alert_list": [
    {
      "name": "fatal_fault",
      "desc": "This fatal alert is triggered when a fatal TL-UL bus integrity fault is detected."
    }
  ],
  "countermeasures": [
    {
      "name": "BUS.INTEGRITY",
      "desc": "End-to-end bus integrity scheme."
    }
  ],
  "registers": [
    {
      "name": "CONTROL",
      "desc": "Control register",
      "swaccess": "rw",
      "hwaccess": "hro",
      "fields": [
        {
          "bits": "31",
          "name": "SPIEN",
          "desc": "Enables the SPI host.  On reset, this field is 0, meaning\n   that no transactions can proceed.",
          "resval": "0x0"
        },
        {
          "bits": "30",
          "name": "SW_RST",
          "desc": "Clears the entire IP to the reset state when set to 1, including\n   the FIFOs, the CDC's, the core state machine and the shift register.\n   In the current implementation, the CDC FIFOs are drained not reset.\n   Therefore software must confirm that both FIFO's empty before releasing\n   the IP from reset.",
          "resval": "0x0"
        },
        {
          "bits": "29",
          "name": "OUTPUT_EN",
          "desc": "Enable the SPI host output buffers for the sck, csb, and sd lines.  This allows\n   the SPI_HOST IP to connect to the same bus as other SPI controllers without\n   interference.",
          "resval": "0x0"
        },
        {
          "bits": "15:8",
          "name": "TX_WATERMARK",
          "desc": "If !!EVENT_ENABLE.TXWM is set, the IP will send\n   an interrupt when the depth of the TX FIFO drops below\n   TX_WATERMARK words (32b each).",
          "resval": "0"
        },
        {
          "bits": "7:0",
          "name": "RX_WATERMARK",
          "desc": "If !!EVENT_ENABLE.RXWM is set, the IP will send\n   an interrupt when the depth of the RX FIFO reaches\n   RX_WATERMARK words (32b each).",
          "resval": "127"
        }
      ]
    },
    {
      "name": "STATUS",
      "desc": "Status register",
      "swaccess": "ro",
      "hwaccess": "hwo",
      "fields": [
        {
          "bits": "31",
          "name": "READY",
          "desc": "When high, indicates the SPI host is ready to receive\n   commands. Writing to COMMAND when READY is low is\n   an error, and will trigger an interrupt.\n   ",
          "resval": "0x0"
        },
        {
          "bits": "30",
          "name": "ACTIVE",
          "desc": "When high, indicates the SPI host is processing a previously\n   issued command.",
          "resval": "0x0"
        },
        {
          "bits": "29",
          "name": "TXFULL",
          "desc": "When high, indicates that the transmit data fifo is full.\n   Any further writes to !!RXDATA will create an error interrupt.",
          "resval": "0x0"
        },
        {
          "bits": "28",
          "name": "TXEMPTY",
          "desc": "When high, indicates that the transmit data fifo is empty.\n   ",
          "resval": "0x0"
        },
        {
          "bits": "27",
          "name": "TXSTALL",
          "desc": "If high, signifies that an ongoing transaction has stalled\n   due to lack of data in the TX FIFO",
          "resval": "0x0"
        },
        {
          "bits": "26",
          "name": "TXWM",
          "desc": "If high, the amount of data in the TX FIFO has fallen below the\n   level of !!CONTROL.TX_WATERMARK words (32b each).",
          "resval": "0x0"
        },
        {
          "bits": "25",
          "name": "RXFULL",
          "desc": "When high, indicates that the receive fifo is full.  Any\n   ongoing transactions will stall until firmware reads some\n   data from !!RXDATA.",
          "resval": "0x0"
        },
        {
          "bits": "24",
          "name": "RXEMPTY",
          "desc": "When high, indicates that the receive fifo is empty.\n   Any reads from RX FIFO will cause an error interrupt.\n   ",
          "resval": "0x0"
        },
        {
          "bits": "23",
          "name": "RXSTALL",
          "desc": "If high, signifies that an ongoing transaction has stalled\n   due to lack of available space in the RX FIFO",
          "resval": "0x0"
        },
        {
          "bits": "22",
          "name": "BYTEORDER",
          "desc": "The value of the ByteOrder parameter, provided so that firmware\n   can confirm proper IP configuration."
        },
        {
          "bits": "20",
          "name": "RXWM",
          "desc": "If high, the number of 32-bits in the RX FIFO now exceeds the\n   !!CONTROL.RX_WATERMARK entries (32b each).",
          "resval": "0x0"
        },
        {
          "bits": "19:16",
          "name": "CMDQD",
          "desc": "Command queue depth. Indicates how many unread 32-bit words are\n   currently in the command segment queue.",
          "resval": "0x0"
        },
        {
          "bits": "15:8",
          "name": "RXQD",
          "desc": "Receive queue depth. Indicates how many unread 32-bit words are\n   currently in the RX FIFO.  When active, this result may an\n   underestimate due to synchronization delays.",
          "resval": "0x0"
        },
        {
          "bits": "7:0",
          "name": "TXQD",
          "desc": "Transmit queue depth. Indicates how many unsent 32-bit words\n   are currently in the TX FIFO.  When active, this result may\n   be an overestimate due to synchronization delays,",
          "resval": "0x0"
        }
      ],
      "tags": [
        "excl:CsrAllTests:CsrExclCheck"
      ]
    },
    {
      "multireg": {
        "name": "CONFIGOPTS",
        "desc": "Configuration options register.\n\n   Contains options for controlling each peripheral. One register per\n   cs_n line",
        "swaccess": "rw",
        "hwaccess": "hro",
        "cname": "configopts",
        "count": "NumCS",
        "fields": [
          {
            "bits": "31",
            "name": "CPOL",
            "desc": "The polarity of the sck clock signal.  When CPOL is 0,\n   sck is low when idle, and emits high pulses.   When CPOL\n   is low, sck is high when idle, and emits a series of low\n   pulses.\n   ",
            "resval": "0x0"
          },
          {
            "bits": "30",
            "name": "CPHA",
            "desc": "The phase of the sck clock signal relative to the data. When\n   CPHA = 0, the data changes on the trailing edge of sck\n   and is typically sampled on the leading edge.  Conversely\n   if CPHA = 1 high, data lines change on the leading edge of\n   sck and are typically sampled on the trailing edge.\n   CPHA should be chosen to match the phase of the selected\n   device.  The sampling behavior is modified by the\n   !!CONFIGOPTS.FULLCYC bit.\n   ",
            "resval": "0x0"
          },
          {
            "bits": "29",
            "name": "FULLCYC",
            "desc": "Full cycle.  Modifies the CPHA sampling behaviour to allow\n   for longer device logic setup times.  Rather than sampling the SD\n   bus a half cycle after shifting out data, the data is sampled\n   a full cycle after shifting data out.  This means that if\n   CPHA = 0, data is shifted out on the trailing edge, and\n   sampled a full cycle later.  If CPHA = 1, data is shifted and\n   sampled with the trailing edge, also separated by a\n   full cycle.",
            "resval": 0
          },
          {
            "bits": "27:24",
            "name": "CSNLEAD",
            "desc": "CS_N Leading Time.  Indicates the number of half sck cycles,\n   CSNLEAD+1, to leave between the falling edge of cs_n and\n   the first edge of sck.  Setting this register to zero\n   corresponds to the minimum delay of one-half sck cycle",
            "resval": 0
          },
          {
            "bits": "23:20",
            "name": "CSNTRAIL",
            "desc": "CS_N Trailing Time.  Indicates the number of half sck cycles,\n   CSNTRAIL+1, to leave between last edge of sck and the rising\n   edge of cs_n. Setting this register to zero corresponds\n   to the minimum delay of one-half sck cycle.",
            "resval": 0
          },
          {
            "bits": "19:16",
            "name": "CSNIDLE",
            "desc": "Minimum idle time between commands. Indicates the minimum\n   number of sck half-cycles to hold cs_n high between commands.\n   Setting this register to zero creates a minimally-wide CS_N-high\n   pulse of one-half sck cycle.",
            "resval": 0
          },
          {
            "bits": "15:0",
            "name": "CLKDIV",
            "desc": "Core clock divider.  Slows down subsequent SPI transactions by a\n   factor of (CLKDIV+1) relative to the core clock frequency.  The\n   period of sck, T(sck) then becomes `2*(CLK_DIV+1)*T(core)`",
            "resval": 0
          }
        ]
      }
    },
    {
      "name": "CSID",
      "desc": "Chip-Select ID\n\n   Controls which device to target with the next command.  This register\n   is passed to the core whenever !!COMMAND is written.  The core then\n   asserts cio_csb_o[!!CSID] during the execution of the command.",
      "swaccess": "rw",
      "hwaccess": "hro",
      "fields": [
        {
          "bits": "31:0",
          "name": "CSID",
          "desc": "Chip Select ID",
          "resval": "0x0"
        }
      ]
    },
    {
      "name": "COMMAND",
      "desc": "Command Register\n\n   Parameters specific to each command segment.  Unlike the !!CONFIGOPTS multi-register,\n   there is only one command register for controlling all attached SPI devices",
      "swaccess": "wo",
      "hwaccess": "hro",
      "hwext": "true",
      "hwqe": "true",
      "fields": [
        {
          "bits": "13:12",
          "name": "DIRECTION",
          "desc": "The direction for the following command: \"0\" = Dummy cycles\n   (no TX/RX). \"1\" = Rx only, \"2\" = Tx only, \"3\" = Bidirectional\n   Tx/Rx (Standard SPI mode only).",
          "resval": "0x0"
        },
        {
          "bits": "11:10",
          "name": "SPEED",
          "desc": "The speed for this command segment: \"0\" = Standard SPI. \"1\" = Dual SPI.\n   \"2\"=Quad SPI,  \"3\": RESERVED.",
          "resval": "0x0"
        },
        {
          "bits": "9",
          "name": "CSAAT",
          "desc": "Chip select active after transaction.  If CSAAT = 0, the\n   chip select line is raised immediately at the end of the\n   command segment.   If !!COMMAND.CSAAT = 1, the chip select\n   line is left low at the end of the current transaction\n   segment.  This allows the creation longer, more\n   complete SPI transactions, consisting of several separate\n   segments for issuing instructions, pausing for dummy cycles,\n   and transmitting or receiving data from the device.",
          "resval": "0x0"
        },
        {
          "bits": "8:0",
          "name": "LEN",
          "desc": "Segment Length.\n\n   For read or write segments, this field controls the\n   number of 1-byte bursts to transmit and or receive in\n   this command segment.  The number of cyles required\n   to send or received a byte will depend on !!COMMAND.SPEED.\n   For dummy segments, (!!COMMAND.DIRECTION == 0), this register\n   controls the number of dummy cycles to issue.\n   The number of bytes (or dummy cycles) in the segment will be\n   equal to !!COMMAND.LEN + 1.\n   ",
          "resval": "0x0"
        }
      ],
      "tags": [
        "excl:CsrAllTests:CsrExclWrite"
      ]
    },
    {
      "name": "RXDATA",
      "desc": "SPI Receive Data\n\n   Reads from this window pull data from the RXFIFO.\n\n   The serial order of bit transmission\n   is chosen to match SPI flash devices. Individual bytes\n   are always transmitted with the most significant bit first.\n   Only four-bute reads are supported. If ByteOrder = 0,\n   the first byte received is packed in the MSB of !!RXDATA.\n   For some processor architectures, this could lead to shuffling\n   of flash data as compared to how it is written in memory.\n   In which case, choosing ByteOrder = 1 can reverse the\n   byte-order of each data read, causing the first byte\n   received to be packed into the LSB of !!RXDATA. (Though within\n   each byte the most significant bit is always pulled\n   from the bus first.)\n   ",
      "swaccess": "ro",
      "hwaccess": "hwo",
      "fields": [
        {
          "bits": "31:0",
          "name": "RXDATA",
          "desc": "SPI Receive Data",
          "resval": "0x0"
        }
      ]
    },
    {
      "name": "TXDATA",
      "desc": "SPI Transmit Data\n   Data written to this window is placed into the TXFIFO.\n   Byte-enables are supported for writes.\n\n   The serial order of bit transmission\n   is chosen to match SPI flash devices. Individual bytes\n   are always transmitted with the most significant bit first.\n   Multi-byte writes are also supported, and if ByteOrder = 0,\n   the bits of !!TXDATA are transmitted strictly in order of\n   decreasing signficance (i.e. most signicant bit first).\n   For some processor architectures, this could lead to shuffling\n   of flash data as compared to how it is written in memory.\n   In which case, choosing ByteOrder = 1 can reverse the\n   byte-order of multi-byte data writes.  (Though within\n   each byte the most significant bit is always sent first.)\n   ",
      "swaccess": "wo",
      "hwaccess": "hro",
      "hwext": "true",
      "hwqe": "true",
      "fields": [
        {
          "bits": "31:0",
          "name": "TXDATA",
          "desc": "SPI Transmit Data",
          "resval": "0x0"
        }
      ]
    },
    {
      "name": "ERROR_ENABLE",
      "desc": "Controls which classes of errors raise an interrupt.",
      "swaccess": "rw",
      "hwaccess": "hro",
      "fields": [
        {
          "bits": "4",
          "name": "CSIDINVAL",
          "desc": "Invalid CSID: If this bit is set, the block sends an error interrupt whenever\n   a command is submitted, but CSID exceeds NumCS.",
          "resval": "0x1"
        },
        {
          "bits": "3",
          "name": "CMDINVAL",
          "desc": "Invalid Command Errors: If this bit is set, the block sends an\n   error interrupt whenever a command is sent with invalid values for\n   !!COMMAND.SPEED or !!COMMAND.DIRECTION.",
          "resval": "0x1"
        },
        {
          "bits": "2",
          "name": "UNDERFLOW",
          "desc": "Underflow Errors: If this bit is set, the block sends an\n   error interrupt whenever there is a read from !!RXDATA\n   but the RX FIFO is empty.",
          "resval": "0x1"
        },
        {
          "bits": "1",
          "name": "OVERFLOW",
          "desc": "Overflow Errors: If this bit is set, the block sends an\n   error interrupt whenever the TX FIFO overflows.",
          "resval": "0x1"
        },
        {
          "bits": "0",
          "name": "CMDBUSY",
          "desc": "Command Error: If this bit is set, the block sends an error\n   interrupt whenever a command is issued while busy (i.e. a 1 is\n   when !!STATUS.READY is not asserted.)",
          "resval": "0x1"
        }
      ]
    },
    {
      "name": "ERROR_STATUS",
      "desc": "Indicates that any errors that have occurred.\n   When an error\n   occurs, the corresponding bit must be cleared here before\n   issuing any further commands.",
      "swaccess": "rw1c",
      "hwaccess": "hrw",
      "fields": [
        {
          "bits": "5",
          "name": "ACCESSINVAL",
          "desc": "Indicates that TLUL attempted to write to TXDATA with no bytes enabled. Such\n   'zero byte' writes are not supported.",
          "resval": "0x0",
          "tags": [
            "excl:CsrAllTests:CsrExclCheck"
          ]
        },
        {
          "bits": "4",
          "name": "CSIDINVAL",
          "desc": "Indicates a command was attempted with an invalid value for !!CSID.",
          "resval": "0x0"
        },
        {
          "bits": "3",
          "name": "CMDINVAL",
          "desc": "Indicates an invalid command segment, meaning either an invalid value of\n   !!COMMAND.SPEED or a request for bidirectional data transfer at dual or quad\n   speed",
          "resval": "0x0"
        },
        {
          "bits": "2",
          "name": "UNDERFLOW",
          "desc": "Indicates that firmware has attempted to read from\n   !!RXDATA when the RX FIFO is empty.",
          "resval": "0x0"
        },
        {
          "bits": "1",
          "name": "OVERFLOW",
          "desc": "Indicates that firmware has overflowed the TX FIFO",
          "resval": "0x0",
          "tags": [
            "excl:CsrAllTests:CsrExclCheck"
          ]
        },
        {
          "bits": "0",
          "name": "CMDBUSY",
          "desc": "Indicates a write to !!COMMAND when !!STATUS.READY = 0.\n   ",
          "resval": "0x0"
        }
      ]
    },
    {
      "name": "EVENT_ENABLE",
      "desc": "Controls which classes of SPI events raise an interrupt.",
      "swaccess": "rw",
      "hwaccess": "hro",
      "fields": [
        {
          "bits": "5",
          "name": "IDLE",
          "desc": "Assert to send a spi_event interrupt whenever !!STATUS.ACTIVE\n   goes low",
          "resval": "0x0"
        },
        {
          "bits": "4",
          "name": "READY",
          "desc": "Assert to send a spi_event interrupt whenever !!STATUS.READY\n   goes high",
          "resval": "0x0"
        },
        {
          "bits": "3",
          "name": "TXWM",
          "desc": "Assert to send a spi_event interrupt whenever the number of 32-bit words in\n   the TX FIFO is less than !!CONTROL.TX_WATERMARK.  To prevent the\n   reassertion of this interrupt add more data to the TX FIFO, or\n   reduce !!CONTROL.TX_WATERMARK.",
          "resval": "0x0"
        },
        {
          "bits": "2",
          "name": "RXWM",
          "desc": "Assert to send a spi_event interrupt whenever the number of 32-bit words in\n   the RX FIFO is greater than !!CONTROL.RX_WATERMARK. To prevent the\n   reassertion of this interrupt, read more data from the RX FIFO, or\n   increase !!CONTROL.RX_WATERMARK.",
          "resval": "0x0"
        },
        {
          "bits": "1",
          "name": "TXEMPTY",
          "desc": "Assert to send a spi_event interrupt whenever !!STATUS.TXEMPTY\n   goes high",
          "resval": "0x0"
        },
        {
          "bits": "0",
          "name": "RXFULL",
          "desc": "Assert to send a spi_event interrupt whenever !!STATUS.RXFULL\n   goes high",
          "resval": "0x0"
        }
      ]
    }
  ]
}
