// Generated by PeakRDL-regblock - A free and open-source SystemVerilog generator
//  https://github.com/SystemRDL/PeakRDL-regblock

module interrupt_regs (
        input wire clk,
        input wire rst,

        input wire s_cpuif_req,
        input wire s_cpuif_req_is_wr,
        input wire [9:0] s_cpuif_addr,
        input wire [31:0] s_cpuif_wr_data,
        output wire s_cpuif_req_stall_wr,
        output wire s_cpuif_req_stall_rd,
        output wire s_cpuif_rd_ack,
        output wire s_cpuif_rd_err,
        output wire [31:0] s_cpuif_rd_data,
        output wire s_cpuif_wr_ack,
        output wire s_cpuif_wr_err,

        input interrupt_regs_pkg::interrupt_regs__in_t hwif_in,
        output interrupt_regs_pkg::interrupt_regs__out_t hwif_out
    );

    //--------------------------------------------------------------------------
    // CPU Bus interface logic
    //--------------------------------------------------------------------------
    logic cpuif_req;
    logic cpuif_req_is_wr;
    logic [9:0] cpuif_addr;
    logic [31:0] cpuif_wr_data;
    logic cpuif_req_stall_wr;
    logic cpuif_req_stall_rd;

    logic cpuif_rd_ack;
    logic cpuif_rd_err;
    logic [31:0] cpuif_rd_data;

    logic cpuif_wr_ack;
    logic cpuif_wr_err;

    assign cpuif_req = s_cpuif_req;
    assign cpuif_req_is_wr = s_cpuif_req_is_wr;
    assign cpuif_addr = s_cpuif_addr;
    assign cpuif_wr_data = s_cpuif_wr_data;
    assign s_cpuif_req_stall_wr = cpuif_req_stall_wr;
    assign s_cpuif_req_stall_rd = cpuif_req_stall_rd;
    assign s_cpuif_rd_ack = cpuif_rd_ack;
    assign s_cpuif_rd_err = cpuif_rd_err;
    assign s_cpuif_rd_data = cpuif_rd_data;
    assign s_cpuif_wr_ack = cpuif_wr_ack;
    assign s_cpuif_wr_err = cpuif_wr_err;

    logic cpuif_req_masked;

    // Read & write latencies are balanced. Stalls not required
    assign cpuif_req_stall_rd = '0;
    assign cpuif_req_stall_wr = '0;
    assign cpuif_req_masked = cpuif_req;

    //--------------------------------------------------------------------------
    // Address Decode
    //--------------------------------------------------------------------------
    typedef struct {
        struct {
            logic global_intr_en_r;
            logic error_intr_en_r;
            logic notif_intr_en_r;
            logic error_global_intr_r;
            logic notif_global_intr_r;
            logic error_internal_intr_r;
            logic notif_internal_intr_r;
            logic error_intr_trig_r;
            logic notif_intr_trig_r;
            logic error0_intr_count_r;
            logic error1_intr_count_r;
            logic error2_intr_count_r;
            logic error3_intr_count_r;
            logic notif0_intr_count_r;
            logic notif1_intr_count_r;
            logic notif2_intr_count_r;
            logic notif3_intr_count_r;
            logic error0_intr_count_incr_r;
            logic error1_intr_count_incr_r;
            logic error2_intr_count_incr_r;
            logic error3_intr_count_incr_r;
            logic notif0_intr_count_incr_r;
            logic notif1_intr_count_incr_r;
            logic notif2_intr_count_incr_r;
            logic notif3_intr_count_incr_r;
        } intr_block_rf;
    } decoded_reg_strb_t;
    decoded_reg_strb_t decoded_reg_strb;
    logic decoded_req;
    logic decoded_req_is_wr;
    logic [31:0] decoded_wr_data;

    always_comb begin
        decoded_reg_strb.intr_block_rf.global_intr_en_r = cpuif_req_masked & (cpuif_addr == 'h0);
        decoded_reg_strb.intr_block_rf.error_intr_en_r = cpuif_req_masked & (cpuif_addr == 'h4);
        decoded_reg_strb.intr_block_rf.notif_intr_en_r = cpuif_req_masked & (cpuif_addr == 'h8);
        decoded_reg_strb.intr_block_rf.error_global_intr_r = cpuif_req_masked & (cpuif_addr == 'hc);
        decoded_reg_strb.intr_block_rf.notif_global_intr_r = cpuif_req_masked & (cpuif_addr == 'h10);
        decoded_reg_strb.intr_block_rf.error_internal_intr_r = cpuif_req_masked & (cpuif_addr == 'h14);
        decoded_reg_strb.intr_block_rf.notif_internal_intr_r = cpuif_req_masked & (cpuif_addr == 'h18);
        decoded_reg_strb.intr_block_rf.error_intr_trig_r = cpuif_req_masked & (cpuif_addr == 'h1c);
        decoded_reg_strb.intr_block_rf.notif_intr_trig_r = cpuif_req_masked & (cpuif_addr == 'h20);
        decoded_reg_strb.intr_block_rf.error0_intr_count_r = cpuif_req_masked & (cpuif_addr == 'h100);
        decoded_reg_strb.intr_block_rf.error1_intr_count_r = cpuif_req_masked & (cpuif_addr == 'h104);
        decoded_reg_strb.intr_block_rf.error2_intr_count_r = cpuif_req_masked & (cpuif_addr == 'h108);
        decoded_reg_strb.intr_block_rf.error3_intr_count_r = cpuif_req_masked & (cpuif_addr == 'h10c);
        decoded_reg_strb.intr_block_rf.notif0_intr_count_r = cpuif_req_masked & (cpuif_addr == 'h180);
        decoded_reg_strb.intr_block_rf.notif1_intr_count_r = cpuif_req_masked & (cpuif_addr == 'h184);
        decoded_reg_strb.intr_block_rf.notif2_intr_count_r = cpuif_req_masked & (cpuif_addr == 'h188);
        decoded_reg_strb.intr_block_rf.notif3_intr_count_r = cpuif_req_masked & (cpuif_addr == 'h18c);
        decoded_reg_strb.intr_block_rf.error0_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 'h200);
        decoded_reg_strb.intr_block_rf.error1_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 'h204);
        decoded_reg_strb.intr_block_rf.error2_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 'h208);
        decoded_reg_strb.intr_block_rf.error3_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 'h20c);
        decoded_reg_strb.intr_block_rf.notif0_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 'h210);
        decoded_reg_strb.intr_block_rf.notif1_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 'h214);
        decoded_reg_strb.intr_block_rf.notif2_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 'h218);
        decoded_reg_strb.intr_block_rf.notif3_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 'h21c);
    end

    // Pass down signals to next stage
    assign decoded_req = cpuif_req_masked;
    assign decoded_req_is_wr = cpuif_req_is_wr;
    assign decoded_wr_data = cpuif_wr_data;

    // Writes are always granted with no error response
    assign cpuif_wr_ack = decoded_req & decoded_req_is_wr;
    assign cpuif_wr_err = '0;

    //--------------------------------------------------------------------------
    // Field logic
    //--------------------------------------------------------------------------
    typedef struct {
        struct {
            struct {
                struct {
                    logic next;
                    logic load_next;
                } error_en;
                struct {
                    logic next;
                    logic load_next;
                } notif_en;
            } global_intr_en_r;
            struct {
                struct {
                    logic next;
                    logic load_next;
                } error0_en;
                struct {
                    logic next;
                    logic load_next;
                } error1_en;
                struct {
                    logic next;
                    logic load_next;
                } error2_en;
                struct {
                    logic next;
                    logic load_next;
                } error3_en;
            } error_intr_en_r;
            struct {
                struct {
                    logic next;
                    logic load_next;
                } notif0_en;
                struct {
                    logic next;
                    logic load_next;
                } notif1_en;
                struct {
                    logic next;
                    logic load_next;
                } notif2_en;
                struct {
                    logic next;
                    logic load_next;
                } notif3_en;
            } notif_intr_en_r;
            struct {
                struct {
                    logic next;
                    logic load_next;
                } agg_sts;
            } error_global_intr_r;
            struct {
                struct {
                    logic next;
                    logic load_next;
                } agg_sts;
            } notif_global_intr_r;
            struct {
                struct {
                    logic next;
                    logic load_next;
                } error0_sts;
                struct {
                    logic next;
                    logic load_next;
                } error1_sts;
                struct {
                    logic next;
                    logic load_next;
                } error2_sts;
                struct {
                    logic next;
                    logic load_next;
                } error3_sts;
            } error_internal_intr_r;
            struct {
                struct {
                    logic next;
                    logic load_next;
                } notif0_sts;
                struct {
                    logic next;
                    logic load_next;
                } notif1_sts;
                struct {
                    logic next;
                    logic load_next;
                } notif2_sts;
                struct {
                    logic next;
                    logic load_next;
                } notif3_sts;
            } notif_internal_intr_r;
            struct {
                struct {
                    logic next;
                    logic load_next;
                } error0_trig;
                struct {
                    logic next;
                    logic load_next;
                } error1_trig;
                struct {
                    logic next;
                    logic load_next;
                } error2_trig;
                struct {
                    logic next;
                    logic load_next;
                } error3_trig;
            } error_intr_trig_r;
            struct {
                struct {
                    logic next;
                    logic load_next;
                } notif0_trig;
                struct {
                    logic next;
                    logic load_next;
                } notif1_trig;
                struct {
                    logic next;
                    logic load_next;
                } notif2_trig;
                struct {
                    logic next;
                    logic load_next;
                } notif3_trig;
            } notif_intr_trig_r;
            struct {
                struct {
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error0_intr_count_r;
            struct {
                struct {
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error1_intr_count_r;
            struct {
                struct {
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error2_intr_count_r;
            struct {
                struct {
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error3_intr_count_r;
            struct {
                struct {
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } notif0_intr_count_r;
            struct {
                struct {
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } notif1_intr_count_r;
            struct {
                struct {
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } notif2_intr_count_r;
            struct {
                struct {
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } notif3_intr_count_r;
            struct {
                struct {
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error0_intr_count_incr_r;
            struct {
                struct {
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error1_intr_count_incr_r;
            struct {
                struct {
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error2_intr_count_incr_r;
            struct {
                struct {
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error3_intr_count_incr_r;
            struct {
                struct {
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } notif0_intr_count_incr_r;
            struct {
                struct {
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } notif1_intr_count_incr_r;
            struct {
                struct {
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } notif2_intr_count_incr_r;
            struct {
                struct {
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } notif3_intr_count_incr_r;
        } intr_block_rf;
    } field_combo_t;
    field_combo_t field_combo;

    typedef struct {
        struct {
            struct {
                struct {
                    logic value;
                } error_en;
                struct {
                    logic value;
                } notif_en;
            } global_intr_en_r;
            struct {
                struct {
                    logic value;
                } error0_en;
                struct {
                    logic value;
                } error1_en;
                struct {
                    logic value;
                } error2_en;
                struct {
                    logic value;
                } error3_en;
            } error_intr_en_r;
            struct {
                struct {
                    logic value;
                } notif0_en;
                struct {
                    logic value;
                } notif1_en;
                struct {
                    logic value;
                } notif2_en;
                struct {
                    logic value;
                } notif3_en;
            } notif_intr_en_r;
            struct {
                struct {
                    logic value;
                } agg_sts;
            } error_global_intr_r;
            struct {
                struct {
                    logic value;
                } agg_sts;
            } notif_global_intr_r;
            struct {
                struct {
                    logic value;
                } error0_sts;
                struct {
                    logic value;
                } error1_sts;
                struct {
                    logic value;
                } error2_sts;
                struct {
                    logic value;
                } error3_sts;
            } error_internal_intr_r;
            struct {
                struct {
                    logic value;
                } notif0_sts;
                struct {
                    logic value;
                } notif1_sts;
                struct {
                    logic value;
                } notif2_sts;
                struct {
                    logic value;
                } notif3_sts;
            } notif_internal_intr_r;
            struct {
                struct {
                    logic value;
                } error0_trig;
                struct {
                    logic value;
                } error1_trig;
                struct {
                    logic value;
                } error2_trig;
                struct {
                    logic value;
                } error3_trig;
            } error_intr_trig_r;
            struct {
                struct {
                    logic value;
                } notif0_trig;
                struct {
                    logic value;
                } notif1_trig;
                struct {
                    logic value;
                } notif2_trig;
                struct {
                    logic value;
                } notif3_trig;
            } notif_intr_trig_r;
            struct {
                struct {
                    logic [31:0] value;
                } cnt;
            } error0_intr_count_r;
            struct {
                struct {
                    logic [31:0] value;
                } cnt;
            } error1_intr_count_r;
            struct {
                struct {
                    logic [31:0] value;
                } cnt;
            } error2_intr_count_r;
            struct {
                struct {
                    logic [31:0] value;
                } cnt;
            } error3_intr_count_r;
            struct {
                struct {
                    logic [31:0] value;
                } cnt;
            } notif0_intr_count_r;
            struct {
                struct {
                    logic [31:0] value;
                } cnt;
            } notif1_intr_count_r;
            struct {
                struct {
                    logic [31:0] value;
                } cnt;
            } notif2_intr_count_r;
            struct {
                struct {
                    logic [31:0] value;
                } cnt;
            } notif3_intr_count_r;
            struct {
                struct {
                    logic value;
                } pulse;
            } error0_intr_count_incr_r;
            struct {
                struct {
                    logic value;
                } pulse;
            } error1_intr_count_incr_r;
            struct {
                struct {
                    logic value;
                } pulse;
            } error2_intr_count_incr_r;
            struct {
                struct {
                    logic value;
                } pulse;
            } error3_intr_count_incr_r;
            struct {
                struct {
                    logic value;
                } pulse;
            } notif0_intr_count_incr_r;
            struct {
                struct {
                    logic value;
                } pulse;
            } notif1_intr_count_incr_r;
            struct {
                struct {
                    logic value;
                } pulse;
            } notif2_intr_count_incr_r;
            struct {
                struct {
                    logic value;
                } pulse;
            } notif3_intr_count_incr_r;
        } intr_block_rf;
    } field_storage_t;
    field_storage_t field_storage;

    // Field: interrupt_regs.intr_block_rf.global_intr_en_r.error_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.global_intr_en_r.error_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.global_intr_en_r && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[0:0];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.global_intr_en_r.error_en.next = next_c;
        field_combo.intr_block_rf.global_intr_en_r.error_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.global_intr_en_r.error_en.value <= 'h0;
        end else if(field_combo.intr_block_rf.global_intr_en_r.error_en.load_next) begin
            field_storage.intr_block_rf.global_intr_en_r.error_en.value <= field_combo.intr_block_rf.global_intr_en_r.error_en.next;
        end
    end
    // Field: interrupt_regs.intr_block_rf.global_intr_en_r.notif_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.global_intr_en_r.notif_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.global_intr_en_r && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[1:1];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.global_intr_en_r.notif_en.next = next_c;
        field_combo.intr_block_rf.global_intr_en_r.notif_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.global_intr_en_r.notif_en.value <= 'h0;
        end else if(field_combo.intr_block_rf.global_intr_en_r.notif_en.load_next) begin
            field_storage.intr_block_rf.global_intr_en_r.notif_en.value <= field_combo.intr_block_rf.global_intr_en_r.notif_en.next;
        end
    end
    // Field: interrupt_regs.intr_block_rf.error_intr_en_r.error0_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_intr_en_r.error0_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_en_r && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[0:0];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_en_r.error0_en.next = next_c;
        field_combo.intr_block_rf.error_intr_en_r.error0_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error_intr_en_r.error0_en.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_intr_en_r.error0_en.load_next) begin
            field_storage.intr_block_rf.error_intr_en_r.error0_en.value <= field_combo.intr_block_rf.error_intr_en_r.error0_en.next;
        end
    end
    // Field: interrupt_regs.intr_block_rf.error_intr_en_r.error1_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_intr_en_r.error1_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_en_r && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[1:1];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_en_r.error1_en.next = next_c;
        field_combo.intr_block_rf.error_intr_en_r.error1_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error_intr_en_r.error1_en.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_intr_en_r.error1_en.load_next) begin
            field_storage.intr_block_rf.error_intr_en_r.error1_en.value <= field_combo.intr_block_rf.error_intr_en_r.error1_en.next;
        end
    end
    // Field: interrupt_regs.intr_block_rf.error_intr_en_r.error2_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_intr_en_r.error2_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_en_r && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[2:2];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_en_r.error2_en.next = next_c;
        field_combo.intr_block_rf.error_intr_en_r.error2_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error_intr_en_r.error2_en.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_intr_en_r.error2_en.load_next) begin
            field_storage.intr_block_rf.error_intr_en_r.error2_en.value <= field_combo.intr_block_rf.error_intr_en_r.error2_en.next;
        end
    end
    // Field: interrupt_regs.intr_block_rf.error_intr_en_r.error3_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_intr_en_r.error3_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_en_r && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[3:3];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_en_r.error3_en.next = next_c;
        field_combo.intr_block_rf.error_intr_en_r.error3_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error_intr_en_r.error3_en.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_intr_en_r.error3_en.load_next) begin
            field_storage.intr_block_rf.error_intr_en_r.error3_en.value <= field_combo.intr_block_rf.error_intr_en_r.error3_en.next;
        end
    end
    // Field: interrupt_regs.intr_block_rf.notif_intr_en_r.notif0_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_intr_en_r.notif0_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_intr_en_r && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[0:0];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_intr_en_r.notif0_en.next = next_c;
        field_combo.intr_block_rf.notif_intr_en_r.notif0_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.notif_intr_en_r.notif0_en.value <= 'h0;
        end else if(field_combo.intr_block_rf.notif_intr_en_r.notif0_en.load_next) begin
            field_storage.intr_block_rf.notif_intr_en_r.notif0_en.value <= field_combo.intr_block_rf.notif_intr_en_r.notif0_en.next;
        end
    end
    // Field: interrupt_regs.intr_block_rf.notif_intr_en_r.notif1_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_intr_en_r.notif1_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_intr_en_r && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[1:1];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_intr_en_r.notif1_en.next = next_c;
        field_combo.intr_block_rf.notif_intr_en_r.notif1_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.notif_intr_en_r.notif1_en.value <= 'h0;
        end else if(field_combo.intr_block_rf.notif_intr_en_r.notif1_en.load_next) begin
            field_storage.intr_block_rf.notif_intr_en_r.notif1_en.value <= field_combo.intr_block_rf.notif_intr_en_r.notif1_en.next;
        end
    end
    // Field: interrupt_regs.intr_block_rf.notif_intr_en_r.notif2_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_intr_en_r.notif2_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_intr_en_r && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[2:2];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_intr_en_r.notif2_en.next = next_c;
        field_combo.intr_block_rf.notif_intr_en_r.notif2_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.notif_intr_en_r.notif2_en.value <= 'h0;
        end else if(field_combo.intr_block_rf.notif_intr_en_r.notif2_en.load_next) begin
            field_storage.intr_block_rf.notif_intr_en_r.notif2_en.value <= field_combo.intr_block_rf.notif_intr_en_r.notif2_en.next;
        end
    end
    // Field: interrupt_regs.intr_block_rf.notif_intr_en_r.notif3_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_intr_en_r.notif3_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_intr_en_r && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[3:3];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_intr_en_r.notif3_en.next = next_c;
        field_combo.intr_block_rf.notif_intr_en_r.notif3_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.notif_intr_en_r.notif3_en.value <= 'h0;
        end else if(field_combo.intr_block_rf.notif_intr_en_r.notif3_en.load_next) begin
            field_storage.intr_block_rf.notif_intr_en_r.notif3_en.value <= field_combo.intr_block_rf.notif_intr_en_r.notif3_en.next;
        end
    end
    // Field: interrupt_regs.intr_block_rf.error_global_intr_r.agg_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_global_intr_r.agg_sts.value;
        automatic logic load_next_c = '0;
        if(1) begin // HW Write
            next_c = hwif_out.intr_block_rf.error_internal_intr_r.intr;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_global_intr_r.agg_sts.next = next_c;
        field_combo.intr_block_rf.error_global_intr_r.agg_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error_global_intr_r.agg_sts.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_global_intr_r.agg_sts.load_next) begin
            field_storage.intr_block_rf.error_global_intr_r.agg_sts.value <= field_combo.intr_block_rf.error_global_intr_r.agg_sts.next;
        end
    end
    assign hwif_out.intr_block_rf.error_global_intr_r.intr =
        |(field_storage.intr_block_rf.error_global_intr_r.agg_sts.value & field_storage.intr_block_rf.global_intr_en_r.error_en.value);
    // Field: interrupt_regs.intr_block_rf.notif_global_intr_r.agg_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_global_intr_r.agg_sts.value;
        automatic logic load_next_c = '0;
        if(1) begin // HW Write
            next_c = hwif_out.intr_block_rf.notif_internal_intr_r.intr;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_global_intr_r.agg_sts.next = next_c;
        field_combo.intr_block_rf.notif_global_intr_r.agg_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.notif_global_intr_r.agg_sts.value <= 'h0;
        end else if(field_combo.intr_block_rf.notif_global_intr_r.agg_sts.load_next) begin
            field_storage.intr_block_rf.notif_global_intr_r.agg_sts.value <= field_combo.intr_block_rf.notif_global_intr_r.agg_sts.next;
        end
    end
    assign hwif_out.intr_block_rf.notif_global_intr_r.intr =
        |(field_storage.intr_block_rf.notif_global_intr_r.agg_sts.value & field_storage.intr_block_rf.global_intr_en_r.notif_en.value);
    // Field: interrupt_regs.intr_block_rf.error_internal_intr_r.error0_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_internal_intr_r.error0_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error0_trig.value) begin // stickybit
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error0_sts.value | field_storage.intr_block_rf.error_intr_trig_r.error0_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error0_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error_internal_intr_r && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error0_sts.value & ~decoded_wr_data[0:0];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_internal_intr_r.error0_sts.next = next_c;
        field_combo.intr_block_rf.error_internal_intr_r.error0_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.error_reset_b) begin
        if(~hwif_in.error_reset_b) begin
            field_storage.intr_block_rf.error_internal_intr_r.error0_sts.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_internal_intr_r.error0_sts.load_next) begin
            field_storage.intr_block_rf.error_internal_intr_r.error0_sts.value <= field_combo.intr_block_rf.error_internal_intr_r.error0_sts.next;
        end
    end
    // Field: interrupt_regs.intr_block_rf.error_internal_intr_r.error1_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_internal_intr_r.error1_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error1_trig.value) begin // stickybit
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error1_sts.value | field_storage.intr_block_rf.error_intr_trig_r.error1_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error1_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error_internal_intr_r && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error1_sts.value & ~decoded_wr_data[1:1];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_internal_intr_r.error1_sts.next = next_c;
        field_combo.intr_block_rf.error_internal_intr_r.error1_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.error_reset_b) begin
        if(~hwif_in.error_reset_b) begin
            field_storage.intr_block_rf.error_internal_intr_r.error1_sts.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_internal_intr_r.error1_sts.load_next) begin
            field_storage.intr_block_rf.error_internal_intr_r.error1_sts.value <= field_combo.intr_block_rf.error_internal_intr_r.error1_sts.next;
        end
    end
    // Field: interrupt_regs.intr_block_rf.error_internal_intr_r.error2_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_internal_intr_r.error2_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error2_trig.value) begin // stickybit
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error2_sts.value | field_storage.intr_block_rf.error_intr_trig_r.error2_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error2_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error_internal_intr_r && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error2_sts.value & ~decoded_wr_data[2:2];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_internal_intr_r.error2_sts.next = next_c;
        field_combo.intr_block_rf.error_internal_intr_r.error2_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.error_reset_b) begin
        if(~hwif_in.error_reset_b) begin
            field_storage.intr_block_rf.error_internal_intr_r.error2_sts.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_internal_intr_r.error2_sts.load_next) begin
            field_storage.intr_block_rf.error_internal_intr_r.error2_sts.value <= field_combo.intr_block_rf.error_internal_intr_r.error2_sts.next;
        end
    end
    // Field: interrupt_regs.intr_block_rf.error_internal_intr_r.error3_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_internal_intr_r.error3_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error3_trig.value) begin // stickybit
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error3_sts.value | field_storage.intr_block_rf.error_intr_trig_r.error3_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error3_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error_internal_intr_r && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error3_sts.value & ~decoded_wr_data[3:3];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_internal_intr_r.error3_sts.next = next_c;
        field_combo.intr_block_rf.error_internal_intr_r.error3_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.error_reset_b) begin
        if(~hwif_in.error_reset_b) begin
            field_storage.intr_block_rf.error_internal_intr_r.error3_sts.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_internal_intr_r.error3_sts.load_next) begin
            field_storage.intr_block_rf.error_internal_intr_r.error3_sts.value <= field_combo.intr_block_rf.error_internal_intr_r.error3_sts.next;
        end
    end
    assign hwif_out.intr_block_rf.error_internal_intr_r.intr =
        |(field_storage.intr_block_rf.error_internal_intr_r.error0_sts.value & field_storage.intr_block_rf.error_intr_en_r.error0_en.value)
        || |(field_storage.intr_block_rf.error_internal_intr_r.error1_sts.value & field_storage.intr_block_rf.error_intr_en_r.error1_en.value)
        || |(field_storage.intr_block_rf.error_internal_intr_r.error2_sts.value & field_storage.intr_block_rf.error_intr_en_r.error2_en.value)
        || |(field_storage.intr_block_rf.error_internal_intr_r.error3_sts.value & field_storage.intr_block_rf.error_intr_en_r.error3_en.value);
    // Field: interrupt_regs.intr_block_rf.notif_internal_intr_r.notif0_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif0_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif_intr_trig_r.notif0_trig.value) begin // stickybit
            next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif0_sts.value | field_storage.intr_block_rf.notif_intr_trig_r.notif0_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif_internal_intr_r.notif0_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.notif_internal_intr_r && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif0_sts.value & ~decoded_wr_data[0:0];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_internal_intr_r.notif0_sts.next = next_c;
        field_combo.intr_block_rf.notif_internal_intr_r.notif0_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.notif_internal_intr_r.notif0_sts.value <= 'h0;
        end else if(field_combo.intr_block_rf.notif_internal_intr_r.notif0_sts.load_next) begin
            field_storage.intr_block_rf.notif_internal_intr_r.notif0_sts.value <= field_combo.intr_block_rf.notif_internal_intr_r.notif0_sts.next;
        end
    end
    // Field: interrupt_regs.intr_block_rf.notif_internal_intr_r.notif1_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif1_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif_intr_trig_r.notif1_trig.value) begin // stickybit
            next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif1_sts.value | field_storage.intr_block_rf.notif_intr_trig_r.notif1_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif_internal_intr_r.notif1_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.notif_internal_intr_r && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif1_sts.value & ~decoded_wr_data[1:1];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_internal_intr_r.notif1_sts.next = next_c;
        field_combo.intr_block_rf.notif_internal_intr_r.notif1_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.notif_internal_intr_r.notif1_sts.value <= 'h0;
        end else if(field_combo.intr_block_rf.notif_internal_intr_r.notif1_sts.load_next) begin
            field_storage.intr_block_rf.notif_internal_intr_r.notif1_sts.value <= field_combo.intr_block_rf.notif_internal_intr_r.notif1_sts.next;
        end
    end
    // Field: interrupt_regs.intr_block_rf.notif_internal_intr_r.notif2_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif2_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif_intr_trig_r.notif2_trig.value) begin // stickybit
            next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif2_sts.value | field_storage.intr_block_rf.notif_intr_trig_r.notif2_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif_internal_intr_r.notif2_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.notif_internal_intr_r && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif2_sts.value & ~decoded_wr_data[2:2];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_internal_intr_r.notif2_sts.next = next_c;
        field_combo.intr_block_rf.notif_internal_intr_r.notif2_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.notif_internal_intr_r.notif2_sts.value <= 'h0;
        end else if(field_combo.intr_block_rf.notif_internal_intr_r.notif2_sts.load_next) begin
            field_storage.intr_block_rf.notif_internal_intr_r.notif2_sts.value <= field_combo.intr_block_rf.notif_internal_intr_r.notif2_sts.next;
        end
    end
    // Field: interrupt_regs.intr_block_rf.notif_internal_intr_r.notif3_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif3_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif_intr_trig_r.notif3_trig.value) begin // stickybit
            next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif3_sts.value | field_storage.intr_block_rf.notif_intr_trig_r.notif3_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif_internal_intr_r.notif3_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.notif_internal_intr_r && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif3_sts.value & ~decoded_wr_data[3:3];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_internal_intr_r.notif3_sts.next = next_c;
        field_combo.intr_block_rf.notif_internal_intr_r.notif3_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.notif_internal_intr_r.notif3_sts.value <= 'h0;
        end else if(field_combo.intr_block_rf.notif_internal_intr_r.notif3_sts.load_next) begin
            field_storage.intr_block_rf.notif_internal_intr_r.notif3_sts.value <= field_combo.intr_block_rf.notif_internal_intr_r.notif3_sts.next;
        end
    end
    assign hwif_out.intr_block_rf.notif_internal_intr_r.intr =
        |(field_storage.intr_block_rf.notif_internal_intr_r.notif0_sts.value & field_storage.intr_block_rf.notif_intr_en_r.notif0_en.value)
        || |(field_storage.intr_block_rf.notif_internal_intr_r.notif1_sts.value & field_storage.intr_block_rf.notif_intr_en_r.notif1_en.value)
        || |(field_storage.intr_block_rf.notif_internal_intr_r.notif2_sts.value & field_storage.intr_block_rf.notif_intr_en_r.notif2_en.value)
        || |(field_storage.intr_block_rf.notif_internal_intr_r.notif3_sts.value & field_storage.intr_block_rf.notif_intr_en_r.notif3_en.value);
    // Field: interrupt_regs.intr_block_rf.error_intr_trig_r.error0_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_intr_trig_r.error0_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_trig_r && decoded_req_is_wr) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error0_trig.value | decoded_wr_data[0:0];
            load_next_c = '1;
        end else if(1) begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_trig_r.error0_trig.next = next_c;
        field_combo.intr_block_rf.error_intr_trig_r.error0_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error_intr_trig_r.error0_trig.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_intr_trig_r.error0_trig.load_next) begin
            field_storage.intr_block_rf.error_intr_trig_r.error0_trig.value <= field_combo.intr_block_rf.error_intr_trig_r.error0_trig.next;
        end
    end
    // Field: interrupt_regs.intr_block_rf.error_intr_trig_r.error1_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_intr_trig_r.error1_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_trig_r && decoded_req_is_wr) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error1_trig.value | decoded_wr_data[1:1];
            load_next_c = '1;
        end else if(1) begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_trig_r.error1_trig.next = next_c;
        field_combo.intr_block_rf.error_intr_trig_r.error1_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error_intr_trig_r.error1_trig.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_intr_trig_r.error1_trig.load_next) begin
            field_storage.intr_block_rf.error_intr_trig_r.error1_trig.value <= field_combo.intr_block_rf.error_intr_trig_r.error1_trig.next;
        end
    end
    // Field: interrupt_regs.intr_block_rf.error_intr_trig_r.error2_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_intr_trig_r.error2_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_trig_r && decoded_req_is_wr) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error2_trig.value | decoded_wr_data[2:2];
            load_next_c = '1;
        end else if(1) begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_trig_r.error2_trig.next = next_c;
        field_combo.intr_block_rf.error_intr_trig_r.error2_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error_intr_trig_r.error2_trig.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_intr_trig_r.error2_trig.load_next) begin
            field_storage.intr_block_rf.error_intr_trig_r.error2_trig.value <= field_combo.intr_block_rf.error_intr_trig_r.error2_trig.next;
        end
    end
    // Field: interrupt_regs.intr_block_rf.error_intr_trig_r.error3_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_intr_trig_r.error3_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_trig_r && decoded_req_is_wr) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error3_trig.value | decoded_wr_data[3:3];
            load_next_c = '1;
        end else if(1) begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_trig_r.error3_trig.next = next_c;
        field_combo.intr_block_rf.error_intr_trig_r.error3_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error_intr_trig_r.error3_trig.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_intr_trig_r.error3_trig.load_next) begin
            field_storage.intr_block_rf.error_intr_trig_r.error3_trig.value <= field_combo.intr_block_rf.error_intr_trig_r.error3_trig.next;
        end
    end
    // Field: interrupt_regs.intr_block_rf.notif_intr_trig_r.notif0_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif0_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_intr_trig_r && decoded_req_is_wr) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif0_trig.value | decoded_wr_data[0:0];
            load_next_c = '1;
        end else if(1) begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_intr_trig_r.notif0_trig.next = next_c;
        field_combo.intr_block_rf.notif_intr_trig_r.notif0_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.notif_intr_trig_r.notif0_trig.value <= 'h0;
        end else if(field_combo.intr_block_rf.notif_intr_trig_r.notif0_trig.load_next) begin
            field_storage.intr_block_rf.notif_intr_trig_r.notif0_trig.value <= field_combo.intr_block_rf.notif_intr_trig_r.notif0_trig.next;
        end
    end
    // Field: interrupt_regs.intr_block_rf.notif_intr_trig_r.notif1_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif1_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_intr_trig_r && decoded_req_is_wr) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif1_trig.value | decoded_wr_data[1:1];
            load_next_c = '1;
        end else if(1) begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_intr_trig_r.notif1_trig.next = next_c;
        field_combo.intr_block_rf.notif_intr_trig_r.notif1_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.notif_intr_trig_r.notif1_trig.value <= 'h0;
        end else if(field_combo.intr_block_rf.notif_intr_trig_r.notif1_trig.load_next) begin
            field_storage.intr_block_rf.notif_intr_trig_r.notif1_trig.value <= field_combo.intr_block_rf.notif_intr_trig_r.notif1_trig.next;
        end
    end
    // Field: interrupt_regs.intr_block_rf.notif_intr_trig_r.notif2_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif2_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_intr_trig_r && decoded_req_is_wr) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif2_trig.value | decoded_wr_data[2:2];
            load_next_c = '1;
        end else if(1) begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_intr_trig_r.notif2_trig.next = next_c;
        field_combo.intr_block_rf.notif_intr_trig_r.notif2_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.notif_intr_trig_r.notif2_trig.value <= 'h0;
        end else if(field_combo.intr_block_rf.notif_intr_trig_r.notif2_trig.load_next) begin
            field_storage.intr_block_rf.notif_intr_trig_r.notif2_trig.value <= field_combo.intr_block_rf.notif_intr_trig_r.notif2_trig.next;
        end
    end
    // Field: interrupt_regs.intr_block_rf.notif_intr_trig_r.notif3_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif3_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_intr_trig_r && decoded_req_is_wr) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif3_trig.value | decoded_wr_data[3:3];
            load_next_c = '1;
        end else if(1) begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_intr_trig_r.notif3_trig.next = next_c;
        field_combo.intr_block_rf.notif_intr_trig_r.notif3_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.notif_intr_trig_r.notif3_trig.value <= 'h0;
        end else if(field_combo.intr_block_rf.notif_intr_trig_r.notif3_trig.load_next) begin
            field_storage.intr_block_rf.notif_intr_trig_r.notif3_trig.value <= field_combo.intr_block_rf.notif_intr_trig_r.notif3_trig.next;
        end
    end
    // Field: interrupt_regs.intr_block_rf.error0_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.error0_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error0_intr_count_r && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[31:0];
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error0_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 'h1) > 'hffffffff) begin // up-counter saturated
                next_c = 'hffffffff;
            end else begin
                next_c = next_c + 'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error0_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error0_intr_count_r.cnt.value >= 'hffffffff);
        field_combo.intr_block_rf.error0_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error0_intr_count_r.cnt.value >= 'hffffffff);
        if(next_c > 'hffffffff) begin
            next_c = 'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error0_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error0_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.error_reset_b) begin
        if(~hwif_in.error_reset_b) begin
            field_storage.intr_block_rf.error0_intr_count_r.cnt.value <= 'h0;
        end else if(field_combo.intr_block_rf.error0_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error0_intr_count_r.cnt.value <= field_combo.intr_block_rf.error0_intr_count_r.cnt.next;
        end
    end
    // Field: interrupt_regs.intr_block_rf.error1_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.error1_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_count_r && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[31:0];
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error1_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 'h1) > 'hffffffff) begin // up-counter saturated
                next_c = 'hffffffff;
            end else begin
                next_c = next_c + 'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error1_intr_count_r.cnt.value >= 'hffffffff);
        field_combo.intr_block_rf.error1_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error1_intr_count_r.cnt.value >= 'hffffffff);
        if(next_c > 'hffffffff) begin
            next_c = 'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error1_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.error_reset_b) begin
        if(~hwif_in.error_reset_b) begin
            field_storage.intr_block_rf.error1_intr_count_r.cnt.value <= 'h0;
        end else if(field_combo.intr_block_rf.error1_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error1_intr_count_r.cnt.value <= field_combo.intr_block_rf.error1_intr_count_r.cnt.next;
        end
    end
    // Field: interrupt_regs.intr_block_rf.error2_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.error2_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error2_intr_count_r && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[31:0];
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error2_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 'h1) > 'hffffffff) begin // up-counter saturated
                next_c = 'hffffffff;
            end else begin
                next_c = next_c + 'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error2_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error2_intr_count_r.cnt.value >= 'hffffffff);
        field_combo.intr_block_rf.error2_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error2_intr_count_r.cnt.value >= 'hffffffff);
        if(next_c > 'hffffffff) begin
            next_c = 'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error2_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error2_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.error_reset_b) begin
        if(~hwif_in.error_reset_b) begin
            field_storage.intr_block_rf.error2_intr_count_r.cnt.value <= 'h0;
        end else if(field_combo.intr_block_rf.error2_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error2_intr_count_r.cnt.value <= field_combo.intr_block_rf.error2_intr_count_r.cnt.next;
        end
    end
    // Field: interrupt_regs.intr_block_rf.error3_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.error3_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error3_intr_count_r && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[31:0];
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error3_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 'h1) > 'hffffffff) begin // up-counter saturated
                next_c = 'hffffffff;
            end else begin
                next_c = next_c + 'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error3_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error3_intr_count_r.cnt.value >= 'hffffffff);
        field_combo.intr_block_rf.error3_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error3_intr_count_r.cnt.value >= 'hffffffff);
        if(next_c > 'hffffffff) begin
            next_c = 'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error3_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error3_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.error_reset_b) begin
        if(~hwif_in.error_reset_b) begin
            field_storage.intr_block_rf.error3_intr_count_r.cnt.value <= 'h0;
        end else if(field_combo.intr_block_rf.error3_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error3_intr_count_r.cnt.value <= field_combo.intr_block_rf.error3_intr_count_r.cnt.next;
        end
    end
    // Field: interrupt_regs.intr_block_rf.notif0_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.notif0_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif0_intr_count_r && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[31:0];
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif0_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 'h1) > 'hffffffff) begin // up-counter saturated
                next_c = 'hffffffff;
            end else begin
                next_c = next_c + 'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif0_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.notif0_intr_count_r.cnt.value >= 'hffffffff);
        field_combo.intr_block_rf.notif0_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.notif0_intr_count_r.cnt.value >= 'hffffffff);
        if(next_c > 'hffffffff) begin
            next_c = 'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif0_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.notif0_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.notif0_intr_count_r.cnt.value <= 'h0;
        end else if(field_combo.intr_block_rf.notif0_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.notif0_intr_count_r.cnt.value <= field_combo.intr_block_rf.notif0_intr_count_r.cnt.next;
        end
    end
    // Field: interrupt_regs.intr_block_rf.notif1_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.notif1_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif1_intr_count_r && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[31:0];
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif1_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 'h1) > 'hffffffff) begin // up-counter saturated
                next_c = 'hffffffff;
            end else begin
                next_c = next_c + 'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.notif1_intr_count_r.cnt.value >= 'hffffffff);
        field_combo.intr_block_rf.notif1_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.notif1_intr_count_r.cnt.value >= 'hffffffff);
        if(next_c > 'hffffffff) begin
            next_c = 'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.notif1_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.notif1_intr_count_r.cnt.value <= 'h0;
        end else if(field_combo.intr_block_rf.notif1_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.notif1_intr_count_r.cnt.value <= field_combo.intr_block_rf.notif1_intr_count_r.cnt.next;
        end
    end
    // Field: interrupt_regs.intr_block_rf.notif2_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.notif2_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif2_intr_count_r && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[31:0];
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif2_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 'h1) > 'hffffffff) begin // up-counter saturated
                next_c = 'hffffffff;
            end else begin
                next_c = next_c + 'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif2_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.notif2_intr_count_r.cnt.value >= 'hffffffff);
        field_combo.intr_block_rf.notif2_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.notif2_intr_count_r.cnt.value >= 'hffffffff);
        if(next_c > 'hffffffff) begin
            next_c = 'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif2_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.notif2_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.notif2_intr_count_r.cnt.value <= 'h0;
        end else if(field_combo.intr_block_rf.notif2_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.notif2_intr_count_r.cnt.value <= field_combo.intr_block_rf.notif2_intr_count_r.cnt.next;
        end
    end
    // Field: interrupt_regs.intr_block_rf.notif3_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.notif3_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif3_intr_count_r && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[31:0];
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif3_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 'h1) > 'hffffffff) begin // up-counter saturated
                next_c = 'hffffffff;
            end else begin
                next_c = next_c + 'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif3_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.notif3_intr_count_r.cnt.value >= 'hffffffff);
        field_combo.intr_block_rf.notif3_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.notif3_intr_count_r.cnt.value >= 'hffffffff);
        if(next_c > 'hffffffff) begin
            next_c = 'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif3_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.notif3_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.notif3_intr_count_r.cnt.value <= 'h0;
        end else if(field_combo.intr_block_rf.notif3_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.notif3_intr_count_r.cnt.value <= field_combo.intr_block_rf.notif3_intr_count_r.cnt.next;
        end
    end
    // Field: interrupt_regs.intr_block_rf.error0_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error0_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error0_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error0_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error0_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error0_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error0_intr_count_incr_r.pulse.underflow = (next_c < ('h1));
            next_c = next_c - 'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error0_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error0_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error0_intr_count_incr_r.pulse.value <= 'd0);
        field_combo.intr_block_rf.error0_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error0_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error0_intr_count_incr_r.pulse.value <= 'h0;
        end else if(field_combo.intr_block_rf.error0_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error0_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error0_intr_count_incr_r.pulse.next;
        end
    end
    // Field: interrupt_regs.intr_block_rf.error1_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error1_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error1_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error1_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error1_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error1_intr_count_incr_r.pulse.underflow = (next_c < ('h1));
            next_c = next_c - 'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error1_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error1_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error1_intr_count_incr_r.pulse.value <= 'd0);
        field_combo.intr_block_rf.error1_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error1_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error1_intr_count_incr_r.pulse.value <= 'h0;
        end else if(field_combo.intr_block_rf.error1_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error1_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error1_intr_count_incr_r.pulse.next;
        end
    end
    // Field: interrupt_regs.intr_block_rf.error2_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error2_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error2_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error2_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error2_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error2_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error2_intr_count_incr_r.pulse.underflow = (next_c < ('h1));
            next_c = next_c - 'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error2_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error2_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error2_intr_count_incr_r.pulse.value <= 'd0);
        field_combo.intr_block_rf.error2_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error2_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error2_intr_count_incr_r.pulse.value <= 'h0;
        end else if(field_combo.intr_block_rf.error2_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error2_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error2_intr_count_incr_r.pulse.next;
        end
    end
    // Field: interrupt_regs.intr_block_rf.error3_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error3_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error3_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error3_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error3_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error3_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error3_intr_count_incr_r.pulse.underflow = (next_c < ('h1));
            next_c = next_c - 'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error3_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error3_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error3_intr_count_incr_r.pulse.value <= 'd0);
        field_combo.intr_block_rf.error3_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error3_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error3_intr_count_incr_r.pulse.value <= 'h0;
        end else if(field_combo.intr_block_rf.error3_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error3_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error3_intr_count_incr_r.pulse.next;
        end
    end
    // Field: interrupt_regs.intr_block_rf.notif0_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif0_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif_intr_trig_r.notif0_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif0_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif_internal_intr_r.notif0_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif0_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.notif0_intr_count_incr_r.pulse.underflow = (next_c < ('h1));
            next_c = next_c - 'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.notif0_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.notif0_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.notif0_intr_count_incr_r.pulse.value <= 'd0);
        field_combo.intr_block_rf.notif0_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.notif0_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.notif0_intr_count_incr_r.pulse.value <= 'h0;
        end else if(field_combo.intr_block_rf.notif0_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.notif0_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.notif0_intr_count_incr_r.pulse.next;
        end
    end
    // Field: interrupt_regs.intr_block_rf.notif1_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif_intr_trig_r.notif1_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif1_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif_internal_intr_r.notif1_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif1_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.notif1_intr_count_incr_r.pulse.underflow = (next_c < ('h1));
            next_c = next_c - 'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.notif1_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.notif1_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.notif1_intr_count_incr_r.pulse.value <= 'd0);
        field_combo.intr_block_rf.notif1_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.notif1_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.notif1_intr_count_incr_r.pulse.value <= 'h0;
        end else if(field_combo.intr_block_rf.notif1_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.notif1_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.notif1_intr_count_incr_r.pulse.next;
        end
    end
    // Field: interrupt_regs.intr_block_rf.notif2_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif2_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif_intr_trig_r.notif2_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif2_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif_internal_intr_r.notif2_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif2_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.notif2_intr_count_incr_r.pulse.underflow = (next_c < ('h1));
            next_c = next_c - 'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.notif2_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.notif2_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.notif2_intr_count_incr_r.pulse.value <= 'd0);
        field_combo.intr_block_rf.notif2_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.notif2_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.notif2_intr_count_incr_r.pulse.value <= 'h0;
        end else if(field_combo.intr_block_rf.notif2_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.notif2_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.notif2_intr_count_incr_r.pulse.next;
        end
    end
    // Field: interrupt_regs.intr_block_rf.notif3_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif3_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif_intr_trig_r.notif3_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif3_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif_internal_intr_r.notif3_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif3_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.notif3_intr_count_incr_r.pulse.underflow = (next_c < ('h1));
            next_c = next_c - 'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.notif3_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.notif3_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.notif3_intr_count_incr_r.pulse.value <= 'd0);
        field_combo.intr_block_rf.notif3_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.notif3_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.notif3_intr_count_incr_r.pulse.value <= 'h0;
        end else if(field_combo.intr_block_rf.notif3_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.notif3_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.notif3_intr_count_incr_r.pulse.next;
        end
    end

    //--------------------------------------------------------------------------
    // Readback
    //--------------------------------------------------------------------------
    logic readback_err;
    logic readback_done;
    logic [31:0] readback_data;
    
    // Assign readback values to a flattened array
    logic [31:0] readback_array[25];
    assign readback_array[0][0:0] = (decoded_reg_strb.intr_block_rf.global_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.global_intr_en_r.error_en.value : '0;
    assign readback_array[0][1:1] = (decoded_reg_strb.intr_block_rf.global_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.global_intr_en_r.notif_en.value : '0;
    assign readback_array[0][31:2] = '0;
    assign readback_array[1][0:0] = (decoded_reg_strb.intr_block_rf.error_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_en_r.error0_en.value : '0;
    assign readback_array[1][1:1] = (decoded_reg_strb.intr_block_rf.error_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_en_r.error1_en.value : '0;
    assign readback_array[1][2:2] = (decoded_reg_strb.intr_block_rf.error_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_en_r.error2_en.value : '0;
    assign readback_array[1][3:3] = (decoded_reg_strb.intr_block_rf.error_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_en_r.error3_en.value : '0;
    assign readback_array[1][31:4] = '0;
    assign readback_array[2][0:0] = (decoded_reg_strb.intr_block_rf.notif_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_intr_en_r.notif0_en.value : '0;
    assign readback_array[2][1:1] = (decoded_reg_strb.intr_block_rf.notif_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_intr_en_r.notif1_en.value : '0;
    assign readback_array[2][2:2] = (decoded_reg_strb.intr_block_rf.notif_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_intr_en_r.notif2_en.value : '0;
    assign readback_array[2][3:3] = (decoded_reg_strb.intr_block_rf.notif_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_intr_en_r.notif3_en.value : '0;
    assign readback_array[2][31:4] = '0;
    assign readback_array[3][0:0] = (decoded_reg_strb.intr_block_rf.error_global_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_global_intr_r.agg_sts.value : '0;
    assign readback_array[3][31:1] = '0;
    assign readback_array[4][0:0] = (decoded_reg_strb.intr_block_rf.notif_global_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_global_intr_r.agg_sts.value : '0;
    assign readback_array[4][31:1] = '0;
    assign readback_array[5][0:0] = (decoded_reg_strb.intr_block_rf.error_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_internal_intr_r.error0_sts.value : '0;
    assign readback_array[5][1:1] = (decoded_reg_strb.intr_block_rf.error_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_internal_intr_r.error1_sts.value : '0;
    assign readback_array[5][2:2] = (decoded_reg_strb.intr_block_rf.error_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_internal_intr_r.error2_sts.value : '0;
    assign readback_array[5][3:3] = (decoded_reg_strb.intr_block_rf.error_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_internal_intr_r.error3_sts.value : '0;
    assign readback_array[5][31:4] = '0;
    assign readback_array[6][0:0] = (decoded_reg_strb.intr_block_rf.notif_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_internal_intr_r.notif0_sts.value : '0;
    assign readback_array[6][1:1] = (decoded_reg_strb.intr_block_rf.notif_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_internal_intr_r.notif1_sts.value : '0;
    assign readback_array[6][2:2] = (decoded_reg_strb.intr_block_rf.notif_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_internal_intr_r.notif2_sts.value : '0;
    assign readback_array[6][3:3] = (decoded_reg_strb.intr_block_rf.notif_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_internal_intr_r.notif3_sts.value : '0;
    assign readback_array[6][31:4] = '0;
    assign readback_array[7][0:0] = (decoded_reg_strb.intr_block_rf.error_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_trig_r.error0_trig.value : '0;
    assign readback_array[7][1:1] = (decoded_reg_strb.intr_block_rf.error_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_trig_r.error1_trig.value : '0;
    assign readback_array[7][2:2] = (decoded_reg_strb.intr_block_rf.error_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_trig_r.error2_trig.value : '0;
    assign readback_array[7][3:3] = (decoded_reg_strb.intr_block_rf.error_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_trig_r.error3_trig.value : '0;
    assign readback_array[7][31:4] = '0;
    assign readback_array[8][0:0] = (decoded_reg_strb.intr_block_rf.notif_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_intr_trig_r.notif0_trig.value : '0;
    assign readback_array[8][1:1] = (decoded_reg_strb.intr_block_rf.notif_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_intr_trig_r.notif1_trig.value : '0;
    assign readback_array[8][2:2] = (decoded_reg_strb.intr_block_rf.notif_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_intr_trig_r.notif2_trig.value : '0;
    assign readback_array[8][3:3] = (decoded_reg_strb.intr_block_rf.notif_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_intr_trig_r.notif3_trig.value : '0;
    assign readback_array[8][31:4] = '0;
    assign readback_array[9][31:0] = (decoded_reg_strb.intr_block_rf.error0_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error0_intr_count_r.cnt.value : '0;
    assign readback_array[10][31:0] = (decoded_reg_strb.intr_block_rf.error1_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_count_r.cnt.value : '0;
    assign readback_array[11][31:0] = (decoded_reg_strb.intr_block_rf.error2_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error2_intr_count_r.cnt.value : '0;
    assign readback_array[12][31:0] = (decoded_reg_strb.intr_block_rf.error3_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error3_intr_count_r.cnt.value : '0;
    assign readback_array[13][31:0] = (decoded_reg_strb.intr_block_rf.notif0_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif0_intr_count_r.cnt.value : '0;
    assign readback_array[14][31:0] = (decoded_reg_strb.intr_block_rf.notif1_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_intr_count_r.cnt.value : '0;
    assign readback_array[15][31:0] = (decoded_reg_strb.intr_block_rf.notif2_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif2_intr_count_r.cnt.value : '0;
    assign readback_array[16][31:0] = (decoded_reg_strb.intr_block_rf.notif3_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif3_intr_count_r.cnt.value : '0;
    assign readback_array[17][0:0] = (decoded_reg_strb.intr_block_rf.error0_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error0_intr_count_incr_r.pulse.value : '0;
    assign readback_array[17][31:1] = '0;
    assign readback_array[18][0:0] = (decoded_reg_strb.intr_block_rf.error1_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_count_incr_r.pulse.value : '0;
    assign readback_array[18][31:1] = '0;
    assign readback_array[19][0:0] = (decoded_reg_strb.intr_block_rf.error2_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error2_intr_count_incr_r.pulse.value : '0;
    assign readback_array[19][31:1] = '0;
    assign readback_array[20][0:0] = (decoded_reg_strb.intr_block_rf.error3_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error3_intr_count_incr_r.pulse.value : '0;
    assign readback_array[20][31:1] = '0;
    assign readback_array[21][0:0] = (decoded_reg_strb.intr_block_rf.notif0_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif0_intr_count_incr_r.pulse.value : '0;
    assign readback_array[21][31:1] = '0;
    assign readback_array[22][0:0] = (decoded_reg_strb.intr_block_rf.notif1_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_intr_count_incr_r.pulse.value : '0;
    assign readback_array[22][31:1] = '0;
    assign readback_array[23][0:0] = (decoded_reg_strb.intr_block_rf.notif2_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif2_intr_count_incr_r.pulse.value : '0;
    assign readback_array[23][31:1] = '0;
    assign readback_array[24][0:0] = (decoded_reg_strb.intr_block_rf.notif3_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif3_intr_count_incr_r.pulse.value : '0;
    assign readback_array[24][31:1] = '0;


    // Reduce the array
    always_comb begin
        automatic logic [31:0] readback_data_var;
        readback_done = decoded_req & ~decoded_req_is_wr;
        readback_err = '0;
        readback_data_var = '0;
        for(int i=0; i<25; i++) readback_data_var |= readback_array[i];
        readback_data = readback_data_var;
    end


    assign cpuif_rd_ack = readback_done;
    assign cpuif_rd_data = readback_data;
    assign cpuif_rd_err = readback_err;


endmodule