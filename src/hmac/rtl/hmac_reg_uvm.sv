
// This file was autogenerated by PeakRDL-uvm
package hmac_reg_uvm;
    `include "uvm_macros.svh"
    import uvm_pkg::*;
    
    // Reg - hmac_reg::HMAC384_NAME
    class hmac_reg__HMAC384_NAME extends uvm_reg;
        rand uvm_reg_field NAME;

        function new(string name = "hmac_reg__HMAC384_NAME");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.NAME = new("NAME");
            this.NAME.configure(this, 32, 0, "RO", 1, 'h0, 0, 1, 0);
        endfunction : build
    endclass : hmac_reg__HMAC384_NAME

    // Reg - hmac_reg::HMAC384_VERSION
    class hmac_reg__HMAC384_VERSION extends uvm_reg;
        rand uvm_reg_field VERSION;

        function new(string name = "hmac_reg__HMAC384_VERSION");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.VERSION = new("VERSION");
            this.VERSION.configure(this, 32, 0, "RO", 1, 'h0, 0, 1, 0);
        endfunction : build
    endclass : hmac_reg__HMAC384_VERSION

    // Reg - hmac_reg::HMAC384_CTRL
    class hmac_reg__HMAC384_CTRL extends uvm_reg;
        rand uvm_reg_field INIT;
        rand uvm_reg_field NEXT;

        function new(string name = "hmac_reg__HMAC384_CTRL");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.INIT = new("INIT");
            this.INIT.configure(this, 1, 0, "WO", 1, 'h0, 1, 1, 0);
            this.NEXT = new("NEXT");
            this.NEXT.configure(this, 1, 1, "WO", 1, 'h0, 1, 1, 0);
        endfunction : build
    endclass : hmac_reg__HMAC384_CTRL

    // Reg - hmac_reg::HMAC384_STATUS
    class hmac_reg__HMAC384_STATUS extends uvm_reg;
        rand uvm_reg_field READY;
        rand uvm_reg_field VALID;

        function new(string name = "hmac_reg__HMAC384_STATUS");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.READY = new("READY");
            this.READY.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            this.VALID = new("VALID");
            this.VALID.configure(this, 1, 1, "RO", 1, 'h0, 1, 1, 0);
        endfunction : build
    endclass : hmac_reg__HMAC384_STATUS

    // Reg - hmac_reg::HMAC384_KEY
    class hmac_reg__HMAC384_KEY extends uvm_reg;
        rand uvm_reg_field KEY;

        function new(string name = "hmac_reg__HMAC384_KEY");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.KEY = new("KEY");
            this.KEY.configure(this, 32, 0, "WO", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : hmac_reg__HMAC384_KEY

    // Reg - hmac_reg::HMAC384_BLOCK
    class hmac_reg__HMAC384_BLOCK extends uvm_reg;
        rand uvm_reg_field BLOCK;

        function new(string name = "hmac_reg__HMAC384_BLOCK");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.BLOCK = new("BLOCK");
            this.BLOCK.configure(this, 32, 0, "WO", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : hmac_reg__HMAC384_BLOCK

    // Reg - hmac_reg::HMAC384_TAG
    class hmac_reg__HMAC384_TAG extends uvm_reg;
        rand uvm_reg_field TAG;

        function new(string name = "hmac_reg__HMAC384_TAG");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.TAG = new("TAG");
            this.TAG.configure(this, 32, 0, "RO", 1, 'h0, 1, 1, 0);
        endfunction : build
    endclass : hmac_reg__HMAC384_TAG

    // Addrmap - hmac_reg
    class hmac_reg extends uvm_reg_block;
        rand hmac_reg__HMAC384_NAME HMAC384_NAME[2];
        rand hmac_reg__HMAC384_VERSION HMAC384_VERSION[2];
        rand hmac_reg__HMAC384_CTRL HMAC384_CTRL;
        rand hmac_reg__HMAC384_STATUS HMAC384_STATUS;
        rand hmac_reg__HMAC384_KEY HMAC384_KEY[12];
        rand hmac_reg__HMAC384_BLOCK HMAC384_BLOCK[32];
        rand hmac_reg__HMAC384_TAG HMAC384_TAG[12];

        function new(string name = "hmac_reg");
            super.new(name);
        endfunction : new

        virtual function void build();
            this.default_map = create_map("reg_map", 0, 4, UVM_NO_ENDIAN);
            foreach(this.HMAC384_NAME[i0]) begin
                this.HMAC384_NAME[i0] = new($sformatf("HMAC384_NAME[%0d]", i0));
                this.HMAC384_NAME[i0].configure(this);
                
                this.HMAC384_NAME[i0].build();
                this.default_map.add_reg(this.HMAC384_NAME[i0], 'h0 + i0*'h4);
            end
            foreach(this.HMAC384_VERSION[i0]) begin
                this.HMAC384_VERSION[i0] = new($sformatf("HMAC384_VERSION[%0d]", i0));
                this.HMAC384_VERSION[i0].configure(this);
                
                this.HMAC384_VERSION[i0].build();
                this.default_map.add_reg(this.HMAC384_VERSION[i0], 'h8 + i0*'h4);
            end
            this.HMAC384_CTRL = new("HMAC384_CTRL");
            this.HMAC384_CTRL.configure(this);

            this.HMAC384_CTRL.build();
            this.default_map.add_reg(this.HMAC384_CTRL, 'h10);
            this.HMAC384_STATUS = new("HMAC384_STATUS");
            this.HMAC384_STATUS.configure(this);

            this.HMAC384_STATUS.build();
            this.default_map.add_reg(this.HMAC384_STATUS, 'h18);
            foreach(this.HMAC384_KEY[i0]) begin
                this.HMAC384_KEY[i0] = new($sformatf("HMAC384_KEY[%0d]", i0));
                this.HMAC384_KEY[i0].configure(this);
                
                this.HMAC384_KEY[i0].build();
                this.default_map.add_reg(this.HMAC384_KEY[i0], 'h40 + i0*'h4);
            end
            foreach(this.HMAC384_BLOCK[i0]) begin
                this.HMAC384_BLOCK[i0] = new($sformatf("HMAC384_BLOCK[%0d]", i0));
                this.HMAC384_BLOCK[i0].configure(this);
                
                this.HMAC384_BLOCK[i0].build();
                this.default_map.add_reg(this.HMAC384_BLOCK[i0], 'h80 + i0*'h4);
            end
            foreach(this.HMAC384_TAG[i0]) begin
                this.HMAC384_TAG[i0] = new($sformatf("HMAC384_TAG[%0d]", i0));
                this.HMAC384_TAG[i0].configure(this);
                
                this.HMAC384_TAG[i0].build();
                this.default_map.add_reg(this.HMAC384_TAG[i0], 'h100 + i0*'h4);
            end
        endfunction : build
    endclass : hmac_reg

endpackage: hmac_reg_uvm
