// Generated by PeakRDL-regblock - A free and open-source SystemVerilog generator
//  https://github.com/SystemRDL/PeakRDL-regblock

module sha512_reg (
        input wire clk,
        input wire rst,

        input wire s_cpuif_req,
        input wire s_cpuif_req_is_wr,
        input wire [11:0] s_cpuif_addr,
        input wire [31:0] s_cpuif_wr_data,
        output wire s_cpuif_req_stall_wr,
        output wire s_cpuif_req_stall_rd,
        output wire s_cpuif_rd_ack,
        output wire s_cpuif_rd_err,
        output wire [31:0] s_cpuif_rd_data,
        output wire s_cpuif_wr_ack,
        output wire s_cpuif_wr_err,

        input sha512_reg_pkg::sha512_reg__in_t hwif_in,
        output sha512_reg_pkg::sha512_reg__out_t hwif_out
    );

    //--------------------------------------------------------------------------
    // CPU Bus interface logic
    //--------------------------------------------------------------------------
    logic cpuif_req;
    logic cpuif_req_is_wr;
    logic [11:0] cpuif_addr;
    logic [31:0] cpuif_wr_data;
    logic cpuif_req_stall_wr;
    logic cpuif_req_stall_rd;

    logic cpuif_rd_ack;
    logic cpuif_rd_err;
    logic [31:0] cpuif_rd_data;

    logic cpuif_wr_ack;
    logic cpuif_wr_err;

    assign cpuif_req = s_cpuif_req;
    assign cpuif_req_is_wr = s_cpuif_req_is_wr;
    assign cpuif_addr = s_cpuif_addr;
    assign cpuif_wr_data = s_cpuif_wr_data;
    assign s_cpuif_req_stall_wr = cpuif_req_stall_wr;
    assign s_cpuif_req_stall_rd = cpuif_req_stall_rd;
    assign s_cpuif_rd_ack = cpuif_rd_ack;
    assign s_cpuif_rd_err = cpuif_rd_err;
    assign s_cpuif_rd_data = cpuif_rd_data;
    assign s_cpuif_wr_ack = cpuif_wr_ack;
    assign s_cpuif_wr_err = cpuif_wr_err;

    logic cpuif_req_masked;

    // Read & write latencies are balanced. Stalls not required
    assign cpuif_req_stall_rd = '0;
    assign cpuif_req_stall_wr = '0;
    assign cpuif_req_masked = cpuif_req;

    //--------------------------------------------------------------------------
    // Address Decode
    //--------------------------------------------------------------------------
    typedef struct packed{
        logic [2-1:0]SHA512_NAME;
        logic [2-1:0]SHA512_VERSION;
        logic SHA512_CTRL;
        logic SHA512_STATUS;
        logic [32-1:0]SHA512_BLOCK;
        logic [16-1:0]SHA512_DIGEST;
        logic SHA512_VAULT_RD_CTRL;
        logic SHA512_VAULT_RD_STATUS;
        logic SHA512_KV_WR_CTRL;
        logic SHA512_KV_WR_STATUS;
        logic SHA512_GEN_PCR_HASH_NONCE;
        logic SHA512_GEN_PCR_HASH_CTRL;
        logic SHA512_GEN_PCR_HASH_STATUS;
        logic [12-1:0]SHA512_GEN_PCR_HASH_DIGEST;
        struct packed{
            logic global_intr_en_r;
            logic error_intr_en_r;
            logic notif_intr_en_r;
            logic error_global_intr_r;
            logic notif_global_intr_r;
            logic error_internal_intr_r;
            logic notif_internal_intr_r;
            logic error_intr_trig_r;
            logic notif_intr_trig_r;
            logic error0_intr_count_r;
            logic error1_intr_count_r;
            logic error2_intr_count_r;
            logic error3_intr_count_r;
            logic notif_cmd_done_intr_count_r;
            logic error0_intr_count_incr_r;
            logic error1_intr_count_incr_r;
            logic error2_intr_count_incr_r;
            logic error3_intr_count_incr_r;
            logic notif_cmd_done_intr_count_incr_r;
        } intr_block_rf;
    } decoded_reg_strb_t;
    decoded_reg_strb_t decoded_reg_strb;
    logic decoded_req;
    logic decoded_req_is_wr;
    logic [31:0] decoded_wr_data;

    always_comb begin
        for(int i0=0; i0<2; i0++) begin
            decoded_reg_strb.SHA512_NAME[i0] = cpuif_req_masked & (cpuif_addr == 'h0 + i0*'h4);
        end
        for(int i0=0; i0<2; i0++) begin
            decoded_reg_strb.SHA512_VERSION[i0] = cpuif_req_masked & (cpuif_addr == 'h8 + i0*'h4);
        end
        decoded_reg_strb.SHA512_CTRL = cpuif_req_masked & (cpuif_addr == 'h10);
        decoded_reg_strb.SHA512_STATUS = cpuif_req_masked & (cpuif_addr == 'h18);
        for(int i0=0; i0<32; i0++) begin
            decoded_reg_strb.SHA512_BLOCK[i0] = cpuif_req_masked & (cpuif_addr == 'h80 + i0*'h4);
        end
        for(int i0=0; i0<16; i0++) begin
            decoded_reg_strb.SHA512_DIGEST[i0] = cpuif_req_masked & (cpuif_addr == 'h100 + i0*'h4);
        end
        decoded_reg_strb.SHA512_VAULT_RD_CTRL = cpuif_req_masked & (cpuif_addr == 'h600);
        decoded_reg_strb.SHA512_VAULT_RD_STATUS = cpuif_req_masked & (cpuif_addr == 'h604);
        decoded_reg_strb.SHA512_KV_WR_CTRL = cpuif_req_masked & (cpuif_addr == 'h608);
        decoded_reg_strb.SHA512_KV_WR_STATUS = cpuif_req_masked & (cpuif_addr == 'h60c);
        decoded_reg_strb.SHA512_GEN_PCR_HASH_NONCE = cpuif_req_masked & (cpuif_addr == 'h610);
        decoded_reg_strb.SHA512_GEN_PCR_HASH_CTRL = cpuif_req_masked & (cpuif_addr == 'h614);
        decoded_reg_strb.SHA512_GEN_PCR_HASH_STATUS = cpuif_req_masked & (cpuif_addr == 'h618);
        for(int i0=0; i0<12; i0++) begin
            decoded_reg_strb.SHA512_GEN_PCR_HASH_DIGEST[i0] = cpuif_req_masked & (cpuif_addr == 'h61c + i0*'h4);
        end
        decoded_reg_strb.intr_block_rf.global_intr_en_r = cpuif_req_masked & (cpuif_addr == 'h800);
        decoded_reg_strb.intr_block_rf.error_intr_en_r = cpuif_req_masked & (cpuif_addr == 'h804);
        decoded_reg_strb.intr_block_rf.notif_intr_en_r = cpuif_req_masked & (cpuif_addr == 'h808);
        decoded_reg_strb.intr_block_rf.error_global_intr_r = cpuif_req_masked & (cpuif_addr == 'h80c);
        decoded_reg_strb.intr_block_rf.notif_global_intr_r = cpuif_req_masked & (cpuif_addr == 'h810);
        decoded_reg_strb.intr_block_rf.error_internal_intr_r = cpuif_req_masked & (cpuif_addr == 'h814);
        decoded_reg_strb.intr_block_rf.notif_internal_intr_r = cpuif_req_masked & (cpuif_addr == 'h818);
        decoded_reg_strb.intr_block_rf.error_intr_trig_r = cpuif_req_masked & (cpuif_addr == 'h81c);
        decoded_reg_strb.intr_block_rf.notif_intr_trig_r = cpuif_req_masked & (cpuif_addr == 'h820);
        decoded_reg_strb.intr_block_rf.error0_intr_count_r = cpuif_req_masked & (cpuif_addr == 'h900);
        decoded_reg_strb.intr_block_rf.error1_intr_count_r = cpuif_req_masked & (cpuif_addr == 'h904);
        decoded_reg_strb.intr_block_rf.error2_intr_count_r = cpuif_req_masked & (cpuif_addr == 'h908);
        decoded_reg_strb.intr_block_rf.error3_intr_count_r = cpuif_req_masked & (cpuif_addr == 'h90c);
        decoded_reg_strb.intr_block_rf.notif_cmd_done_intr_count_r = cpuif_req_masked & (cpuif_addr == 'h980);
        decoded_reg_strb.intr_block_rf.error0_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 'ha00);
        decoded_reg_strb.intr_block_rf.error1_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 'ha04);
        decoded_reg_strb.intr_block_rf.error2_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 'ha08);
        decoded_reg_strb.intr_block_rf.error3_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 'ha0c);
        decoded_reg_strb.intr_block_rf.notif_cmd_done_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 'ha10);
    end

    // Pass down signals to next stage
    assign decoded_req = cpuif_req_masked;
    assign decoded_req_is_wr = cpuif_req_is_wr;
    assign decoded_wr_data = cpuif_wr_data;

    // Writes are always granted with no error response
    assign cpuif_wr_ack = decoded_req & decoded_req_is_wr;
    assign cpuif_wr_err = '0;

    //--------------------------------------------------------------------------
    // Field logic
    //--------------------------------------------------------------------------
    typedef struct packed{
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } INIT;
            struct packed{
                logic next;
                logic load_next;
            } NEXT;
            struct packed{
                logic [1:0] next;
                logic load_next;
            } MODE;
            struct packed{
                logic next;
                logic load_next;
            } ZEROIZE;
            struct packed{
                logic next;
                logic load_next;
            } LAST;
        } SHA512_CTRL;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } READY;
            struct packed{
                logic next;
                logic load_next;
            } VALID;
        } SHA512_STATUS;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } BLOCK;
        } [32-1:0]SHA512_BLOCK;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } DIGEST;
        } [16-1:0]SHA512_DIGEST;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } read_en;
            struct packed{
                logic [4:0] next;
                logic load_next;
            } read_entry;
            struct packed{
                logic next;
                logic load_next;
            } pcr_hash_extend;
            struct packed{
                logic [24:0] next;
                logic load_next;
            } rsvd;
        } SHA512_VAULT_RD_CTRL;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } VALID;
        } SHA512_VAULT_RD_STATUS;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } write_en;
            struct packed{
                logic [4:0] next;
                logic load_next;
            } write_entry;
            struct packed{
                logic next;
                logic load_next;
            } hmac_key_dest_valid;
            struct packed{
                logic next;
                logic load_next;
            } hmac_block_dest_valid;
            struct packed{
                logic next;
                logic load_next;
            } sha_block_dest_valid;
            struct packed{
                logic next;
                logic load_next;
            } ecc_pkey_dest_valid;
            struct packed{
                logic next;
                logic load_next;
            } ecc_seed_dest_valid;
            struct packed{
                logic next;
                logic load_next;
            } ecc_msg_dest_valid;
            struct packed{
                logic [19:0] next;
                logic load_next;
            } rsvd;
        } SHA512_KV_WR_CTRL;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } VALID;
        } SHA512_KV_WR_STATUS;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } NONCE;
        } SHA512_GEN_PCR_HASH_NONCE;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } START;
        } SHA512_GEN_PCR_HASH_CTRL;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } VALID;
        } SHA512_GEN_PCR_HASH_STATUS;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } DIGEST;
        } [12-1:0]SHA512_GEN_PCR_HASH_DIGEST;
        struct packed{
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } error_en;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_en;
            } global_intr_en_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } error0_en;
                struct packed{
                    logic next;
                    logic load_next;
                } error1_en;
                struct packed{
                    logic next;
                    logic load_next;
                } error2_en;
                struct packed{
                    logic next;
                    logic load_next;
                } error3_en;
            } error_intr_en_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } notif_cmd_done_en;
            } notif_intr_en_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } agg_sts;
            } error_global_intr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } agg_sts;
            } notif_global_intr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } error0_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } error1_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } error2_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } error3_sts;
            } error_internal_intr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } notif_cmd_done_sts;
            } notif_internal_intr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } error0_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } error1_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } error2_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } error3_trig;
            } error_intr_trig_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } notif_cmd_done_trig;
            } notif_intr_trig_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error0_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error1_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error2_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error3_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } notif_cmd_done_intr_count_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error0_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error1_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error2_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error3_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } notif_cmd_done_intr_count_incr_r;
        } intr_block_rf;
    } field_combo_t;
    field_combo_t field_combo;

    typedef struct packed{
        struct packed{
            struct packed{
                logic value;
            } INIT;
            struct packed{
                logic value;
            } NEXT;
            struct packed{
                logic [1:0] value;
            } MODE;
            struct packed{
                logic value;
            } ZEROIZE;
            struct packed{
                logic value;
            } LAST;
        } SHA512_CTRL;
        struct packed{
            struct packed{
                logic value;
            } READY;
            struct packed{
                logic value;
            } VALID;
        } SHA512_STATUS;
        struct packed{
            struct packed{
                logic [31:0] value;
            } BLOCK;
        } [32-1:0]SHA512_BLOCK;
        struct packed{
            struct packed{
                logic [31:0] value;
            } DIGEST;
        } [16-1:0]SHA512_DIGEST;
        struct packed{
            struct packed{
                logic value;
            } read_en;
            struct packed{
                logic [4:0] value;
            } read_entry;
            struct packed{
                logic value;
            } pcr_hash_extend;
            struct packed{
                logic [24:0] value;
            } rsvd;
        } SHA512_VAULT_RD_CTRL;
        struct packed{
            struct packed{
                logic value;
            } VALID;
        } SHA512_VAULT_RD_STATUS;
        struct packed{
            struct packed{
                logic value;
            } write_en;
            struct packed{
                logic [4:0] value;
            } write_entry;
            struct packed{
                logic value;
            } hmac_key_dest_valid;
            struct packed{
                logic value;
            } hmac_block_dest_valid;
            struct packed{
                logic value;
            } sha_block_dest_valid;
            struct packed{
                logic value;
            } ecc_pkey_dest_valid;
            struct packed{
                logic value;
            } ecc_seed_dest_valid;
            struct packed{
                logic value;
            } ecc_msg_dest_valid;
            struct packed{
                logic [19:0] value;
            } rsvd;
        } SHA512_KV_WR_CTRL;
        struct packed{
            struct packed{
                logic value;
            } VALID;
        } SHA512_KV_WR_STATUS;
        struct packed{
            struct packed{
                logic [31:0] value;
            } NONCE;
        } SHA512_GEN_PCR_HASH_NONCE;
        struct packed{
            struct packed{
                logic value;
            } START;
        } SHA512_GEN_PCR_HASH_CTRL;
        struct packed{
            struct packed{
                logic value;
            } VALID;
        } SHA512_GEN_PCR_HASH_STATUS;
        struct packed{
            struct packed{
                logic [31:0] value;
            } DIGEST;
        } [12-1:0]SHA512_GEN_PCR_HASH_DIGEST;
        struct packed{
            struct packed{
                struct packed{
                    logic value;
                } error_en;
                struct packed{
                    logic value;
                } notif_en;
            } global_intr_en_r;
            struct packed{
                struct packed{
                    logic value;
                } error0_en;
                struct packed{
                    logic value;
                } error1_en;
                struct packed{
                    logic value;
                } error2_en;
                struct packed{
                    logic value;
                } error3_en;
            } error_intr_en_r;
            struct packed{
                struct packed{
                    logic value;
                } notif_cmd_done_en;
            } notif_intr_en_r;
            struct packed{
                struct packed{
                    logic value;
                } agg_sts;
            } error_global_intr_r;
            struct packed{
                struct packed{
                    logic value;
                } agg_sts;
            } notif_global_intr_r;
            struct packed{
                struct packed{
                    logic value;
                } error0_sts;
                struct packed{
                    logic value;
                } error1_sts;
                struct packed{
                    logic value;
                } error2_sts;
                struct packed{
                    logic value;
                } error3_sts;
            } error_internal_intr_r;
            struct packed{
                struct packed{
                    logic value;
                } notif_cmd_done_sts;
            } notif_internal_intr_r;
            struct packed{
                struct packed{
                    logic value;
                } error0_trig;
                struct packed{
                    logic value;
                } error1_trig;
                struct packed{
                    logic value;
                } error2_trig;
                struct packed{
                    logic value;
                } error3_trig;
            } error_intr_trig_r;
            struct packed{
                struct packed{
                    logic value;
                } notif_cmd_done_trig;
            } notif_intr_trig_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error0_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error1_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error2_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error3_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } notif_cmd_done_intr_count_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error0_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error1_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error2_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error3_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } notif_cmd_done_intr_count_incr_r;
        } intr_block_rf;
    } field_storage_t;
    field_storage_t field_storage;

    // Field: sha512_reg.SHA512_CTRL.INIT
    always_comb begin
        automatic logic [0:0] next_c = field_storage.SHA512_CTRL.INIT.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.SHA512_CTRL && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[0:0];
            load_next_c = '1;
        end else if(1) begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.SHA512_CTRL.INIT.next = next_c;
        field_combo.SHA512_CTRL.INIT.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.SHA512_CTRL.INIT.value <= 'h0;
        end else if(field_combo.SHA512_CTRL.INIT.load_next) begin
            field_storage.SHA512_CTRL.INIT.value <= field_combo.SHA512_CTRL.INIT.next;
        end
    end
    assign hwif_out.SHA512_CTRL.INIT.value = field_storage.SHA512_CTRL.INIT.value;
    // Field: sha512_reg.SHA512_CTRL.NEXT
    always_comb begin
        automatic logic [0:0] next_c = field_storage.SHA512_CTRL.NEXT.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.SHA512_CTRL && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[1:1];
            load_next_c = '1;
        end else if(1) begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.SHA512_CTRL.NEXT.next = next_c;
        field_combo.SHA512_CTRL.NEXT.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.SHA512_CTRL.NEXT.value <= 'h0;
        end else if(field_combo.SHA512_CTRL.NEXT.load_next) begin
            field_storage.SHA512_CTRL.NEXT.value <= field_combo.SHA512_CTRL.NEXT.next;
        end
    end
    assign hwif_out.SHA512_CTRL.NEXT.value = field_storage.SHA512_CTRL.NEXT.value;
    // Field: sha512_reg.SHA512_CTRL.MODE
    always_comb begin
        automatic logic [1:0] next_c = field_storage.SHA512_CTRL.MODE.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.SHA512_CTRL && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[3:2];
            load_next_c = '1;
        end
        field_combo.SHA512_CTRL.MODE.next = next_c;
        field_combo.SHA512_CTRL.MODE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.SHA512_CTRL.MODE.value <= 'h2;
        end else if(field_combo.SHA512_CTRL.MODE.load_next) begin
            field_storage.SHA512_CTRL.MODE.value <= field_combo.SHA512_CTRL.MODE.next;
        end
    end
    assign hwif_out.SHA512_CTRL.MODE.value = field_storage.SHA512_CTRL.MODE.value;
    // Field: sha512_reg.SHA512_CTRL.ZEROIZE
    always_comb begin
        automatic logic [0:0] next_c = field_storage.SHA512_CTRL.ZEROIZE.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.SHA512_CTRL && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[4:4];
            load_next_c = '1;
        end else if(1) begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.SHA512_CTRL.ZEROIZE.next = next_c;
        field_combo.SHA512_CTRL.ZEROIZE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.SHA512_CTRL.ZEROIZE.value <= 'h0;
        end else if(field_combo.SHA512_CTRL.ZEROIZE.load_next) begin
            field_storage.SHA512_CTRL.ZEROIZE.value <= field_combo.SHA512_CTRL.ZEROIZE.next;
        end
    end
    assign hwif_out.SHA512_CTRL.ZEROIZE.value = field_storage.SHA512_CTRL.ZEROIZE.value;
    // Field: sha512_reg.SHA512_CTRL.LAST
    always_comb begin
        automatic logic [0:0] next_c = field_storage.SHA512_CTRL.LAST.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.SHA512_CTRL && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[5:5];
            load_next_c = '1;
        end else if(hwif_in.SHA512_CTRL.LAST.hwclr) begin // HW Clear
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.SHA512_CTRL.LAST.next = next_c;
        field_combo.SHA512_CTRL.LAST.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.SHA512_CTRL.LAST.value <= 'h0;
        end else if(field_combo.SHA512_CTRL.LAST.load_next) begin
            field_storage.SHA512_CTRL.LAST.value <= field_combo.SHA512_CTRL.LAST.next;
        end
    end
    assign hwif_out.SHA512_CTRL.LAST.value = field_storage.SHA512_CTRL.LAST.value;
    // Field: sha512_reg.SHA512_STATUS.READY
    always_comb begin
        automatic logic [0:0] next_c = field_storage.SHA512_STATUS.READY.value;
        automatic logic load_next_c = '0;
        if(1) begin // HW Write
            next_c = hwif_in.SHA512_STATUS.READY.next;
            load_next_c = '1;
        end
        field_combo.SHA512_STATUS.READY.next = next_c;
        field_combo.SHA512_STATUS.READY.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.SHA512_STATUS.READY.value <= 'h0;
        end else if(field_combo.SHA512_STATUS.READY.load_next) begin
            field_storage.SHA512_STATUS.READY.value <= field_combo.SHA512_STATUS.READY.next;
        end
    end
    assign hwif_out.SHA512_STATUS.READY.value = field_storage.SHA512_STATUS.READY.value;
    // Field: sha512_reg.SHA512_STATUS.VALID
    always_comb begin
        automatic logic [0:0] next_c = field_storage.SHA512_STATUS.VALID.value;
        automatic logic load_next_c = '0;
        if(1) begin // HW Write
            next_c = hwif_in.SHA512_STATUS.VALID.next;
            load_next_c = '1;
        end
        field_combo.SHA512_STATUS.VALID.next = next_c;
        field_combo.SHA512_STATUS.VALID.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.SHA512_STATUS.VALID.value <= 'h0;
        end else if(field_combo.SHA512_STATUS.VALID.load_next) begin
            field_storage.SHA512_STATUS.VALID.value <= field_combo.SHA512_STATUS.VALID.next;
        end
    end
    assign hwif_out.SHA512_STATUS.VALID.value = field_storage.SHA512_STATUS.VALID.value;
    for(genvar i0=0; i0<32; i0++) begin
        // Field: sha512_reg.SHA512_BLOCK[].BLOCK
        always_comb begin
            automatic logic [31:0] next_c = field_storage.SHA512_BLOCK[i0].BLOCK.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.SHA512_BLOCK[i0] && decoded_req_is_wr && !(hwif_in.SHA512_BLOCK[i0].BLOCK.swwel)) begin // SW write
                next_c = decoded_wr_data[31:0];
                load_next_c = '1;
            end else if(hwif_in.SHA512_BLOCK[i0].BLOCK.we) begin // HW Write - we
                next_c = hwif_in.SHA512_BLOCK[i0].BLOCK.next;
                load_next_c = '1;
            end else if(hwif_in.SHA512_BLOCK[i0].BLOCK.hwclr) begin // HW Clear
                next_c = '0;
                load_next_c = '1;
            end
            field_combo.SHA512_BLOCK[i0].BLOCK.next = next_c;
            field_combo.SHA512_BLOCK[i0].BLOCK.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.reset_b) begin
            if(~hwif_in.reset_b) begin
                field_storage.SHA512_BLOCK[i0].BLOCK.value <= 'h0;
            end else if(field_combo.SHA512_BLOCK[i0].BLOCK.load_next) begin
                field_storage.SHA512_BLOCK[i0].BLOCK.value <= field_combo.SHA512_BLOCK[i0].BLOCK.next;
            end
        end
        assign hwif_out.SHA512_BLOCK[i0].BLOCK.value = field_storage.SHA512_BLOCK[i0].BLOCK.value;
    end
    for(genvar i0=0; i0<16; i0++) begin
        // Field: sha512_reg.SHA512_DIGEST[].DIGEST
        always_comb begin
            automatic logic [31:0] next_c = field_storage.SHA512_DIGEST[i0].DIGEST.value;
            automatic logic load_next_c = '0;
            if(1) begin // HW Write
                next_c = hwif_in.SHA512_DIGEST[i0].DIGEST.next;
                load_next_c = '1;
            end else if(hwif_in.SHA512_DIGEST[i0].DIGEST.hwclr) begin // HW Clear
                next_c = '0;
                load_next_c = '1;
            end
            field_combo.SHA512_DIGEST[i0].DIGEST.next = next_c;
            field_combo.SHA512_DIGEST[i0].DIGEST.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.reset_b) begin
            if(~hwif_in.reset_b) begin
                field_storage.SHA512_DIGEST[i0].DIGEST.value <= 'h0;
            end else if(field_combo.SHA512_DIGEST[i0].DIGEST.load_next) begin
                field_storage.SHA512_DIGEST[i0].DIGEST.value <= field_combo.SHA512_DIGEST[i0].DIGEST.next;
            end
        end
    end
    // Field: sha512_reg.SHA512_VAULT_RD_CTRL.read_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.SHA512_VAULT_RD_CTRL.read_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.SHA512_VAULT_RD_CTRL && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[0:0];
            load_next_c = '1;
        end else if(hwif_in.SHA512_VAULT_RD_CTRL.read_en.hwclr) begin // HW Clear
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.SHA512_VAULT_RD_CTRL.read_en.next = next_c;
        field_combo.SHA512_VAULT_RD_CTRL.read_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.SHA512_VAULT_RD_CTRL.read_en.value <= 'h0;
        end else if(field_combo.SHA512_VAULT_RD_CTRL.read_en.load_next) begin
            field_storage.SHA512_VAULT_RD_CTRL.read_en.value <= field_combo.SHA512_VAULT_RD_CTRL.read_en.next;
        end
    end
    assign hwif_out.SHA512_VAULT_RD_CTRL.read_en.value = field_storage.SHA512_VAULT_RD_CTRL.read_en.value;
    // Field: sha512_reg.SHA512_VAULT_RD_CTRL.read_entry
    always_comb begin
        automatic logic [4:0] next_c = field_storage.SHA512_VAULT_RD_CTRL.read_entry.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.SHA512_VAULT_RD_CTRL && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[5:1];
            load_next_c = '1;
        end
        field_combo.SHA512_VAULT_RD_CTRL.read_entry.next = next_c;
        field_combo.SHA512_VAULT_RD_CTRL.read_entry.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.SHA512_VAULT_RD_CTRL.read_entry.value <= 'h0;
        end else if(field_combo.SHA512_VAULT_RD_CTRL.read_entry.load_next) begin
            field_storage.SHA512_VAULT_RD_CTRL.read_entry.value <= field_combo.SHA512_VAULT_RD_CTRL.read_entry.next;
        end
    end
    assign hwif_out.SHA512_VAULT_RD_CTRL.read_entry.value = field_storage.SHA512_VAULT_RD_CTRL.read_entry.value;
    // Field: sha512_reg.SHA512_VAULT_RD_CTRL.pcr_hash_extend
    always_comb begin
        automatic logic [0:0] next_c = field_storage.SHA512_VAULT_RD_CTRL.pcr_hash_extend.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.SHA512_VAULT_RD_CTRL && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[6:6];
            load_next_c = '1;
        end
        field_combo.SHA512_VAULT_RD_CTRL.pcr_hash_extend.next = next_c;
        field_combo.SHA512_VAULT_RD_CTRL.pcr_hash_extend.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.SHA512_VAULT_RD_CTRL.pcr_hash_extend.value <= 'h0;
        end else if(field_combo.SHA512_VAULT_RD_CTRL.pcr_hash_extend.load_next) begin
            field_storage.SHA512_VAULT_RD_CTRL.pcr_hash_extend.value <= field_combo.SHA512_VAULT_RD_CTRL.pcr_hash_extend.next;
        end
    end
    assign hwif_out.SHA512_VAULT_RD_CTRL.pcr_hash_extend.value = field_storage.SHA512_VAULT_RD_CTRL.pcr_hash_extend.value;
    // Field: sha512_reg.SHA512_VAULT_RD_CTRL.rsvd
    always_comb begin
        automatic logic [24:0] next_c = field_storage.SHA512_VAULT_RD_CTRL.rsvd.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.SHA512_VAULT_RD_CTRL && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[31:7];
            load_next_c = '1;
        end
        field_combo.SHA512_VAULT_RD_CTRL.rsvd.next = next_c;
        field_combo.SHA512_VAULT_RD_CTRL.rsvd.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.SHA512_VAULT_RD_CTRL.rsvd.value <= 'h0;
        end else if(field_combo.SHA512_VAULT_RD_CTRL.rsvd.load_next) begin
            field_storage.SHA512_VAULT_RD_CTRL.rsvd.value <= field_combo.SHA512_VAULT_RD_CTRL.rsvd.next;
        end
    end
    assign hwif_out.SHA512_VAULT_RD_CTRL.rsvd.value = field_storage.SHA512_VAULT_RD_CTRL.rsvd.value;
    // Field: sha512_reg.SHA512_VAULT_RD_STATUS.VALID
    always_comb begin
        automatic logic [0:0] next_c = field_storage.SHA512_VAULT_RD_STATUS.VALID.value;
        automatic logic load_next_c = '0;
        if(hwif_in.SHA512_VAULT_RD_STATUS.VALID.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(hwif_in.SHA512_VAULT_RD_STATUS.VALID.hwclr) begin // HW Clear
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.SHA512_VAULT_RD_STATUS.VALID.next = next_c;
        field_combo.SHA512_VAULT_RD_STATUS.VALID.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.SHA512_VAULT_RD_STATUS.VALID.value <= 'h0;
        end else if(field_combo.SHA512_VAULT_RD_STATUS.VALID.load_next) begin
            field_storage.SHA512_VAULT_RD_STATUS.VALID.value <= field_combo.SHA512_VAULT_RD_STATUS.VALID.next;
        end
    end
    // Field: sha512_reg.SHA512_KV_WR_CTRL.write_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.SHA512_KV_WR_CTRL.write_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.SHA512_KV_WR_CTRL && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[0:0];
            load_next_c = '1;
        end else if(hwif_in.SHA512_KV_WR_CTRL.write_en.hwclr) begin // HW Clear
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.SHA512_KV_WR_CTRL.write_en.next = next_c;
        field_combo.SHA512_KV_WR_CTRL.write_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.SHA512_KV_WR_CTRL.write_en.value <= 'h0;
        end else if(field_combo.SHA512_KV_WR_CTRL.write_en.load_next) begin
            field_storage.SHA512_KV_WR_CTRL.write_en.value <= field_combo.SHA512_KV_WR_CTRL.write_en.next;
        end
    end
    assign hwif_out.SHA512_KV_WR_CTRL.write_en.value = field_storage.SHA512_KV_WR_CTRL.write_en.value;
    // Field: sha512_reg.SHA512_KV_WR_CTRL.write_entry
    always_comb begin
        automatic logic [4:0] next_c = field_storage.SHA512_KV_WR_CTRL.write_entry.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.SHA512_KV_WR_CTRL && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[5:1];
            load_next_c = '1;
        end
        field_combo.SHA512_KV_WR_CTRL.write_entry.next = next_c;
        field_combo.SHA512_KV_WR_CTRL.write_entry.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.SHA512_KV_WR_CTRL.write_entry.value <= 'h0;
        end else if(field_combo.SHA512_KV_WR_CTRL.write_entry.load_next) begin
            field_storage.SHA512_KV_WR_CTRL.write_entry.value <= field_combo.SHA512_KV_WR_CTRL.write_entry.next;
        end
    end
    assign hwif_out.SHA512_KV_WR_CTRL.write_entry.value = field_storage.SHA512_KV_WR_CTRL.write_entry.value;
    // Field: sha512_reg.SHA512_KV_WR_CTRL.hmac_key_dest_valid
    always_comb begin
        automatic logic [0:0] next_c = field_storage.SHA512_KV_WR_CTRL.hmac_key_dest_valid.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.SHA512_KV_WR_CTRL && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[6:6];
            load_next_c = '1;
        end
        field_combo.SHA512_KV_WR_CTRL.hmac_key_dest_valid.next = next_c;
        field_combo.SHA512_KV_WR_CTRL.hmac_key_dest_valid.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.SHA512_KV_WR_CTRL.hmac_key_dest_valid.value <= 'h0;
        end else if(field_combo.SHA512_KV_WR_CTRL.hmac_key_dest_valid.load_next) begin
            field_storage.SHA512_KV_WR_CTRL.hmac_key_dest_valid.value <= field_combo.SHA512_KV_WR_CTRL.hmac_key_dest_valid.next;
        end
    end
    assign hwif_out.SHA512_KV_WR_CTRL.hmac_key_dest_valid.value = field_storage.SHA512_KV_WR_CTRL.hmac_key_dest_valid.value;
    // Field: sha512_reg.SHA512_KV_WR_CTRL.hmac_block_dest_valid
    always_comb begin
        automatic logic [0:0] next_c = field_storage.SHA512_KV_WR_CTRL.hmac_block_dest_valid.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.SHA512_KV_WR_CTRL && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[7:7];
            load_next_c = '1;
        end
        field_combo.SHA512_KV_WR_CTRL.hmac_block_dest_valid.next = next_c;
        field_combo.SHA512_KV_WR_CTRL.hmac_block_dest_valid.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.SHA512_KV_WR_CTRL.hmac_block_dest_valid.value <= 'h0;
        end else if(field_combo.SHA512_KV_WR_CTRL.hmac_block_dest_valid.load_next) begin
            field_storage.SHA512_KV_WR_CTRL.hmac_block_dest_valid.value <= field_combo.SHA512_KV_WR_CTRL.hmac_block_dest_valid.next;
        end
    end
    assign hwif_out.SHA512_KV_WR_CTRL.hmac_block_dest_valid.value = field_storage.SHA512_KV_WR_CTRL.hmac_block_dest_valid.value;
    // Field: sha512_reg.SHA512_KV_WR_CTRL.sha_block_dest_valid
    always_comb begin
        automatic logic [0:0] next_c = field_storage.SHA512_KV_WR_CTRL.sha_block_dest_valid.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.SHA512_KV_WR_CTRL && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[8:8];
            load_next_c = '1;
        end
        field_combo.SHA512_KV_WR_CTRL.sha_block_dest_valid.next = next_c;
        field_combo.SHA512_KV_WR_CTRL.sha_block_dest_valid.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.SHA512_KV_WR_CTRL.sha_block_dest_valid.value <= 'h0;
        end else if(field_combo.SHA512_KV_WR_CTRL.sha_block_dest_valid.load_next) begin
            field_storage.SHA512_KV_WR_CTRL.sha_block_dest_valid.value <= field_combo.SHA512_KV_WR_CTRL.sha_block_dest_valid.next;
        end
    end
    assign hwif_out.SHA512_KV_WR_CTRL.sha_block_dest_valid.value = field_storage.SHA512_KV_WR_CTRL.sha_block_dest_valid.value;
    // Field: sha512_reg.SHA512_KV_WR_CTRL.ecc_pkey_dest_valid
    always_comb begin
        automatic logic [0:0] next_c = field_storage.SHA512_KV_WR_CTRL.ecc_pkey_dest_valid.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.SHA512_KV_WR_CTRL && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[9:9];
            load_next_c = '1;
        end
        field_combo.SHA512_KV_WR_CTRL.ecc_pkey_dest_valid.next = next_c;
        field_combo.SHA512_KV_WR_CTRL.ecc_pkey_dest_valid.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.SHA512_KV_WR_CTRL.ecc_pkey_dest_valid.value <= 'h0;
        end else if(field_combo.SHA512_KV_WR_CTRL.ecc_pkey_dest_valid.load_next) begin
            field_storage.SHA512_KV_WR_CTRL.ecc_pkey_dest_valid.value <= field_combo.SHA512_KV_WR_CTRL.ecc_pkey_dest_valid.next;
        end
    end
    assign hwif_out.SHA512_KV_WR_CTRL.ecc_pkey_dest_valid.value = field_storage.SHA512_KV_WR_CTRL.ecc_pkey_dest_valid.value;
    // Field: sha512_reg.SHA512_KV_WR_CTRL.ecc_seed_dest_valid
    always_comb begin
        automatic logic [0:0] next_c = field_storage.SHA512_KV_WR_CTRL.ecc_seed_dest_valid.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.SHA512_KV_WR_CTRL && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[10:10];
            load_next_c = '1;
        end
        field_combo.SHA512_KV_WR_CTRL.ecc_seed_dest_valid.next = next_c;
        field_combo.SHA512_KV_WR_CTRL.ecc_seed_dest_valid.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.SHA512_KV_WR_CTRL.ecc_seed_dest_valid.value <= 'h0;
        end else if(field_combo.SHA512_KV_WR_CTRL.ecc_seed_dest_valid.load_next) begin
            field_storage.SHA512_KV_WR_CTRL.ecc_seed_dest_valid.value <= field_combo.SHA512_KV_WR_CTRL.ecc_seed_dest_valid.next;
        end
    end
    assign hwif_out.SHA512_KV_WR_CTRL.ecc_seed_dest_valid.value = field_storage.SHA512_KV_WR_CTRL.ecc_seed_dest_valid.value;
    // Field: sha512_reg.SHA512_KV_WR_CTRL.ecc_msg_dest_valid
    always_comb begin
        automatic logic [0:0] next_c = field_storage.SHA512_KV_WR_CTRL.ecc_msg_dest_valid.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.SHA512_KV_WR_CTRL && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[11:11];
            load_next_c = '1;
        end
        field_combo.SHA512_KV_WR_CTRL.ecc_msg_dest_valid.next = next_c;
        field_combo.SHA512_KV_WR_CTRL.ecc_msg_dest_valid.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.SHA512_KV_WR_CTRL.ecc_msg_dest_valid.value <= 'h0;
        end else if(field_combo.SHA512_KV_WR_CTRL.ecc_msg_dest_valid.load_next) begin
            field_storage.SHA512_KV_WR_CTRL.ecc_msg_dest_valid.value <= field_combo.SHA512_KV_WR_CTRL.ecc_msg_dest_valid.next;
        end
    end
    assign hwif_out.SHA512_KV_WR_CTRL.ecc_msg_dest_valid.value = field_storage.SHA512_KV_WR_CTRL.ecc_msg_dest_valid.value;
    // Field: sha512_reg.SHA512_KV_WR_CTRL.rsvd
    always_comb begin
        automatic logic [19:0] next_c = field_storage.SHA512_KV_WR_CTRL.rsvd.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.SHA512_KV_WR_CTRL && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[31:12];
            load_next_c = '1;
        end
        field_combo.SHA512_KV_WR_CTRL.rsvd.next = next_c;
        field_combo.SHA512_KV_WR_CTRL.rsvd.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.SHA512_KV_WR_CTRL.rsvd.value <= 'h0;
        end else if(field_combo.SHA512_KV_WR_CTRL.rsvd.load_next) begin
            field_storage.SHA512_KV_WR_CTRL.rsvd.value <= field_combo.SHA512_KV_WR_CTRL.rsvd.next;
        end
    end
    assign hwif_out.SHA512_KV_WR_CTRL.rsvd.value = field_storage.SHA512_KV_WR_CTRL.rsvd.value;
    // Field: sha512_reg.SHA512_KV_WR_STATUS.VALID
    always_comb begin
        automatic logic [0:0] next_c = field_storage.SHA512_KV_WR_STATUS.VALID.value;
        automatic logic load_next_c = '0;
        if(hwif_in.SHA512_KV_WR_STATUS.VALID.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(hwif_in.SHA512_KV_WR_STATUS.VALID.hwclr) begin // HW Clear
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.SHA512_KV_WR_STATUS.VALID.next = next_c;
        field_combo.SHA512_KV_WR_STATUS.VALID.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.SHA512_KV_WR_STATUS.VALID.value <= 'h0;
        end else if(field_combo.SHA512_KV_WR_STATUS.VALID.load_next) begin
            field_storage.SHA512_KV_WR_STATUS.VALID.value <= field_combo.SHA512_KV_WR_STATUS.VALID.next;
        end
    end
    // Field: sha512_reg.SHA512_GEN_PCR_HASH_NONCE.NONCE
    always_comb begin
        automatic logic [31:0] next_c = field_storage.SHA512_GEN_PCR_HASH_NONCE.NONCE.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.SHA512_GEN_PCR_HASH_NONCE && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[31:0];
            load_next_c = '1;
        end
        field_combo.SHA512_GEN_PCR_HASH_NONCE.NONCE.next = next_c;
        field_combo.SHA512_GEN_PCR_HASH_NONCE.NONCE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.SHA512_GEN_PCR_HASH_NONCE.NONCE.value <= 'h0;
        end else if(field_combo.SHA512_GEN_PCR_HASH_NONCE.NONCE.load_next) begin
            field_storage.SHA512_GEN_PCR_HASH_NONCE.NONCE.value <= field_combo.SHA512_GEN_PCR_HASH_NONCE.NONCE.next;
        end
    end
    assign hwif_out.SHA512_GEN_PCR_HASH_NONCE.NONCE.value = field_storage.SHA512_GEN_PCR_HASH_NONCE.NONCE.value;
    // Field: sha512_reg.SHA512_GEN_PCR_HASH_CTRL.START
    always_comb begin
        automatic logic [0:0] next_c = field_storage.SHA512_GEN_PCR_HASH_CTRL.START.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.SHA512_GEN_PCR_HASH_CTRL && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[0:0];
            load_next_c = '1;
        end else if(1) begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.SHA512_GEN_PCR_HASH_CTRL.START.next = next_c;
        field_combo.SHA512_GEN_PCR_HASH_CTRL.START.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.SHA512_GEN_PCR_HASH_CTRL.START.value <= 'h0;
        end else if(field_combo.SHA512_GEN_PCR_HASH_CTRL.START.load_next) begin
            field_storage.SHA512_GEN_PCR_HASH_CTRL.START.value <= field_combo.SHA512_GEN_PCR_HASH_CTRL.START.next;
        end
    end
    assign hwif_out.SHA512_GEN_PCR_HASH_CTRL.START.value = field_storage.SHA512_GEN_PCR_HASH_CTRL.START.value;
    // Field: sha512_reg.SHA512_GEN_PCR_HASH_STATUS.VALID
    always_comb begin
        automatic logic [0:0] next_c = field_storage.SHA512_GEN_PCR_HASH_STATUS.VALID.value;
        automatic logic load_next_c = '0;
        if(hwif_in.SHA512_GEN_PCR_HASH_STATUS.VALID.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(hwif_in.SHA512_GEN_PCR_HASH_STATUS.VALID.hwclr) begin // HW Clear
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.SHA512_GEN_PCR_HASH_STATUS.VALID.next = next_c;
        field_combo.SHA512_GEN_PCR_HASH_STATUS.VALID.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.SHA512_GEN_PCR_HASH_STATUS.VALID.value <= 'h0;
        end else if(field_combo.SHA512_GEN_PCR_HASH_STATUS.VALID.load_next) begin
            field_storage.SHA512_GEN_PCR_HASH_STATUS.VALID.value <= field_combo.SHA512_GEN_PCR_HASH_STATUS.VALID.next;
        end
    end
    for(genvar i0=0; i0<12; i0++) begin
        // Field: sha512_reg.SHA512_GEN_PCR_HASH_DIGEST[].DIGEST
        always_comb begin
            automatic logic [31:0] next_c = field_storage.SHA512_GEN_PCR_HASH_DIGEST[i0].DIGEST.value;
            automatic logic load_next_c = '0;
            if(1) begin // HW Write
                next_c = hwif_in.SHA512_GEN_PCR_HASH_DIGEST[i0].DIGEST.next;
                load_next_c = '1;
            end else if(hwif_in.SHA512_GEN_PCR_HASH_DIGEST[i0].DIGEST.hwclr) begin // HW Clear
                next_c = '0;
                load_next_c = '1;
            end
            field_combo.SHA512_GEN_PCR_HASH_DIGEST[i0].DIGEST.next = next_c;
            field_combo.SHA512_GEN_PCR_HASH_DIGEST[i0].DIGEST.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.reset_b) begin
            if(~hwif_in.reset_b) begin
                field_storage.SHA512_GEN_PCR_HASH_DIGEST[i0].DIGEST.value <= 'h0;
            end else if(field_combo.SHA512_GEN_PCR_HASH_DIGEST[i0].DIGEST.load_next) begin
                field_storage.SHA512_GEN_PCR_HASH_DIGEST[i0].DIGEST.value <= field_combo.SHA512_GEN_PCR_HASH_DIGEST[i0].DIGEST.next;
            end
        end
    end
    // Field: sha512_reg.intr_block_rf.global_intr_en_r.error_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.global_intr_en_r.error_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.global_intr_en_r && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[0:0];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.global_intr_en_r.error_en.next = next_c;
        field_combo.intr_block_rf.global_intr_en_r.error_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.global_intr_en_r.error_en.value <= 'h0;
        end else if(field_combo.intr_block_rf.global_intr_en_r.error_en.load_next) begin
            field_storage.intr_block_rf.global_intr_en_r.error_en.value <= field_combo.intr_block_rf.global_intr_en_r.error_en.next;
        end
    end
    // Field: sha512_reg.intr_block_rf.global_intr_en_r.notif_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.global_intr_en_r.notif_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.global_intr_en_r && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[1:1];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.global_intr_en_r.notif_en.next = next_c;
        field_combo.intr_block_rf.global_intr_en_r.notif_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.global_intr_en_r.notif_en.value <= 'h0;
        end else if(field_combo.intr_block_rf.global_intr_en_r.notif_en.load_next) begin
            field_storage.intr_block_rf.global_intr_en_r.notif_en.value <= field_combo.intr_block_rf.global_intr_en_r.notif_en.next;
        end
    end
    // Field: sha512_reg.intr_block_rf.error_intr_en_r.error0_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_intr_en_r.error0_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_en_r && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[0:0];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_en_r.error0_en.next = next_c;
        field_combo.intr_block_rf.error_intr_en_r.error0_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error_intr_en_r.error0_en.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_intr_en_r.error0_en.load_next) begin
            field_storage.intr_block_rf.error_intr_en_r.error0_en.value <= field_combo.intr_block_rf.error_intr_en_r.error0_en.next;
        end
    end
    // Field: sha512_reg.intr_block_rf.error_intr_en_r.error1_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_intr_en_r.error1_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_en_r && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[1:1];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_en_r.error1_en.next = next_c;
        field_combo.intr_block_rf.error_intr_en_r.error1_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error_intr_en_r.error1_en.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_intr_en_r.error1_en.load_next) begin
            field_storage.intr_block_rf.error_intr_en_r.error1_en.value <= field_combo.intr_block_rf.error_intr_en_r.error1_en.next;
        end
    end
    // Field: sha512_reg.intr_block_rf.error_intr_en_r.error2_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_intr_en_r.error2_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_en_r && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[2:2];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_en_r.error2_en.next = next_c;
        field_combo.intr_block_rf.error_intr_en_r.error2_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error_intr_en_r.error2_en.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_intr_en_r.error2_en.load_next) begin
            field_storage.intr_block_rf.error_intr_en_r.error2_en.value <= field_combo.intr_block_rf.error_intr_en_r.error2_en.next;
        end
    end
    // Field: sha512_reg.intr_block_rf.error_intr_en_r.error3_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_intr_en_r.error3_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_en_r && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[3:3];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_en_r.error3_en.next = next_c;
        field_combo.intr_block_rf.error_intr_en_r.error3_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error_intr_en_r.error3_en.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_intr_en_r.error3_en.load_next) begin
            field_storage.intr_block_rf.error_intr_en_r.error3_en.value <= field_combo.intr_block_rf.error_intr_en_r.error3_en.next;
        end
    end
    // Field: sha512_reg.intr_block_rf.notif_intr_en_r.notif_cmd_done_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_intr_en_r.notif_cmd_done_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_intr_en_r && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[0:0];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_intr_en_r.notif_cmd_done_en.next = next_c;
        field_combo.intr_block_rf.notif_intr_en_r.notif_cmd_done_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.notif_intr_en_r.notif_cmd_done_en.value <= 'h0;
        end else if(field_combo.intr_block_rf.notif_intr_en_r.notif_cmd_done_en.load_next) begin
            field_storage.intr_block_rf.notif_intr_en_r.notif_cmd_done_en.value <= field_combo.intr_block_rf.notif_intr_en_r.notif_cmd_done_en.next;
        end
    end
    // Field: sha512_reg.intr_block_rf.error_global_intr_r.agg_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_global_intr_r.agg_sts.value;
        automatic logic load_next_c = '0;
        if(1) begin // HW Write
            next_c = hwif_out.intr_block_rf.error_internal_intr_r.intr;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_global_intr_r.agg_sts.next = next_c;
        field_combo.intr_block_rf.error_global_intr_r.agg_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error_global_intr_r.agg_sts.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_global_intr_r.agg_sts.load_next) begin
            field_storage.intr_block_rf.error_global_intr_r.agg_sts.value <= field_combo.intr_block_rf.error_global_intr_r.agg_sts.next;
        end
    end
    assign hwif_out.intr_block_rf.error_global_intr_r.intr =
        |(field_storage.intr_block_rf.error_global_intr_r.agg_sts.value & field_storage.intr_block_rf.global_intr_en_r.error_en.value);
    // Field: sha512_reg.intr_block_rf.notif_global_intr_r.agg_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_global_intr_r.agg_sts.value;
        automatic logic load_next_c = '0;
        if(1) begin // HW Write
            next_c = hwif_out.intr_block_rf.notif_internal_intr_r.intr;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_global_intr_r.agg_sts.next = next_c;
        field_combo.intr_block_rf.notif_global_intr_r.agg_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.notif_global_intr_r.agg_sts.value <= 'h0;
        end else if(field_combo.intr_block_rf.notif_global_intr_r.agg_sts.load_next) begin
            field_storage.intr_block_rf.notif_global_intr_r.agg_sts.value <= field_combo.intr_block_rf.notif_global_intr_r.agg_sts.next;
        end
    end
    assign hwif_out.intr_block_rf.notif_global_intr_r.intr =
        |(field_storage.intr_block_rf.notif_global_intr_r.agg_sts.value & field_storage.intr_block_rf.global_intr_en_r.notif_en.value);
    // Field: sha512_reg.intr_block_rf.error_internal_intr_r.error0_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_internal_intr_r.error0_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error0_trig.value) begin // stickybit
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error0_sts.value | field_storage.intr_block_rf.error_intr_trig_r.error0_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error0_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error_internal_intr_r && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error0_sts.value & ~decoded_wr_data[0:0];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_internal_intr_r.error0_sts.next = next_c;
        field_combo.intr_block_rf.error_internal_intr_r.error0_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.error_reset_b) begin
        if(~hwif_in.error_reset_b) begin
            field_storage.intr_block_rf.error_internal_intr_r.error0_sts.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_internal_intr_r.error0_sts.load_next) begin
            field_storage.intr_block_rf.error_internal_intr_r.error0_sts.value <= field_combo.intr_block_rf.error_internal_intr_r.error0_sts.next;
        end
    end
    // Field: sha512_reg.intr_block_rf.error_internal_intr_r.error1_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_internal_intr_r.error1_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error1_trig.value) begin // stickybit
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error1_sts.value | field_storage.intr_block_rf.error_intr_trig_r.error1_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error1_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error_internal_intr_r && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error1_sts.value & ~decoded_wr_data[1:1];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_internal_intr_r.error1_sts.next = next_c;
        field_combo.intr_block_rf.error_internal_intr_r.error1_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.error_reset_b) begin
        if(~hwif_in.error_reset_b) begin
            field_storage.intr_block_rf.error_internal_intr_r.error1_sts.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_internal_intr_r.error1_sts.load_next) begin
            field_storage.intr_block_rf.error_internal_intr_r.error1_sts.value <= field_combo.intr_block_rf.error_internal_intr_r.error1_sts.next;
        end
    end
    // Field: sha512_reg.intr_block_rf.error_internal_intr_r.error2_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_internal_intr_r.error2_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error2_trig.value) begin // stickybit
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error2_sts.value | field_storage.intr_block_rf.error_intr_trig_r.error2_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error2_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error_internal_intr_r && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error2_sts.value & ~decoded_wr_data[2:2];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_internal_intr_r.error2_sts.next = next_c;
        field_combo.intr_block_rf.error_internal_intr_r.error2_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.error_reset_b) begin
        if(~hwif_in.error_reset_b) begin
            field_storage.intr_block_rf.error_internal_intr_r.error2_sts.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_internal_intr_r.error2_sts.load_next) begin
            field_storage.intr_block_rf.error_internal_intr_r.error2_sts.value <= field_combo.intr_block_rf.error_internal_intr_r.error2_sts.next;
        end
    end
    // Field: sha512_reg.intr_block_rf.error_internal_intr_r.error3_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_internal_intr_r.error3_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error3_trig.value) begin // stickybit
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error3_sts.value | field_storage.intr_block_rf.error_intr_trig_r.error3_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error3_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error_internal_intr_r && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error3_sts.value & ~decoded_wr_data[3:3];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_internal_intr_r.error3_sts.next = next_c;
        field_combo.intr_block_rf.error_internal_intr_r.error3_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.error_reset_b) begin
        if(~hwif_in.error_reset_b) begin
            field_storage.intr_block_rf.error_internal_intr_r.error3_sts.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_internal_intr_r.error3_sts.load_next) begin
            field_storage.intr_block_rf.error_internal_intr_r.error3_sts.value <= field_combo.intr_block_rf.error_internal_intr_r.error3_sts.next;
        end
    end
    assign hwif_out.intr_block_rf.error_internal_intr_r.intr =
        |(field_storage.intr_block_rf.error_internal_intr_r.error0_sts.value & field_storage.intr_block_rf.error_intr_en_r.error0_en.value)
        || |(field_storage.intr_block_rf.error_internal_intr_r.error1_sts.value & field_storage.intr_block_rf.error_intr_en_r.error1_en.value)
        || |(field_storage.intr_block_rf.error_internal_intr_r.error2_sts.value & field_storage.intr_block_rf.error_intr_en_r.error2_en.value)
        || |(field_storage.intr_block_rf.error_internal_intr_r.error3_sts.value & field_storage.intr_block_rf.error_intr_en_r.error3_en.value);
    // Field: sha512_reg.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.value) begin // stickybit
            next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.value | field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.notif_internal_intr_r && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.value & ~decoded_wr_data[0:0];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.next = next_c;
        field_combo.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.value <= 'h0;
        end else if(field_combo.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.load_next) begin
            field_storage.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.value <= field_combo.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.next;
        end
    end
    assign hwif_out.intr_block_rf.notif_internal_intr_r.intr =
        |(field_storage.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.value & field_storage.intr_block_rf.notif_intr_en_r.notif_cmd_done_en.value);
    // Field: sha512_reg.intr_block_rf.error_intr_trig_r.error0_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_intr_trig_r.error0_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_trig_r && decoded_req_is_wr) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error0_trig.value | decoded_wr_data[0:0];
            load_next_c = '1;
        end else if(1) begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_trig_r.error0_trig.next = next_c;
        field_combo.intr_block_rf.error_intr_trig_r.error0_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error_intr_trig_r.error0_trig.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_intr_trig_r.error0_trig.load_next) begin
            field_storage.intr_block_rf.error_intr_trig_r.error0_trig.value <= field_combo.intr_block_rf.error_intr_trig_r.error0_trig.next;
        end
    end
    // Field: sha512_reg.intr_block_rf.error_intr_trig_r.error1_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_intr_trig_r.error1_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_trig_r && decoded_req_is_wr) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error1_trig.value | decoded_wr_data[1:1];
            load_next_c = '1;
        end else if(1) begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_trig_r.error1_trig.next = next_c;
        field_combo.intr_block_rf.error_intr_trig_r.error1_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error_intr_trig_r.error1_trig.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_intr_trig_r.error1_trig.load_next) begin
            field_storage.intr_block_rf.error_intr_trig_r.error1_trig.value <= field_combo.intr_block_rf.error_intr_trig_r.error1_trig.next;
        end
    end
    // Field: sha512_reg.intr_block_rf.error_intr_trig_r.error2_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_intr_trig_r.error2_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_trig_r && decoded_req_is_wr) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error2_trig.value | decoded_wr_data[2:2];
            load_next_c = '1;
        end else if(1) begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_trig_r.error2_trig.next = next_c;
        field_combo.intr_block_rf.error_intr_trig_r.error2_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error_intr_trig_r.error2_trig.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_intr_trig_r.error2_trig.load_next) begin
            field_storage.intr_block_rf.error_intr_trig_r.error2_trig.value <= field_combo.intr_block_rf.error_intr_trig_r.error2_trig.next;
        end
    end
    // Field: sha512_reg.intr_block_rf.error_intr_trig_r.error3_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_intr_trig_r.error3_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_trig_r && decoded_req_is_wr) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error3_trig.value | decoded_wr_data[3:3];
            load_next_c = '1;
        end else if(1) begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_trig_r.error3_trig.next = next_c;
        field_combo.intr_block_rf.error_intr_trig_r.error3_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error_intr_trig_r.error3_trig.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_intr_trig_r.error3_trig.load_next) begin
            field_storage.intr_block_rf.error_intr_trig_r.error3_trig.value <= field_combo.intr_block_rf.error_intr_trig_r.error3_trig.next;
        end
    end
    // Field: sha512_reg.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_intr_trig_r && decoded_req_is_wr) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.value | decoded_wr_data[0:0];
            load_next_c = '1;
        end else if(1) begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.next = next_c;
        field_combo.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.value <= 'h0;
        end else if(field_combo.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.load_next) begin
            field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.value <= field_combo.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.next;
        end
    end
    // Field: sha512_reg.intr_block_rf.error0_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.error0_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error0_intr_count_r && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[31:0];
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error0_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 'h1) > 'hffffffff) begin // up-counter saturated
                next_c = 'hffffffff;
            end else begin
                next_c = next_c + 'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error0_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error0_intr_count_r.cnt.value >= 'hffffffff);
        field_combo.intr_block_rf.error0_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error0_intr_count_r.cnt.value >= 'hffffffff);
        if(next_c > 'hffffffff) begin
            next_c = 'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error0_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error0_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.error_reset_b) begin
        if(~hwif_in.error_reset_b) begin
            field_storage.intr_block_rf.error0_intr_count_r.cnt.value <= 'h0;
        end else if(field_combo.intr_block_rf.error0_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error0_intr_count_r.cnt.value <= field_combo.intr_block_rf.error0_intr_count_r.cnt.next;
        end
    end
    // Field: sha512_reg.intr_block_rf.error1_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.error1_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_count_r && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[31:0];
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error1_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 'h1) > 'hffffffff) begin // up-counter saturated
                next_c = 'hffffffff;
            end else begin
                next_c = next_c + 'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error1_intr_count_r.cnt.value >= 'hffffffff);
        field_combo.intr_block_rf.error1_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error1_intr_count_r.cnt.value >= 'hffffffff);
        if(next_c > 'hffffffff) begin
            next_c = 'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error1_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.error_reset_b) begin
        if(~hwif_in.error_reset_b) begin
            field_storage.intr_block_rf.error1_intr_count_r.cnt.value <= 'h0;
        end else if(field_combo.intr_block_rf.error1_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error1_intr_count_r.cnt.value <= field_combo.intr_block_rf.error1_intr_count_r.cnt.next;
        end
    end
    // Field: sha512_reg.intr_block_rf.error2_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.error2_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error2_intr_count_r && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[31:0];
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error2_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 'h1) > 'hffffffff) begin // up-counter saturated
                next_c = 'hffffffff;
            end else begin
                next_c = next_c + 'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error2_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error2_intr_count_r.cnt.value >= 'hffffffff);
        field_combo.intr_block_rf.error2_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error2_intr_count_r.cnt.value >= 'hffffffff);
        if(next_c > 'hffffffff) begin
            next_c = 'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error2_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error2_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.error_reset_b) begin
        if(~hwif_in.error_reset_b) begin
            field_storage.intr_block_rf.error2_intr_count_r.cnt.value <= 'h0;
        end else if(field_combo.intr_block_rf.error2_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error2_intr_count_r.cnt.value <= field_combo.intr_block_rf.error2_intr_count_r.cnt.next;
        end
    end
    // Field: sha512_reg.intr_block_rf.error3_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.error3_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error3_intr_count_r && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[31:0];
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error3_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 'h1) > 'hffffffff) begin // up-counter saturated
                next_c = 'hffffffff;
            end else begin
                next_c = next_c + 'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error3_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error3_intr_count_r.cnt.value >= 'hffffffff);
        field_combo.intr_block_rf.error3_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error3_intr_count_r.cnt.value >= 'hffffffff);
        if(next_c > 'hffffffff) begin
            next_c = 'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error3_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error3_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.error_reset_b) begin
        if(~hwif_in.error_reset_b) begin
            field_storage.intr_block_rf.error3_intr_count_r.cnt.value <= 'h0;
        end else if(field_combo.intr_block_rf.error3_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error3_intr_count_r.cnt.value <= field_combo.intr_block_rf.error3_intr_count_r.cnt.next;
        end
    end
    // Field: sha512_reg.intr_block_rf.notif_cmd_done_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.notif_cmd_done_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_cmd_done_intr_count_r && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[31:0];
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 'h1) > 'hffffffff) begin // up-counter saturated
                next_c = 'hffffffff;
            end else begin
                next_c = next_c + 'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_cmd_done_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.notif_cmd_done_intr_count_r.cnt.value >= 'hffffffff);
        field_combo.intr_block_rf.notif_cmd_done_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.notif_cmd_done_intr_count_r.cnt.value >= 'hffffffff);
        if(next_c > 'hffffffff) begin
            next_c = 'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_cmd_done_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.notif_cmd_done_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.notif_cmd_done_intr_count_r.cnt.value <= 'h0;
        end else if(field_combo.intr_block_rf.notif_cmd_done_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.notif_cmd_done_intr_count_r.cnt.value <= field_combo.intr_block_rf.notif_cmd_done_intr_count_r.cnt.next;
        end
    end
    // Field: sha512_reg.intr_block_rf.error0_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error0_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error0_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error0_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error0_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error0_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error0_intr_count_incr_r.pulse.underflow = (next_c < ('h1));
            next_c = next_c - 'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error0_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error0_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error0_intr_count_incr_r.pulse.value <= 'd0);
        field_combo.intr_block_rf.error0_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error0_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error0_intr_count_incr_r.pulse.value <= 'h0;
        end else if(field_combo.intr_block_rf.error0_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error0_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error0_intr_count_incr_r.pulse.next;
        end
    end
    // Field: sha512_reg.intr_block_rf.error1_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error1_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error1_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error1_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error1_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error1_intr_count_incr_r.pulse.underflow = (next_c < ('h1));
            next_c = next_c - 'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error1_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error1_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error1_intr_count_incr_r.pulse.value <= 'd0);
        field_combo.intr_block_rf.error1_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error1_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error1_intr_count_incr_r.pulse.value <= 'h0;
        end else if(field_combo.intr_block_rf.error1_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error1_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error1_intr_count_incr_r.pulse.next;
        end
    end
    // Field: sha512_reg.intr_block_rf.error2_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error2_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error2_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error2_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error2_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error2_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error2_intr_count_incr_r.pulse.underflow = (next_c < ('h1));
            next_c = next_c - 'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error2_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error2_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error2_intr_count_incr_r.pulse.value <= 'd0);
        field_combo.intr_block_rf.error2_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error2_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error2_intr_count_incr_r.pulse.value <= 'h0;
        end else if(field_combo.intr_block_rf.error2_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error2_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error2_intr_count_incr_r.pulse.next;
        end
    end
    // Field: sha512_reg.intr_block_rf.error3_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error3_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error3_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error3_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error3_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error3_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error3_intr_count_incr_r.pulse.underflow = (next_c < ('h1));
            next_c = next_c - 'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error3_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error3_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error3_intr_count_incr_r.pulse.value <= 'd0);
        field_combo.intr_block_rf.error3_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error3_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error3_intr_count_incr_r.pulse.value <= 'h0;
        end else if(field_combo.intr_block_rf.error3_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error3_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error3_intr_count_incr_r.pulse.next;
        end
    end
    // Field: sha512_reg.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.underflow = (next_c < ('h1));
            next_c = next_c - 'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.value <= 'd0);
        field_combo.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.value <= 'h0;
        end else if(field_combo.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.next;
        end
    end

    //--------------------------------------------------------------------------
    // Readback
    //--------------------------------------------------------------------------
    logic readback_err;
    logic readback_done;
    logic [31:0] readback_data;
    
    // Assign readback values to a flattened array
    logic [57-1:0][31:0] readback_array;
    for(genvar i0=0; i0<2; i0++) begin
        assign readback_array[i0*1 + 0][31:0] = (decoded_reg_strb.SHA512_NAME[i0] && !decoded_req_is_wr) ? hwif_in.SHA512_NAME[i0].NAME.next : '0;
    end
    for(genvar i0=0; i0<2; i0++) begin
        assign readback_array[i0*1 + 2][31:0] = (decoded_reg_strb.SHA512_VERSION[i0] && !decoded_req_is_wr) ? hwif_in.SHA512_VERSION[i0].VERSION.next : '0;
    end
    assign readback_array[4][0:0] = (decoded_reg_strb.SHA512_STATUS && !decoded_req_is_wr) ? field_storage.SHA512_STATUS.READY.value : '0;
    assign readback_array[4][1:1] = (decoded_reg_strb.SHA512_STATUS && !decoded_req_is_wr) ? field_storage.SHA512_STATUS.VALID.value : '0;
    assign readback_array[4][31:2] = '0;
    for(genvar i0=0; i0<16; i0++) begin
        assign readback_array[i0*1 + 5][31:0] = (decoded_reg_strb.SHA512_DIGEST[i0] && !decoded_req_is_wr) ? field_storage.SHA512_DIGEST[i0].DIGEST.value : '0;
    end
    assign readback_array[21][0:0] = (decoded_reg_strb.SHA512_VAULT_RD_CTRL && !decoded_req_is_wr) ? field_storage.SHA512_VAULT_RD_CTRL.read_en.value : '0;
    assign readback_array[21][5:1] = (decoded_reg_strb.SHA512_VAULT_RD_CTRL && !decoded_req_is_wr) ? field_storage.SHA512_VAULT_RD_CTRL.read_entry.value : '0;
    assign readback_array[21][6:6] = (decoded_reg_strb.SHA512_VAULT_RD_CTRL && !decoded_req_is_wr) ? field_storage.SHA512_VAULT_RD_CTRL.pcr_hash_extend.value : '0;
    assign readback_array[21][31:7] = (decoded_reg_strb.SHA512_VAULT_RD_CTRL && !decoded_req_is_wr) ? field_storage.SHA512_VAULT_RD_CTRL.rsvd.value : '0;
    assign readback_array[22][0:0] = (decoded_reg_strb.SHA512_VAULT_RD_STATUS && !decoded_req_is_wr) ? hwif_in.SHA512_VAULT_RD_STATUS.READY.next : '0;
    assign readback_array[22][1:1] = (decoded_reg_strb.SHA512_VAULT_RD_STATUS && !decoded_req_is_wr) ? field_storage.SHA512_VAULT_RD_STATUS.VALID.value : '0;
    assign readback_array[22][9:2] = (decoded_reg_strb.SHA512_VAULT_RD_STATUS && !decoded_req_is_wr) ? hwif_in.SHA512_VAULT_RD_STATUS.ERROR.next : '0;
    assign readback_array[22][31:10] = '0;
    assign readback_array[23][0:0] = (decoded_reg_strb.SHA512_KV_WR_CTRL && !decoded_req_is_wr) ? field_storage.SHA512_KV_WR_CTRL.write_en.value : '0;
    assign readback_array[23][5:1] = (decoded_reg_strb.SHA512_KV_WR_CTRL && !decoded_req_is_wr) ? field_storage.SHA512_KV_WR_CTRL.write_entry.value : '0;
    assign readback_array[23][6:6] = (decoded_reg_strb.SHA512_KV_WR_CTRL && !decoded_req_is_wr) ? field_storage.SHA512_KV_WR_CTRL.hmac_key_dest_valid.value : '0;
    assign readback_array[23][7:7] = (decoded_reg_strb.SHA512_KV_WR_CTRL && !decoded_req_is_wr) ? field_storage.SHA512_KV_WR_CTRL.hmac_block_dest_valid.value : '0;
    assign readback_array[23][8:8] = (decoded_reg_strb.SHA512_KV_WR_CTRL && !decoded_req_is_wr) ? field_storage.SHA512_KV_WR_CTRL.sha_block_dest_valid.value : '0;
    assign readback_array[23][9:9] = (decoded_reg_strb.SHA512_KV_WR_CTRL && !decoded_req_is_wr) ? field_storage.SHA512_KV_WR_CTRL.ecc_pkey_dest_valid.value : '0;
    assign readback_array[23][10:10] = (decoded_reg_strb.SHA512_KV_WR_CTRL && !decoded_req_is_wr) ? field_storage.SHA512_KV_WR_CTRL.ecc_seed_dest_valid.value : '0;
    assign readback_array[23][11:11] = (decoded_reg_strb.SHA512_KV_WR_CTRL && !decoded_req_is_wr) ? field_storage.SHA512_KV_WR_CTRL.ecc_msg_dest_valid.value : '0;
    assign readback_array[23][31:12] = (decoded_reg_strb.SHA512_KV_WR_CTRL && !decoded_req_is_wr) ? field_storage.SHA512_KV_WR_CTRL.rsvd.value : '0;
    assign readback_array[24][0:0] = (decoded_reg_strb.SHA512_KV_WR_STATUS && !decoded_req_is_wr) ? hwif_in.SHA512_KV_WR_STATUS.READY.next : '0;
    assign readback_array[24][1:1] = (decoded_reg_strb.SHA512_KV_WR_STATUS && !decoded_req_is_wr) ? field_storage.SHA512_KV_WR_STATUS.VALID.value : '0;
    assign readback_array[24][9:2] = (decoded_reg_strb.SHA512_KV_WR_STATUS && !decoded_req_is_wr) ? hwif_in.SHA512_KV_WR_STATUS.ERROR.next : '0;
    assign readback_array[24][31:10] = '0;
    assign readback_array[25][0:0] = (decoded_reg_strb.SHA512_GEN_PCR_HASH_STATUS && !decoded_req_is_wr) ? hwif_in.SHA512_GEN_PCR_HASH_STATUS.READY.next : '0;
    assign readback_array[25][1:1] = (decoded_reg_strb.SHA512_GEN_PCR_HASH_STATUS && !decoded_req_is_wr) ? field_storage.SHA512_GEN_PCR_HASH_STATUS.VALID.value : '0;
    assign readback_array[25][31:2] = '0;
    for(genvar i0=0; i0<12; i0++) begin
        assign readback_array[i0*1 + 26][31:0] = (decoded_reg_strb.SHA512_GEN_PCR_HASH_DIGEST[i0] && !decoded_req_is_wr) ? field_storage.SHA512_GEN_PCR_HASH_DIGEST[i0].DIGEST.value : '0;
    end
    assign readback_array[38][0:0] = (decoded_reg_strb.intr_block_rf.global_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.global_intr_en_r.error_en.value : '0;
    assign readback_array[38][1:1] = (decoded_reg_strb.intr_block_rf.global_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.global_intr_en_r.notif_en.value : '0;
    assign readback_array[38][31:2] = '0;
    assign readback_array[39][0:0] = (decoded_reg_strb.intr_block_rf.error_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_en_r.error0_en.value : '0;
    assign readback_array[39][1:1] = (decoded_reg_strb.intr_block_rf.error_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_en_r.error1_en.value : '0;
    assign readback_array[39][2:2] = (decoded_reg_strb.intr_block_rf.error_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_en_r.error2_en.value : '0;
    assign readback_array[39][3:3] = (decoded_reg_strb.intr_block_rf.error_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_en_r.error3_en.value : '0;
    assign readback_array[39][31:4] = '0;
    assign readback_array[40][0:0] = (decoded_reg_strb.intr_block_rf.notif_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_intr_en_r.notif_cmd_done_en.value : '0;
    assign readback_array[40][31:1] = '0;
    assign readback_array[41][0:0] = (decoded_reg_strb.intr_block_rf.error_global_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_global_intr_r.agg_sts.value : '0;
    assign readback_array[41][31:1] = '0;
    assign readback_array[42][0:0] = (decoded_reg_strb.intr_block_rf.notif_global_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_global_intr_r.agg_sts.value : '0;
    assign readback_array[42][31:1] = '0;
    assign readback_array[43][0:0] = (decoded_reg_strb.intr_block_rf.error_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_internal_intr_r.error0_sts.value : '0;
    assign readback_array[43][1:1] = (decoded_reg_strb.intr_block_rf.error_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_internal_intr_r.error1_sts.value : '0;
    assign readback_array[43][2:2] = (decoded_reg_strb.intr_block_rf.error_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_internal_intr_r.error2_sts.value : '0;
    assign readback_array[43][3:3] = (decoded_reg_strb.intr_block_rf.error_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_internal_intr_r.error3_sts.value : '0;
    assign readback_array[43][31:4] = '0;
    assign readback_array[44][0:0] = (decoded_reg_strb.intr_block_rf.notif_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.value : '0;
    assign readback_array[44][31:1] = '0;
    assign readback_array[45][0:0] = (decoded_reg_strb.intr_block_rf.error_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_trig_r.error0_trig.value : '0;
    assign readback_array[45][1:1] = (decoded_reg_strb.intr_block_rf.error_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_trig_r.error1_trig.value : '0;
    assign readback_array[45][2:2] = (decoded_reg_strb.intr_block_rf.error_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_trig_r.error2_trig.value : '0;
    assign readback_array[45][3:3] = (decoded_reg_strb.intr_block_rf.error_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_trig_r.error3_trig.value : '0;
    assign readback_array[45][31:4] = '0;
    assign readback_array[46][0:0] = (decoded_reg_strb.intr_block_rf.notif_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.value : '0;
    assign readback_array[46][31:1] = '0;
    assign readback_array[47][31:0] = (decoded_reg_strb.intr_block_rf.error0_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error0_intr_count_r.cnt.value : '0;
    assign readback_array[48][31:0] = (decoded_reg_strb.intr_block_rf.error1_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_count_r.cnt.value : '0;
    assign readback_array[49][31:0] = (decoded_reg_strb.intr_block_rf.error2_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error2_intr_count_r.cnt.value : '0;
    assign readback_array[50][31:0] = (decoded_reg_strb.intr_block_rf.error3_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error3_intr_count_r.cnt.value : '0;
    assign readback_array[51][31:0] = (decoded_reg_strb.intr_block_rf.notif_cmd_done_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_cmd_done_intr_count_r.cnt.value : '0;
    assign readback_array[52][0:0] = (decoded_reg_strb.intr_block_rf.error0_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error0_intr_count_incr_r.pulse.value : '0;
    assign readback_array[52][31:1] = '0;
    assign readback_array[53][0:0] = (decoded_reg_strb.intr_block_rf.error1_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_count_incr_r.pulse.value : '0;
    assign readback_array[53][31:1] = '0;
    assign readback_array[54][0:0] = (decoded_reg_strb.intr_block_rf.error2_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error2_intr_count_incr_r.pulse.value : '0;
    assign readback_array[54][31:1] = '0;
    assign readback_array[55][0:0] = (decoded_reg_strb.intr_block_rf.error3_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error3_intr_count_incr_r.pulse.value : '0;
    assign readback_array[55][31:1] = '0;
    assign readback_array[56][0:0] = (decoded_reg_strb.intr_block_rf.notif_cmd_done_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.value : '0;
    assign readback_array[56][31:1] = '0;


    // Reduce the array
    always_comb begin
        automatic logic [31:0] readback_data_var;
        readback_done = decoded_req & ~decoded_req_is_wr;
        readback_err = '0;
        readback_data_var = '0;
        for(int i=0; i<57; i++) readback_data_var |= readback_array[i];
        readback_data = readback_data_var;
    end


    assign cpuif_rd_ack = readback_done;
    assign cpuif_rd_data = readback_data;
    assign cpuif_rd_err = readback_err;


endmodule