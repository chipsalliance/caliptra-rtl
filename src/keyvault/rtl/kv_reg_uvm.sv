
// This file was autogenerated by PeakRDL-uvm
package kv_reg_uvm;
    `include "uvm_macros.svh"
    import uvm_pkg::*;
    
    // Reg - kv_reg::pcrReg
    class kv_reg__pcrReg extends uvm_reg;
        rand uvm_reg_field data;

        function new(string name = "kv_reg__pcrReg");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.data = new("data");
            this.data.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
        endfunction : build
    endclass : kv_reg__pcrReg

    // Reg - kv_reg::kvCtrl
    class kv_reg__kvCtrl extends uvm_reg;
        rand uvm_reg_field lock_rd;
        rand uvm_reg_field lock_wr;
        rand uvm_reg_field lock_use;
        rand uvm_reg_field clear;
        rand uvm_reg_field dest_valid;
        rand uvm_reg_field rsvd;

        function new(string name = "kv_reg__kvCtrl");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.lock_rd = new("lock_rd");
            this.lock_rd.configure(this, 1, 0, "RW", 0, 'h0, 1, 1, 0);
            this.lock_wr = new("lock_wr");
            this.lock_wr.configure(this, 1, 1, "RW", 0, 'h0, 1, 1, 0);
            this.lock_use = new("lock_use");
            this.lock_use.configure(this, 1, 2, "RW", 0, 'h0, 1, 1, 0);
            this.clear = new("clear");
            this.clear.configure(this, 1, 3, "RW", 0, 'h0, 1, 1, 0);
            this.dest_valid = new("dest_valid");
            this.dest_valid.configure(this, 3, 9, "RO", 1, 'h7, 1, 1, 0);
            this.rsvd = new("rsvd");
            this.rsvd.configure(this, 20, 12, "RW", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : kv_reg__kvCtrl

    // Reg - kv_reg::keyReg
    class kv_reg__keyReg extends uvm_reg;
        rand uvm_reg_field data;

        function new(string name = "kv_reg__keyReg");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.data = new("data");
            this.data.configure(this, 32, 0, "WO", 1, 'h0, 1, 1, 0);
        endfunction : build
    endclass : kv_reg__keyReg

    // Addrmap - kv_reg
    class kv_reg extends uvm_reg_block;
        rand kv_reg__pcrReg pcr_entry[8][16];
        rand kv_reg__kvCtrl key_ctrl[8];
        rand kv_reg__kvCtrl pcr_ctrl[8];
        rand kv_reg__keyReg key_entry[8][16];

        function new(string name = "kv_reg");
            super.new(name);
        endfunction : new

        virtual function void build();
            this.default_map = create_map("reg_map", 0, 4, UVM_NO_ENDIAN);
            foreach(this.pcr_entry[i0, i1]) begin
                this.pcr_entry[i0][i1] = new($sformatf("pcr_entry[%0d][%0d]", i0, i1));
                this.pcr_entry[i0][i1].configure(this);
                
                this.pcr_entry[i0][i1].build();
                this.default_map.add_reg(this.pcr_entry[i0][i1], 'h0 + i0*'h40 + i1*'h4);
            end
            foreach(this.key_ctrl[i0]) begin
                this.key_ctrl[i0] = new($sformatf("key_ctrl[%0d]", i0));
                this.key_ctrl[i0].configure(this);
                
                this.key_ctrl[i0].build();
                this.default_map.add_reg(this.key_ctrl[i0], 'h200 + i0*'h4);
            end
            foreach(this.pcr_ctrl[i0]) begin
                this.pcr_ctrl[i0] = new($sformatf("pcr_ctrl[%0d]", i0));
                this.pcr_ctrl[i0].configure(this);
                
                this.pcr_ctrl[i0].build();
                this.default_map.add_reg(this.pcr_ctrl[i0], 'h220 + i0*'h4);
            end
            foreach(this.key_entry[i0, i1]) begin
                this.key_entry[i0][i1] = new($sformatf("key_entry[%0d][%0d]", i0, i1));
                this.key_entry[i0][i1].configure(this);
                
                this.key_entry[i0][i1].build();
                this.default_map.add_reg(this.key_entry[i0][i1], 'h240 + i0*'h40 + i1*'h4);
            end
        endfunction : build
    endclass : kv_reg

endpackage: kv_reg_uvm
