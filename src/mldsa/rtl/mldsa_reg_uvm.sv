
// This file was autogenerated by PeakRDL-uvm
package mldsa_reg_uvm;
    `include "uvm_macros.svh"
    import uvm_pkg::*;
    `include "mldsa_reg_covergroups.svh"
    // Reg - mldsa_reg::MLDSA_NAME
    class mldsa_reg__MLDSA_NAME extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mldsa_reg__MLDSA_NAME_bit_cg NAME_bit_cg[32];
        mldsa_reg__MLDSA_NAME_fld_cg fld_cg;
        rand uvm_reg_field NAME;

        function new(string name = "mldsa_reg__MLDSA_NAME");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.NAME = new("NAME");
            this.NAME.configure(this, 32, 0, "RO", 1, 'h0, 0, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(NAME_bit_cg[bt]) NAME_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mldsa_reg__MLDSA_NAME

    // Reg - mldsa_reg::MLDSA_VERSION
    class mldsa_reg__MLDSA_VERSION extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mldsa_reg__MLDSA_VERSION_bit_cg VERSION_bit_cg[32];
        mldsa_reg__MLDSA_VERSION_fld_cg fld_cg;
        rand uvm_reg_field VERSION;

        function new(string name = "mldsa_reg__MLDSA_VERSION");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.VERSION = new("VERSION");
            this.VERSION.configure(this, 32, 0, "RO", 1, 'h0, 0, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(VERSION_bit_cg[bt]) VERSION_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mldsa_reg__MLDSA_VERSION

    // Reg - mldsa_reg::MLDSA_CTRL
    class mldsa_reg__MLDSA_CTRL extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mldsa_reg__MLDSA_CTRL_bit_cg CTRL_bit_cg[3];
        mldsa_reg__MLDSA_CTRL_bit_cg ZEROIZE_bit_cg[1];
        mldsa_reg__MLDSA_CTRL_fld_cg fld_cg;
        rand uvm_reg_field CTRL;
        rand uvm_reg_field ZEROIZE;

        function new(string name = "mldsa_reg__MLDSA_CTRL");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.CTRL = new("CTRL");
            this.CTRL.configure(this, 3, 0, "WO", 1, 'h0, 1, 1, 0);
            this.ZEROIZE = new("ZEROIZE");
            this.ZEROIZE.configure(this, 1, 3, "WO", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(CTRL_bit_cg[bt]) CTRL_bit_cg[bt] = new();
                foreach(ZEROIZE_bit_cg[bt]) ZEROIZE_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mldsa_reg__MLDSA_CTRL

    // Reg - mldsa_reg::MLDSA_STATUS
    class mldsa_reg__MLDSA_STATUS extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mldsa_reg__MLDSA_STATUS_bit_cg READY_bit_cg[1];
        mldsa_reg__MLDSA_STATUS_bit_cg VALID_bit_cg[1];
        mldsa_reg__MLDSA_STATUS_fld_cg fld_cg;
        rand uvm_reg_field READY;
        rand uvm_reg_field VALID;

        function new(string name = "mldsa_reg__MLDSA_STATUS");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.READY = new("READY");
            this.READY.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            this.VALID = new("VALID");
            this.VALID.configure(this, 1, 1, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(READY_bit_cg[bt]) READY_bit_cg[bt] = new();
                foreach(VALID_bit_cg[bt]) VALID_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mldsa_reg__MLDSA_STATUS

    // Reg - mldsa_reg::MLDSA_ENTROPY
    class mldsa_reg__MLDSA_ENTROPY extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mldsa_reg__MLDSA_ENTROPY_bit_cg ENTROPY_bit_cg[32];
        mldsa_reg__MLDSA_ENTROPY_fld_cg fld_cg;
        rand uvm_reg_field ENTROPY;

        function new(string name = "mldsa_reg__MLDSA_ENTROPY");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.ENTROPY = new("ENTROPY");
            this.ENTROPY.configure(this, 32, 0, "WO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(ENTROPY_bit_cg[bt]) ENTROPY_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mldsa_reg__MLDSA_ENTROPY

    // Reg - mldsa_reg::MLDSA_SEED
    class mldsa_reg__MLDSA_SEED extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mldsa_reg__MLDSA_SEED_bit_cg SEED_bit_cg[32];
        mldsa_reg__MLDSA_SEED_fld_cg fld_cg;
        rand uvm_reg_field SEED;

        function new(string name = "mldsa_reg__MLDSA_SEED");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.SEED = new("SEED");
            this.SEED.configure(this, 32, 0, "WO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(SEED_bit_cg[bt]) SEED_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mldsa_reg__MLDSA_SEED

    // Reg - mldsa_reg::MLDSA_SIGN_RND
    class mldsa_reg__MLDSA_SIGN_RND extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mldsa_reg__MLDSA_SIGN_RND_bit_cg SIGN_RND_bit_cg[32];
        mldsa_reg__MLDSA_SIGN_RND_fld_cg fld_cg;
        rand uvm_reg_field SIGN_RND;

        function new(string name = "mldsa_reg__MLDSA_SIGN_RND");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.SIGN_RND = new("SIGN_RND");
            this.SIGN_RND.configure(this, 32, 0, "WO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(SIGN_RND_bit_cg[bt]) SIGN_RND_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mldsa_reg__MLDSA_SIGN_RND

    // Reg - mldsa_reg::MLDSA_MSG
    class mldsa_reg__MLDSA_MSG extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mldsa_reg__MLDSA_MSG_bit_cg MSG_bit_cg[32];
        mldsa_reg__MLDSA_MSG_fld_cg fld_cg;
        rand uvm_reg_field MSG;

        function new(string name = "mldsa_reg__MLDSA_MSG");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.MSG = new("MSG");
            this.MSG.configure(this, 32, 0, "WO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(MSG_bit_cg[bt]) MSG_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mldsa_reg__MLDSA_MSG

    // Reg - mldsa_reg::MLDSA_VERIFY_RES
    class mldsa_reg__MLDSA_VERIFY_RES extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mldsa_reg__MLDSA_VERIFY_RES_bit_cg VERIFY_RES_bit_cg[32];
        mldsa_reg__MLDSA_VERIFY_RES_fld_cg fld_cg;
        rand uvm_reg_field VERIFY_RES;

        function new(string name = "mldsa_reg__MLDSA_VERIFY_RES");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.VERIFY_RES = new("VERIFY_RES");
            this.VERIFY_RES.configure(this, 32, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(VERIFY_RES_bit_cg[bt]) VERIFY_RES_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mldsa_reg__MLDSA_VERIFY_RES

    // Mem - mldsa_reg::MLDSA_PUBKEY
    class mldsa_reg__MLDSA_PUBKEY extends uvm_reg_block;
        rand uvm_mem m_mem;
        
        function new(string name = "mldsa_reg__MLDSA_PUBKEY");
            super.new(name);
        endfunction : new

        virtual function void build();
            this.default_map = create_map("reg_map", 0, 4.0, UVM_NO_ENDIAN);
            this.m_mem = new("m_mem", 648, 32, "RW");
            this.m_mem.configure(this);
            this.default_map.add_mem(this.m_mem, 0);
        endfunction : build
    endclass : mldsa_reg__MLDSA_PUBKEY

    // Mem - mldsa_reg::MLDSA_SIGNATURE
    class mldsa_reg__MLDSA_SIGNATURE extends uvm_reg_block;
        rand uvm_mem m_mem;
        
        function new(string name = "mldsa_reg__MLDSA_SIGNATURE");
            super.new(name);
        endfunction : new

        virtual function void build();
            this.default_map = create_map("reg_map", 0, 4.0, UVM_NO_ENDIAN);
            this.m_mem = new("m_mem", 1157, 32, "RW");
            this.m_mem.configure(this);
            this.default_map.add_mem(this.m_mem, 0);
        endfunction : build
    endclass : mldsa_reg__MLDSA_SIGNATURE

    // Mem - mldsa_reg::MLDSA_PRIVKEY_OUT
    class mldsa_reg__MLDSA_PRIVKEY_OUT extends uvm_reg_block;
        rand uvm_mem m_mem;
        
        function new(string name = "mldsa_reg__MLDSA_PRIVKEY_OUT");
            super.new(name);
        endfunction : new

        virtual function void build();
            this.default_map = create_map("reg_map", 0, 4.0, UVM_NO_ENDIAN);
            this.m_mem = new("m_mem", 1224, 32, "RO");
            this.m_mem.configure(this);
            this.default_map.add_mem(this.m_mem, 0);
        endfunction : build
    endclass : mldsa_reg__MLDSA_PRIVKEY_OUT

    // Mem - mldsa_reg::MLDSA_PRIVKEY_IN
    class mldsa_reg__MLDSA_PRIVKEY_IN extends uvm_reg_block;
        rand uvm_mem m_mem;
        
        function new(string name = "mldsa_reg__MLDSA_PRIVKEY_IN");
            super.new(name);
        endfunction : new

        virtual function void build();
            this.default_map = create_map("reg_map", 0, 4.0, UVM_NO_ENDIAN);
            this.m_mem = new("m_mem", 1224, 32, "RW");
            this.m_mem.configure(this);
            this.default_map.add_mem(this.m_mem, 0);
        endfunction : build
    endclass : mldsa_reg__MLDSA_PRIVKEY_IN

    // Reg - mldsa_reg::intr_block_t::global_intr_en_t
    class mldsa_reg__intr_block_t__global_intr_en_t extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mldsa_reg__intr_block_t__global_intr_en_t_bit_cg error_en_bit_cg[1];
        mldsa_reg__intr_block_t__global_intr_en_t_bit_cg notif_en_bit_cg[1];
        mldsa_reg__intr_block_t__global_intr_en_t_fld_cg fld_cg;
        rand uvm_reg_field error_en;
        rand uvm_reg_field notif_en;

        function new(string name = "mldsa_reg__intr_block_t__global_intr_en_t");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.error_en = new("error_en");
            this.error_en.configure(this, 1, 0, "RW", 0, 'h0, 1, 1, 0);
            this.notif_en = new("notif_en");
            this.notif_en.configure(this, 1, 1, "RW", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(error_en_bit_cg[bt]) error_en_bit_cg[bt] = new();
                foreach(notif_en_bit_cg[bt]) notif_en_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mldsa_reg__intr_block_t__global_intr_en_t

    // Reg - mldsa_reg::intr_block_t::error_intr_en_t
    class mldsa_reg__intr_block_t__error_intr_en_t extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mldsa_reg__intr_block_t__error_intr_en_t_bit_cg error_internal_en_bit_cg[1];
        mldsa_reg__intr_block_t__error_intr_en_t_fld_cg fld_cg;
        rand uvm_reg_field error_internal_en;

        function new(string name = "mldsa_reg__intr_block_t__error_intr_en_t");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.error_internal_en = new("error_internal_en");
            this.error_internal_en.configure(this, 1, 0, "RW", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(error_internal_en_bit_cg[bt]) error_internal_en_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mldsa_reg__intr_block_t__error_intr_en_t

    // Reg - mldsa_reg::intr_block_t::notif_intr_en_t
    class mldsa_reg__intr_block_t__notif_intr_en_t extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mldsa_reg__intr_block_t__notif_intr_en_t_bit_cg notif_cmd_done_en_bit_cg[1];
        mldsa_reg__intr_block_t__notif_intr_en_t_fld_cg fld_cg;
        rand uvm_reg_field notif_cmd_done_en;

        function new(string name = "mldsa_reg__intr_block_t__notif_intr_en_t");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.notif_cmd_done_en = new("notif_cmd_done_en");
            this.notif_cmd_done_en.configure(this, 1, 0, "RW", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(notif_cmd_done_en_bit_cg[bt]) notif_cmd_done_en_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mldsa_reg__intr_block_t__notif_intr_en_t

    // Reg - mldsa_reg::intr_block_t::global_intr_t_agg_sts_dd3dcf0a
    class mldsa_reg__intr_block_t__global_intr_t_agg_sts_dd3dcf0a extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mldsa_reg__intr_block_t__global_intr_t_agg_sts_dd3dcf0a_bit_cg agg_sts_bit_cg[1];
        mldsa_reg__intr_block_t__global_intr_t_agg_sts_dd3dcf0a_fld_cg fld_cg;
        rand uvm_reg_field agg_sts;

        function new(string name = "mldsa_reg__intr_block_t__global_intr_t_agg_sts_dd3dcf0a");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.agg_sts = new("agg_sts");
            this.agg_sts.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(agg_sts_bit_cg[bt]) agg_sts_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mldsa_reg__intr_block_t__global_intr_t_agg_sts_dd3dcf0a

    // Reg - mldsa_reg::intr_block_t::global_intr_t_agg_sts_e6399b4a
    class mldsa_reg__intr_block_t__global_intr_t_agg_sts_e6399b4a extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mldsa_reg__intr_block_t__global_intr_t_agg_sts_e6399b4a_bit_cg agg_sts_bit_cg[1];
        mldsa_reg__intr_block_t__global_intr_t_agg_sts_e6399b4a_fld_cg fld_cg;
        rand uvm_reg_field agg_sts;

        function new(string name = "mldsa_reg__intr_block_t__global_intr_t_agg_sts_e6399b4a");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.agg_sts = new("agg_sts");
            this.agg_sts.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(agg_sts_bit_cg[bt]) agg_sts_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mldsa_reg__intr_block_t__global_intr_t_agg_sts_e6399b4a

    // Reg - mldsa_reg::intr_block_t::error_intr_t_error_internal_sts_83adab02
    class mldsa_reg__intr_block_t__error_intr_t_error_internal_sts_83adab02 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mldsa_reg__intr_block_t__error_intr_t_error_internal_sts_83adab02_bit_cg error_internal_sts_bit_cg[1];
        mldsa_reg__intr_block_t__error_intr_t_error_internal_sts_83adab02_fld_cg fld_cg;
        rand uvm_reg_field error_internal_sts;

        function new(string name = "mldsa_reg__intr_block_t__error_intr_t_error_internal_sts_83adab02");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.error_internal_sts = new("error_internal_sts");
            this.error_internal_sts.configure(this, 1, 0, "W1C", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(error_internal_sts_bit_cg[bt]) error_internal_sts_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mldsa_reg__intr_block_t__error_intr_t_error_internal_sts_83adab02

    // Reg - mldsa_reg::intr_block_t::notif_intr_t_notif_cmd_done_sts_1c68637e
    class mldsa_reg__intr_block_t__notif_intr_t_notif_cmd_done_sts_1c68637e extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mldsa_reg__intr_block_t__notif_intr_t_notif_cmd_done_sts_1c68637e_bit_cg notif_cmd_done_sts_bit_cg[1];
        mldsa_reg__intr_block_t__notif_intr_t_notif_cmd_done_sts_1c68637e_fld_cg fld_cg;
        rand uvm_reg_field notif_cmd_done_sts;

        function new(string name = "mldsa_reg__intr_block_t__notif_intr_t_notif_cmd_done_sts_1c68637e");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.notif_cmd_done_sts = new("notif_cmd_done_sts");
            this.notif_cmd_done_sts.configure(this, 1, 0, "W1C", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(notif_cmd_done_sts_bit_cg[bt]) notif_cmd_done_sts_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mldsa_reg__intr_block_t__notif_intr_t_notif_cmd_done_sts_1c68637e

    // Reg - mldsa_reg::intr_block_t::error_intr_trig_t
    class mldsa_reg__intr_block_t__error_intr_trig_t extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mldsa_reg__intr_block_t__error_intr_trig_t_bit_cg error_internal_trig_bit_cg[1];
        mldsa_reg__intr_block_t__error_intr_trig_t_fld_cg fld_cg;
        rand uvm_reg_field error_internal_trig;

        function new(string name = "mldsa_reg__intr_block_t__error_intr_trig_t");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.error_internal_trig = new("error_internal_trig");
            this.error_internal_trig.configure(this, 1, 0, "W1S", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(error_internal_trig_bit_cg[bt]) error_internal_trig_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mldsa_reg__intr_block_t__error_intr_trig_t

    // Reg - mldsa_reg::intr_block_t::notif_intr_trig_t
    class mldsa_reg__intr_block_t__notif_intr_trig_t extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mldsa_reg__intr_block_t__notif_intr_trig_t_bit_cg notif_cmd_done_trig_bit_cg[1];
        mldsa_reg__intr_block_t__notif_intr_trig_t_fld_cg fld_cg;
        rand uvm_reg_field notif_cmd_done_trig;

        function new(string name = "mldsa_reg__intr_block_t__notif_intr_trig_t");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.notif_cmd_done_trig = new("notif_cmd_done_trig");
            this.notif_cmd_done_trig.configure(this, 1, 0, "W1S", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(notif_cmd_done_trig_bit_cg[bt]) notif_cmd_done_trig_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mldsa_reg__intr_block_t__notif_intr_trig_t

    // Reg - mldsa_reg::intr_block_t::intr_count_t_cnt_60ddff93
    class mldsa_reg__intr_block_t__intr_count_t_cnt_60ddff93 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mldsa_reg__intr_block_t__intr_count_t_cnt_60ddff93_bit_cg cnt_bit_cg[32];
        mldsa_reg__intr_block_t__intr_count_t_cnt_60ddff93_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mldsa_reg__intr_block_t__intr_count_t_cnt_60ddff93");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mldsa_reg__intr_block_t__intr_count_t_cnt_60ddff93

    // Reg - mldsa_reg::intr_block_t::intr_count_t_cnt_be67d6d5
    class mldsa_reg__intr_block_t__intr_count_t_cnt_be67d6d5 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mldsa_reg__intr_block_t__intr_count_t_cnt_be67d6d5_bit_cg cnt_bit_cg[32];
        mldsa_reg__intr_block_t__intr_count_t_cnt_be67d6d5_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mldsa_reg__intr_block_t__intr_count_t_cnt_be67d6d5");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mldsa_reg__intr_block_t__intr_count_t_cnt_be67d6d5

    // Reg - mldsa_reg::intr_block_t::intr_count_incr_t_pulse_15e6ed7e
    class mldsa_reg__intr_block_t__intr_count_incr_t_pulse_15e6ed7e extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mldsa_reg__intr_block_t__intr_count_incr_t_pulse_15e6ed7e_bit_cg pulse_bit_cg[1];
        mldsa_reg__intr_block_t__intr_count_incr_t_pulse_15e6ed7e_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mldsa_reg__intr_block_t__intr_count_incr_t_pulse_15e6ed7e");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mldsa_reg__intr_block_t__intr_count_incr_t_pulse_15e6ed7e

    // Reg - mldsa_reg::intr_block_t::intr_count_incr_t_pulse_6173128e
    class mldsa_reg__intr_block_t__intr_count_incr_t_pulse_6173128e extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mldsa_reg__intr_block_t__intr_count_incr_t_pulse_6173128e_bit_cg pulse_bit_cg[1];
        mldsa_reg__intr_block_t__intr_count_incr_t_pulse_6173128e_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mldsa_reg__intr_block_t__intr_count_incr_t_pulse_6173128e");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mldsa_reg__intr_block_t__intr_count_incr_t_pulse_6173128e

    // Regfile - mldsa_reg::intr_block_t
    class mldsa_reg__intr_block_t extends uvm_reg_block;
        rand mldsa_reg__intr_block_t__global_intr_en_t global_intr_en_r;
        rand mldsa_reg__intr_block_t__error_intr_en_t error_intr_en_r;
        rand mldsa_reg__intr_block_t__notif_intr_en_t notif_intr_en_r;
        rand mldsa_reg__intr_block_t__global_intr_t_agg_sts_dd3dcf0a error_global_intr_r;
        rand mldsa_reg__intr_block_t__global_intr_t_agg_sts_e6399b4a notif_global_intr_r;
        rand mldsa_reg__intr_block_t__error_intr_t_error_internal_sts_83adab02 error_internal_intr_r;
        rand mldsa_reg__intr_block_t__notif_intr_t_notif_cmd_done_sts_1c68637e notif_internal_intr_r;
        rand mldsa_reg__intr_block_t__error_intr_trig_t error_intr_trig_r;
        rand mldsa_reg__intr_block_t__notif_intr_trig_t notif_intr_trig_r;
        rand mldsa_reg__intr_block_t__intr_count_t_cnt_60ddff93 error_internal_intr_count_r;
        rand mldsa_reg__intr_block_t__intr_count_t_cnt_be67d6d5 notif_cmd_done_intr_count_r;
        rand mldsa_reg__intr_block_t__intr_count_incr_t_pulse_15e6ed7e error_internal_intr_count_incr_r;
        rand mldsa_reg__intr_block_t__intr_count_incr_t_pulse_6173128e notif_cmd_done_intr_count_incr_r;

        function new(string name = "mldsa_reg__intr_block_t");
            super.new(name);
        endfunction : new

        virtual function void build();
            this.default_map = create_map("reg_map", 0, 4, UVM_NO_ENDIAN);
            this.global_intr_en_r = new("global_intr_en_r");
            this.global_intr_en_r.configure(this);

            this.global_intr_en_r.build();
            this.default_map.add_reg(this.global_intr_en_r, 'h0);
            this.error_intr_en_r = new("error_intr_en_r");
            this.error_intr_en_r.configure(this);

            this.error_intr_en_r.build();
            this.default_map.add_reg(this.error_intr_en_r, 'h4);
            this.notif_intr_en_r = new("notif_intr_en_r");
            this.notif_intr_en_r.configure(this);

            this.notif_intr_en_r.build();
            this.default_map.add_reg(this.notif_intr_en_r, 'h8);
            this.error_global_intr_r = new("error_global_intr_r");
            this.error_global_intr_r.configure(this);

            this.error_global_intr_r.build();
            this.default_map.add_reg(this.error_global_intr_r, 'hc);
            this.notif_global_intr_r = new("notif_global_intr_r");
            this.notif_global_intr_r.configure(this);

            this.notif_global_intr_r.build();
            this.default_map.add_reg(this.notif_global_intr_r, 'h10);
            this.error_internal_intr_r = new("error_internal_intr_r");
            this.error_internal_intr_r.configure(this);

            this.error_internal_intr_r.build();
            this.default_map.add_reg(this.error_internal_intr_r, 'h14);
            this.notif_internal_intr_r = new("notif_internal_intr_r");
            this.notif_internal_intr_r.configure(this);

            this.notif_internal_intr_r.build();
            this.default_map.add_reg(this.notif_internal_intr_r, 'h18);
            this.error_intr_trig_r = new("error_intr_trig_r");
            this.error_intr_trig_r.configure(this);

            this.error_intr_trig_r.build();
            this.default_map.add_reg(this.error_intr_trig_r, 'h1c);
            this.notif_intr_trig_r = new("notif_intr_trig_r");
            this.notif_intr_trig_r.configure(this);

            this.notif_intr_trig_r.build();
            this.default_map.add_reg(this.notif_intr_trig_r, 'h20);
            this.error_internal_intr_count_r = new("error_internal_intr_count_r");
            this.error_internal_intr_count_r.configure(this);

            this.error_internal_intr_count_r.build();
            this.default_map.add_reg(this.error_internal_intr_count_r, 'h100);
            this.notif_cmd_done_intr_count_r = new("notif_cmd_done_intr_count_r");
            this.notif_cmd_done_intr_count_r.configure(this);

            this.notif_cmd_done_intr_count_r.build();
            this.default_map.add_reg(this.notif_cmd_done_intr_count_r, 'h180);
            this.error_internal_intr_count_incr_r = new("error_internal_intr_count_incr_r");
            this.error_internal_intr_count_incr_r.configure(this);

            this.error_internal_intr_count_incr_r.build();
            this.default_map.add_reg(this.error_internal_intr_count_incr_r, 'h200);
            this.notif_cmd_done_intr_count_incr_r = new("notif_cmd_done_intr_count_incr_r");
            this.notif_cmd_done_intr_count_incr_r.configure(this);

            this.notif_cmd_done_intr_count_incr_r.build();
            this.default_map.add_reg(this.notif_cmd_done_intr_count_incr_r, 'h204);
        endfunction : build
    endclass : mldsa_reg__intr_block_t

    // Addrmap - mldsa_reg
    class mldsa_reg extends uvm_reg_block;
        rand mldsa_reg__MLDSA_NAME MLDSA_NAME[2];
        rand mldsa_reg__MLDSA_VERSION MLDSA_VERSION[2];
        rand mldsa_reg__MLDSA_CTRL MLDSA_CTRL;
        rand mldsa_reg__MLDSA_STATUS MLDSA_STATUS;
        rand mldsa_reg__MLDSA_ENTROPY MLDSA_ENTROPY[16];
        rand mldsa_reg__MLDSA_SEED MLDSA_SEED[8];
        rand mldsa_reg__MLDSA_SIGN_RND MLDSA_SIGN_RND[8];
        rand mldsa_reg__MLDSA_MSG MLDSA_MSG[16];
        rand mldsa_reg__MLDSA_VERIFY_RES MLDSA_VERIFY_RES[16];
        rand mldsa_reg__MLDSA_PUBKEY MLDSA_PUBKEY;
        rand mldsa_reg__MLDSA_SIGNATURE MLDSA_SIGNATURE;
        rand mldsa_reg__MLDSA_PRIVKEY_OUT MLDSA_PRIVKEY_OUT;
        rand mldsa_reg__MLDSA_PRIVKEY_IN MLDSA_PRIVKEY_IN;
        rand mldsa_reg__intr_block_t intr_block_rf;

        function new(string name = "mldsa_reg");
            super.new(name);
        endfunction : new

        virtual function void build();
            this.default_map = create_map("reg_map", 0, 4, UVM_NO_ENDIAN);
            foreach(this.MLDSA_NAME[i0]) begin
                this.MLDSA_NAME[i0] = new($sformatf("MLDSA_NAME[%0d]", i0));
                this.MLDSA_NAME[i0].configure(this);
                
                this.MLDSA_NAME[i0].build();
                this.default_map.add_reg(this.MLDSA_NAME[i0], 'h0 + i0*'h4);
            end
            foreach(this.MLDSA_VERSION[i0]) begin
                this.MLDSA_VERSION[i0] = new($sformatf("MLDSA_VERSION[%0d]", i0));
                this.MLDSA_VERSION[i0].configure(this);
                
                this.MLDSA_VERSION[i0].build();
                this.default_map.add_reg(this.MLDSA_VERSION[i0], 'h8 + i0*'h4);
            end
            this.MLDSA_CTRL = new("MLDSA_CTRL");
            this.MLDSA_CTRL.configure(this);

            this.MLDSA_CTRL.build();
            this.default_map.add_reg(this.MLDSA_CTRL, 'h10);
            this.MLDSA_STATUS = new("MLDSA_STATUS");
            this.MLDSA_STATUS.configure(this);

            this.MLDSA_STATUS.build();
            this.default_map.add_reg(this.MLDSA_STATUS, 'h14);
            foreach(this.MLDSA_ENTROPY[i0]) begin
                this.MLDSA_ENTROPY[i0] = new($sformatf("MLDSA_ENTROPY[%0d]", i0));
                this.MLDSA_ENTROPY[i0].configure(this);
                
                this.MLDSA_ENTROPY[i0].build();
                this.default_map.add_reg(this.MLDSA_ENTROPY[i0], 'h18 + i0*'h4);
            end
            foreach(this.MLDSA_SEED[i0]) begin
                this.MLDSA_SEED[i0] = new($sformatf("MLDSA_SEED[%0d]", i0));
                this.MLDSA_SEED[i0].configure(this);
                
                this.MLDSA_SEED[i0].build();
                this.default_map.add_reg(this.MLDSA_SEED[i0], 'h58 + i0*'h4);
            end
            foreach(this.MLDSA_SIGN_RND[i0]) begin
                this.MLDSA_SIGN_RND[i0] = new($sformatf("MLDSA_SIGN_RND[%0d]", i0));
                this.MLDSA_SIGN_RND[i0].configure(this);
                
                this.MLDSA_SIGN_RND[i0].build();
                this.default_map.add_reg(this.MLDSA_SIGN_RND[i0], 'h78 + i0*'h4);
            end
            foreach(this.MLDSA_MSG[i0]) begin
                this.MLDSA_MSG[i0] = new($sformatf("MLDSA_MSG[%0d]", i0));
                this.MLDSA_MSG[i0].configure(this);
                
                this.MLDSA_MSG[i0].build();
                this.default_map.add_reg(this.MLDSA_MSG[i0], 'h98 + i0*'h4);
            end
            foreach(this.MLDSA_VERIFY_RES[i0]) begin
                this.MLDSA_VERIFY_RES[i0] = new($sformatf("MLDSA_VERIFY_RES[%0d]", i0));
                this.MLDSA_VERIFY_RES[i0].configure(this);
                
                this.MLDSA_VERIFY_RES[i0].build();
                this.default_map.add_reg(this.MLDSA_VERIFY_RES[i0], 'hd8 + i0*'h4);
            end
            this.MLDSA_PUBKEY = new("MLDSA_PUBKEY");
            this.MLDSA_PUBKEY.configure(this);
            this.MLDSA_PUBKEY.build();
            this.default_map.add_submap(this.MLDSA_PUBKEY.default_map, 'h1000);
            this.MLDSA_SIGNATURE = new("MLDSA_SIGNATURE");
            this.MLDSA_SIGNATURE.configure(this);
            this.MLDSA_SIGNATURE.build();
            this.default_map.add_submap(this.MLDSA_SIGNATURE.default_map, 'h2000);
            this.MLDSA_PRIVKEY_OUT = new("MLDSA_PRIVKEY_OUT");
            this.MLDSA_PRIVKEY_OUT.configure(this);
            this.MLDSA_PRIVKEY_OUT.build();
            this.default_map.add_submap(this.MLDSA_PRIVKEY_OUT.default_map, 'h4000);
            this.MLDSA_PRIVKEY_IN = new("MLDSA_PRIVKEY_IN");
            this.MLDSA_PRIVKEY_IN.configure(this);
            this.MLDSA_PRIVKEY_IN.build();
            this.default_map.add_submap(this.MLDSA_PRIVKEY_IN.default_map, 'h6000);
            this.intr_block_rf = new("intr_block_rf");
            this.intr_block_rf.configure(this);
            this.intr_block_rf.build();
            this.default_map.add_submap(this.intr_block_rf.default_map, 'h8000);
        endfunction : build
    endclass : mldsa_reg

    `include "mldsa_reg_sample.svh"
endpackage: mldsa_reg_uvm
