// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Use the gen-otp-mmap.py script to update dependent files (like documentation
// tables the comportable hjson and metadata SV package):
//
// $ ./util/design/gen-otp-mmap.py
//
// Make sure to regenerate the CSRs after converting the memory map:
//
// $ cd ${PROJ_ROOT}
// $ make -C hw regs
//

{
    // 256 bit seed to be used for generation of partition item default values.
    // Can be overridden on the command line with the --seed switch.
    seed: "36021179872380457113239299468132194022238108125576166239904535336103582949069"

    otp: {
        width: "2", // bytes
        depth: "2048"
    }

    // Definition of scrambling and digest constants and keys.
    scrambling: {
        key_size:  "16",
        iv_size:   "8",
        cnst_size: "16",
        keys: [
            {
                name:  "Secret0Key",
                value: "<random>",
            }
            {
                name:  "Secret1Key",
                value: "<random>",
            }
            {
                name:  "Secret2Key",
                value: "<random>",
            }
            {
                name:  "Secret3Key",
                value: "<random>",
            }
        ]
        digests: [
            // This is the consistency digest used by all partitions.
            {
                name:       "CnstyDigest",
                iv_value:   "<random>",
                cnst_value: "<random>",
            }
            /*
            // The other digest configurations below are used for
            // key derivation and token hashing.
            {
                name:       "FlashDataKey",
                iv_value:   "<random>",
                cnst_value: "<random>",
            }
            {
                name:       "FlashAddrKey",
                iv_value:   "<random>",
                cnst_value: "<random>",
            }
            {
                name:       "SramDataKey",
                iv_value:   "<random>",
                cnst_value: "<random>",
            }
            */
        ]
    }

    // The enumeration order below defines the address map of the OTP controller,
    // if the offsets are not defined explicitly via the "offset" key.
    // Note that the digest items are added automatically to the address map.
    partitions: [
        {
            name:       "VENDOR_TEST",
            variant:    "Unbuffered",
            size:       "64", // in bytes
            secret:     false,
            sw_digest:  true,
            hw_digest:  false,
            write_lock: "Digest",        
            read_lock:  "CSR",
            key_sel:    "NoKey",
            integrity:  false, // Do not use integrity (ECC) on this partition.
            bkout_type: false, // Do not use generate a breakout type for this partition.
            items: [
                {
                    name: "SCRATCH",
                    size: "56"
                }
            ],
            desc: '''Vendor test partition.
            This is reserved for manufacturing smoke checks. The OTP wrapper
            control logic inside prim_otp is allowed to read/write to this
            region. ECC uncorrectable errors seen on the functional prim_otp
            interface will not lead to an alert for this partition.
            Instead, such errors will be reported as correctable ECC errors.
            '''
        }
        {
            name:       "NON_SECRET_FUSES",
            variant:    "Unbuffered",
            absorb:     true,
            secret:     false,
            sw_digest:  true,
            hw_digest:  false,
            write_lock: "Digest",
            read_lock:  "CSR",
            key_sel:    "NoKey",
            integrity:  true,  // Use integrity (ECC) on this partition
            bkout_type: false, // Do not generate a breakout type for this partition
            items: [
                {
                    name:   "FMC_KEY_MANIFEST_SVN",
                    size:   "4"
                }
                {
                    name:   "RUNTIME_SVN", 
                    size:   "16"
                }
                {
                    name:   "LMS_VERIFY",
                    size:   "4"
                }
                {
                    name:   "LMS_REVOCATION",
                    size:   "4"
                }
                {
                    name:   "KEY_MANIFEST_PK_HASH_MASK",
                    size:   "4"
                }
                {
                    name:   "OWNER_PK_HASH",
                    size:   "48"
                }
                {
                    name:   "IDEVID_CERT_ATTR",
                    size:   "96",
                    // Default value to be output in case partition has not
                    // initialized or is in error state. If not specified,
                    // a value of '0 will be used.
                    inv_default: "<random>",
                }
                {
                    name:   "IDEVID_MANUF_HSM_ID",
                    size:   "16"
                }
                {
                    name:   "SOC_STEPPING_ID",
                    size:   "4"
                }
            ], 
            desc: '''Non Secret Fuses partition.
            This contains data such IDEVID, public key hash mask, owner
            key hash, SoC Stepping ID etc. 
            '''  
        }
        {
            name:       "SECRET0",
            variant:    "Buffered",
            secret:     true,
            sw_digest:  false,
            hw_digest:  true,
            write_lock: "Digest",
            read_lock:  "Digest",
            key_sel:    "Secret0Key",
            integrity:  true,
            bkout_type: false,
            items: [
                {
                    name: "TEST_UNLOCK_TOKEN",
                    // This will generate a random default to be output in
                    // case partition has not initialized or is in error state.
                    // If not specified, a value of '0 will be used.
                    inv_default: "<random>",
                    size: "16"
                }
                {
                    name: "TEST_EXIT_TOKEN",
                    inv_default: "<random>",
                    size: "16"
                }
            ],
            desc: '''Secret partition 0.
            This contains TEST lifecycle unlock tokens.
            '''
        }
        {
            name:       "SECRET1",
            variant:    "Buffered",
            secret:     true,
            sw_digest:  false,
            hw_digest:  true,
            write_lock: "Digest",
            read_lock:  "Digest",
            key_sel:    "Secret1Key",
            integrity:  true,
            bkout_type: false,
            items: [
                {
                    name:   "UDS_SEED",
                    size:   "48"
                }
            ],
            desc:   '''Secret partition 1.
            This contains Obfuscated UDS seed. 
            '''
        }
        {
            name:       "SECRET2",
            variant:    "Buffered",
            secret:     true,
            sw_digest:  false,
            hw_digest:  true,
            write_lock: "Digest",
            read_lock:  "Digest",
            key_sel:    "Secret2Key",
            integrity:  true,
            bkout_type: false,
            items: [
                {
                    name:   "FIELD_ENTROPY",
                    size:   "32"
                }
            ],
            desc: '''Secret partition 2. 
            This contains obfuscated field entropy. 
            '''
        }
        {
            name:       "SECRET3",
            variant:    "Buffered",
            secret:     true,
            sw_digest:  false,
            hw_digest:  true,
            write_lock: "Digest",
            read_lock:  "Digest",
            key_sel:    "Secret3Key",
            integrity:  true,
            bkout_type: false,
            items: [
                {
                    name:   "KEY_MANIFEST_PK_HASH",
                    size:   "48"
                }
                { 
                    name:   "RMA_TOKEN",
                    inv_default: "<random>",
                    size:   "16"
                }
            ],
            desc: '''Secret partition 3.
            This contains public key hash and RMA unlock token. 
            '''
        }
        {
            name:       "LIFE_CYCLE",
            variant:    "LifeCycle",
            secret:     false,
            sw_digest:  false,
            hw_digest:  false,
            write_lock: "None",
            read_lock:  "None",
            key_sel:    "NoKey",
            integrity:  true,
            bkout_type: false,
            items: [
                // The life cycle transition count is specified
                // first such that any programming attempt of the life cycle
                // partition through the LCI will always write the transition
                // counter words first when programming an updated state vector.
                // This is an additional safeguard, to the sequencing in the
                // life cycle controller to ensure that the counter is always written
                // before any state update. I.e., the life cycle controller
                // already splits the counter and state updates into two
                // supsequent requests through the LCI, where the first request
                // only contains the updated transition counter, and the second
                // request the updated transition counter and state.
                {
                    name: "LC_TRANSITION_CNT",
                    inv_default: "<random>",
                    size: "48"
                }
                {
                    name: "LC_STATE",
                    inv_default: "<random>",
                    size: "40"
                }
            ],
            desc: '''Lifecycle partition.
            This contains lifecycle transition count and state. This partition
            cannot be locked since the life cycle state needs to advance to RMA
            in-field. Note that while this partition is not marked secret, it
            is not readable nor writeable via the DAI. Only the LC controller
            can access this partition, and even via the LC controller it is not
            possible to read the raw manufacturing life cycle state in encoded
            form, since that encoding is considered a netlist secret. The LC
            controller only exposes a decoded version of this state.
            '''
        }
    ]
}