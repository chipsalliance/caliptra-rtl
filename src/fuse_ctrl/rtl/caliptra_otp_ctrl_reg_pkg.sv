// Copyright lowRISC contributors (OpenTitan project).
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package caliptra_otp_ctrl_reg_pkg;

  // Param list
  parameter int NumSramKeyReqSlots = 4;
  parameter int OtpByteAddrWidth = 12;
  parameter int NumErrorEntries = 9;
  parameter int NumDaiWords = 2;
  parameter int NumDigestWords = 2;
  parameter int NumSwCfgWindowWords = 1024;
  parameter int NumPart = 7;
  parameter int NumPartUnbuf = 2;
  parameter int NumPartBuf = 5;
  parameter int VendorTestOffset = 0;
  parameter int VendorTestSize = 64;
  parameter int ScratchOffset = 0;
  parameter int ScratchSize = 56;
  parameter int VendorTestDigestOffset = 56;
  parameter int VendorTestDigestSize = 8;
  parameter int NonSecretFusesOffset = 64;
  parameter int NonSecretFusesSize = 3736;
  parameter int FmcKeyManifestSvnOffset = 64;
  parameter int FmcKeyManifestSvnSize = 4;
  parameter int RuntimeSvnOffset = 68;
  parameter int RuntimeSvnSize = 16;
  parameter int LmsVerifyOffset = 84;
  parameter int LmsVerifySize = 4;
  parameter int LmsRevocationOffset = 88;
  parameter int LmsRevocationSize = 4;
  parameter int KeyManifestPkHashMaskOffset = 92;
  parameter int KeyManifestPkHashMaskSize = 4;
  parameter int OwnerPkHashOffset = 96;
  parameter int OwnerPkHashSize = 48;
  parameter int IdevidCertAttrOffset = 144;
  parameter int IdevidCertAttrSize = 96;
  parameter int IdevidManufHsmIdOffset = 240;
  parameter int IdevidManufHsmIdSize = 16;
  parameter int SocSteppingIdOffset = 256;
  parameter int SocSteppingIdSize = 4;
  parameter int NonSecretFusesDigestOffset = 3792;
  parameter int NonSecretFusesDigestSize = 8;
  parameter int Secret0Offset = 3800;
  parameter int Secret0Size = 40;
  parameter int TestUnlockTokenOffset = 3800;
  parameter int TestUnlockTokenSize = 16;
  parameter int TestExitTokenOffset = 3816;
  parameter int TestExitTokenSize = 16;
  parameter int Secret0DigestOffset = 3832;
  parameter int Secret0DigestSize = 8;
  parameter int Secret1Offset = 3840;
  parameter int Secret1Size = 56;
  parameter int UdsSeedOffset = 3840;
  parameter int UdsSeedSize = 48;
  parameter int Secret1DigestOffset = 3888;
  parameter int Secret1DigestSize = 8;
  parameter int Secret2Offset = 3896;
  parameter int Secret2Size = 40;
  parameter int FieldEntropyOffset = 3896;
  parameter int FieldEntropySize = 32;
  parameter int Secret2DigestOffset = 3928;
  parameter int Secret2DigestSize = 8;
  parameter int Secret3Offset = 3936;
  parameter int Secret3Size = 72;
  parameter int KeyManifestPkHashOffset = 3936;
  parameter int KeyManifestPkHashSize = 48;
  parameter int RmaTokenOffset = 3984;
  parameter int RmaTokenSize = 16;
  parameter int Secret3DigestOffset = 4000;
  parameter int Secret3DigestSize = 8;
  parameter int LifeCycleOffset = 4008;
  parameter int LifeCycleSize = 88;
  parameter int LcTransitionCntOffset = 4008;
  parameter int LcTransitionCntSize = 48;
  parameter int LcStateOffset = 4056;
  parameter int LcStateSize = 40;
  parameter int NumAlerts = 5;

  // Address widths within the block
  parameter int CoreAw = 13;
  parameter int PrimAw = 5;

  ///////////////////////////////////////////////
  // Typedefs for registers for core interface //
  ///////////////////////////////////////////////

  typedef struct packed {
    struct packed {
      logic        q;
    } otp_error;
    struct packed {
      logic        q;
    } otp_operation_done;
  } caliptra_otp_ctrl_reg2hw_intr_state_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } otp_error;
    struct packed {
      logic        q;
    } otp_operation_done;
  } caliptra_otp_ctrl_reg2hw_intr_enable_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
      logic        qe;
    } otp_error;
    struct packed {
      logic        q;
      logic        qe;
    } otp_operation_done;
  } caliptra_otp_ctrl_reg2hw_intr_test_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
      logic        qe;
    } recov_prim_otp_alert;
    struct packed {
      logic        q;
      logic        qe;
    } fatal_prim_otp_alert;
    struct packed {
      logic        q;
      logic        qe;
    } fatal_bus_integ_error;
    struct packed {
      logic        q;
      logic        qe;
    } fatal_check_error;
    struct packed {
      logic        q;
      logic        qe;
    } fatal_macro_error;
  } caliptra_otp_ctrl_reg2hw_alert_test_reg_t;

  typedef struct packed {
    logic        q;
    logic        qe;
  } caliptra_otp_ctrl_reg2hw_direct_access_regwen_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
      logic        qe;
    } digest;
    struct packed {
      logic        q;
      logic        qe;
    } wr;
    struct packed {
      logic        q;
      logic        qe;
    } rd;
  } caliptra_otp_ctrl_reg2hw_direct_access_cmd_reg_t;

  typedef struct packed {
    logic [11:0] q;
  } caliptra_otp_ctrl_reg2hw_direct_access_address_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } caliptra_otp_ctrl_reg2hw_direct_access_wdata_mreg_t;

  typedef struct packed {
    struct packed {
      logic        q;
      logic        qe;
    } consistency;
    struct packed {
      logic        q;
      logic        qe;
    } integrity;
  } caliptra_otp_ctrl_reg2hw_check_trigger_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } caliptra_otp_ctrl_reg2hw_check_timeout_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } caliptra_otp_ctrl_reg2hw_integrity_check_period_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } caliptra_otp_ctrl_reg2hw_consistency_check_period_reg_t;

  typedef struct packed {
    logic        q;
  } caliptra_otp_ctrl_reg2hw_vendor_test_read_lock_reg_t;

  typedef struct packed {
    logic        q;
  } caliptra_otp_ctrl_reg2hw_non_secret_fuses_read_lock_reg_t;

  typedef struct packed {
    struct packed {
      logic        d;
      logic        de;
    } otp_operation_done;
    struct packed {
      logic        d;
      logic        de;
    } otp_error;
  } caliptra_otp_ctrl_hw2reg_intr_state_reg_t;

  typedef struct packed {
    struct packed {
      logic        d;
    } vendor_test_error;
    struct packed {
      logic        d;
    } non_secret_fuses_error;
    struct packed {
      logic        d;
    } secret0_error;
    struct packed {
      logic        d;
    } secret1_error;
    struct packed {
      logic        d;
    } secret2_error;
    struct packed {
      logic        d;
    } secret3_error;
    struct packed {
      logic        d;
    } life_cycle_error;
    struct packed {
      logic        d;
    } dai_error;
    struct packed {
      logic        d;
    } lci_error;
    struct packed {
      logic        d;
    } timeout_error;
    struct packed {
      logic        d;
    } lfsr_fsm_error;
    struct packed {
      logic        d;
    } scrambling_fsm_error;
    //struct packed {
    //  logic        d;
    //} key_deriv_fsm_error;
    struct packed {
      logic        d;
    } bus_integ_error;
    struct packed {
      logic        d;
    } dai_idle;
    struct packed {
      logic        d;
    } check_pending;
  } caliptra_otp_ctrl_hw2reg_status_reg_t;

  typedef struct packed {
    logic [2:0]  d;
  } caliptra_otp_ctrl_hw2reg_err_code_mreg_t;

  typedef struct packed {
    logic        d;
  } caliptra_otp_ctrl_hw2reg_direct_access_regwen_reg_t;

  typedef struct packed {
    logic [31:0] d;
  } caliptra_otp_ctrl_hw2reg_direct_access_rdata_mreg_t;

  typedef struct packed {
    logic [31:0] d;
  } caliptra_otp_ctrl_hw2reg_vendor_test_digest_mreg_t;

  typedef struct packed {
    logic [31:0] d;
  } caliptra_otp_ctrl_hw2reg_non_secret_fuses_digest_mreg_t;

  typedef struct packed {
    logic [31:0] d;
  } caliptra_otp_ctrl_hw2reg_secret0_digest_mreg_t;

  typedef struct packed {
    logic [31:0] d;
  } caliptra_otp_ctrl_hw2reg_secret1_digest_mreg_t;

  typedef struct packed {
    logic [31:0] d;
  } caliptra_otp_ctrl_hw2reg_secret2_digest_mreg_t;

  typedef struct packed {
    logic [31:0] d;
  } caliptra_otp_ctrl_hw2reg_secret3_digest_mreg_t;

  // Register -> HW type for core interface
  typedef struct packed {
    caliptra_otp_ctrl_reg2hw_intr_state_reg_t intr_state; // [203:202]
    caliptra_otp_ctrl_reg2hw_intr_enable_reg_t intr_enable; // [201:200]
    caliptra_otp_ctrl_reg2hw_intr_test_reg_t intr_test; // [199:196]
    caliptra_otp_ctrl_reg2hw_alert_test_reg_t alert_test; // [195:186]
    caliptra_otp_ctrl_reg2hw_direct_access_regwen_reg_t direct_access_regwen; // [185:184]
    caliptra_otp_ctrl_reg2hw_direct_access_cmd_reg_t direct_access_cmd; // [183:178]
    caliptra_otp_ctrl_reg2hw_direct_access_address_reg_t direct_access_address; // [177:166]
    caliptra_otp_ctrl_reg2hw_direct_access_wdata_mreg_t [1:0] direct_access_wdata; // [165:102]
    caliptra_otp_ctrl_reg2hw_check_trigger_reg_t check_trigger; // [101:98]
    caliptra_otp_ctrl_reg2hw_check_timeout_reg_t check_timeout; // [97:66]
    caliptra_otp_ctrl_reg2hw_integrity_check_period_reg_t integrity_check_period; // [65:34]
    caliptra_otp_ctrl_reg2hw_consistency_check_period_reg_t consistency_check_period; // [33:2]
    caliptra_otp_ctrl_reg2hw_vendor_test_read_lock_reg_t vendor_test_read_lock; // [1:1]
    caliptra_otp_ctrl_reg2hw_non_secret_fuses_read_lock_reg_t non_secret_fuses_read_lock; // [0:0]
  } caliptra_otp_ctrl_core_reg2hw_t;

  // HW -> register type for core interface
  typedef struct packed {
    caliptra_otp_ctrl_hw2reg_intr_state_reg_t intr_state; // [495:492]
    caliptra_otp_ctrl_hw2reg_status_reg_t status; // [491:476]
    caliptra_otp_ctrl_hw2reg_err_code_mreg_t [8:0] err_code; // [475:449]
    caliptra_otp_ctrl_hw2reg_direct_access_regwen_reg_t direct_access_regwen; // [448:448]
    caliptra_otp_ctrl_hw2reg_direct_access_rdata_mreg_t [1:0] direct_access_rdata; // [447:384]
    caliptra_otp_ctrl_hw2reg_vendor_test_digest_mreg_t [1:0] vendor_test_digest; // [383:320]
    caliptra_otp_ctrl_hw2reg_non_secret_fuses_digest_mreg_t [1:0]
        non_secret_fuses_digest; // [319:256]
    caliptra_otp_ctrl_hw2reg_secret0_digest_mreg_t [1:0] secret0_digest; // [255:192]
    caliptra_otp_ctrl_hw2reg_secret1_digest_mreg_t [1:0] secret1_digest; // [191:128]
    caliptra_otp_ctrl_hw2reg_secret2_digest_mreg_t [1:0] secret2_digest; // [127:64]
    caliptra_otp_ctrl_hw2reg_secret3_digest_mreg_t [1:0] secret3_digest; // [63:0]
  } caliptra_otp_ctrl_core_hw2reg_t;

  // Register offsets for core interface
  parameter logic [CoreAw-1:0] CALIPTRA_OTP_CTRL_INTR_STATE_OFFSET = 13'h 0;
  parameter logic [CoreAw-1:0] CALIPTRA_OTP_CTRL_INTR_ENABLE_OFFSET = 13'h 4;
  parameter logic [CoreAw-1:0] CALIPTRA_OTP_CTRL_INTR_TEST_OFFSET = 13'h 8;
  parameter logic [CoreAw-1:0] CALIPTRA_OTP_CTRL_ALERT_TEST_OFFSET = 13'h c;
  parameter logic [CoreAw-1:0] CALIPTRA_OTP_CTRL_STATUS_OFFSET = 13'h 10;
  parameter logic [CoreAw-1:0] CALIPTRA_OTP_CTRL_ERR_CODE_0_OFFSET = 13'h 14;
  parameter logic [CoreAw-1:0] CALIPTRA_OTP_CTRL_ERR_CODE_1_OFFSET = 13'h 18;
  parameter logic [CoreAw-1:0] CALIPTRA_OTP_CTRL_ERR_CODE_2_OFFSET = 13'h 1c;
  parameter logic [CoreAw-1:0] CALIPTRA_OTP_CTRL_ERR_CODE_3_OFFSET = 13'h 20;
  parameter logic [CoreAw-1:0] CALIPTRA_OTP_CTRL_ERR_CODE_4_OFFSET = 13'h 24;
  parameter logic [CoreAw-1:0] CALIPTRA_OTP_CTRL_ERR_CODE_5_OFFSET = 13'h 28;
  parameter logic [CoreAw-1:0] CALIPTRA_OTP_CTRL_ERR_CODE_6_OFFSET = 13'h 2c;
  parameter logic [CoreAw-1:0] CALIPTRA_OTP_CTRL_ERR_CODE_7_OFFSET = 13'h 30;
  parameter logic [CoreAw-1:0] CALIPTRA_OTP_CTRL_ERR_CODE_8_OFFSET = 13'h 34;
  parameter logic [CoreAw-1:0] CALIPTRA_OTP_CTRL_DIRECT_ACCESS_REGWEN_OFFSET = 13'h 38;
  parameter logic [CoreAw-1:0] CALIPTRA_OTP_CTRL_DIRECT_ACCESS_CMD_OFFSET = 13'h 3c;
  parameter logic [CoreAw-1:0] CALIPTRA_OTP_CTRL_DIRECT_ACCESS_ADDRESS_OFFSET = 13'h 40;
  parameter logic [CoreAw-1:0] CALIPTRA_OTP_CTRL_DIRECT_ACCESS_WDATA_0_OFFSET = 13'h 44;
  parameter logic [CoreAw-1:0] CALIPTRA_OTP_CTRL_DIRECT_ACCESS_WDATA_1_OFFSET = 13'h 48;
  parameter logic [CoreAw-1:0] CALIPTRA_OTP_CTRL_DIRECT_ACCESS_RDATA_0_OFFSET = 13'h 4c;
  parameter logic [CoreAw-1:0] CALIPTRA_OTP_CTRL_DIRECT_ACCESS_RDATA_1_OFFSET = 13'h 50;
  parameter logic [CoreAw-1:0] CALIPTRA_OTP_CTRL_CHECK_TRIGGER_REGWEN_OFFSET = 13'h 54;
  parameter logic [CoreAw-1:0] CALIPTRA_OTP_CTRL_CHECK_TRIGGER_OFFSET = 13'h 58;
  parameter logic [CoreAw-1:0] CALIPTRA_OTP_CTRL_CHECK_REGWEN_OFFSET = 13'h 5c;
  parameter logic [CoreAw-1:0] CALIPTRA_OTP_CTRL_CHECK_TIMEOUT_OFFSET = 13'h 60;
  parameter logic [CoreAw-1:0] CALIPTRA_OTP_CTRL_INTEGRITY_CHECK_PERIOD_OFFSET = 13'h 64;
  parameter logic [CoreAw-1:0] CALIPTRA_OTP_CTRL_CONSISTENCY_CHECK_PERIOD_OFFSET = 13'h 68;
  parameter logic [CoreAw-1:0] CALIPTRA_OTP_CTRL_VENDOR_TEST_READ_LOCK_OFFSET = 13'h 6c;
  parameter logic [CoreAw-1:0] CALIPTRA_OTP_CTRL_NON_SECRET_FUSES_READ_LOCK_OFFSET = 13'h 70;
  parameter logic [CoreAw-1:0] CALIPTRA_OTP_CTRL_VENDOR_TEST_DIGEST_0_OFFSET = 13'h 74;
  parameter logic [CoreAw-1:0] CALIPTRA_OTP_CTRL_VENDOR_TEST_DIGEST_1_OFFSET = 13'h 78;
  parameter logic [CoreAw-1:0] CALIPTRA_OTP_CTRL_NON_SECRET_FUSES_DIGEST_0_OFFSET = 13'h 7c;
  parameter logic [CoreAw-1:0] CALIPTRA_OTP_CTRL_NON_SECRET_FUSES_DIGEST_1_OFFSET = 13'h 80;
  parameter logic [CoreAw-1:0] CALIPTRA_OTP_CTRL_SECRET0_DIGEST_0_OFFSET = 13'h 84;
  parameter logic [CoreAw-1:0] CALIPTRA_OTP_CTRL_SECRET0_DIGEST_1_OFFSET = 13'h 88;
  parameter logic [CoreAw-1:0] CALIPTRA_OTP_CTRL_SECRET1_DIGEST_0_OFFSET = 13'h 8c;
  parameter logic [CoreAw-1:0] CALIPTRA_OTP_CTRL_SECRET1_DIGEST_1_OFFSET = 13'h 90;
  parameter logic [CoreAw-1:0] CALIPTRA_OTP_CTRL_SECRET2_DIGEST_0_OFFSET = 13'h 94;
  parameter logic [CoreAw-1:0] CALIPTRA_OTP_CTRL_SECRET2_DIGEST_1_OFFSET = 13'h 98;
  parameter logic [CoreAw-1:0] CALIPTRA_OTP_CTRL_SECRET3_DIGEST_0_OFFSET = 13'h 9c;
  parameter logic [CoreAw-1:0] CALIPTRA_OTP_CTRL_SECRET3_DIGEST_1_OFFSET = 13'h a0;

  // Reset values for hwext registers and their fields for core interface
  parameter logic [1:0] CALIPTRA_OTP_CTRL_INTR_TEST_RESVAL = 2'h 0;
  parameter logic [0:0] CALIPTRA_OTP_CTRL_INTR_TEST_OTP_OPERATION_DONE_RESVAL = 1'h 0;
  parameter logic [0:0] CALIPTRA_OTP_CTRL_INTR_TEST_OTP_ERROR_RESVAL = 1'h 0;
  parameter logic [4:0] CALIPTRA_OTP_CTRL_ALERT_TEST_RESVAL = 5'h 0;
  parameter logic [0:0] CALIPTRA_OTP_CTRL_ALERT_TEST_FATAL_MACRO_ERROR_RESVAL = 1'h 0;
  parameter logic [0:0] CALIPTRA_OTP_CTRL_ALERT_TEST_FATAL_CHECK_ERROR_RESVAL = 1'h 0;
  parameter logic [0:0] CALIPTRA_OTP_CTRL_ALERT_TEST_FATAL_BUS_INTEG_ERROR_RESVAL = 1'h 0;
  parameter logic [0:0] CALIPTRA_OTP_CTRL_ALERT_TEST_FATAL_PRIM_OTP_ALERT_RESVAL = 1'h 0;
  parameter logic [0:0] CALIPTRA_OTP_CTRL_ALERT_TEST_RECOV_PRIM_OTP_ALERT_RESVAL = 1'h 0;
  parameter logic [15:0] CALIPTRA_OTP_CTRL_STATUS_RESVAL = 16'h 0;
  parameter logic [0:0] CALIPTRA_OTP_CTRL_STATUS_VENDOR_TEST_ERROR_RESVAL = 1'h 0;
  parameter logic [0:0] CALIPTRA_OTP_CTRL_STATUS_NON_SECRET_FUSES_ERROR_RESVAL = 1'h 0;
  parameter logic [0:0] CALIPTRA_OTP_CTRL_STATUS_SECRET0_ERROR_RESVAL = 1'h 0;
  parameter logic [0:0] CALIPTRA_OTP_CTRL_STATUS_SECRET1_ERROR_RESVAL = 1'h 0;
  parameter logic [0:0] CALIPTRA_OTP_CTRL_STATUS_SECRET2_ERROR_RESVAL = 1'h 0;
  parameter logic [0:0] CALIPTRA_OTP_CTRL_STATUS_SECRET3_ERROR_RESVAL = 1'h 0;
  parameter logic [0:0] CALIPTRA_OTP_CTRL_STATUS_LIFE_CYCLE_ERROR_RESVAL = 1'h 0;
  parameter logic [0:0] CALIPTRA_OTP_CTRL_STATUS_DAI_ERROR_RESVAL = 1'h 0;
  parameter logic [0:0] CALIPTRA_OTP_CTRL_STATUS_LCI_ERROR_RESVAL = 1'h 0;
  parameter logic [0:0] CALIPTRA_OTP_CTRL_STATUS_TIMEOUT_ERROR_RESVAL = 1'h 0;
  parameter logic [0:0] CALIPTRA_OTP_CTRL_STATUS_LFSR_FSM_ERROR_RESVAL = 1'h 0;
  parameter logic [0:0] CALIPTRA_OTP_CTRL_STATUS_SCRAMBLING_FSM_ERROR_RESVAL = 1'h 0;
  parameter logic [0:0] CALIPTRA_OTP_CTRL_STATUS_KEY_DERIV_FSM_ERROR_RESVAL = 1'h 0;
  parameter logic [0:0] CALIPTRA_OTP_CTRL_STATUS_BUS_INTEG_ERROR_RESVAL = 1'h 0;
  parameter logic [0:0] CALIPTRA_OTP_CTRL_STATUS_DAI_IDLE_RESVAL = 1'h 0;
  parameter logic [0:0] CALIPTRA_OTP_CTRL_STATUS_CHECK_PENDING_RESVAL = 1'h 0;
  parameter logic [2:0] CALIPTRA_OTP_CTRL_ERR_CODE_0_RESVAL = 3'h 0;
  parameter logic [2:0] CALIPTRA_OTP_CTRL_ERR_CODE_0_ERR_CODE_0_RESVAL = 3'h 0;
  parameter logic [2:0] CALIPTRA_OTP_CTRL_ERR_CODE_1_RESVAL = 3'h 0;
  parameter logic [2:0] CALIPTRA_OTP_CTRL_ERR_CODE_1_ERR_CODE_1_RESVAL = 3'h 0;
  parameter logic [2:0] CALIPTRA_OTP_CTRL_ERR_CODE_2_RESVAL = 3'h 0;
  parameter logic [2:0] CALIPTRA_OTP_CTRL_ERR_CODE_2_ERR_CODE_2_RESVAL = 3'h 0;
  parameter logic [2:0] CALIPTRA_OTP_CTRL_ERR_CODE_3_RESVAL = 3'h 0;
  parameter logic [2:0] CALIPTRA_OTP_CTRL_ERR_CODE_3_ERR_CODE_3_RESVAL = 3'h 0;
  parameter logic [2:0] CALIPTRA_OTP_CTRL_ERR_CODE_4_RESVAL = 3'h 0;
  parameter logic [2:0] CALIPTRA_OTP_CTRL_ERR_CODE_4_ERR_CODE_4_RESVAL = 3'h 0;
  parameter logic [2:0] CALIPTRA_OTP_CTRL_ERR_CODE_5_RESVAL = 3'h 0;
  parameter logic [2:0] CALIPTRA_OTP_CTRL_ERR_CODE_5_ERR_CODE_5_RESVAL = 3'h 0;
  parameter logic [2:0] CALIPTRA_OTP_CTRL_ERR_CODE_6_RESVAL = 3'h 0;
  parameter logic [2:0] CALIPTRA_OTP_CTRL_ERR_CODE_6_ERR_CODE_6_RESVAL = 3'h 0;
  parameter logic [2:0] CALIPTRA_OTP_CTRL_ERR_CODE_7_RESVAL = 3'h 0;
  parameter logic [2:0] CALIPTRA_OTP_CTRL_ERR_CODE_7_ERR_CODE_7_RESVAL = 3'h 0;
  parameter logic [2:0] CALIPTRA_OTP_CTRL_ERR_CODE_8_RESVAL = 3'h 0;
  parameter logic [2:0] CALIPTRA_OTP_CTRL_ERR_CODE_8_ERR_CODE_8_RESVAL = 3'h 0;
  parameter logic [0:0] CALIPTRA_OTP_CTRL_DIRECT_ACCESS_REGWEN_RESVAL = 1'h 1;
  parameter logic [0:0] CALIPTRA_OTP_CTRL_DIRECT_ACCESS_REGWEN_DIRECT_ACCESS_REGWEN_RESVAL = 1'h 1;
  parameter logic [2:0] CALIPTRA_OTP_CTRL_DIRECT_ACCESS_CMD_RESVAL = 3'h 0;
  parameter logic [0:0] CALIPTRA_OTP_CTRL_DIRECT_ACCESS_CMD_RD_RESVAL = 1'h 0;
  parameter logic [0:0] CALIPTRA_OTP_CTRL_DIRECT_ACCESS_CMD_WR_RESVAL = 1'h 0;
  parameter logic [0:0] CALIPTRA_OTP_CTRL_DIRECT_ACCESS_CMD_DIGEST_RESVAL = 1'h 0;
  parameter logic [31:0] CALIPTRA_OTP_CTRL_DIRECT_ACCESS_RDATA_0_RESVAL = 32'h 0;
  parameter logic [31:0]
      CALIPTRA_OTP_CTRL_DIRECT_ACCESS_RDATA_0_DIRECT_ACCESS_RDATA_0_RESVAL =
      32'h 0;
  parameter logic [31:0] CALIPTRA_OTP_CTRL_DIRECT_ACCESS_RDATA_1_RESVAL = 32'h 0;
  parameter logic [31:0]
      CALIPTRA_OTP_CTRL_DIRECT_ACCESS_RDATA_1_DIRECT_ACCESS_RDATA_1_RESVAL =
      32'h 0;
  parameter logic [1:0] CALIPTRA_OTP_CTRL_CHECK_TRIGGER_RESVAL = 2'h 0;
  parameter logic [0:0] CALIPTRA_OTP_CTRL_CHECK_TRIGGER_INTEGRITY_RESVAL = 1'h 0;
  parameter logic [0:0] CALIPTRA_OTP_CTRL_CHECK_TRIGGER_CONSISTENCY_RESVAL = 1'h 0;
  parameter logic [31:0] CALIPTRA_OTP_CTRL_VENDOR_TEST_DIGEST_0_RESVAL = 32'h 0;
  parameter logic [31:0]
      CALIPTRA_OTP_CTRL_VENDOR_TEST_DIGEST_0_VENDOR_TEST_DIGEST_0_RESVAL =
      32'h 0;
  parameter logic [31:0] CALIPTRA_OTP_CTRL_VENDOR_TEST_DIGEST_1_RESVAL = 32'h 0;
  parameter logic [31:0]
      CALIPTRA_OTP_CTRL_VENDOR_TEST_DIGEST_1_VENDOR_TEST_DIGEST_1_RESVAL =
      32'h 0;
  parameter logic [31:0] CALIPTRA_OTP_CTRL_NON_SECRET_FUSES_DIGEST_0_RESVAL = 32'h 0;
  parameter logic [31:0]
      CALIPTRA_OTP_CTRL_NON_SECRET_FUSES_DIGEST_0_NON_SECRET_FUSES_DIGEST_0_RESVAL =
      32'h 0;
  parameter logic [31:0] CALIPTRA_OTP_CTRL_NON_SECRET_FUSES_DIGEST_1_RESVAL = 32'h 0;
  parameter logic [31:0]
      CALIPTRA_OTP_CTRL_NON_SECRET_FUSES_DIGEST_1_NON_SECRET_FUSES_DIGEST_1_RESVAL =
      32'h 0;
  parameter logic [31:0] CALIPTRA_OTP_CTRL_SECRET0_DIGEST_0_RESVAL = 32'h 0;
  parameter logic [31:0] CALIPTRA_OTP_CTRL_SECRET0_DIGEST_0_SECRET0_DIGEST_0_RESVAL = 32'h 0;
  parameter logic [31:0] CALIPTRA_OTP_CTRL_SECRET0_DIGEST_1_RESVAL = 32'h 0;
  parameter logic [31:0] CALIPTRA_OTP_CTRL_SECRET0_DIGEST_1_SECRET0_DIGEST_1_RESVAL = 32'h 0;
  parameter logic [31:0] CALIPTRA_OTP_CTRL_SECRET1_DIGEST_0_RESVAL = 32'h 0;
  parameter logic [31:0] CALIPTRA_OTP_CTRL_SECRET1_DIGEST_0_SECRET1_DIGEST_0_RESVAL = 32'h 0;
  parameter logic [31:0] CALIPTRA_OTP_CTRL_SECRET1_DIGEST_1_RESVAL = 32'h 0;
  parameter logic [31:0] CALIPTRA_OTP_CTRL_SECRET1_DIGEST_1_SECRET1_DIGEST_1_RESVAL = 32'h 0;
  parameter logic [31:0] CALIPTRA_OTP_CTRL_SECRET2_DIGEST_0_RESVAL = 32'h 0;
  parameter logic [31:0] CALIPTRA_OTP_CTRL_SECRET2_DIGEST_0_SECRET2_DIGEST_0_RESVAL = 32'h 0;
  parameter logic [31:0] CALIPTRA_OTP_CTRL_SECRET2_DIGEST_1_RESVAL = 32'h 0;
  parameter logic [31:0] CALIPTRA_OTP_CTRL_SECRET2_DIGEST_1_SECRET2_DIGEST_1_RESVAL = 32'h 0;
  parameter logic [31:0] CALIPTRA_OTP_CTRL_SECRET3_DIGEST_0_RESVAL = 32'h 0;
  parameter logic [31:0] CALIPTRA_OTP_CTRL_SECRET3_DIGEST_0_SECRET3_DIGEST_0_RESVAL = 32'h 0;
  parameter logic [31:0] CALIPTRA_OTP_CTRL_SECRET3_DIGEST_1_RESVAL = 32'h 0;
  parameter logic [31:0] CALIPTRA_OTP_CTRL_SECRET3_DIGEST_1_SECRET3_DIGEST_1_RESVAL = 32'h 0;

  // Window parameters for core interface
  parameter logic [CoreAw-1:0] CALIPTRA_OTP_CTRL_SW_CFG_WINDOW_OFFSET = 13'h 1000;
  parameter int unsigned       CALIPTRA_OTP_CTRL_SW_CFG_WINDOW_SIZE   = 'h 1000;
  parameter int unsigned       CALIPTRA_OTP_CTRL_SW_CFG_WINDOW_IDX    = 0;

  // Register index for core interface
  typedef enum int {
    CALIPTRA_OTP_CTRL_INTR_STATE,
    CALIPTRA_OTP_CTRL_INTR_ENABLE,
    CALIPTRA_OTP_CTRL_INTR_TEST,
    CALIPTRA_OTP_CTRL_ALERT_TEST,
    CALIPTRA_OTP_CTRL_STATUS,
    CALIPTRA_OTP_CTRL_ERR_CODE_0,
    CALIPTRA_OTP_CTRL_ERR_CODE_1,
    CALIPTRA_OTP_CTRL_ERR_CODE_2,
    CALIPTRA_OTP_CTRL_ERR_CODE_3,
    CALIPTRA_OTP_CTRL_ERR_CODE_4,
    CALIPTRA_OTP_CTRL_ERR_CODE_5,
    CALIPTRA_OTP_CTRL_ERR_CODE_6,
    CALIPTRA_OTP_CTRL_ERR_CODE_7,
    CALIPTRA_OTP_CTRL_ERR_CODE_8,
    CALIPTRA_OTP_CTRL_DIRECT_ACCESS_REGWEN,
    CALIPTRA_OTP_CTRL_DIRECT_ACCESS_CMD,
    CALIPTRA_OTP_CTRL_DIRECT_ACCESS_ADDRESS,
    CALIPTRA_OTP_CTRL_DIRECT_ACCESS_WDATA_0,
    CALIPTRA_OTP_CTRL_DIRECT_ACCESS_WDATA_1,
    CALIPTRA_OTP_CTRL_DIRECT_ACCESS_RDATA_0,
    CALIPTRA_OTP_CTRL_DIRECT_ACCESS_RDATA_1,
    CALIPTRA_OTP_CTRL_CHECK_TRIGGER_REGWEN,
    CALIPTRA_OTP_CTRL_CHECK_TRIGGER,
    CALIPTRA_OTP_CTRL_CHECK_REGWEN,
    CALIPTRA_OTP_CTRL_CHECK_TIMEOUT,
    CALIPTRA_OTP_CTRL_INTEGRITY_CHECK_PERIOD,
    CALIPTRA_OTP_CTRL_CONSISTENCY_CHECK_PERIOD,
    CALIPTRA_OTP_CTRL_VENDOR_TEST_READ_LOCK,
    CALIPTRA_OTP_CTRL_NON_SECRET_FUSES_READ_LOCK,
    CALIPTRA_OTP_CTRL_VENDOR_TEST_DIGEST_0,
    CALIPTRA_OTP_CTRL_VENDOR_TEST_DIGEST_1,
    CALIPTRA_OTP_CTRL_NON_SECRET_FUSES_DIGEST_0,
    CALIPTRA_OTP_CTRL_NON_SECRET_FUSES_DIGEST_1,
    CALIPTRA_OTP_CTRL_SECRET0_DIGEST_0,
    CALIPTRA_OTP_CTRL_SECRET0_DIGEST_1,
    CALIPTRA_OTP_CTRL_SECRET1_DIGEST_0,
    CALIPTRA_OTP_CTRL_SECRET1_DIGEST_1,
    CALIPTRA_OTP_CTRL_SECRET2_DIGEST_0,
    CALIPTRA_OTP_CTRL_SECRET2_DIGEST_1,
    CALIPTRA_OTP_CTRL_SECRET3_DIGEST_0,
    CALIPTRA_OTP_CTRL_SECRET3_DIGEST_1
  } caliptra_otp_ctrl_core_id_e;

  // Register width information to check illegal writes for core interface
  parameter logic [3:0] CALIPTRA_OTP_CTRL_CORE_PERMIT [41] = '{
    4'b 0001, // index[ 0] CALIPTRA_OTP_CTRL_INTR_STATE
    4'b 0001, // index[ 1] CALIPTRA_OTP_CTRL_INTR_ENABLE
    4'b 0001, // index[ 2] CALIPTRA_OTP_CTRL_INTR_TEST
    4'b 0001, // index[ 3] CALIPTRA_OTP_CTRL_ALERT_TEST
    4'b 0011, // index[ 4] CALIPTRA_OTP_CTRL_STATUS
    4'b 0001, // index[ 5] CALIPTRA_OTP_CTRL_ERR_CODE_0
    4'b 0001, // index[ 6] CALIPTRA_OTP_CTRL_ERR_CODE_1
    4'b 0001, // index[ 7] CALIPTRA_OTP_CTRL_ERR_CODE_2
    4'b 0001, // index[ 8] CALIPTRA_OTP_CTRL_ERR_CODE_3
    4'b 0001, // index[ 9] CALIPTRA_OTP_CTRL_ERR_CODE_4
    4'b 0001, // index[10] CALIPTRA_OTP_CTRL_ERR_CODE_5
    4'b 0001, // index[11] CALIPTRA_OTP_CTRL_ERR_CODE_6
    4'b 0001, // index[12] CALIPTRA_OTP_CTRL_ERR_CODE_7
    4'b 0001, // index[13] CALIPTRA_OTP_CTRL_ERR_CODE_8
    4'b 0001, // index[14] CALIPTRA_OTP_CTRL_DIRECT_ACCESS_REGWEN
    4'b 0001, // index[15] CALIPTRA_OTP_CTRL_DIRECT_ACCESS_CMD
    4'b 0011, // index[16] CALIPTRA_OTP_CTRL_DIRECT_ACCESS_ADDRESS
    4'b 1111, // index[17] CALIPTRA_OTP_CTRL_DIRECT_ACCESS_WDATA_0
    4'b 1111, // index[18] CALIPTRA_OTP_CTRL_DIRECT_ACCESS_WDATA_1
    4'b 1111, // index[19] CALIPTRA_OTP_CTRL_DIRECT_ACCESS_RDATA_0
    4'b 1111, // index[20] CALIPTRA_OTP_CTRL_DIRECT_ACCESS_RDATA_1
    4'b 0001, // index[21] CALIPTRA_OTP_CTRL_CHECK_TRIGGER_REGWEN
    4'b 0001, // index[22] CALIPTRA_OTP_CTRL_CHECK_TRIGGER
    4'b 0001, // index[23] CALIPTRA_OTP_CTRL_CHECK_REGWEN
    4'b 1111, // index[24] CALIPTRA_OTP_CTRL_CHECK_TIMEOUT
    4'b 1111, // index[25] CALIPTRA_OTP_CTRL_INTEGRITY_CHECK_PERIOD
    4'b 1111, // index[26] CALIPTRA_OTP_CTRL_CONSISTENCY_CHECK_PERIOD
    4'b 0001, // index[27] CALIPTRA_OTP_CTRL_VENDOR_TEST_READ_LOCK
    4'b 0001, // index[28] CALIPTRA_OTP_CTRL_NON_SECRET_FUSES_READ_LOCK
    4'b 1111, // index[29] CALIPTRA_OTP_CTRL_VENDOR_TEST_DIGEST_0
    4'b 1111, // index[30] CALIPTRA_OTP_CTRL_VENDOR_TEST_DIGEST_1
    4'b 1111, // index[31] CALIPTRA_OTP_CTRL_NON_SECRET_FUSES_DIGEST_0
    4'b 1111, // index[32] CALIPTRA_OTP_CTRL_NON_SECRET_FUSES_DIGEST_1
    4'b 1111, // index[33] CALIPTRA_OTP_CTRL_SECRET0_DIGEST_0
    4'b 1111, // index[34] CALIPTRA_OTP_CTRL_SECRET0_DIGEST_1
    4'b 1111, // index[35] CALIPTRA_OTP_CTRL_SECRET1_DIGEST_0
    4'b 1111, // index[36] CALIPTRA_OTP_CTRL_SECRET1_DIGEST_1
    4'b 1111, // index[37] CALIPTRA_OTP_CTRL_SECRET2_DIGEST_0
    4'b 1111, // index[38] CALIPTRA_OTP_CTRL_SECRET2_DIGEST_1
    4'b 1111, // index[39] CALIPTRA_OTP_CTRL_SECRET3_DIGEST_0
    4'b 1111  // index[40] CALIPTRA_OTP_CTRL_SECRET3_DIGEST_1
  };

  ///////////////////////////////////////////////
  // Typedefs for registers for prim interface //
  ///////////////////////////////////////////////

  typedef struct packed {
    struct packed {
      logic [10:0] q;
    } field4;
    struct packed {
      logic [9:0] q;
    } field3;
    struct packed {
      logic        q;
    } field2;
    struct packed {
      logic        q;
    } field1;
    struct packed {
      logic        q;
    } field0;
  } caliptra_otp_ctrl_reg2hw_csr0_reg_t;

  typedef struct packed {
    struct packed {
      logic [15:0] q;
    } field4;
    struct packed {
      logic        q;
    } field3;
    struct packed {
      logic [6:0]  q;
    } field2;
    struct packed {
      logic        q;
    } field1;
    struct packed {
      logic [6:0]  q;
    } field0;
  } caliptra_otp_ctrl_reg2hw_csr1_reg_t;

  typedef struct packed {
    logic        q;
  } caliptra_otp_ctrl_reg2hw_csr2_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } field8;
    struct packed {
      logic        q;
    } field7;
    struct packed {
      logic        q;
    } field6;
    struct packed {
      logic        q;
    } field5;
    struct packed {
      logic        q;
    } field4;
    struct packed {
      logic        q;
    } field3;
    struct packed {
      logic        q;
    } field2;
    struct packed {
      logic [9:0] q;
    } field1;
    struct packed {
      logic [2:0]  q;
    } field0;
  } caliptra_otp_ctrl_reg2hw_csr3_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } field3;
    struct packed {
      logic        q;
    } field2;
    struct packed {
      logic        q;
    } field1;
    struct packed {
      logic [9:0] q;
    } field0;
  } caliptra_otp_ctrl_reg2hw_csr4_reg_t;

  typedef struct packed {
    struct packed {
      logic [15:0] q;
    } field6;
    struct packed {
      logic        q;
    } field5;
    struct packed {
      logic        q;
    } field4;
    struct packed {
      logic [2:0]  q;
    } field3;
    struct packed {
      logic        q;
    } field2;
    struct packed {
      logic [1:0]  q;
    } field1;
    struct packed {
      logic [5:0]  q;
    } field0;
  } caliptra_otp_ctrl_reg2hw_csr5_reg_t;

  typedef struct packed {
    struct packed {
      logic [15:0] q;
    } field3;
    struct packed {
      logic        q;
    } field2;
    struct packed {
      logic        q;
    } field1;
    struct packed {
      logic [9:0] q;
    } field0;
  } caliptra_otp_ctrl_reg2hw_csr6_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } field3;
    struct packed {
      logic        q;
    } field2;
    struct packed {
      logic [2:0]  q;
    } field1;
    struct packed {
      logic [5:0]  q;
    } field0;
  } caliptra_otp_ctrl_reg2hw_csr7_reg_t;

  typedef struct packed {
    struct packed {
      logic [2:0]  d;
      logic        de;
    } field0;
    struct packed {
      logic [9:0] d;
      logic        de;
    } field1;
    struct packed {
      logic        d;
      logic        de;
    } field2;
    struct packed {
      logic        d;
      logic        de;
    } field3;
    struct packed {
      logic        d;
      logic        de;
    } field4;
    struct packed {
      logic        d;
      logic        de;
    } field5;
    struct packed {
      logic        d;
      logic        de;
    } field6;
    struct packed {
      logic        d;
      logic        de;
    } field7;
    struct packed {
      logic        d;
      logic        de;
    } field8;
  } caliptra_otp_ctrl_hw2reg_csr3_reg_t;

  typedef struct packed {
    struct packed {
      logic [5:0]  d;
      logic        de;
    } field0;
    struct packed {
      logic [1:0]  d;
      logic        de;
    } field1;
    struct packed {
      logic        d;
      logic        de;
    } field2;
    struct packed {
      logic [2:0]  d;
      logic        de;
    } field3;
    struct packed {
      logic        d;
      logic        de;
    } field4;
    struct packed {
      logic        d;
      logic        de;
    } field5;
    struct packed {
      logic [15:0] d;
      logic        de;
    } field6;
  } caliptra_otp_ctrl_hw2reg_csr5_reg_t;

  typedef struct packed {
    struct packed {
      logic [5:0]  d;
      logic        de;
    } field0;
    struct packed {
      logic [2:0]  d;
      logic        de;
    } field1;
    struct packed {
      logic        d;
      logic        de;
    } field2;
    struct packed {
      logic        d;
      logic        de;
    } field3;
  } caliptra_otp_ctrl_hw2reg_csr7_reg_t;

  // Register -> HW type for prim interface
  typedef struct packed {
    caliptra_otp_ctrl_reg2hw_csr0_reg_t csr0; // [158:135]
    caliptra_otp_ctrl_reg2hw_csr1_reg_t csr1; // [134:103]
    caliptra_otp_ctrl_reg2hw_csr2_reg_t csr2; // [102:102]
    caliptra_otp_ctrl_reg2hw_csr3_reg_t csr3; // [101:82]
    caliptra_otp_ctrl_reg2hw_csr4_reg_t csr4; // [81:69]
    caliptra_otp_ctrl_reg2hw_csr5_reg_t csr5; // [68:39]
    caliptra_otp_ctrl_reg2hw_csr6_reg_t csr6; // [38:11]
    caliptra_otp_ctrl_reg2hw_csr7_reg_t csr7; // [10:0]
  } caliptra_otp_ctrl_prim_reg2hw_t;

  // HW -> register type for prim interface
  typedef struct packed {
    caliptra_otp_ctrl_hw2reg_csr3_reg_t csr3; // [80:52]
    caliptra_otp_ctrl_hw2reg_csr5_reg_t csr5; // [51:15]
    caliptra_otp_ctrl_hw2reg_csr7_reg_t csr7; // [14:0]
  } caliptra_otp_ctrl_prim_hw2reg_t;

  // Register offsets for prim interface
  parameter logic [PrimAw-1:0] CALIPTRA_OTP_CTRL_CSR0_OFFSET = 5'h 0;
  parameter logic [PrimAw-1:0] CALIPTRA_OTP_CTRL_CSR1_OFFSET = 5'h 4;
  parameter logic [PrimAw-1:0] CALIPTRA_OTP_CTRL_CSR2_OFFSET = 5'h 8;
  parameter logic [PrimAw-1:0] CALIPTRA_OTP_CTRL_CSR3_OFFSET = 5'h c;
  parameter logic [PrimAw-1:0] CALIPTRA_OTP_CTRL_CSR4_OFFSET = 5'h 10;
  parameter logic [PrimAw-1:0] CALIPTRA_OTP_CTRL_CSR5_OFFSET = 5'h 14;
  parameter logic [PrimAw-1:0] CALIPTRA_OTP_CTRL_CSR6_OFFSET = 5'h 18;
  parameter logic [PrimAw-1:0] CALIPTRA_OTP_CTRL_CSR7_OFFSET = 5'h 1c;

  // Register index for prim interface
  typedef enum int {
    CALIPTRA_OTP_CTRL_CSR0,
    CALIPTRA_OTP_CTRL_CSR1,
    CALIPTRA_OTP_CTRL_CSR2,
    CALIPTRA_OTP_CTRL_CSR3,
    CALIPTRA_OTP_CTRL_CSR4,
    CALIPTRA_OTP_CTRL_CSR5,
    CALIPTRA_OTP_CTRL_CSR6,
    CALIPTRA_OTP_CTRL_CSR7
  } caliptra_otp_ctrl_prim_id_e;

  // Register width information to check illegal writes for prim interface
  parameter logic [3:0] CALIPTRA_OTP_CTRL_PRIM_PERMIT [8] = '{
    4'b 1111, // index[0] CALIPTRA_OTP_CTRL_CSR0
    4'b 1111, // index[1] CALIPTRA_OTP_CTRL_CSR1
    4'b 0001, // index[2] CALIPTRA_OTP_CTRL_CSR2
    4'b 0111, // index[3] CALIPTRA_OTP_CTRL_CSR3
    4'b 0011, // index[4] CALIPTRA_OTP_CTRL_CSR4
    4'b 1111, // index[5] CALIPTRA_OTP_CTRL_CSR5
    4'b 1111, // index[6] CALIPTRA_OTP_CTRL_CSR6
    4'b 0011  // index[7] CALIPTRA_OTP_CTRL_CSR7
  };

endpackage
