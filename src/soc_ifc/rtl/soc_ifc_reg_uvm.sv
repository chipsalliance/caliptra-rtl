
// This file was autogenerated by PeakRDL-uvm
package soc_ifc_reg_uvm;
    `include "uvm_macros.svh"
    import uvm_pkg::*;
    
    // Reg - soc_ifc_reg::HW_ERROR_FATAL
    class soc_ifc_reg__HW_ERROR_FATAL extends uvm_reg;
        rand uvm_reg_field error_code;

        function new(string name = "soc_ifc_reg__HW_ERROR_FATAL");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.error_code = new("error_code");
            this.error_code.configure(this, 32, 0, "RW", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : soc_ifc_reg__HW_ERROR_FATAL

    // Reg - soc_ifc_reg::HW_ERROR_NON_FATAL
    class soc_ifc_reg__HW_ERROR_NON_FATAL extends uvm_reg;
        rand uvm_reg_field error_code;

        function new(string name = "soc_ifc_reg__HW_ERROR_NON_FATAL");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.error_code = new("error_code");
            this.error_code.configure(this, 32, 0, "RW", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : soc_ifc_reg__HW_ERROR_NON_FATAL

    // Reg - soc_ifc_reg::FW_ERROR_FATAL
    class soc_ifc_reg__FW_ERROR_FATAL extends uvm_reg;
        rand uvm_reg_field error_code;

        function new(string name = "soc_ifc_reg__FW_ERROR_FATAL");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.error_code = new("error_code");
            this.error_code.configure(this, 32, 0, "RW", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : soc_ifc_reg__FW_ERROR_FATAL

    // Reg - soc_ifc_reg::FW_ERROR_NON_FATAL
    class soc_ifc_reg__FW_ERROR_NON_FATAL extends uvm_reg;
        rand uvm_reg_field error_code;

        function new(string name = "soc_ifc_reg__FW_ERROR_NON_FATAL");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.error_code = new("error_code");
            this.error_code.configure(this, 32, 0, "RW", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : soc_ifc_reg__FW_ERROR_NON_FATAL

    // Reg - soc_ifc_reg::HW_ERROR_ENC
    class soc_ifc_reg__HW_ERROR_ENC extends uvm_reg;
        rand uvm_reg_field error_code;

        function new(string name = "soc_ifc_reg__HW_ERROR_ENC");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.error_code = new("error_code");
            this.error_code.configure(this, 32, 0, "RW", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : soc_ifc_reg__HW_ERROR_ENC

    // Reg - soc_ifc_reg::FW_ERROR_ENC
    class soc_ifc_reg__FW_ERROR_ENC extends uvm_reg;
        rand uvm_reg_field error_code;

        function new(string name = "soc_ifc_reg__FW_ERROR_ENC");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.error_code = new("error_code");
            this.error_code.configure(this, 32, 0, "RW", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : soc_ifc_reg__FW_ERROR_ENC

    // Reg - soc_ifc_reg::BOOT_STATUS
    class soc_ifc_reg__BOOT_STATUS extends uvm_reg;
        rand uvm_reg_field status;

        function new(string name = "soc_ifc_reg__BOOT_STATUS");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.status = new("status");
            this.status.configure(this, 32, 0, "RW", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : soc_ifc_reg__BOOT_STATUS

    // Reg - soc_ifc_reg::FLOW_STATUS
    class soc_ifc_reg__FLOW_STATUS extends uvm_reg;
        rand uvm_reg_field status;
        rand uvm_reg_field ready_for_fw;
        rand uvm_reg_field ready_for_runtime;

        function new(string name = "soc_ifc_reg__FLOW_STATUS");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.status = new("status");
            this.status.configure(this, 30, 0, "RW", 0, 'h0, 1, 1, 0);
            this.ready_for_fw = new("ready_for_fw");
            this.ready_for_fw.configure(this, 1, 30, "RW", 0, 'h0, 1, 1, 0);
            this.ready_for_runtime = new("ready_for_runtime");
            this.ready_for_runtime.configure(this, 1, 31, "RW", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : soc_ifc_reg__FLOW_STATUS

    // Reg - soc_ifc_reg::CLEAR_SECRETS
    class soc_ifc_reg__CLEAR_SECRETS extends uvm_reg;
        rand uvm_reg_field clear_secrets;

        function new(string name = "soc_ifc_reg__CLEAR_SECRETS");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.clear_secrets = new("clear_secrets");
            this.clear_secrets.configure(this, 1, 0, "WO", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : soc_ifc_reg__CLEAR_SECRETS

    // Reg - soc_ifc_reg::generic_input_wires
    class soc_ifc_reg__generic_input_wires extends uvm_reg;
        rand uvm_reg_field generic_wires;

        function new(string name = "soc_ifc_reg__generic_input_wires");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.generic_wires = new("generic_wires");
            this.generic_wires.configure(this, 32, 0, "RW", 1, 'h0, 0, 1, 0);
        endfunction : build
    endclass : soc_ifc_reg__generic_input_wires

    // Reg - soc_ifc_reg::generic_output_wires
    class soc_ifc_reg__generic_output_wires extends uvm_reg;
        rand uvm_reg_field generic_wires;

        function new(string name = "soc_ifc_reg__generic_output_wires");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.generic_wires = new("generic_wires");
            this.generic_wires.configure(this, 32, 0, "RW", 0, 'h0, 0, 1, 0);
        endfunction : build
    endclass : soc_ifc_reg__generic_output_wires

    // Reg - soc_ifc_reg::TRNG
    class soc_ifc_reg__TRNG extends uvm_reg;
        rand uvm_reg_field DATA;

        function new(string name = "soc_ifc_reg__TRNG");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.DATA = new("DATA");
            this.DATA.configure(this, 32, 0, "RW", 0, 'h0, 0, 1, 0);
        endfunction : build
    endclass : soc_ifc_reg__TRNG

    // Reg - soc_ifc_reg::TRNG_DONE
    class soc_ifc_reg__TRNG_DONE extends uvm_reg;
        rand uvm_reg_field DONE;

        function new(string name = "soc_ifc_reg__TRNG_DONE");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.DONE = new("DONE");
            this.DONE.configure(this, 1, 0, "RW", 0, 'h0, 0, 1, 0);
        endfunction : build
    endclass : soc_ifc_reg__TRNG_DONE

    // Reg - soc_ifc_reg::uds_seed
    class soc_ifc_reg__uds_seed extends uvm_reg;
        rand uvm_reg_field seed;

        function new(string name = "soc_ifc_reg__uds_seed");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.seed = new("seed");
            this.seed.configure(this, 32, 0, "WO1", 1, 'h0, 1, 1, 0);
        endfunction : build
    endclass : soc_ifc_reg__uds_seed

    // Reg - soc_ifc_reg::field_entropy
    class soc_ifc_reg__field_entropy extends uvm_reg;
        rand uvm_reg_field seed;

        function new(string name = "soc_ifc_reg__field_entropy");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.seed = new("seed");
            this.seed.configure(this, 32, 0, "WO1", 1, 'h0, 1, 1, 0);
        endfunction : build
    endclass : soc_ifc_reg__field_entropy

    // Reg - soc_ifc_reg::key_manifest_pk_hash_0
    class soc_ifc_reg__key_manifest_pk_hash_0 extends uvm_reg;
        rand uvm_reg_field hash;

        function new(string name = "soc_ifc_reg__key_manifest_pk_hash_0");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.hash = new("hash");
            this.hash.configure(this, 32, 0, "W1", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : soc_ifc_reg__key_manifest_pk_hash_0

    // Reg - soc_ifc_reg::key_manifest_pk_hash_1
    class soc_ifc_reg__key_manifest_pk_hash_1 extends uvm_reg;
        rand uvm_reg_field hash;

        function new(string name = "soc_ifc_reg__key_manifest_pk_hash_1");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.hash = new("hash");
            this.hash.configure(this, 32, 0, "W1", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : soc_ifc_reg__key_manifest_pk_hash_1

    // Reg - soc_ifc_reg::key_manifest_pk_hash_2
    class soc_ifc_reg__key_manifest_pk_hash_2 extends uvm_reg;
        rand uvm_reg_field hash;

        function new(string name = "soc_ifc_reg__key_manifest_pk_hash_2");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.hash = new("hash");
            this.hash.configure(this, 32, 0, "W1", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : soc_ifc_reg__key_manifest_pk_hash_2

    // Reg - soc_ifc_reg::key_manifest_pk_hash_3
    class soc_ifc_reg__key_manifest_pk_hash_3 extends uvm_reg;
        rand uvm_reg_field hash;

        function new(string name = "soc_ifc_reg__key_manifest_pk_hash_3");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.hash = new("hash");
            this.hash.configure(this, 32, 0, "W1", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : soc_ifc_reg__key_manifest_pk_hash_3

    // Reg - soc_ifc_reg::key_manifest_pk_hash_mask
    class soc_ifc_reg__key_manifest_pk_hash_mask extends uvm_reg;
        rand uvm_reg_field mask;

        function new(string name = "soc_ifc_reg__key_manifest_pk_hash_mask");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.mask = new("mask");
            this.mask.configure(this, 4, 0, "W1", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : soc_ifc_reg__key_manifest_pk_hash_mask

    // Reg - soc_ifc_reg::key_manifest_svn
    class soc_ifc_reg__key_manifest_svn extends uvm_reg;
        rand uvm_reg_field svn;

        function new(string name = "soc_ifc_reg__key_manifest_svn");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.svn = new("svn");
            this.svn.configure(this, 32, 0, "W1", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : soc_ifc_reg__key_manifest_svn

    // Reg - soc_ifc_reg::boot_loader_svn
    class soc_ifc_reg__boot_loader_svn extends uvm_reg;
        rand uvm_reg_field svn;

        function new(string name = "soc_ifc_reg__boot_loader_svn");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.svn = new("svn");
            this.svn.configure(this, 32, 0, "W1", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : soc_ifc_reg__boot_loader_svn

    // Reg - soc_ifc_reg::runtime_svn
    class soc_ifc_reg__runtime_svn extends uvm_reg;
        rand uvm_reg_field svn;

        function new(string name = "soc_ifc_reg__runtime_svn");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.svn = new("svn");
            this.svn.configure(this, 32, 0, "W1", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : soc_ifc_reg__runtime_svn

    // Reg - soc_ifc_reg::anti_rollback_disable
    class soc_ifc_reg__anti_rollback_disable extends uvm_reg;
        rand uvm_reg_field dis;

        function new(string name = "soc_ifc_reg__anti_rollback_disable");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.dis = new("dis");
            this.dis.configure(this, 1, 0, "W1", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : soc_ifc_reg__anti_rollback_disable

    // Reg - soc_ifc_reg::ieee_idevid_cert_chain
    class soc_ifc_reg__ieee_idevid_cert_chain extends uvm_reg;
        rand uvm_reg_field cert;

        function new(string name = "soc_ifc_reg__ieee_idevid_cert_chain");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.cert = new("cert");
            this.cert.configure(this, 32, 0, "W1", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : soc_ifc_reg__ieee_idevid_cert_chain

    // Reg - soc_ifc_reg::fuse_done
    class soc_ifc_reg__fuse_done extends uvm_reg;
        rand uvm_reg_field done;

        function new(string name = "soc_ifc_reg__fuse_done");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.done = new("done");
            this.done.configure(this, 1, 0, "RW", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : soc_ifc_reg__fuse_done

    // Reg - soc_ifc_reg::obf_key
    class soc_ifc_reg__obf_key extends uvm_reg;
        rand uvm_reg_field key;

        function new(string name = "soc_ifc_reg__obf_key");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.key = new("key");
            this.key.configure(this, 32, 0, "WO", 1, 'h0, 0, 1, 0);
        endfunction : build
    endclass : soc_ifc_reg__obf_key

    // Reg - soc_ifc_reg::iccm_lock
    class soc_ifc_reg__iccm_lock extends uvm_reg;
        rand uvm_reg_field lock;

        function new(string name = "soc_ifc_reg__iccm_lock");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.lock = new("lock");
            this.lock.configure(this, 1, 0, "W1S", 1, 'h0, 1, 1, 0);
        endfunction : build
    endclass : soc_ifc_reg__iccm_lock

    // Reg - soc_ifc_reg::fw_update_reset
    class soc_ifc_reg__fw_update_reset extends uvm_reg;
        rand uvm_reg_field core_rst;

        function new(string name = "soc_ifc_reg__fw_update_reset");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.core_rst = new("core_rst");
            this.core_rst.configure(this, 1, 0, "RW", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : soc_ifc_reg__fw_update_reset

    // Reg - soc_ifc_reg::intr_block_t::global_intr_en_t
    class soc_ifc_reg__intr_block_t__global_intr_en_t extends uvm_reg;
        rand uvm_reg_field error_en;
        rand uvm_reg_field notif_en;

        function new(string name = "soc_ifc_reg__intr_block_t__global_intr_en_t");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.error_en = new("error_en");
            this.error_en.configure(this, 1, 0, "RW", 0, 'h0, 1, 1, 0);
            this.notif_en = new("notif_en");
            this.notif_en.configure(this, 1, 1, "RW", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : soc_ifc_reg__intr_block_t__global_intr_en_t

    // Reg - soc_ifc_reg::intr_block_t::error_intr_en_t
    class soc_ifc_reg__intr_block_t__error_intr_en_t extends uvm_reg;
        rand uvm_reg_field error_internal_en;
        rand uvm_reg_field error_inv_dev_en;
        rand uvm_reg_field error_cmd_fail_en;
        rand uvm_reg_field error_bad_fuse_en;
        rand uvm_reg_field error_iccm_blocked_en;

        function new(string name = "soc_ifc_reg__intr_block_t__error_intr_en_t");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.error_internal_en = new("error_internal_en");
            this.error_internal_en.configure(this, 1, 0, "RW", 0, 'h0, 1, 1, 0);
            this.error_inv_dev_en = new("error_inv_dev_en");
            this.error_inv_dev_en.configure(this, 1, 1, "RW", 0, 'h0, 1, 1, 0);
            this.error_cmd_fail_en = new("error_cmd_fail_en");
            this.error_cmd_fail_en.configure(this, 1, 2, "RW", 0, 'h0, 1, 1, 0);
            this.error_bad_fuse_en = new("error_bad_fuse_en");
            this.error_bad_fuse_en.configure(this, 1, 3, "RW", 0, 'h0, 1, 1, 0);
            this.error_iccm_blocked_en = new("error_iccm_blocked_en");
            this.error_iccm_blocked_en.configure(this, 1, 4, "RW", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : soc_ifc_reg__intr_block_t__error_intr_en_t

    // Reg - soc_ifc_reg::intr_block_t::notif_intr_en_t
    class soc_ifc_reg__intr_block_t__notif_intr_en_t extends uvm_reg;
        rand uvm_reg_field notif_cmd_avail_en;

        function new(string name = "soc_ifc_reg__intr_block_t__notif_intr_en_t");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.notif_cmd_avail_en = new("notif_cmd_avail_en");
            this.notif_cmd_avail_en.configure(this, 1, 0, "RW", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : soc_ifc_reg__intr_block_t__notif_intr_en_t

    // Reg - soc_ifc_reg::intr_block_t::global_intr_t_agg_sts_dd3dcf0a
    class soc_ifc_reg__intr_block_t__global_intr_t_agg_sts_dd3dcf0a extends uvm_reg;
        rand uvm_reg_field agg_sts;

        function new(string name = "soc_ifc_reg__intr_block_t__global_intr_t_agg_sts_dd3dcf0a");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.agg_sts = new("agg_sts");
            this.agg_sts.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
        endfunction : build
    endclass : soc_ifc_reg__intr_block_t__global_intr_t_agg_sts_dd3dcf0a

    // Reg - soc_ifc_reg::intr_block_t::global_intr_t_agg_sts_e6399b4a
    class soc_ifc_reg__intr_block_t__global_intr_t_agg_sts_e6399b4a extends uvm_reg;
        rand uvm_reg_field agg_sts;

        function new(string name = "soc_ifc_reg__intr_block_t__global_intr_t_agg_sts_e6399b4a");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.agg_sts = new("agg_sts");
            this.agg_sts.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
        endfunction : build
    endclass : soc_ifc_reg__intr_block_t__global_intr_t_agg_sts_e6399b4a

    // Reg - soc_ifc_reg::intr_block_t::error_intr_t_error_bad_fuse_sts_15c6bdf2_error_cmd_fail_sts_a5f1c4c0_error_iccm_blocked_sts_9be0379b_error_internal_sts_83adab02_error_inv_dev_sts_534a6ab7
    class soc_ifc_reg__intr_block_t__error_intr_t_error_bad_fuse_sts_15c6bdf2_error_cmd_fail_sts_a5f1c4c0_error_iccm_blocked_sts_9be0379b_error_internal_sts_83adab02_error_inv_dev_sts_534a6ab7 extends uvm_reg;
        rand uvm_reg_field error_internal_sts;
        rand uvm_reg_field error_inv_dev_sts;
        rand uvm_reg_field error_cmd_fail_sts;
        rand uvm_reg_field error_bad_fuse_sts;
        rand uvm_reg_field error_iccm_blocked_sts;

        function new(string name = "soc_ifc_reg__intr_block_t__error_intr_t_error_bad_fuse_sts_15c6bdf2_error_cmd_fail_sts_a5f1c4c0_error_iccm_blocked_sts_9be0379b_error_internal_sts_83adab02_error_inv_dev_sts_534a6ab7");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.error_internal_sts = new("error_internal_sts");
            this.error_internal_sts.configure(this, 1, 0, "W1C", 1, 'h0, 1, 1, 0);
            this.error_inv_dev_sts = new("error_inv_dev_sts");
            this.error_inv_dev_sts.configure(this, 1, 1, "W1C", 1, 'h0, 1, 1, 0);
            this.error_cmd_fail_sts = new("error_cmd_fail_sts");
            this.error_cmd_fail_sts.configure(this, 1, 2, "W1C", 1, 'h0, 1, 1, 0);
            this.error_bad_fuse_sts = new("error_bad_fuse_sts");
            this.error_bad_fuse_sts.configure(this, 1, 3, "W1C", 1, 'h0, 1, 1, 0);
            this.error_iccm_blocked_sts = new("error_iccm_blocked_sts");
            this.error_iccm_blocked_sts.configure(this, 1, 4, "W1C", 1, 'h0, 1, 1, 0);
        endfunction : build
    endclass : soc_ifc_reg__intr_block_t__error_intr_t_error_bad_fuse_sts_15c6bdf2_error_cmd_fail_sts_a5f1c4c0_error_iccm_blocked_sts_9be0379b_error_internal_sts_83adab02_error_inv_dev_sts_534a6ab7

    // Reg - soc_ifc_reg::intr_block_t::notif_intr_t_notif_cmd_avail_sts_1871606b
    class soc_ifc_reg__intr_block_t__notif_intr_t_notif_cmd_avail_sts_1871606b extends uvm_reg;
        rand uvm_reg_field notif_cmd_avail_sts;

        function new(string name = "soc_ifc_reg__intr_block_t__notif_intr_t_notif_cmd_avail_sts_1871606b");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.notif_cmd_avail_sts = new("notif_cmd_avail_sts");
            this.notif_cmd_avail_sts.configure(this, 1, 0, "W1C", 1, 'h0, 1, 1, 0);
        endfunction : build
    endclass : soc_ifc_reg__intr_block_t__notif_intr_t_notif_cmd_avail_sts_1871606b

    // Reg - soc_ifc_reg::intr_block_t::error_intr_trig_t
    class soc_ifc_reg__intr_block_t__error_intr_trig_t extends uvm_reg;
        rand uvm_reg_field error_internal_trig;
        rand uvm_reg_field error_inv_dev_trig;
        rand uvm_reg_field error_cmd_fail_trig;
        rand uvm_reg_field error_bad_fuse_trig;
        rand uvm_reg_field error_iccm_blocked_trig;

        function new(string name = "soc_ifc_reg__intr_block_t__error_intr_trig_t");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.error_internal_trig = new("error_internal_trig");
            this.error_internal_trig.configure(this, 1, 0, "W1S", 0, 'h0, 1, 1, 0);
            this.error_inv_dev_trig = new("error_inv_dev_trig");
            this.error_inv_dev_trig.configure(this, 1, 1, "W1S", 0, 'h0, 1, 1, 0);
            this.error_cmd_fail_trig = new("error_cmd_fail_trig");
            this.error_cmd_fail_trig.configure(this, 1, 2, "W1S", 0, 'h0, 1, 1, 0);
            this.error_bad_fuse_trig = new("error_bad_fuse_trig");
            this.error_bad_fuse_trig.configure(this, 1, 3, "W1S", 0, 'h0, 1, 1, 0);
            this.error_iccm_blocked_trig = new("error_iccm_blocked_trig");
            this.error_iccm_blocked_trig.configure(this, 1, 4, "W1S", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : soc_ifc_reg__intr_block_t__error_intr_trig_t

    // Reg - soc_ifc_reg::intr_block_t::notif_intr_trig_t
    class soc_ifc_reg__intr_block_t__notif_intr_trig_t extends uvm_reg;
        rand uvm_reg_field notif_cmd_avail_trig;

        function new(string name = "soc_ifc_reg__intr_block_t__notif_intr_trig_t");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.notif_cmd_avail_trig = new("notif_cmd_avail_trig");
            this.notif_cmd_avail_trig.configure(this, 1, 0, "W1S", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : soc_ifc_reg__intr_block_t__notif_intr_trig_t

    // Reg - soc_ifc_reg::intr_block_t::intr_count_t_cnt_60ddff93
    class soc_ifc_reg__intr_block_t__intr_count_t_cnt_60ddff93 extends uvm_reg;
        rand uvm_reg_field cnt;

        function new(string name = "soc_ifc_reg__intr_block_t__intr_count_t_cnt_60ddff93");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
        endfunction : build
    endclass : soc_ifc_reg__intr_block_t__intr_count_t_cnt_60ddff93

    // Reg - soc_ifc_reg::intr_block_t::intr_count_t_cnt_e0eaed4e
    class soc_ifc_reg__intr_block_t__intr_count_t_cnt_e0eaed4e extends uvm_reg;
        rand uvm_reg_field cnt;

        function new(string name = "soc_ifc_reg__intr_block_t__intr_count_t_cnt_e0eaed4e");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
        endfunction : build
    endclass : soc_ifc_reg__intr_block_t__intr_count_t_cnt_e0eaed4e

    // Reg - soc_ifc_reg::intr_block_t::intr_count_t_cnt_bdad0a1b
    class soc_ifc_reg__intr_block_t__intr_count_t_cnt_bdad0a1b extends uvm_reg;
        rand uvm_reg_field cnt;

        function new(string name = "soc_ifc_reg__intr_block_t__intr_count_t_cnt_bdad0a1b");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
        endfunction : build
    endclass : soc_ifc_reg__intr_block_t__intr_count_t_cnt_bdad0a1b

    // Reg - soc_ifc_reg::intr_block_t::intr_count_t_cnt_7df2a496
    class soc_ifc_reg__intr_block_t__intr_count_t_cnt_7df2a496 extends uvm_reg;
        rand uvm_reg_field cnt;

        function new(string name = "soc_ifc_reg__intr_block_t__intr_count_t_cnt_7df2a496");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
        endfunction : build
    endclass : soc_ifc_reg__intr_block_t__intr_count_t_cnt_7df2a496

    // Reg - soc_ifc_reg::intr_block_t::intr_count_t_cnt_4750cf87
    class soc_ifc_reg__intr_block_t__intr_count_t_cnt_4750cf87 extends uvm_reg;
        rand uvm_reg_field cnt;

        function new(string name = "soc_ifc_reg__intr_block_t__intr_count_t_cnt_4750cf87");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
        endfunction : build
    endclass : soc_ifc_reg__intr_block_t__intr_count_t_cnt_4750cf87

    // Reg - soc_ifc_reg::intr_block_t::intr_count_t_cnt_a06f0954
    class soc_ifc_reg__intr_block_t__intr_count_t_cnt_a06f0954 extends uvm_reg;
        rand uvm_reg_field cnt;

        function new(string name = "soc_ifc_reg__intr_block_t__intr_count_t_cnt_a06f0954");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
        endfunction : build
    endclass : soc_ifc_reg__intr_block_t__intr_count_t_cnt_a06f0954

    // Reg - soc_ifc_reg::intr_block_t::intr_count_incr_t_pulse_15e6ed7e
    class soc_ifc_reg__intr_block_t__intr_count_incr_t_pulse_15e6ed7e extends uvm_reg;
        rand uvm_reg_field pulse;

        function new(string name = "soc_ifc_reg__intr_block_t__intr_count_incr_t_pulse_15e6ed7e");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
        endfunction : build
    endclass : soc_ifc_reg__intr_block_t__intr_count_incr_t_pulse_15e6ed7e

    // Reg - soc_ifc_reg::intr_block_t::intr_count_incr_t_pulse_f762ea9c
    class soc_ifc_reg__intr_block_t__intr_count_incr_t_pulse_f762ea9c extends uvm_reg;
        rand uvm_reg_field pulse;

        function new(string name = "soc_ifc_reg__intr_block_t__intr_count_incr_t_pulse_f762ea9c");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
        endfunction : build
    endclass : soc_ifc_reg__intr_block_t__intr_count_incr_t_pulse_f762ea9c

    // Reg - soc_ifc_reg::intr_block_t::intr_count_incr_t_pulse_aa8718c6
    class soc_ifc_reg__intr_block_t__intr_count_incr_t_pulse_aa8718c6 extends uvm_reg;
        rand uvm_reg_field pulse;

        function new(string name = "soc_ifc_reg__intr_block_t__intr_count_incr_t_pulse_aa8718c6");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
        endfunction : build
    endclass : soc_ifc_reg__intr_block_t__intr_count_incr_t_pulse_aa8718c6

    // Reg - soc_ifc_reg::intr_block_t::intr_count_incr_t_pulse_26fa5955
    class soc_ifc_reg__intr_block_t__intr_count_incr_t_pulse_26fa5955 extends uvm_reg;
        rand uvm_reg_field pulse;

        function new(string name = "soc_ifc_reg__intr_block_t__intr_count_incr_t_pulse_26fa5955");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
        endfunction : build
    endclass : soc_ifc_reg__intr_block_t__intr_count_incr_t_pulse_26fa5955

    // Reg - soc_ifc_reg::intr_block_t::intr_count_incr_t_pulse_3e43d258
    class soc_ifc_reg__intr_block_t__intr_count_incr_t_pulse_3e43d258 extends uvm_reg;
        rand uvm_reg_field pulse;

        function new(string name = "soc_ifc_reg__intr_block_t__intr_count_incr_t_pulse_3e43d258");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
        endfunction : build
    endclass : soc_ifc_reg__intr_block_t__intr_count_incr_t_pulse_3e43d258

    // Reg - soc_ifc_reg::intr_block_t::intr_count_incr_t_pulse_90d52137
    class soc_ifc_reg__intr_block_t__intr_count_incr_t_pulse_90d52137 extends uvm_reg;
        rand uvm_reg_field pulse;

        function new(string name = "soc_ifc_reg__intr_block_t__intr_count_incr_t_pulse_90d52137");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
        endfunction : build
    endclass : soc_ifc_reg__intr_block_t__intr_count_incr_t_pulse_90d52137

    // Regfile - soc_ifc_reg::intr_block_t
    class soc_ifc_reg__intr_block_t extends uvm_reg_block;
        rand soc_ifc_reg__intr_block_t__global_intr_en_t global_intr_en_r;
        rand soc_ifc_reg__intr_block_t__error_intr_en_t error_intr_en_r;
        rand soc_ifc_reg__intr_block_t__notif_intr_en_t notif_intr_en_r;
        rand soc_ifc_reg__intr_block_t__global_intr_t_agg_sts_dd3dcf0a error_global_intr_r;
        rand soc_ifc_reg__intr_block_t__global_intr_t_agg_sts_e6399b4a notif_global_intr_r;
        rand soc_ifc_reg__intr_block_t__error_intr_t_error_bad_fuse_sts_15c6bdf2_error_cmd_fail_sts_a5f1c4c0_error_iccm_blocked_sts_9be0379b_error_internal_sts_83adab02_error_inv_dev_sts_534a6ab7 error_internal_intr_r;
        rand soc_ifc_reg__intr_block_t__notif_intr_t_notif_cmd_avail_sts_1871606b notif_internal_intr_r;
        rand soc_ifc_reg__intr_block_t__error_intr_trig_t error_intr_trig_r;
        rand soc_ifc_reg__intr_block_t__notif_intr_trig_t notif_intr_trig_r;
        rand soc_ifc_reg__intr_block_t__intr_count_t_cnt_60ddff93 error_internal_intr_count_r;
        rand soc_ifc_reg__intr_block_t__intr_count_t_cnt_e0eaed4e error_inv_dev_intr_count_r;
        rand soc_ifc_reg__intr_block_t__intr_count_t_cnt_bdad0a1b error_cmd_fail_intr_count_r;
        rand soc_ifc_reg__intr_block_t__intr_count_t_cnt_7df2a496 error_bad_fuse_intr_count_r;
        rand soc_ifc_reg__intr_block_t__intr_count_t_cnt_4750cf87 error_iccm_blocked_intr_count_r;
        rand soc_ifc_reg__intr_block_t__intr_count_t_cnt_a06f0954 notif_cmd_avail_intr_count_r;
        rand soc_ifc_reg__intr_block_t__intr_count_incr_t_pulse_15e6ed7e error_internal_intr_count_incr_r;
        rand soc_ifc_reg__intr_block_t__intr_count_incr_t_pulse_f762ea9c error_inv_dev_intr_count_incr_r;
        rand soc_ifc_reg__intr_block_t__intr_count_incr_t_pulse_aa8718c6 error_cmd_fail_intr_count_incr_r;
        rand soc_ifc_reg__intr_block_t__intr_count_incr_t_pulse_26fa5955 error_bad_fuse_intr_count_incr_r;
        rand soc_ifc_reg__intr_block_t__intr_count_incr_t_pulse_3e43d258 error_iccm_blocked_intr_count_incr_r;
        rand soc_ifc_reg__intr_block_t__intr_count_incr_t_pulse_90d52137 notif_cmd_avail_intr_count_incr_r;

        function new(string name = "soc_ifc_reg__intr_block_t");
            super.new(name);
        endfunction : new

        virtual function void build();
            this.default_map = create_map("reg_map", 0, 4, UVM_LITTLE_ENDIAN);
            this.global_intr_en_r = new("global_intr_en_r");
            this.global_intr_en_r.configure(this);

            this.global_intr_en_r.build();
            this.default_map.add_reg(this.global_intr_en_r, 'h0);
            this.error_intr_en_r = new("error_intr_en_r");
            this.error_intr_en_r.configure(this);

            this.error_intr_en_r.build();
            this.default_map.add_reg(this.error_intr_en_r, 'h4);
            this.notif_intr_en_r = new("notif_intr_en_r");
            this.notif_intr_en_r.configure(this);

            this.notif_intr_en_r.build();
            this.default_map.add_reg(this.notif_intr_en_r, 'h8);
            this.error_global_intr_r = new("error_global_intr_r");
            this.error_global_intr_r.configure(this);

            this.error_global_intr_r.build();
            this.default_map.add_reg(this.error_global_intr_r, 'hc);
            this.notif_global_intr_r = new("notif_global_intr_r");
            this.notif_global_intr_r.configure(this);

            this.notif_global_intr_r.build();
            this.default_map.add_reg(this.notif_global_intr_r, 'h10);
            this.error_internal_intr_r = new("error_internal_intr_r");
            this.error_internal_intr_r.configure(this);

            this.error_internal_intr_r.build();
            this.default_map.add_reg(this.error_internal_intr_r, 'h14);
            this.notif_internal_intr_r = new("notif_internal_intr_r");
            this.notif_internal_intr_r.configure(this);

            this.notif_internal_intr_r.build();
            this.default_map.add_reg(this.notif_internal_intr_r, 'h18);
            this.error_intr_trig_r = new("error_intr_trig_r");
            this.error_intr_trig_r.configure(this);

            this.error_intr_trig_r.build();
            this.default_map.add_reg(this.error_intr_trig_r, 'h1c);
            this.notif_intr_trig_r = new("notif_intr_trig_r");
            this.notif_intr_trig_r.configure(this);

            this.notif_intr_trig_r.build();
            this.default_map.add_reg(this.notif_intr_trig_r, 'h20);
            this.error_internal_intr_count_r = new("error_internal_intr_count_r");
            this.error_internal_intr_count_r.configure(this);

            this.error_internal_intr_count_r.build();
            this.default_map.add_reg(this.error_internal_intr_count_r, 'h100);
            this.error_inv_dev_intr_count_r = new("error_inv_dev_intr_count_r");
            this.error_inv_dev_intr_count_r.configure(this);

            this.error_inv_dev_intr_count_r.build();
            this.default_map.add_reg(this.error_inv_dev_intr_count_r, 'h104);
            this.error_cmd_fail_intr_count_r = new("error_cmd_fail_intr_count_r");
            this.error_cmd_fail_intr_count_r.configure(this);

            this.error_cmd_fail_intr_count_r.build();
            this.default_map.add_reg(this.error_cmd_fail_intr_count_r, 'h108);
            this.error_bad_fuse_intr_count_r = new("error_bad_fuse_intr_count_r");
            this.error_bad_fuse_intr_count_r.configure(this);

            this.error_bad_fuse_intr_count_r.build();
            this.default_map.add_reg(this.error_bad_fuse_intr_count_r, 'h10c);
            this.error_iccm_blocked_intr_count_r = new("error_iccm_blocked_intr_count_r");
            this.error_iccm_blocked_intr_count_r.configure(this);

            this.error_iccm_blocked_intr_count_r.build();
            this.default_map.add_reg(this.error_iccm_blocked_intr_count_r, 'h110);
            this.notif_cmd_avail_intr_count_r = new("notif_cmd_avail_intr_count_r");
            this.notif_cmd_avail_intr_count_r.configure(this);

            this.notif_cmd_avail_intr_count_r.build();
            this.default_map.add_reg(this.notif_cmd_avail_intr_count_r, 'h180);
            this.error_internal_intr_count_incr_r = new("error_internal_intr_count_incr_r");
            this.error_internal_intr_count_incr_r.configure(this);

            this.error_internal_intr_count_incr_r.build();
            this.default_map.add_reg(this.error_internal_intr_count_incr_r, 'h200);
            this.error_inv_dev_intr_count_incr_r = new("error_inv_dev_intr_count_incr_r");
            this.error_inv_dev_intr_count_incr_r.configure(this);

            this.error_inv_dev_intr_count_incr_r.build();
            this.default_map.add_reg(this.error_inv_dev_intr_count_incr_r, 'h204);
            this.error_cmd_fail_intr_count_incr_r = new("error_cmd_fail_intr_count_incr_r");
            this.error_cmd_fail_intr_count_incr_r.configure(this);

            this.error_cmd_fail_intr_count_incr_r.build();
            this.default_map.add_reg(this.error_cmd_fail_intr_count_incr_r, 'h208);
            this.error_bad_fuse_intr_count_incr_r = new("error_bad_fuse_intr_count_incr_r");
            this.error_bad_fuse_intr_count_incr_r.configure(this);

            this.error_bad_fuse_intr_count_incr_r.build();
            this.default_map.add_reg(this.error_bad_fuse_intr_count_incr_r, 'h20c);
            this.error_iccm_blocked_intr_count_incr_r = new("error_iccm_blocked_intr_count_incr_r");
            this.error_iccm_blocked_intr_count_incr_r.configure(this);

            this.error_iccm_blocked_intr_count_incr_r.build();
            this.default_map.add_reg(this.error_iccm_blocked_intr_count_incr_r, 'h210);
            this.notif_cmd_avail_intr_count_incr_r = new("notif_cmd_avail_intr_count_incr_r");
            this.notif_cmd_avail_intr_count_incr_r.configure(this);

            this.notif_cmd_avail_intr_count_incr_r.build();
            this.default_map.add_reg(this.notif_cmd_avail_intr_count_incr_r, 'h214);
        endfunction : build
    endclass : soc_ifc_reg__intr_block_t

    // Addrmap - soc_ifc_reg
    class soc_ifc_reg extends uvm_reg_block;
        rand soc_ifc_reg__HW_ERROR_FATAL HW_ERROR_FATAL;
        rand soc_ifc_reg__HW_ERROR_NON_FATAL HW_ERROR_NON_FATAL;
        rand soc_ifc_reg__FW_ERROR_FATAL FW_ERROR_FATAL;
        rand soc_ifc_reg__FW_ERROR_NON_FATAL FW_ERROR_NON_FATAL;
        rand soc_ifc_reg__HW_ERROR_ENC HW_ERROR_ENC;
        rand soc_ifc_reg__FW_ERROR_ENC FW_ERROR_ENC;
        rand soc_ifc_reg__BOOT_STATUS BOOT_STATUS;
        rand soc_ifc_reg__FLOW_STATUS FLOW_STATUS;
        rand soc_ifc_reg__CLEAR_SECRETS CLEAR_SECRETS;
        rand soc_ifc_reg__generic_input_wires generic_input_wires[2];
        rand soc_ifc_reg__generic_output_wires generic_output_wires[2];
        rand soc_ifc_reg__TRNG TRNG[12];
        rand soc_ifc_reg__TRNG_DONE TRNG_DONE;
        rand soc_ifc_reg__uds_seed uds_seed[12];
        rand soc_ifc_reg__field_entropy field_entropy[32];
        rand soc_ifc_reg__key_manifest_pk_hash_0 key_manifest_pk_hash_0[12];
        rand soc_ifc_reg__key_manifest_pk_hash_1 key_manifest_pk_hash_1[12];
        rand soc_ifc_reg__key_manifest_pk_hash_2 key_manifest_pk_hash_2[12];
        rand soc_ifc_reg__key_manifest_pk_hash_3 key_manifest_pk_hash_3[12];
        rand soc_ifc_reg__key_manifest_pk_hash_mask key_manifest_pk_hash_mask;
        rand soc_ifc_reg__key_manifest_svn key_manifest_svn;
        rand soc_ifc_reg__boot_loader_svn boot_loader_svn;
        rand soc_ifc_reg__runtime_svn runtime_svn[4];
        rand soc_ifc_reg__anti_rollback_disable anti_rollback_disable;
        rand soc_ifc_reg__ieee_idevid_cert_chain ieee_idevid_cert_chain[24];
        rand soc_ifc_reg__fuse_done fuse_done;
        rand soc_ifc_reg__obf_key obf_key[8];
        rand soc_ifc_reg__iccm_lock iccm_lock;
        rand soc_ifc_reg__fw_update_reset fw_update_reset;
        rand soc_ifc_reg__intr_block_t intr_block_rf;

        function new(string name = "soc_ifc_reg");
            super.new(name);
        endfunction : new

        virtual function void build();
            this.default_map = create_map("reg_map", 0, 4, UVM_LITTLE_ENDIAN);
            this.HW_ERROR_FATAL = new("HW_ERROR_FATAL");
            this.HW_ERROR_FATAL.configure(this);

            this.HW_ERROR_FATAL.build();
            this.default_map.add_reg(this.HW_ERROR_FATAL, 'h0);
            this.HW_ERROR_NON_FATAL = new("HW_ERROR_NON_FATAL");
            this.HW_ERROR_NON_FATAL.configure(this);

            this.HW_ERROR_NON_FATAL.build();
            this.default_map.add_reg(this.HW_ERROR_NON_FATAL, 'h4);
            this.FW_ERROR_FATAL = new("FW_ERROR_FATAL");
            this.FW_ERROR_FATAL.configure(this);

            this.FW_ERROR_FATAL.build();
            this.default_map.add_reg(this.FW_ERROR_FATAL, 'h8);
            this.FW_ERROR_NON_FATAL = new("FW_ERROR_NON_FATAL");
            this.FW_ERROR_NON_FATAL.configure(this);

            this.FW_ERROR_NON_FATAL.build();
            this.default_map.add_reg(this.FW_ERROR_NON_FATAL, 'hc);
            this.HW_ERROR_ENC = new("HW_ERROR_ENC");
            this.HW_ERROR_ENC.configure(this);

            this.HW_ERROR_ENC.build();
            this.default_map.add_reg(this.HW_ERROR_ENC, 'h10);
            this.FW_ERROR_ENC = new("FW_ERROR_ENC");
            this.FW_ERROR_ENC.configure(this);

            this.FW_ERROR_ENC.build();
            this.default_map.add_reg(this.FW_ERROR_ENC, 'h14);
            this.BOOT_STATUS = new("BOOT_STATUS");
            this.BOOT_STATUS.configure(this);

            this.BOOT_STATUS.build();
            this.default_map.add_reg(this.BOOT_STATUS, 'h18);
            this.FLOW_STATUS = new("FLOW_STATUS");
            this.FLOW_STATUS.configure(this);

            this.FLOW_STATUS.build();
            this.default_map.add_reg(this.FLOW_STATUS, 'h1c);
            this.CLEAR_SECRETS = new("CLEAR_SECRETS");
            this.CLEAR_SECRETS.configure(this);

            this.CLEAR_SECRETS.build();
            this.default_map.add_reg(this.CLEAR_SECRETS, 'h20);
            foreach(this.generic_input_wires[i0]) begin
                this.generic_input_wires[i0] = new($sformatf("generic_input_wires[%0d]", i0));
                this.generic_input_wires[i0].configure(this);
                
                this.generic_input_wires[i0].build();
                this.default_map.add_reg(this.generic_input_wires[i0], 'h24 + i0*'h4);
            end
            foreach(this.generic_output_wires[i0]) begin
                this.generic_output_wires[i0] = new($sformatf("generic_output_wires[%0d]", i0));
                this.generic_output_wires[i0].configure(this);
                
                this.generic_output_wires[i0].build();
                this.default_map.add_reg(this.generic_output_wires[i0], 'h2c + i0*'h4);
            end
            foreach(this.TRNG[i0]) begin
                this.TRNG[i0] = new($sformatf("TRNG[%0d]", i0));
                this.TRNG[i0].configure(this);
                
                this.TRNG[i0].build();
                this.default_map.add_reg(this.TRNG[i0], 'h34 + i0*'h4);
            end
            this.TRNG_DONE = new("TRNG_DONE");
            this.TRNG_DONE.configure(this);

            this.TRNG_DONE.build();
            this.default_map.add_reg(this.TRNG_DONE, 'h64);
            foreach(this.uds_seed[i0]) begin
                this.uds_seed[i0] = new($sformatf("uds_seed[%0d]", i0));
                this.uds_seed[i0].configure(this);
                
                this.uds_seed[i0].build();
                this.default_map.add_reg(this.uds_seed[i0], 'h200 + i0*'h4);
            end
            foreach(this.field_entropy[i0]) begin
                this.field_entropy[i0] = new($sformatf("field_entropy[%0d]", i0));
                this.field_entropy[i0].configure(this);
                
                this.field_entropy[i0].build();
                this.default_map.add_reg(this.field_entropy[i0], 'h230 + i0*'h4);
            end
            foreach(this.key_manifest_pk_hash_0[i0]) begin
                this.key_manifest_pk_hash_0[i0] = new($sformatf("key_manifest_pk_hash_0[%0d]", i0));
                this.key_manifest_pk_hash_0[i0].configure(this);
                
                this.key_manifest_pk_hash_0[i0].build();
                this.default_map.add_reg(this.key_manifest_pk_hash_0[i0], 'h2b0 + i0*'h4);
            end
            foreach(this.key_manifest_pk_hash_1[i0]) begin
                this.key_manifest_pk_hash_1[i0] = new($sformatf("key_manifest_pk_hash_1[%0d]", i0));
                this.key_manifest_pk_hash_1[i0].configure(this);
                
                this.key_manifest_pk_hash_1[i0].build();
                this.default_map.add_reg(this.key_manifest_pk_hash_1[i0], 'h2e0 + i0*'h4);
            end
            foreach(this.key_manifest_pk_hash_2[i0]) begin
                this.key_manifest_pk_hash_2[i0] = new($sformatf("key_manifest_pk_hash_2[%0d]", i0));
                this.key_manifest_pk_hash_2[i0].configure(this);
                
                this.key_manifest_pk_hash_2[i0].build();
                this.default_map.add_reg(this.key_manifest_pk_hash_2[i0], 'h310 + i0*'h4);
            end
            foreach(this.key_manifest_pk_hash_3[i0]) begin
                this.key_manifest_pk_hash_3[i0] = new($sformatf("key_manifest_pk_hash_3[%0d]", i0));
                this.key_manifest_pk_hash_3[i0].configure(this);
                
                this.key_manifest_pk_hash_3[i0].build();
                this.default_map.add_reg(this.key_manifest_pk_hash_3[i0], 'h340 + i0*'h4);
            end
            this.key_manifest_pk_hash_mask = new("key_manifest_pk_hash_mask");
            this.key_manifest_pk_hash_mask.configure(this);

            this.key_manifest_pk_hash_mask.build();
            this.default_map.add_reg(this.key_manifest_pk_hash_mask, 'h370);
            this.key_manifest_svn = new("key_manifest_svn");
            this.key_manifest_svn.configure(this);

            this.key_manifest_svn.build();
            this.default_map.add_reg(this.key_manifest_svn, 'h374);
            this.boot_loader_svn = new("boot_loader_svn");
            this.boot_loader_svn.configure(this);

            this.boot_loader_svn.build();
            this.default_map.add_reg(this.boot_loader_svn, 'h378);
            foreach(this.runtime_svn[i0]) begin
                this.runtime_svn[i0] = new($sformatf("runtime_svn[%0d]", i0));
                this.runtime_svn[i0].configure(this);
                
                this.runtime_svn[i0].build();
                this.default_map.add_reg(this.runtime_svn[i0], 'h37c + i0*'h4);
            end
            this.anti_rollback_disable = new("anti_rollback_disable");
            this.anti_rollback_disable.configure(this);

            this.anti_rollback_disable.build();
            this.default_map.add_reg(this.anti_rollback_disable, 'h38c);
            foreach(this.ieee_idevid_cert_chain[i0]) begin
                this.ieee_idevid_cert_chain[i0] = new($sformatf("ieee_idevid_cert_chain[%0d]", i0));
                this.ieee_idevid_cert_chain[i0].configure(this);
                
                this.ieee_idevid_cert_chain[i0].build();
                this.default_map.add_reg(this.ieee_idevid_cert_chain[i0], 'h390 + i0*'h4);
            end
            this.fuse_done = new("fuse_done");
            this.fuse_done.configure(this);

            this.fuse_done.build();
            this.default_map.add_reg(this.fuse_done, 'h3f0);
            foreach(this.obf_key[i0]) begin
                this.obf_key[i0] = new($sformatf("obf_key[%0d]", i0));
                this.obf_key[i0].configure(this);
                
                this.obf_key[i0].build();
                this.default_map.add_reg(this.obf_key[i0], 'h3f4 + i0*'h4);
            end
            this.iccm_lock = new("iccm_lock");
            this.iccm_lock.configure(this);

            this.iccm_lock.build();
            this.default_map.add_reg(this.iccm_lock, 'h414);
            this.fw_update_reset = new("fw_update_reset");
            this.fw_update_reset.configure(this);

            this.fw_update_reset.build();
            this.default_map.add_reg(this.fw_update_reset, 'h418);
            this.intr_block_rf = new("intr_block_rf");
            this.intr_block_rf.configure(this);
            this.intr_block_rf.build();
            this.default_map.add_submap(this.intr_block_rf.default_map, 'h800);
        endfunction : build
    endclass : soc_ifc_reg

endpackage: soc_ifc_reg_uvm
