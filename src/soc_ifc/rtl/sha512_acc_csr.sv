// Generated by PeakRDL-regblock - A free and open-source SystemVerilog generator
//  https://github.com/SystemRDL/PeakRDL-regblock

module sha512_acc_csr (
        input wire clk,
        input wire rst,

        input wire s_cpuif_req,
        input wire s_cpuif_req_is_wr,
        input wire [11:0] s_cpuif_addr,
        input wire [31:0] s_cpuif_wr_data,
        output wire s_cpuif_req_stall_wr,
        output wire s_cpuif_req_stall_rd,
        output wire s_cpuif_rd_ack,
        output wire s_cpuif_rd_err,
        output wire [31:0] s_cpuif_rd_data,
        output wire s_cpuif_wr_ack,
        output wire s_cpuif_wr_err,

        input sha512_acc_csr_pkg::sha512_acc_csr__in_t hwif_in,
        output sha512_acc_csr_pkg::sha512_acc_csr__out_t hwif_out
    );

    //--------------------------------------------------------------------------
    // CPU Bus interface logic
    //--------------------------------------------------------------------------
    logic cpuif_req;
    logic cpuif_req_is_wr;
    logic [11:0] cpuif_addr;
    logic [31:0] cpuif_wr_data;
    logic cpuif_req_stall_wr;
    logic cpuif_req_stall_rd;

    logic cpuif_rd_ack;
    logic cpuif_rd_err;
    logic [31:0] cpuif_rd_data;

    logic cpuif_wr_ack;
    logic cpuif_wr_err;

    assign cpuif_req = s_cpuif_req;
    assign cpuif_req_is_wr = s_cpuif_req_is_wr;
    assign cpuif_addr = s_cpuif_addr;
    assign cpuif_wr_data = s_cpuif_wr_data;
    assign s_cpuif_req_stall_wr = cpuif_req_stall_wr;
    assign s_cpuif_req_stall_rd = cpuif_req_stall_rd;
    assign s_cpuif_rd_ack = cpuif_rd_ack;
    assign s_cpuif_rd_err = cpuif_rd_err;
    assign s_cpuif_rd_data = cpuif_rd_data;
    assign s_cpuif_wr_ack = cpuif_wr_ack;
    assign s_cpuif_wr_err = cpuif_wr_err;

    logic cpuif_req_masked;

    // Read & write latencies are balanced. Stalls not required
    assign cpuif_req_stall_rd = '0;
    assign cpuif_req_stall_wr = '0;
    assign cpuif_req_masked = cpuif_req;

    //--------------------------------------------------------------------------
    // Address Decode
    //--------------------------------------------------------------------------
    typedef struct packed{
        logic LOCK;
        logic USER;
        logic MODE;
        logic START_ADDRESS;
        logic DLEN;
        logic DATAIN;
        logic EXECUTE;
        logic STATUS;
        logic [16-1:0]DIGEST;
        logic CONTROL;
        struct packed{
            logic global_intr_en_r;
            logic error_intr_en_r;
            logic notif_intr_en_r;
            logic error_global_intr_r;
            logic notif_global_intr_r;
            logic error_internal_intr_r;
            logic notif_internal_intr_r;
            logic error_intr_trig_r;
            logic notif_intr_trig_r;
            logic error0_intr_count_r;
            logic error1_intr_count_r;
            logic error2_intr_count_r;
            logic error3_intr_count_r;
            logic notif_cmd_done_intr_count_r;
            logic error0_intr_count_incr_r;
            logic error1_intr_count_incr_r;
            logic error2_intr_count_incr_r;
            logic error3_intr_count_incr_r;
            logic notif_cmd_done_intr_count_incr_r;
        } intr_block_rf;
    } decoded_reg_strb_t;
    decoded_reg_strb_t decoded_reg_strb;
    logic decoded_req;
    logic decoded_req_is_wr;
    logic [31:0] decoded_wr_data;

    always_comb begin
        decoded_reg_strb.LOCK = cpuif_req_masked & (cpuif_addr == 'h0);
        decoded_reg_strb.USER = cpuif_req_masked & (cpuif_addr == 'h4);
        decoded_reg_strb.MODE = cpuif_req_masked & (cpuif_addr == 'h8);
        decoded_reg_strb.START_ADDRESS = cpuif_req_masked & (cpuif_addr == 'hc);
        decoded_reg_strb.DLEN = cpuif_req_masked & (cpuif_addr == 'h10);
        decoded_reg_strb.DATAIN = cpuif_req_masked & (cpuif_addr == 'h14);
        decoded_reg_strb.EXECUTE = cpuif_req_masked & (cpuif_addr == 'h18);
        decoded_reg_strb.STATUS = cpuif_req_masked & (cpuif_addr == 'h1c);
        for(int i0=0; i0<16; i0++) begin
            decoded_reg_strb.DIGEST[i0] = cpuif_req_masked & (cpuif_addr == 'h20 + i0*'h4);
        end
        decoded_reg_strb.CONTROL = cpuif_req_masked & (cpuif_addr == 'h60);
        decoded_reg_strb.intr_block_rf.global_intr_en_r = cpuif_req_masked & (cpuif_addr == 'h800);
        decoded_reg_strb.intr_block_rf.error_intr_en_r = cpuif_req_masked & (cpuif_addr == 'h804);
        decoded_reg_strb.intr_block_rf.notif_intr_en_r = cpuif_req_masked & (cpuif_addr == 'h808);
        decoded_reg_strb.intr_block_rf.error_global_intr_r = cpuif_req_masked & (cpuif_addr == 'h80c);
        decoded_reg_strb.intr_block_rf.notif_global_intr_r = cpuif_req_masked & (cpuif_addr == 'h810);
        decoded_reg_strb.intr_block_rf.error_internal_intr_r = cpuif_req_masked & (cpuif_addr == 'h814);
        decoded_reg_strb.intr_block_rf.notif_internal_intr_r = cpuif_req_masked & (cpuif_addr == 'h818);
        decoded_reg_strb.intr_block_rf.error_intr_trig_r = cpuif_req_masked & (cpuif_addr == 'h81c);
        decoded_reg_strb.intr_block_rf.notif_intr_trig_r = cpuif_req_masked & (cpuif_addr == 'h820);
        decoded_reg_strb.intr_block_rf.error0_intr_count_r = cpuif_req_masked & (cpuif_addr == 'h900);
        decoded_reg_strb.intr_block_rf.error1_intr_count_r = cpuif_req_masked & (cpuif_addr == 'h904);
        decoded_reg_strb.intr_block_rf.error2_intr_count_r = cpuif_req_masked & (cpuif_addr == 'h908);
        decoded_reg_strb.intr_block_rf.error3_intr_count_r = cpuif_req_masked & (cpuif_addr == 'h90c);
        decoded_reg_strb.intr_block_rf.notif_cmd_done_intr_count_r = cpuif_req_masked & (cpuif_addr == 'h980);
        decoded_reg_strb.intr_block_rf.error0_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 'ha00);
        decoded_reg_strb.intr_block_rf.error1_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 'ha04);
        decoded_reg_strb.intr_block_rf.error2_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 'ha08);
        decoded_reg_strb.intr_block_rf.error3_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 'ha0c);
        decoded_reg_strb.intr_block_rf.notif_cmd_done_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 'ha10);
    end

    // Pass down signals to next stage
    assign decoded_req = cpuif_req_masked;
    assign decoded_req_is_wr = cpuif_req_is_wr;
    assign decoded_wr_data = cpuif_wr_data;

    // Writes are always granted with no error response
    assign cpuif_wr_ack = decoded_req & decoded_req_is_wr;
    assign cpuif_wr_err = '0;

    //--------------------------------------------------------------------------
    // Field logic
    //--------------------------------------------------------------------------
    typedef struct packed{
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } LOCK;
        } LOCK;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } USER;
        } USER;
        struct packed{
            struct packed{
                logic [1:0] next;
                logic load_next;
            } MODE;
            struct packed{
                logic next;
                logic load_next;
            } ENDIAN_TOGGLE;
        } MODE;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } ADDR;
        } START_ADDRESS;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } LENGTH;
        } DLEN;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } DATAIN;
        } DATAIN;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } EXECUTE;
        } EXECUTE;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } VALID;
        } STATUS;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } DIGEST;
        } [16-1:0]DIGEST;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } ZEROIZE;
        } CONTROL;
        struct packed{
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } error_en;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_en;
            } global_intr_en_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } error0_en;
                struct packed{
                    logic next;
                    logic load_next;
                } error1_en;
                struct packed{
                    logic next;
                    logic load_next;
                } error2_en;
                struct packed{
                    logic next;
                    logic load_next;
                } error3_en;
            } error_intr_en_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } notif_cmd_done_en;
            } notif_intr_en_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } agg_sts;
            } error_global_intr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } agg_sts;
            } notif_global_intr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } error0_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } error1_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } error2_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } error3_sts;
            } error_internal_intr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } notif_cmd_done_sts;
            } notif_internal_intr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } error0_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } error1_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } error2_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } error3_trig;
            } error_intr_trig_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } notif_cmd_done_trig;
            } notif_intr_trig_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error0_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error1_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error2_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error3_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } notif_cmd_done_intr_count_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error0_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error1_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error2_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error3_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } notif_cmd_done_intr_count_incr_r;
        } intr_block_rf;
    } field_combo_t;
    field_combo_t field_combo;

    typedef struct packed{
        struct packed{
            struct packed{
                logic value;
            } LOCK;
        } LOCK;
        struct packed{
            struct packed{
                logic [31:0] value;
            } USER;
        } USER;
        struct packed{
            struct packed{
                logic [1:0] value;
            } MODE;
            struct packed{
                logic value;
            } ENDIAN_TOGGLE;
        } MODE;
        struct packed{
            struct packed{
                logic [31:0] value;
            } ADDR;
        } START_ADDRESS;
        struct packed{
            struct packed{
                logic [31:0] value;
            } LENGTH;
        } DLEN;
        struct packed{
            struct packed{
                logic [31:0] value;
            } DATAIN;
        } DATAIN;
        struct packed{
            struct packed{
                logic value;
            } EXECUTE;
        } EXECUTE;
        struct packed{
            struct packed{
                logic value;
            } VALID;
        } STATUS;
        struct packed{
            struct packed{
                logic [31:0] value;
            } DIGEST;
        } [16-1:0]DIGEST;
        struct packed{
            struct packed{
                logic value;
            } ZEROIZE;
        } CONTROL;
        struct packed{
            struct packed{
                struct packed{
                    logic value;
                } error_en;
                struct packed{
                    logic value;
                } notif_en;
            } global_intr_en_r;
            struct packed{
                struct packed{
                    logic value;
                } error0_en;
                struct packed{
                    logic value;
                } error1_en;
                struct packed{
                    logic value;
                } error2_en;
                struct packed{
                    logic value;
                } error3_en;
            } error_intr_en_r;
            struct packed{
                struct packed{
                    logic value;
                } notif_cmd_done_en;
            } notif_intr_en_r;
            struct packed{
                struct packed{
                    logic value;
                } agg_sts;
            } error_global_intr_r;
            struct packed{
                struct packed{
                    logic value;
                } agg_sts;
            } notif_global_intr_r;
            struct packed{
                struct packed{
                    logic value;
                } error0_sts;
                struct packed{
                    logic value;
                } error1_sts;
                struct packed{
                    logic value;
                } error2_sts;
                struct packed{
                    logic value;
                } error3_sts;
            } error_internal_intr_r;
            struct packed{
                struct packed{
                    logic value;
                } notif_cmd_done_sts;
            } notif_internal_intr_r;
            struct packed{
                struct packed{
                    logic value;
                } error0_trig;
                struct packed{
                    logic value;
                } error1_trig;
                struct packed{
                    logic value;
                } error2_trig;
                struct packed{
                    logic value;
                } error3_trig;
            } error_intr_trig_r;
            struct packed{
                struct packed{
                    logic value;
                } notif_cmd_done_trig;
            } notif_intr_trig_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error0_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error1_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error2_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error3_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } notif_cmd_done_intr_count_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error0_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error1_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error2_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error3_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } notif_cmd_done_intr_count_incr_r;
        } intr_block_rf;
    } field_storage_t;
    field_storage_t field_storage;

    // Field: sha512_acc_csr.LOCK.LOCK
    always_comb begin
        automatic logic [0:0] next_c = field_storage.LOCK.LOCK.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.LOCK && !decoded_req_is_wr) begin // SW set on read
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.LOCK && decoded_req_is_wr && hwif_in.valid_user) begin // SW write 1 clear
            next_c = field_storage.LOCK.LOCK.value & ~decoded_wr_data[0:0];
            load_next_c = '1;
        end
        field_combo.LOCK.LOCK.next = next_c;
        field_combo.LOCK.LOCK.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.LOCK.LOCK.value <= 'h0;
        end else if(field_combo.LOCK.LOCK.load_next) begin
            field_storage.LOCK.LOCK.value <= field_combo.LOCK.LOCK.next;
        end
    end
    assign hwif_out.LOCK.LOCK.value = field_storage.LOCK.LOCK.value;
    assign hwif_out.LOCK.LOCK.swmod = decoded_reg_strb.LOCK;
    // Field: sha512_acc_csr.USER.USER
    always_comb begin
        automatic logic [31:0] next_c = field_storage.USER.USER.value;
        automatic logic load_next_c = '0;
        if(hwif_in.lock_set) begin // HW Write - we
            next_c = hwif_in.USER.USER.next;
            load_next_c = '1;
        end
        field_combo.USER.USER.next = next_c;
        field_combo.USER.USER.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.USER.USER.value <= 'h0;
        end else if(field_combo.USER.USER.load_next) begin
            field_storage.USER.USER.value <= field_combo.USER.USER.next;
        end
    end
    assign hwif_out.USER.USER.value = field_storage.USER.USER.value;
    // Field: sha512_acc_csr.MODE.MODE
    always_comb begin
        automatic logic [1:0] next_c = field_storage.MODE.MODE.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.MODE && decoded_req_is_wr && hwif_in.valid_user) begin // SW write
            next_c = decoded_wr_data[1:0];
            load_next_c = '1;
        end
        field_combo.MODE.MODE.next = next_c;
        field_combo.MODE.MODE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.MODE.MODE.value <= 'h0;
        end else if(field_combo.MODE.MODE.load_next) begin
            field_storage.MODE.MODE.value <= field_combo.MODE.MODE.next;
        end
    end
    assign hwif_out.MODE.MODE.value = field_storage.MODE.MODE.value;
    assign hwif_out.MODE.MODE.swmod = decoded_reg_strb.MODE && decoded_req_is_wr;
    // Field: sha512_acc_csr.MODE.ENDIAN_TOGGLE
    always_comb begin
        automatic logic [0:0] next_c = field_storage.MODE.ENDIAN_TOGGLE.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.MODE && decoded_req_is_wr && hwif_in.valid_user) begin // SW write
            next_c = decoded_wr_data[2:2];
            load_next_c = '1;
        end
        field_combo.MODE.ENDIAN_TOGGLE.next = next_c;
        field_combo.MODE.ENDIAN_TOGGLE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.MODE.ENDIAN_TOGGLE.value <= 'h0;
        end else if(field_combo.MODE.ENDIAN_TOGGLE.load_next) begin
            field_storage.MODE.ENDIAN_TOGGLE.value <= field_combo.MODE.ENDIAN_TOGGLE.next;
        end
    end
    assign hwif_out.MODE.ENDIAN_TOGGLE.value = field_storage.MODE.ENDIAN_TOGGLE.value;
    // Field: sha512_acc_csr.START_ADDRESS.ADDR
    always_comb begin
        automatic logic [31:0] next_c = field_storage.START_ADDRESS.ADDR.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.START_ADDRESS && decoded_req_is_wr && hwif_in.valid_user) begin // SW write
            next_c = decoded_wr_data[31:0];
            load_next_c = '1;
        end
        field_combo.START_ADDRESS.ADDR.next = next_c;
        field_combo.START_ADDRESS.ADDR.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.START_ADDRESS.ADDR.value <= 'h0;
        end else if(field_combo.START_ADDRESS.ADDR.load_next) begin
            field_storage.START_ADDRESS.ADDR.value <= field_combo.START_ADDRESS.ADDR.next;
        end
    end
    assign hwif_out.START_ADDRESS.ADDR.value = field_storage.START_ADDRESS.ADDR.value;
    // Field: sha512_acc_csr.DLEN.LENGTH
    always_comb begin
        automatic logic [31:0] next_c = field_storage.DLEN.LENGTH.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.DLEN && decoded_req_is_wr && hwif_in.valid_user) begin // SW write
            next_c = decoded_wr_data[31:0];
            load_next_c = '1;
        end
        field_combo.DLEN.LENGTH.next = next_c;
        field_combo.DLEN.LENGTH.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.DLEN.LENGTH.value <= 'h0;
        end else if(field_combo.DLEN.LENGTH.load_next) begin
            field_storage.DLEN.LENGTH.value <= field_combo.DLEN.LENGTH.next;
        end
    end
    assign hwif_out.DLEN.LENGTH.value = field_storage.DLEN.LENGTH.value;
    // Field: sha512_acc_csr.DATAIN.DATAIN
    always_comb begin
        automatic logic [31:0] next_c = field_storage.DATAIN.DATAIN.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.DATAIN && decoded_req_is_wr && hwif_in.valid_user) begin // SW write
            next_c = decoded_wr_data[31:0];
            load_next_c = '1;
        end
        field_combo.DATAIN.DATAIN.next = next_c;
        field_combo.DATAIN.DATAIN.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.DATAIN.DATAIN.value <= 'h0;
        end else if(field_combo.DATAIN.DATAIN.load_next) begin
            field_storage.DATAIN.DATAIN.value <= field_combo.DATAIN.DATAIN.next;
        end
    end
    assign hwif_out.DATAIN.DATAIN.swmod = decoded_reg_strb.DATAIN && decoded_req_is_wr;
    // Field: sha512_acc_csr.EXECUTE.EXECUTE
    always_comb begin
        automatic logic [0:0] next_c = field_storage.EXECUTE.EXECUTE.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.EXECUTE && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[0:0];
            load_next_c = '1;
        end else if(hwif_in.EXECUTE.EXECUTE.hwclr) begin // HW Clear
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.EXECUTE.EXECUTE.next = next_c;
        field_combo.EXECUTE.EXECUTE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.EXECUTE.EXECUTE.value <= 'h0;
        end else if(field_combo.EXECUTE.EXECUTE.load_next) begin
            field_storage.EXECUTE.EXECUTE.value <= field_combo.EXECUTE.EXECUTE.next;
        end
    end
    assign hwif_out.EXECUTE.EXECUTE.value = field_storage.EXECUTE.EXECUTE.value;
    // Field: sha512_acc_csr.STATUS.VALID
    always_comb begin
        automatic logic [0:0] next_c = field_storage.STATUS.VALID.value;
        automatic logic load_next_c = '0;
        if(1) begin // HW Write
            next_c = hwif_in.STATUS.VALID.next;
            load_next_c = '1;
        end
        field_combo.STATUS.VALID.next = next_c;
        field_combo.STATUS.VALID.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.STATUS.VALID.value <= 'h0;
        end else if(field_combo.STATUS.VALID.load_next) begin
            field_storage.STATUS.VALID.value <= field_combo.STATUS.VALID.next;
        end
    end
    assign hwif_out.STATUS.VALID.value = field_storage.STATUS.VALID.value;
    for(genvar i0=0; i0<16; i0++) begin
        // Field: sha512_acc_csr.DIGEST[].DIGEST
        always_comb begin
            automatic logic [31:0] next_c = field_storage.DIGEST[i0].DIGEST.value;
            automatic logic load_next_c = '0;
            if(1) begin // HW Write
                next_c = hwif_in.DIGEST[i0].DIGEST.next;
                load_next_c = '1;
            end else if(hwif_in.DIGEST[i0].DIGEST.hwclr) begin // HW Clear
                next_c = '0;
                load_next_c = '1;
            end
            field_combo.DIGEST[i0].DIGEST.next = next_c;
            field_combo.DIGEST[i0].DIGEST.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
            if(~hwif_in.cptra_rst_b) begin
                field_storage.DIGEST[i0].DIGEST.value <= 'h0;
            end else if(field_combo.DIGEST[i0].DIGEST.load_next) begin
                field_storage.DIGEST[i0].DIGEST.value <= field_combo.DIGEST[i0].DIGEST.next;
            end
        end
    end
    // Field: sha512_acc_csr.CONTROL.ZEROIZE
    always_comb begin
        automatic logic [0:0] next_c = field_storage.CONTROL.ZEROIZE.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.CONTROL && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[0:0];
            load_next_c = '1;
        end else if(1) begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.CONTROL.ZEROIZE.next = next_c;
        field_combo.CONTROL.ZEROIZE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.CONTROL.ZEROIZE.value <= 'h0;
        end else if(field_combo.CONTROL.ZEROIZE.load_next) begin
            field_storage.CONTROL.ZEROIZE.value <= field_combo.CONTROL.ZEROIZE.next;
        end
    end
    assign hwif_out.CONTROL.ZEROIZE.value = field_storage.CONTROL.ZEROIZE.value;
    // Field: sha512_acc_csr.intr_block_rf.global_intr_en_r.error_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.global_intr_en_r.error_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.global_intr_en_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = decoded_wr_data[0:0];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.global_intr_en_r.error_en.next = next_c;
        field_combo.intr_block_rf.global_intr_en_r.error_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.global_intr_en_r.error_en.value <= 'h0;
        end else if(field_combo.intr_block_rf.global_intr_en_r.error_en.load_next) begin
            field_storage.intr_block_rf.global_intr_en_r.error_en.value <= field_combo.intr_block_rf.global_intr_en_r.error_en.next;
        end
    end
    // Field: sha512_acc_csr.intr_block_rf.global_intr_en_r.notif_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.global_intr_en_r.notif_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.global_intr_en_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = decoded_wr_data[1:1];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.global_intr_en_r.notif_en.next = next_c;
        field_combo.intr_block_rf.global_intr_en_r.notif_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.global_intr_en_r.notif_en.value <= 'h0;
        end else if(field_combo.intr_block_rf.global_intr_en_r.notif_en.load_next) begin
            field_storage.intr_block_rf.global_intr_en_r.notif_en.value <= field_combo.intr_block_rf.global_intr_en_r.notif_en.next;
        end
    end
    // Field: sha512_acc_csr.intr_block_rf.error_intr_en_r.error0_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_intr_en_r.error0_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_en_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = decoded_wr_data[0:0];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_en_r.error0_en.next = next_c;
        field_combo.intr_block_rf.error_intr_en_r.error0_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.error_intr_en_r.error0_en.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_intr_en_r.error0_en.load_next) begin
            field_storage.intr_block_rf.error_intr_en_r.error0_en.value <= field_combo.intr_block_rf.error_intr_en_r.error0_en.next;
        end
    end
    // Field: sha512_acc_csr.intr_block_rf.error_intr_en_r.error1_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_intr_en_r.error1_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_en_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = decoded_wr_data[1:1];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_en_r.error1_en.next = next_c;
        field_combo.intr_block_rf.error_intr_en_r.error1_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.error_intr_en_r.error1_en.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_intr_en_r.error1_en.load_next) begin
            field_storage.intr_block_rf.error_intr_en_r.error1_en.value <= field_combo.intr_block_rf.error_intr_en_r.error1_en.next;
        end
    end
    // Field: sha512_acc_csr.intr_block_rf.error_intr_en_r.error2_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_intr_en_r.error2_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_en_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = decoded_wr_data[2:2];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_en_r.error2_en.next = next_c;
        field_combo.intr_block_rf.error_intr_en_r.error2_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.error_intr_en_r.error2_en.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_intr_en_r.error2_en.load_next) begin
            field_storage.intr_block_rf.error_intr_en_r.error2_en.value <= field_combo.intr_block_rf.error_intr_en_r.error2_en.next;
        end
    end
    // Field: sha512_acc_csr.intr_block_rf.error_intr_en_r.error3_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_intr_en_r.error3_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_en_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = decoded_wr_data[3:3];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_en_r.error3_en.next = next_c;
        field_combo.intr_block_rf.error_intr_en_r.error3_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.error_intr_en_r.error3_en.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_intr_en_r.error3_en.load_next) begin
            field_storage.intr_block_rf.error_intr_en_r.error3_en.value <= field_combo.intr_block_rf.error_intr_en_r.error3_en.next;
        end
    end
    // Field: sha512_acc_csr.intr_block_rf.notif_intr_en_r.notif_cmd_done_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_intr_en_r.notif_cmd_done_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_intr_en_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = decoded_wr_data[0:0];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_intr_en_r.notif_cmd_done_en.next = next_c;
        field_combo.intr_block_rf.notif_intr_en_r.notif_cmd_done_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.notif_intr_en_r.notif_cmd_done_en.value <= 'h0;
        end else if(field_combo.intr_block_rf.notif_intr_en_r.notif_cmd_done_en.load_next) begin
            field_storage.intr_block_rf.notif_intr_en_r.notif_cmd_done_en.value <= field_combo.intr_block_rf.notif_intr_en_r.notif_cmd_done_en.next;
        end
    end
    // Field: sha512_acc_csr.intr_block_rf.error_global_intr_r.agg_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_global_intr_r.agg_sts.value;
        automatic logic load_next_c = '0;
        if(1) begin // HW Write
            next_c = hwif_out.intr_block_rf.error_internal_intr_r.intr;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_global_intr_r.agg_sts.next = next_c;
        field_combo.intr_block_rf.error_global_intr_r.agg_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.error_global_intr_r.agg_sts.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_global_intr_r.agg_sts.load_next) begin
            field_storage.intr_block_rf.error_global_intr_r.agg_sts.value <= field_combo.intr_block_rf.error_global_intr_r.agg_sts.next;
        end
    end
    assign hwif_out.intr_block_rf.error_global_intr_r.intr =
        |(field_storage.intr_block_rf.error_global_intr_r.agg_sts.value & field_storage.intr_block_rf.global_intr_en_r.error_en.value);
    // Field: sha512_acc_csr.intr_block_rf.notif_global_intr_r.agg_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_global_intr_r.agg_sts.value;
        automatic logic load_next_c = '0;
        if(1) begin // HW Write
            next_c = hwif_out.intr_block_rf.notif_internal_intr_r.intr;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_global_intr_r.agg_sts.next = next_c;
        field_combo.intr_block_rf.notif_global_intr_r.agg_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.notif_global_intr_r.agg_sts.value <= 'h0;
        end else if(field_combo.intr_block_rf.notif_global_intr_r.agg_sts.load_next) begin
            field_storage.intr_block_rf.notif_global_intr_r.agg_sts.value <= field_combo.intr_block_rf.notif_global_intr_r.agg_sts.next;
        end
    end
    assign hwif_out.intr_block_rf.notif_global_intr_r.intr =
        |(field_storage.intr_block_rf.notif_global_intr_r.agg_sts.value & field_storage.intr_block_rf.global_intr_en_r.notif_en.value);
    // Field: sha512_acc_csr.intr_block_rf.error_internal_intr_r.error0_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_internal_intr_r.error0_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error0_trig.value) begin // stickybit
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error0_sts.value | field_storage.intr_block_rf.error_intr_trig_r.error0_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error0_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error_internal_intr_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error0_sts.value & ~decoded_wr_data[0:0];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_internal_intr_r.error0_sts.next = next_c;
        field_combo.intr_block_rf.error_internal_intr_r.error0_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.intr_block_rf.error_internal_intr_r.error0_sts.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_internal_intr_r.error0_sts.load_next) begin
            field_storage.intr_block_rf.error_internal_intr_r.error0_sts.value <= field_combo.intr_block_rf.error_internal_intr_r.error0_sts.next;
        end
    end
    // Field: sha512_acc_csr.intr_block_rf.error_internal_intr_r.error1_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_internal_intr_r.error1_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error1_trig.value) begin // stickybit
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error1_sts.value | field_storage.intr_block_rf.error_intr_trig_r.error1_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error1_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error_internal_intr_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error1_sts.value & ~decoded_wr_data[1:1];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_internal_intr_r.error1_sts.next = next_c;
        field_combo.intr_block_rf.error_internal_intr_r.error1_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.intr_block_rf.error_internal_intr_r.error1_sts.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_internal_intr_r.error1_sts.load_next) begin
            field_storage.intr_block_rf.error_internal_intr_r.error1_sts.value <= field_combo.intr_block_rf.error_internal_intr_r.error1_sts.next;
        end
    end
    // Field: sha512_acc_csr.intr_block_rf.error_internal_intr_r.error2_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_internal_intr_r.error2_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error2_trig.value) begin // stickybit
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error2_sts.value | field_storage.intr_block_rf.error_intr_trig_r.error2_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error2_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error_internal_intr_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error2_sts.value & ~decoded_wr_data[2:2];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_internal_intr_r.error2_sts.next = next_c;
        field_combo.intr_block_rf.error_internal_intr_r.error2_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.intr_block_rf.error_internal_intr_r.error2_sts.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_internal_intr_r.error2_sts.load_next) begin
            field_storage.intr_block_rf.error_internal_intr_r.error2_sts.value <= field_combo.intr_block_rf.error_internal_intr_r.error2_sts.next;
        end
    end
    // Field: sha512_acc_csr.intr_block_rf.error_internal_intr_r.error3_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_internal_intr_r.error3_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error3_trig.value) begin // stickybit
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error3_sts.value | field_storage.intr_block_rf.error_intr_trig_r.error3_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error3_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error_internal_intr_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error3_sts.value & ~decoded_wr_data[3:3];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_internal_intr_r.error3_sts.next = next_c;
        field_combo.intr_block_rf.error_internal_intr_r.error3_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.intr_block_rf.error_internal_intr_r.error3_sts.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_internal_intr_r.error3_sts.load_next) begin
            field_storage.intr_block_rf.error_internal_intr_r.error3_sts.value <= field_combo.intr_block_rf.error_internal_intr_r.error3_sts.next;
        end
    end
    assign hwif_out.intr_block_rf.error_internal_intr_r.intr =
        |(field_storage.intr_block_rf.error_internal_intr_r.error0_sts.value & field_storage.intr_block_rf.error_intr_en_r.error0_en.value)
        || |(field_storage.intr_block_rf.error_internal_intr_r.error1_sts.value & field_storage.intr_block_rf.error_intr_en_r.error1_en.value)
        || |(field_storage.intr_block_rf.error_internal_intr_r.error2_sts.value & field_storage.intr_block_rf.error_intr_en_r.error2_en.value)
        || |(field_storage.intr_block_rf.error_internal_intr_r.error3_sts.value & field_storage.intr_block_rf.error_intr_en_r.error3_en.value);
    // Field: sha512_acc_csr.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.value) begin // stickybit
            next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.value | field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.notif_internal_intr_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.value & ~decoded_wr_data[0:0];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.next = next_c;
        field_combo.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.value <= 'h0;
        end else if(field_combo.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.load_next) begin
            field_storage.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.value <= field_combo.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.next;
        end
    end
    assign hwif_out.intr_block_rf.notif_internal_intr_r.intr =
        |(field_storage.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.value & field_storage.intr_block_rf.notif_intr_en_r.notif_cmd_done_en.value);
    // Field: sha512_acc_csr.intr_block_rf.error_intr_trig_r.error0_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_intr_trig_r.error0_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_trig_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error0_trig.value | decoded_wr_data[0:0];
            load_next_c = '1;
        end else if(1) begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_trig_r.error0_trig.next = next_c;
        field_combo.intr_block_rf.error_intr_trig_r.error0_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.error_intr_trig_r.error0_trig.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_intr_trig_r.error0_trig.load_next) begin
            field_storage.intr_block_rf.error_intr_trig_r.error0_trig.value <= field_combo.intr_block_rf.error_intr_trig_r.error0_trig.next;
        end
    end
    // Field: sha512_acc_csr.intr_block_rf.error_intr_trig_r.error1_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_intr_trig_r.error1_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_trig_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error1_trig.value | decoded_wr_data[1:1];
            load_next_c = '1;
        end else if(1) begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_trig_r.error1_trig.next = next_c;
        field_combo.intr_block_rf.error_intr_trig_r.error1_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.error_intr_trig_r.error1_trig.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_intr_trig_r.error1_trig.load_next) begin
            field_storage.intr_block_rf.error_intr_trig_r.error1_trig.value <= field_combo.intr_block_rf.error_intr_trig_r.error1_trig.next;
        end
    end
    // Field: sha512_acc_csr.intr_block_rf.error_intr_trig_r.error2_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_intr_trig_r.error2_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_trig_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error2_trig.value | decoded_wr_data[2:2];
            load_next_c = '1;
        end else if(1) begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_trig_r.error2_trig.next = next_c;
        field_combo.intr_block_rf.error_intr_trig_r.error2_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.error_intr_trig_r.error2_trig.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_intr_trig_r.error2_trig.load_next) begin
            field_storage.intr_block_rf.error_intr_trig_r.error2_trig.value <= field_combo.intr_block_rf.error_intr_trig_r.error2_trig.next;
        end
    end
    // Field: sha512_acc_csr.intr_block_rf.error_intr_trig_r.error3_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_intr_trig_r.error3_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_trig_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error3_trig.value | decoded_wr_data[3:3];
            load_next_c = '1;
        end else if(1) begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_trig_r.error3_trig.next = next_c;
        field_combo.intr_block_rf.error_intr_trig_r.error3_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.error_intr_trig_r.error3_trig.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_intr_trig_r.error3_trig.load_next) begin
            field_storage.intr_block_rf.error_intr_trig_r.error3_trig.value <= field_combo.intr_block_rf.error_intr_trig_r.error3_trig.next;
        end
    end
    // Field: sha512_acc_csr.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_intr_trig_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.value | decoded_wr_data[0:0];
            load_next_c = '1;
        end else if(1) begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.next = next_c;
        field_combo.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.value <= 'h0;
        end else if(field_combo.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.load_next) begin
            field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.value <= field_combo.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.next;
        end
    end
    // Field: sha512_acc_csr.intr_block_rf.error0_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.error0_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error0_intr_count_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = decoded_wr_data[31:0];
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error0_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 'h1) > 'hffffffff) begin // up-counter saturated
                next_c = 'hffffffff;
            end else begin
                next_c = next_c + 'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error0_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error0_intr_count_r.cnt.value >= 'hffffffff);
        field_combo.intr_block_rf.error0_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error0_intr_count_r.cnt.value >= 'hffffffff);
        if(next_c > 'hffffffff) begin
            next_c = 'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error0_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error0_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.intr_block_rf.error0_intr_count_r.cnt.value <= 'h0;
        end else if(field_combo.intr_block_rf.error0_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error0_intr_count_r.cnt.value <= field_combo.intr_block_rf.error0_intr_count_r.cnt.next;
        end
    end
    // Field: sha512_acc_csr.intr_block_rf.error1_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.error1_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_count_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = decoded_wr_data[31:0];
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error1_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 'h1) > 'hffffffff) begin // up-counter saturated
                next_c = 'hffffffff;
            end else begin
                next_c = next_c + 'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error1_intr_count_r.cnt.value >= 'hffffffff);
        field_combo.intr_block_rf.error1_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error1_intr_count_r.cnt.value >= 'hffffffff);
        if(next_c > 'hffffffff) begin
            next_c = 'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error1_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.intr_block_rf.error1_intr_count_r.cnt.value <= 'h0;
        end else if(field_combo.intr_block_rf.error1_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error1_intr_count_r.cnt.value <= field_combo.intr_block_rf.error1_intr_count_r.cnt.next;
        end
    end
    // Field: sha512_acc_csr.intr_block_rf.error2_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.error2_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error2_intr_count_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = decoded_wr_data[31:0];
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error2_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 'h1) > 'hffffffff) begin // up-counter saturated
                next_c = 'hffffffff;
            end else begin
                next_c = next_c + 'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error2_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error2_intr_count_r.cnt.value >= 'hffffffff);
        field_combo.intr_block_rf.error2_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error2_intr_count_r.cnt.value >= 'hffffffff);
        if(next_c > 'hffffffff) begin
            next_c = 'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error2_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error2_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.intr_block_rf.error2_intr_count_r.cnt.value <= 'h0;
        end else if(field_combo.intr_block_rf.error2_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error2_intr_count_r.cnt.value <= field_combo.intr_block_rf.error2_intr_count_r.cnt.next;
        end
    end
    // Field: sha512_acc_csr.intr_block_rf.error3_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.error3_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error3_intr_count_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = decoded_wr_data[31:0];
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error3_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 'h1) > 'hffffffff) begin // up-counter saturated
                next_c = 'hffffffff;
            end else begin
                next_c = next_c + 'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error3_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error3_intr_count_r.cnt.value >= 'hffffffff);
        field_combo.intr_block_rf.error3_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error3_intr_count_r.cnt.value >= 'hffffffff);
        if(next_c > 'hffffffff) begin
            next_c = 'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error3_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error3_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.intr_block_rf.error3_intr_count_r.cnt.value <= 'h0;
        end else if(field_combo.intr_block_rf.error3_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error3_intr_count_r.cnt.value <= field_combo.intr_block_rf.error3_intr_count_r.cnt.next;
        end
    end
    // Field: sha512_acc_csr.intr_block_rf.notif_cmd_done_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.notif_cmd_done_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_cmd_done_intr_count_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = decoded_wr_data[31:0];
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 'h1) > 'hffffffff) begin // up-counter saturated
                next_c = 'hffffffff;
            end else begin
                next_c = next_c + 'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_cmd_done_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.notif_cmd_done_intr_count_r.cnt.value >= 'hffffffff);
        field_combo.intr_block_rf.notif_cmd_done_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.notif_cmd_done_intr_count_r.cnt.value >= 'hffffffff);
        if(next_c > 'hffffffff) begin
            next_c = 'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_cmd_done_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.notif_cmd_done_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.notif_cmd_done_intr_count_r.cnt.value <= 'h0;
        end else if(field_combo.intr_block_rf.notif_cmd_done_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.notif_cmd_done_intr_count_r.cnt.value <= field_combo.intr_block_rf.notif_cmd_done_intr_count_r.cnt.next;
        end
    end
    // Field: sha512_acc_csr.intr_block_rf.error0_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error0_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error0_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error0_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error0_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error0_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error0_intr_count_incr_r.pulse.underflow = (next_c < ('h1));
            next_c = next_c - 'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error0_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error0_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error0_intr_count_incr_r.pulse.value <= 'd0);
        field_combo.intr_block_rf.error0_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error0_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.error0_intr_count_incr_r.pulse.value <= 'h0;
        end else if(field_combo.intr_block_rf.error0_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error0_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error0_intr_count_incr_r.pulse.next;
        end
    end
    // Field: sha512_acc_csr.intr_block_rf.error1_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error1_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error1_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error1_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error1_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error1_intr_count_incr_r.pulse.underflow = (next_c < ('h1));
            next_c = next_c - 'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error1_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error1_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error1_intr_count_incr_r.pulse.value <= 'd0);
        field_combo.intr_block_rf.error1_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error1_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.error1_intr_count_incr_r.pulse.value <= 'h0;
        end else if(field_combo.intr_block_rf.error1_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error1_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error1_intr_count_incr_r.pulse.next;
        end
    end
    // Field: sha512_acc_csr.intr_block_rf.error2_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error2_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error2_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error2_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error2_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error2_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error2_intr_count_incr_r.pulse.underflow = (next_c < ('h1));
            next_c = next_c - 'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error2_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error2_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error2_intr_count_incr_r.pulse.value <= 'd0);
        field_combo.intr_block_rf.error2_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error2_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.error2_intr_count_incr_r.pulse.value <= 'h0;
        end else if(field_combo.intr_block_rf.error2_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error2_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error2_intr_count_incr_r.pulse.next;
        end
    end
    // Field: sha512_acc_csr.intr_block_rf.error3_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error3_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error3_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error3_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error3_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error3_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error3_intr_count_incr_r.pulse.underflow = (next_c < ('h1));
            next_c = next_c - 'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error3_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error3_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error3_intr_count_incr_r.pulse.value <= 'd0);
        field_combo.intr_block_rf.error3_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error3_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.error3_intr_count_incr_r.pulse.value <= 'h0;
        end else if(field_combo.intr_block_rf.error3_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error3_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error3_intr_count_incr_r.pulse.next;
        end
    end
    // Field: sha512_acc_csr.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.underflow = (next_c < ('h1));
            next_c = next_c - 'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.value <= 'd0);
        field_combo.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.value <= 'h0;
        end else if(field_combo.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.next;
        end
    end

    //--------------------------------------------------------------------------
    // Readback
    //--------------------------------------------------------------------------
    logic readback_err;
    logic readback_done;
    logic [31:0] readback_data;
    
    // Assign readback values to a flattened array
    logic [44-1:0][31:0] readback_array;
    assign readback_array[0][0:0] = (decoded_reg_strb.LOCK && !decoded_req_is_wr) ? field_storage.LOCK.LOCK.value : '0;
    assign readback_array[0][31:1] = '0;
    assign readback_array[1][31:0] = (decoded_reg_strb.USER && !decoded_req_is_wr) ? field_storage.USER.USER.value : '0;
    assign readback_array[2][1:0] = (decoded_reg_strb.MODE && !decoded_req_is_wr) ? field_storage.MODE.MODE.value : '0;
    assign readback_array[2][2:2] = (decoded_reg_strb.MODE && !decoded_req_is_wr) ? field_storage.MODE.ENDIAN_TOGGLE.value : '0;
    assign readback_array[2][31:3] = '0;
    assign readback_array[3][31:0] = (decoded_reg_strb.START_ADDRESS && !decoded_req_is_wr) ? field_storage.START_ADDRESS.ADDR.value : '0;
    assign readback_array[4][31:0] = (decoded_reg_strb.DLEN && !decoded_req_is_wr) ? field_storage.DLEN.LENGTH.value : '0;
    assign readback_array[5][31:0] = (decoded_reg_strb.DATAIN && !decoded_req_is_wr) ? field_storage.DATAIN.DATAIN.value : '0;
    assign readback_array[6][0:0] = (decoded_reg_strb.EXECUTE && !decoded_req_is_wr) ? field_storage.EXECUTE.EXECUTE.value : '0;
    assign readback_array[6][31:1] = '0;
    assign readback_array[7][0:0] = (decoded_reg_strb.STATUS && !decoded_req_is_wr) ? field_storage.STATUS.VALID.value : '0;
    assign readback_array[7][31:1] = '0;
    for(genvar i0=0; i0<16; i0++) begin
        assign readback_array[i0*1 + 8][31:0] = (decoded_reg_strb.DIGEST[i0] && !decoded_req_is_wr) ? field_storage.DIGEST[i0].DIGEST.value : '0;
    end
    assign readback_array[24][0:0] = (decoded_reg_strb.CONTROL && !decoded_req_is_wr) ? field_storage.CONTROL.ZEROIZE.value : '0;
    assign readback_array[24][31:1] = '0;
    assign readback_array[25][0:0] = (decoded_reg_strb.intr_block_rf.global_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.global_intr_en_r.error_en.value : '0;
    assign readback_array[25][1:1] = (decoded_reg_strb.intr_block_rf.global_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.global_intr_en_r.notif_en.value : '0;
    assign readback_array[25][31:2] = '0;
    assign readback_array[26][0:0] = (decoded_reg_strb.intr_block_rf.error_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_en_r.error0_en.value : '0;
    assign readback_array[26][1:1] = (decoded_reg_strb.intr_block_rf.error_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_en_r.error1_en.value : '0;
    assign readback_array[26][2:2] = (decoded_reg_strb.intr_block_rf.error_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_en_r.error2_en.value : '0;
    assign readback_array[26][3:3] = (decoded_reg_strb.intr_block_rf.error_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_en_r.error3_en.value : '0;
    assign readback_array[26][31:4] = '0;
    assign readback_array[27][0:0] = (decoded_reg_strb.intr_block_rf.notif_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_intr_en_r.notif_cmd_done_en.value : '0;
    assign readback_array[27][31:1] = '0;
    assign readback_array[28][0:0] = (decoded_reg_strb.intr_block_rf.error_global_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_global_intr_r.agg_sts.value : '0;
    assign readback_array[28][31:1] = '0;
    assign readback_array[29][0:0] = (decoded_reg_strb.intr_block_rf.notif_global_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_global_intr_r.agg_sts.value : '0;
    assign readback_array[29][31:1] = '0;
    assign readback_array[30][0:0] = (decoded_reg_strb.intr_block_rf.error_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_internal_intr_r.error0_sts.value : '0;
    assign readback_array[30][1:1] = (decoded_reg_strb.intr_block_rf.error_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_internal_intr_r.error1_sts.value : '0;
    assign readback_array[30][2:2] = (decoded_reg_strb.intr_block_rf.error_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_internal_intr_r.error2_sts.value : '0;
    assign readback_array[30][3:3] = (decoded_reg_strb.intr_block_rf.error_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_internal_intr_r.error3_sts.value : '0;
    assign readback_array[30][31:4] = '0;
    assign readback_array[31][0:0] = (decoded_reg_strb.intr_block_rf.notif_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.value : '0;
    assign readback_array[31][31:1] = '0;
    assign readback_array[32][0:0] = (decoded_reg_strb.intr_block_rf.error_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_trig_r.error0_trig.value : '0;
    assign readback_array[32][1:1] = (decoded_reg_strb.intr_block_rf.error_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_trig_r.error1_trig.value : '0;
    assign readback_array[32][2:2] = (decoded_reg_strb.intr_block_rf.error_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_trig_r.error2_trig.value : '0;
    assign readback_array[32][3:3] = (decoded_reg_strb.intr_block_rf.error_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_trig_r.error3_trig.value : '0;
    assign readback_array[32][31:4] = '0;
    assign readback_array[33][0:0] = (decoded_reg_strb.intr_block_rf.notif_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.value : '0;
    assign readback_array[33][31:1] = '0;
    assign readback_array[34][31:0] = (decoded_reg_strb.intr_block_rf.error0_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error0_intr_count_r.cnt.value : '0;
    assign readback_array[35][31:0] = (decoded_reg_strb.intr_block_rf.error1_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_count_r.cnt.value : '0;
    assign readback_array[36][31:0] = (decoded_reg_strb.intr_block_rf.error2_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error2_intr_count_r.cnt.value : '0;
    assign readback_array[37][31:0] = (decoded_reg_strb.intr_block_rf.error3_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error3_intr_count_r.cnt.value : '0;
    assign readback_array[38][31:0] = (decoded_reg_strb.intr_block_rf.notif_cmd_done_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_cmd_done_intr_count_r.cnt.value : '0;
    assign readback_array[39][0:0] = (decoded_reg_strb.intr_block_rf.error0_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error0_intr_count_incr_r.pulse.value : '0;
    assign readback_array[39][31:1] = '0;
    assign readback_array[40][0:0] = (decoded_reg_strb.intr_block_rf.error1_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_count_incr_r.pulse.value : '0;
    assign readback_array[40][31:1] = '0;
    assign readback_array[41][0:0] = (decoded_reg_strb.intr_block_rf.error2_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error2_intr_count_incr_r.pulse.value : '0;
    assign readback_array[41][31:1] = '0;
    assign readback_array[42][0:0] = (decoded_reg_strb.intr_block_rf.error3_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error3_intr_count_incr_r.pulse.value : '0;
    assign readback_array[42][31:1] = '0;
    assign readback_array[43][0:0] = (decoded_reg_strb.intr_block_rf.notif_cmd_done_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.value : '0;
    assign readback_array[43][31:1] = '0;


    // Reduce the array
    always_comb begin
        automatic logic [31:0] readback_data_var;
        readback_done = decoded_req & ~decoded_req_is_wr;
        readback_err = '0;
        readback_data_var = '0;
        for(int i=0; i<44; i++) readback_data_var |= readback_array[i];
        readback_data = readback_data_var;
    end


    assign cpuif_rd_ack = readback_done;
    assign cpuif_rd_data = readback_data;
    assign cpuif_rd_err = readback_err;


endmodule