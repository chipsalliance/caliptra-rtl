
// This file was autogenerated by PeakRDL-uvm
package sha512_acc_csr_uvm;
    `include "uvm_macros.svh"
    import uvm_pkg::*;
    
    // Reg - sha512_acc_csr::LOCK
    class sha512_acc_csr__LOCK extends uvm_reg;
        rand uvm_reg_field LOCK;

        function new(string name = "sha512_acc_csr__LOCK");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.LOCK = new("LOCK");
            this.LOCK.configure(this, 1, 0, "W1CRS", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : sha512_acc_csr__LOCK

    // Reg - sha512_acc_csr::USER
    class sha512_acc_csr__USER extends uvm_reg;
        rand uvm_reg_field USER;

        function new(string name = "sha512_acc_csr__USER");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.USER = new("USER");
            this.USER.configure(this, 32, 0, "RO", 1, 'h0, 1, 1, 0);
        endfunction : build
    endclass : sha512_acc_csr__USER

    // Reg - sha512_acc_csr::MODE
    class sha512_acc_csr__MODE extends uvm_reg;
        rand uvm_reg_field MODE;
        rand uvm_reg_field ENDIAN_TOGGLE;

        function new(string name = "sha512_acc_csr__MODE");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.MODE = new("MODE");
            this.MODE.configure(this, 2, 0, "RW", 0, 'h0, 1, 1, 0);
            this.ENDIAN_TOGGLE = new("ENDIAN_TOGGLE");
            this.ENDIAN_TOGGLE.configure(this, 1, 2, "RW", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : sha512_acc_csr__MODE

    // Reg - sha512_acc_csr::START_ADDRESS
    class sha512_acc_csr__START_ADDRESS extends uvm_reg;
        rand uvm_reg_field ADDR;

        function new(string name = "sha512_acc_csr__START_ADDRESS");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.ADDR = new("ADDR");
            this.ADDR.configure(this, 32, 0, "RW", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : sha512_acc_csr__START_ADDRESS

    // Reg - sha512_acc_csr::DLEN
    class sha512_acc_csr__DLEN extends uvm_reg;
        rand uvm_reg_field LENGTH;

        function new(string name = "sha512_acc_csr__DLEN");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.LENGTH = new("LENGTH");
            this.LENGTH.configure(this, 32, 0, "RW", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : sha512_acc_csr__DLEN

    // Reg - sha512_acc_csr::DATAIN
    class sha512_acc_csr__DATAIN extends uvm_reg;
        rand uvm_reg_field DATAIN;

        function new(string name = "sha512_acc_csr__DATAIN");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.DATAIN = new("DATAIN");
            this.DATAIN.configure(this, 32, 0, "RW", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : sha512_acc_csr__DATAIN

    // Reg - sha512_acc_csr::EXECUTE
    class sha512_acc_csr__EXECUTE extends uvm_reg;
        rand uvm_reg_field EXECUTE;

        function new(string name = "sha512_acc_csr__EXECUTE");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.EXECUTE = new("EXECUTE");
            this.EXECUTE.configure(this, 1, 0, "RW", 1, 'h0, 1, 1, 0);
        endfunction : build
    endclass : sha512_acc_csr__EXECUTE

    // Reg - sha512_acc_csr::STATUS
    class sha512_acc_csr__STATUS extends uvm_reg;
        rand uvm_reg_field VALID;

        function new(string name = "sha512_acc_csr__STATUS");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.VALID = new("VALID");
            this.VALID.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
        endfunction : build
    endclass : sha512_acc_csr__STATUS

    // Reg - sha512_acc_csr::DIGEST
    class sha512_acc_csr__DIGEST extends uvm_reg;
        rand uvm_reg_field DIGEST;

        function new(string name = "sha512_acc_csr__DIGEST");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.DIGEST = new("DIGEST");
            this.DIGEST.configure(this, 32, 0, "RO", 1, 'h0, 1, 1, 0);
        endfunction : build
    endclass : sha512_acc_csr__DIGEST

    // Reg - sha512_acc_csr::CONTROL
    class sha512_acc_csr__CONTROL extends uvm_reg;
        rand uvm_reg_field ZEROIZE;

        function new(string name = "sha512_acc_csr__CONTROL");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.ZEROIZE = new("ZEROIZE");
            this.ZEROIZE.configure(this, 1, 0, "RW", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : sha512_acc_csr__CONTROL

    // Reg - sha512_acc_csr::global_intr_en_t
    class sha512_acc_csr__global_intr_en_t extends uvm_reg;
        rand uvm_reg_field error_en;
        rand uvm_reg_field notif_en;

        function new(string name = "sha512_acc_csr__global_intr_en_t");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.error_en = new("error_en");
            this.error_en.configure(this, 1, 0, "RW", 0, 'h0, 1, 1, 0);
            this.notif_en = new("notif_en");
            this.notif_en.configure(this, 1, 1, "RW", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : sha512_acc_csr__global_intr_en_t

    // Reg - sha512_acc_csr::error_intr_en_t
    class sha512_acc_csr__error_intr_en_t extends uvm_reg;
        rand uvm_reg_field error0_en;
        rand uvm_reg_field error1_en;
        rand uvm_reg_field error2_en;
        rand uvm_reg_field error3_en;

        function new(string name = "sha512_acc_csr__error_intr_en_t");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.error0_en = new("error0_en");
            this.error0_en.configure(this, 1, 0, "RW", 0, 'h0, 1, 1, 0);
            this.error1_en = new("error1_en");
            this.error1_en.configure(this, 1, 1, "RW", 0, 'h0, 1, 1, 0);
            this.error2_en = new("error2_en");
            this.error2_en.configure(this, 1, 2, "RW", 0, 'h0, 1, 1, 0);
            this.error3_en = new("error3_en");
            this.error3_en.configure(this, 1, 3, "RW", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : sha512_acc_csr__error_intr_en_t

    // Reg - sha512_acc_csr::notif_intr_en_t
    class sha512_acc_csr__notif_intr_en_t extends uvm_reg;
        rand uvm_reg_field notif_cmd_done_en;

        function new(string name = "sha512_acc_csr__notif_intr_en_t");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.notif_cmd_done_en = new("notif_cmd_done_en");
            this.notif_cmd_done_en.configure(this, 1, 0, "RW", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : sha512_acc_csr__notif_intr_en_t

    // Reg - sha512_acc_csr::global_intr_t_agg_sts_dd3dcf0a
    class sha512_acc_csr__global_intr_t_agg_sts_dd3dcf0a extends uvm_reg;
        rand uvm_reg_field agg_sts;

        function new(string name = "sha512_acc_csr__global_intr_t_agg_sts_dd3dcf0a");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.agg_sts = new("agg_sts");
            this.agg_sts.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
        endfunction : build
    endclass : sha512_acc_csr__global_intr_t_agg_sts_dd3dcf0a

    // Reg - sha512_acc_csr::global_intr_t_agg_sts_e6399b4a
    class sha512_acc_csr__global_intr_t_agg_sts_e6399b4a extends uvm_reg;
        rand uvm_reg_field agg_sts;

        function new(string name = "sha512_acc_csr__global_intr_t_agg_sts_e6399b4a");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.agg_sts = new("agg_sts");
            this.agg_sts.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
        endfunction : build
    endclass : sha512_acc_csr__global_intr_t_agg_sts_e6399b4a

    // Reg - sha512_acc_csr::error_intr_t_error0_sts_5ee134bf_error1_sts_aad9583f_error2_sts_6cad4575_error3_sts_735bbeba
    class sha512_acc_csr__error_intr_t_error0_sts_5ee134bf_error1_sts_aad9583f_error2_sts_6cad4575_error3_sts_735bbeba extends uvm_reg;
        rand uvm_reg_field error0_sts;
        rand uvm_reg_field error1_sts;
        rand uvm_reg_field error2_sts;
        rand uvm_reg_field error3_sts;

        function new(string name = "sha512_acc_csr__error_intr_t_error0_sts_5ee134bf_error1_sts_aad9583f_error2_sts_6cad4575_error3_sts_735bbeba");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.error0_sts = new("error0_sts");
            this.error0_sts.configure(this, 1, 0, "W1C", 1, 'h0, 1, 1, 0);
            this.error1_sts = new("error1_sts");
            this.error1_sts.configure(this, 1, 1, "W1C", 1, 'h0, 1, 1, 0);
            this.error2_sts = new("error2_sts");
            this.error2_sts.configure(this, 1, 2, "W1C", 1, 'h0, 1, 1, 0);
            this.error3_sts = new("error3_sts");
            this.error3_sts.configure(this, 1, 3, "W1C", 1, 'h0, 1, 1, 0);
        endfunction : build
    endclass : sha512_acc_csr__error_intr_t_error0_sts_5ee134bf_error1_sts_aad9583f_error2_sts_6cad4575_error3_sts_735bbeba

    // Reg - sha512_acc_csr::notif_intr_t_notif_cmd_done_sts_1c68637e
    class sha512_acc_csr__notif_intr_t_notif_cmd_done_sts_1c68637e extends uvm_reg;
        rand uvm_reg_field notif_cmd_done_sts;

        function new(string name = "sha512_acc_csr__notif_intr_t_notif_cmd_done_sts_1c68637e");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.notif_cmd_done_sts = new("notif_cmd_done_sts");
            this.notif_cmd_done_sts.configure(this, 1, 0, "W1C", 1, 'h0, 1, 1, 0);
        endfunction : build
    endclass : sha512_acc_csr__notif_intr_t_notif_cmd_done_sts_1c68637e

    // Reg - sha512_acc_csr::error_intr_trig_t
    class sha512_acc_csr__error_intr_trig_t extends uvm_reg;
        rand uvm_reg_field error0_trig;
        rand uvm_reg_field error1_trig;
        rand uvm_reg_field error2_trig;
        rand uvm_reg_field error3_trig;

        function new(string name = "sha512_acc_csr__error_intr_trig_t");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.error0_trig = new("error0_trig");
            this.error0_trig.configure(this, 1, 0, "W1S", 0, 'h0, 1, 1, 0);
            this.error1_trig = new("error1_trig");
            this.error1_trig.configure(this, 1, 1, "W1S", 0, 'h0, 1, 1, 0);
            this.error2_trig = new("error2_trig");
            this.error2_trig.configure(this, 1, 2, "W1S", 0, 'h0, 1, 1, 0);
            this.error3_trig = new("error3_trig");
            this.error3_trig.configure(this, 1, 3, "W1S", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : sha512_acc_csr__error_intr_trig_t

    // Reg - sha512_acc_csr::notif_intr_trig_t
    class sha512_acc_csr__notif_intr_trig_t extends uvm_reg;
        rand uvm_reg_field notif_cmd_done_trig;

        function new(string name = "sha512_acc_csr__notif_intr_trig_t");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.notif_cmd_done_trig = new("notif_cmd_done_trig");
            this.notif_cmd_done_trig.configure(this, 1, 0, "W1S", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : sha512_acc_csr__notif_intr_trig_t

    // Reg - sha512_acc_csr::intr_count_t_cnt_130ab269
    class sha512_acc_csr__intr_count_t_cnt_130ab269 extends uvm_reg;
        rand uvm_reg_field cnt;

        function new(string name = "sha512_acc_csr__intr_count_t_cnt_130ab269");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
        endfunction : build
    endclass : sha512_acc_csr__intr_count_t_cnt_130ab269

    // Reg - sha512_acc_csr::intr_count_t_cnt_324dfc53
    class sha512_acc_csr__intr_count_t_cnt_324dfc53 extends uvm_reg;
        rand uvm_reg_field cnt;

        function new(string name = "sha512_acc_csr__intr_count_t_cnt_324dfc53");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
        endfunction : build
    endclass : sha512_acc_csr__intr_count_t_cnt_324dfc53

    // Reg - sha512_acc_csr::intr_count_t_cnt_791a4799
    class sha512_acc_csr__intr_count_t_cnt_791a4799 extends uvm_reg;
        rand uvm_reg_field cnt;

        function new(string name = "sha512_acc_csr__intr_count_t_cnt_791a4799");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
        endfunction : build
    endclass : sha512_acc_csr__intr_count_t_cnt_791a4799

    // Reg - sha512_acc_csr::intr_count_t_cnt_e9de7334
    class sha512_acc_csr__intr_count_t_cnt_e9de7334 extends uvm_reg;
        rand uvm_reg_field cnt;

        function new(string name = "sha512_acc_csr__intr_count_t_cnt_e9de7334");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
        endfunction : build
    endclass : sha512_acc_csr__intr_count_t_cnt_e9de7334

    // Reg - sha512_acc_csr::intr_count_t_cnt_be67d6d5
    class sha512_acc_csr__intr_count_t_cnt_be67d6d5 extends uvm_reg;
        rand uvm_reg_field cnt;

        function new(string name = "sha512_acc_csr__intr_count_t_cnt_be67d6d5");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
        endfunction : build
    endclass : sha512_acc_csr__intr_count_t_cnt_be67d6d5

    // Reg - sha512_acc_csr::intr_count_incr_t_pulse_37026c97
    class sha512_acc_csr__intr_count_incr_t_pulse_37026c97 extends uvm_reg;
        rand uvm_reg_field pulse;

        function new(string name = "sha512_acc_csr__intr_count_incr_t_pulse_37026c97");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
        endfunction : build
    endclass : sha512_acc_csr__intr_count_incr_t_pulse_37026c97

    // Reg - sha512_acc_csr::intr_count_incr_t_pulse_d860d977
    class sha512_acc_csr__intr_count_incr_t_pulse_d860d977 extends uvm_reg;
        rand uvm_reg_field pulse;

        function new(string name = "sha512_acc_csr__intr_count_incr_t_pulse_d860d977");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
        endfunction : build
    endclass : sha512_acc_csr__intr_count_incr_t_pulse_d860d977

    // Reg - sha512_acc_csr::intr_count_incr_t_pulse_87b45fe7
    class sha512_acc_csr__intr_count_incr_t_pulse_87b45fe7 extends uvm_reg;
        rand uvm_reg_field pulse;

        function new(string name = "sha512_acc_csr__intr_count_incr_t_pulse_87b45fe7");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
        endfunction : build
    endclass : sha512_acc_csr__intr_count_incr_t_pulse_87b45fe7

    // Reg - sha512_acc_csr::intr_count_incr_t_pulse_c1689ee6
    class sha512_acc_csr__intr_count_incr_t_pulse_c1689ee6 extends uvm_reg;
        rand uvm_reg_field pulse;

        function new(string name = "sha512_acc_csr__intr_count_incr_t_pulse_c1689ee6");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
        endfunction : build
    endclass : sha512_acc_csr__intr_count_incr_t_pulse_c1689ee6

    // Reg - sha512_acc_csr::intr_count_incr_t_pulse_6173128e
    class sha512_acc_csr__intr_count_incr_t_pulse_6173128e extends uvm_reg;
        rand uvm_reg_field pulse;

        function new(string name = "sha512_acc_csr__intr_count_incr_t_pulse_6173128e");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
        endfunction : build
    endclass : sha512_acc_csr__intr_count_incr_t_pulse_6173128e

    // Regfile - sha512_acc_csr::intr_block_t
    class sha512_acc_csr__intr_block_t extends uvm_reg_block;
        rand sha512_acc_csr__global_intr_en_t global_intr_en_r;
        rand sha512_acc_csr__error_intr_en_t error_intr_en_r;
        rand sha512_acc_csr__notif_intr_en_t notif_intr_en_r;
        rand sha512_acc_csr__global_intr_t_agg_sts_dd3dcf0a error_global_intr_r;
        rand sha512_acc_csr__global_intr_t_agg_sts_e6399b4a notif_global_intr_r;
        rand sha512_acc_csr__error_intr_t_error0_sts_5ee134bf_error1_sts_aad9583f_error2_sts_6cad4575_error3_sts_735bbeba error_internal_intr_r;
        rand sha512_acc_csr__notif_intr_t_notif_cmd_done_sts_1c68637e notif_internal_intr_r;
        rand sha512_acc_csr__error_intr_trig_t error_intr_trig_r;
        rand sha512_acc_csr__notif_intr_trig_t notif_intr_trig_r;
        rand sha512_acc_csr__intr_count_t_cnt_130ab269 error0_intr_count_r;
        rand sha512_acc_csr__intr_count_t_cnt_324dfc53 error1_intr_count_r;
        rand sha512_acc_csr__intr_count_t_cnt_791a4799 error2_intr_count_r;
        rand sha512_acc_csr__intr_count_t_cnt_e9de7334 error3_intr_count_r;
        rand sha512_acc_csr__intr_count_t_cnt_be67d6d5 notif_cmd_done_intr_count_r;
        rand sha512_acc_csr__intr_count_incr_t_pulse_37026c97 error0_intr_count_incr_r;
        rand sha512_acc_csr__intr_count_incr_t_pulse_d860d977 error1_intr_count_incr_r;
        rand sha512_acc_csr__intr_count_incr_t_pulse_87b45fe7 error2_intr_count_incr_r;
        rand sha512_acc_csr__intr_count_incr_t_pulse_c1689ee6 error3_intr_count_incr_r;
        rand sha512_acc_csr__intr_count_incr_t_pulse_6173128e notif_cmd_done_intr_count_incr_r;

        function new(string name = "sha512_acc_csr__intr_block_t");
            super.new(name);
        endfunction : new

        virtual function void build();
            this.default_map = create_map("reg_map", 0, 4, UVM_NO_ENDIAN);
            this.global_intr_en_r = new("global_intr_en_r");
            this.global_intr_en_r.configure(this);

            this.global_intr_en_r.build();
            this.default_map.add_reg(this.global_intr_en_r, 'h0);
            this.error_intr_en_r = new("error_intr_en_r");
            this.error_intr_en_r.configure(this);

            this.error_intr_en_r.build();
            this.default_map.add_reg(this.error_intr_en_r, 'h4);
            this.notif_intr_en_r = new("notif_intr_en_r");
            this.notif_intr_en_r.configure(this);

            this.notif_intr_en_r.build();
            this.default_map.add_reg(this.notif_intr_en_r, 'h8);
            this.error_global_intr_r = new("error_global_intr_r");
            this.error_global_intr_r.configure(this);

            this.error_global_intr_r.build();
            this.default_map.add_reg(this.error_global_intr_r, 'hc);
            this.notif_global_intr_r = new("notif_global_intr_r");
            this.notif_global_intr_r.configure(this);

            this.notif_global_intr_r.build();
            this.default_map.add_reg(this.notif_global_intr_r, 'h10);
            this.error_internal_intr_r = new("error_internal_intr_r");
            this.error_internal_intr_r.configure(this);

            this.error_internal_intr_r.build();
            this.default_map.add_reg(this.error_internal_intr_r, 'h14);
            this.notif_internal_intr_r = new("notif_internal_intr_r");
            this.notif_internal_intr_r.configure(this);

            this.notif_internal_intr_r.build();
            this.default_map.add_reg(this.notif_internal_intr_r, 'h18);
            this.error_intr_trig_r = new("error_intr_trig_r");
            this.error_intr_trig_r.configure(this);

            this.error_intr_trig_r.build();
            this.default_map.add_reg(this.error_intr_trig_r, 'h1c);
            this.notif_intr_trig_r = new("notif_intr_trig_r");
            this.notif_intr_trig_r.configure(this);

            this.notif_intr_trig_r.build();
            this.default_map.add_reg(this.notif_intr_trig_r, 'h20);
            this.error0_intr_count_r = new("error0_intr_count_r");
            this.error0_intr_count_r.configure(this);

            this.error0_intr_count_r.build();
            this.default_map.add_reg(this.error0_intr_count_r, 'h100);
            this.error1_intr_count_r = new("error1_intr_count_r");
            this.error1_intr_count_r.configure(this);

            this.error1_intr_count_r.build();
            this.default_map.add_reg(this.error1_intr_count_r, 'h104);
            this.error2_intr_count_r = new("error2_intr_count_r");
            this.error2_intr_count_r.configure(this);

            this.error2_intr_count_r.build();
            this.default_map.add_reg(this.error2_intr_count_r, 'h108);
            this.error3_intr_count_r = new("error3_intr_count_r");
            this.error3_intr_count_r.configure(this);

            this.error3_intr_count_r.build();
            this.default_map.add_reg(this.error3_intr_count_r, 'h10c);
            this.notif_cmd_done_intr_count_r = new("notif_cmd_done_intr_count_r");
            this.notif_cmd_done_intr_count_r.configure(this);

            this.notif_cmd_done_intr_count_r.build();
            this.default_map.add_reg(this.notif_cmd_done_intr_count_r, 'h180);
            this.error0_intr_count_incr_r = new("error0_intr_count_incr_r");
            this.error0_intr_count_incr_r.configure(this);

            this.error0_intr_count_incr_r.build();
            this.default_map.add_reg(this.error0_intr_count_incr_r, 'h200);
            this.error1_intr_count_incr_r = new("error1_intr_count_incr_r");
            this.error1_intr_count_incr_r.configure(this);

            this.error1_intr_count_incr_r.build();
            this.default_map.add_reg(this.error1_intr_count_incr_r, 'h204);
            this.error2_intr_count_incr_r = new("error2_intr_count_incr_r");
            this.error2_intr_count_incr_r.configure(this);

            this.error2_intr_count_incr_r.build();
            this.default_map.add_reg(this.error2_intr_count_incr_r, 'h208);
            this.error3_intr_count_incr_r = new("error3_intr_count_incr_r");
            this.error3_intr_count_incr_r.configure(this);

            this.error3_intr_count_incr_r.build();
            this.default_map.add_reg(this.error3_intr_count_incr_r, 'h20c);
            this.notif_cmd_done_intr_count_incr_r = new("notif_cmd_done_intr_count_incr_r");
            this.notif_cmd_done_intr_count_incr_r.configure(this);

            this.notif_cmd_done_intr_count_incr_r.build();
            this.default_map.add_reg(this.notif_cmd_done_intr_count_incr_r, 'h210);
        endfunction : build
    endclass : sha512_acc_csr__intr_block_t

    // Addrmap - sha512_acc_csr
    class sha512_acc_csr extends uvm_reg_block;
        rand sha512_acc_csr__LOCK LOCK;
        rand sha512_acc_csr__USER USER;
        rand sha512_acc_csr__MODE MODE;
        rand sha512_acc_csr__START_ADDRESS START_ADDRESS;
        rand sha512_acc_csr__DLEN DLEN;
        rand sha512_acc_csr__DATAIN DATAIN;
        rand sha512_acc_csr__EXECUTE EXECUTE;
        rand sha512_acc_csr__STATUS STATUS;
        rand sha512_acc_csr__DIGEST DIGEST[16];
        rand sha512_acc_csr__CONTROL CONTROL;
        rand sha512_acc_csr__intr_block_t intr_block_rf;

        function new(string name = "sha512_acc_csr");
            super.new(name);
        endfunction : new

        virtual function void build();
            this.default_map = create_map("reg_map", 0, 4, UVM_NO_ENDIAN);
            this.LOCK = new("LOCK");
            this.LOCK.configure(this);

            this.LOCK.build();
            this.default_map.add_reg(this.LOCK, 'h0);
            this.USER = new("USER");
            this.USER.configure(this);

            this.USER.build();
            this.default_map.add_reg(this.USER, 'h4);
            this.MODE = new("MODE");
            this.MODE.configure(this);

            this.MODE.build();
            this.default_map.add_reg(this.MODE, 'h8);
            this.START_ADDRESS = new("START_ADDRESS");
            this.START_ADDRESS.configure(this);

            this.START_ADDRESS.build();
            this.default_map.add_reg(this.START_ADDRESS, 'hc);
            this.DLEN = new("DLEN");
            this.DLEN.configure(this);

            this.DLEN.build();
            this.default_map.add_reg(this.DLEN, 'h10);
            this.DATAIN = new("DATAIN");
            this.DATAIN.configure(this);

            this.DATAIN.build();
            this.default_map.add_reg(this.DATAIN, 'h14);
            this.EXECUTE = new("EXECUTE");
            this.EXECUTE.configure(this);

            this.EXECUTE.build();
            this.default_map.add_reg(this.EXECUTE, 'h18);
            this.STATUS = new("STATUS");
            this.STATUS.configure(this);

            this.STATUS.build();
            this.default_map.add_reg(this.STATUS, 'h1c);
            foreach(this.DIGEST[i0]) begin
                this.DIGEST[i0] = new($sformatf("DIGEST[%0d]", i0));
                this.DIGEST[i0].configure(this);
                
                this.DIGEST[i0].build();
                this.default_map.add_reg(this.DIGEST[i0], 'h20 + i0*'h4);
            end
            this.CONTROL = new("CONTROL");
            this.CONTROL.configure(this);

            this.CONTROL.build();
            this.default_map.add_reg(this.CONTROL, 'h60);
            this.intr_block_rf = new("intr_block_rf");
            this.intr_block_rf.configure(this);
            this.intr_block_rf.build();
            this.default_map.add_submap(this.intr_block_rf.default_map, 'h800);
        endfunction : build
    endclass : sha512_acc_csr

endpackage: sha512_acc_csr_uvm
