// Generated by PeakRDL-regblock - A free and open-source SystemVerilog generator
//  https://github.com/SystemRDL/PeakRDL-regblock

module soc_ifc_reg (
        input wire clk,
        input wire rst,

        input wire s_cpuif_req,
        input wire s_cpuif_req_is_wr,
        input wire [11:0] s_cpuif_addr,
        input wire [31:0] s_cpuif_wr_data,
        input wire [31:0] s_cpuif_wr_biten,
        output wire s_cpuif_req_stall_wr,
        output wire s_cpuif_req_stall_rd,
        output wire s_cpuif_rd_ack,
        output wire s_cpuif_rd_err,
        output wire [31:0] s_cpuif_rd_data,
        output wire s_cpuif_wr_ack,
        output wire s_cpuif_wr_err,

        input soc_ifc_reg_pkg::soc_ifc_reg__in_t hwif_in,
        output soc_ifc_reg_pkg::soc_ifc_reg__out_t hwif_out
    );

    //--------------------------------------------------------------------------
    // CPU Bus interface logic
    //--------------------------------------------------------------------------
    logic cpuif_req;
    logic cpuif_req_is_wr;
    logic [11:0] cpuif_addr;
    logic [31:0] cpuif_wr_data;
    logic [31:0] cpuif_wr_biten;
    logic cpuif_req_stall_wr;
    logic cpuif_req_stall_rd;

    logic cpuif_rd_ack;
    logic cpuif_rd_err;
    logic [31:0] cpuif_rd_data;

    logic cpuif_wr_ack;
    logic cpuif_wr_err;

    assign cpuif_req = s_cpuif_req;
    assign cpuif_req_is_wr = s_cpuif_req_is_wr;
    assign cpuif_addr = s_cpuif_addr;
    assign cpuif_wr_data = s_cpuif_wr_data;
    assign cpuif_wr_biten = s_cpuif_wr_biten;
    assign s_cpuif_req_stall_wr = cpuif_req_stall_wr;
    assign s_cpuif_req_stall_rd = cpuif_req_stall_rd;
    assign s_cpuif_rd_ack = cpuif_rd_ack;
    assign s_cpuif_rd_err = cpuif_rd_err;
    assign s_cpuif_rd_data = cpuif_rd_data;
    assign s_cpuif_wr_ack = cpuif_wr_ack;
    assign s_cpuif_wr_err = cpuif_wr_err;

    logic cpuif_req_masked;

    // Read & write latencies are balanced. Stalls not required
    assign cpuif_req_stall_rd = '0;
    assign cpuif_req_stall_wr = '0;
    assign cpuif_req_masked = cpuif_req
                            & !(!cpuif_req_is_wr & cpuif_req_stall_rd)
                            & !(cpuif_req_is_wr & cpuif_req_stall_wr);

    //--------------------------------------------------------------------------
    // Address Decode
    //--------------------------------------------------------------------------
    typedef struct packed{
        logic CPTRA_HW_ERROR_FATAL;
        logic CPTRA_HW_ERROR_NON_FATAL;
        logic CPTRA_FW_ERROR_FATAL;
        logic CPTRA_FW_ERROR_NON_FATAL;
        logic CPTRA_HW_ERROR_ENC;
        logic CPTRA_FW_ERROR_ENC;
        logic [8-1:0]CPTRA_FW_EXTENDED_ERROR_INFO;
        logic CPTRA_BOOT_STATUS;
        logic CPTRA_FLOW_STATUS;
        logic CPTRA_RESET_REASON;
        logic CPTRA_SECURITY_STATE;
        logic [5-1:0]CPTRA_MBOX_VALID_AXI_USER;
        logic [5-1:0]CPTRA_MBOX_AXI_USER_LOCK;
        logic CPTRA_TRNG_VALID_AXI_USER;
        logic CPTRA_TRNG_AXI_USER_LOCK;
        logic [12-1:0]CPTRA_TRNG_DATA;
        logic CPTRA_TRNG_CTRL;
        logic CPTRA_TRNG_STATUS;
        logic CPTRA_FUSE_WR_DONE;
        logic CPTRA_TIMER_CONFIG;
        logic CPTRA_BOOTFSM_GO;
        logic CPTRA_DBG_MANUF_SERVICE_REG;
        logic CPTRA_CLK_GATING_EN;
        logic [2-1:0]CPTRA_GENERIC_INPUT_WIRES;
        logic [2-1:0]CPTRA_GENERIC_OUTPUT_WIRES;
        logic CPTRA_HW_REV_ID;
        logic [2-1:0]CPTRA_FW_REV_ID;
        logic CPTRA_HW_CONFIG;
        logic CPTRA_WDT_TIMER1_EN;
        logic CPTRA_WDT_TIMER1_CTRL;
        logic [2-1:0]CPTRA_WDT_TIMER1_TIMEOUT_PERIOD;
        logic CPTRA_WDT_TIMER2_EN;
        logic CPTRA_WDT_TIMER2_CTRL;
        logic [2-1:0]CPTRA_WDT_TIMER2_TIMEOUT_PERIOD;
        logic CPTRA_WDT_STATUS;
        logic CPTRA_FUSE_VALID_AXI_USER;
        logic CPTRA_FUSE_AXI_USER_LOCK;
        logic [2-1:0]CPTRA_WDT_CFG;
        logic CPTRA_iTRNG_ENTROPY_CONFIG_0;
        logic CPTRA_iTRNG_ENTROPY_CONFIG_1;
        logic [2-1:0]CPTRA_RSVD_REG;
        logic CPTRA_HW_CAPABILITIES;
        logic CPTRA_FW_CAPABILITIES;
        logic CPTRA_CAP_LOCK;
        logic [12-1:0]CPTRA_OWNER_PK_HASH;
        logic CPTRA_OWNER_PK_HASH_LOCK;
        logic [16-1:0]fuse_uds_seed;
        logic [8-1:0]fuse_field_entropy;
        logic [12-1:0]fuse_key_manifest_pk_hash;
        logic fuse_key_manifest_pk_hash_mask;
        logic fuse_fmc_key_manifest_svn;
        logic [4-1:0]fuse_runtime_svn;
        logic fuse_anti_rollback_disable;
        logic [24-1:0]fuse_idevid_cert_attr;
        logic [4-1:0]fuse_idevid_manuf_hsm_id;
        logic fuse_lms_revocation;
        logic fuse_mldsa_revocation;
        logic fuse_soc_stepping_id;
        logic [4-1:0]fuse_manuf_dbg_unlock_token;
        logic SS_CALIPTRA_BASE_ADDR_L;
        logic SS_CALIPTRA_BASE_ADDR_H;
        logic SS_MCI_BASE_ADDR_L;
        logic SS_MCI_BASE_ADDR_H;
        logic SS_RECOVERY_IFC_BASE_ADDR_L;
        logic SS_RECOVERY_IFC_BASE_ADDR_H;
        logic SS_OTP_FC_BASE_ADDR_L;
        logic SS_OTP_FC_BASE_ADDR_H;
        logic SS_UDS_SEED_BASE_ADDR_L;
        logic SS_UDS_SEED_BASE_ADDR_H;
        logic SS_PROD_DEBUG_UNLOCK_AUTH_PK_HASH_REG_BANK_OFFSET;
        logic SS_NUM_OF_PROD_DEBUG_UNLOCK_AUTH_PK_HASHES;
        logic SS_DEBUG_INTENT;
        logic [4-1:0]SS_STRAP_GENERIC;
        logic SS_DBG_MANUF_SERVICE_REG_REQ;
        logic SS_DBG_MANUF_SERVICE_REG_RSP;
        logic [2-1:0]SS_SOC_DBG_UNLOCK_LEVEL;
        logic [4-1:0]SS_GENERIC_FW_EXEC_CTRL;
        logic [8-1:0]internal_obf_key;
        logic internal_iccm_lock;
        logic internal_fw_update_reset;
        logic internal_fw_update_reset_wait_cycles;
        logic internal_nmi_vector;
        logic internal_hw_error_fatal_mask;
        logic internal_hw_error_non_fatal_mask;
        logic internal_fw_error_fatal_mask;
        logic internal_fw_error_non_fatal_mask;
        logic internal_rv_mtime_l;
        logic internal_rv_mtime_h;
        logic internal_rv_mtimecmp_l;
        logic internal_rv_mtimecmp_h;
        struct packed{
            logic global_intr_en_r;
            logic error_intr_en_r;
            logic notif_intr_en_r;
            logic error_global_intr_r;
            logic notif_global_intr_r;
            logic error_internal_intr_r;
            logic notif_internal_intr_r;
            logic error_intr_trig_r;
            logic notif_intr_trig_r;
            logic error_internal_intr_count_r;
            logic error_inv_dev_intr_count_r;
            logic error_cmd_fail_intr_count_r;
            logic error_bad_fuse_intr_count_r;
            logic error_iccm_blocked_intr_count_r;
            logic error_mbox_ecc_unc_intr_count_r;
            logic error_wdt_timer1_timeout_intr_count_r;
            logic error_wdt_timer2_timeout_intr_count_r;
            logic notif_cmd_avail_intr_count_r;
            logic notif_mbox_ecc_cor_intr_count_r;
            logic notif_debug_locked_intr_count_r;
            logic notif_scan_mode_intr_count_r;
            logic notif_soc_req_lock_intr_count_r;
            logic notif_gen_in_toggle_intr_count_r;
            logic error_internal_intr_count_incr_r;
            logic error_inv_dev_intr_count_incr_r;
            logic error_cmd_fail_intr_count_incr_r;
            logic error_bad_fuse_intr_count_incr_r;
            logic error_iccm_blocked_intr_count_incr_r;
            logic error_mbox_ecc_unc_intr_count_incr_r;
            logic error_wdt_timer1_timeout_intr_count_incr_r;
            logic error_wdt_timer2_timeout_intr_count_incr_r;
            logic notif_cmd_avail_intr_count_incr_r;
            logic notif_mbox_ecc_cor_intr_count_incr_r;
            logic notif_debug_locked_intr_count_incr_r;
            logic notif_scan_mode_intr_count_incr_r;
            logic notif_soc_req_lock_intr_count_incr_r;
            logic notif_gen_in_toggle_intr_count_incr_r;
        } intr_block_rf;
    } decoded_reg_strb_t;
    decoded_reg_strb_t decoded_reg_strb;
    logic decoded_req;
    logic decoded_req_is_wr;
    logic [31:0] decoded_wr_data;
    logic [31:0] decoded_wr_biten;

    always_comb begin
        decoded_reg_strb.CPTRA_HW_ERROR_FATAL = cpuif_req_masked & (cpuif_addr == 12'h0);
        decoded_reg_strb.CPTRA_HW_ERROR_NON_FATAL = cpuif_req_masked & (cpuif_addr == 12'h4);
        decoded_reg_strb.CPTRA_FW_ERROR_FATAL = cpuif_req_masked & (cpuif_addr == 12'h8);
        decoded_reg_strb.CPTRA_FW_ERROR_NON_FATAL = cpuif_req_masked & (cpuif_addr == 12'hc);
        decoded_reg_strb.CPTRA_HW_ERROR_ENC = cpuif_req_masked & (cpuif_addr == 12'h10);
        decoded_reg_strb.CPTRA_FW_ERROR_ENC = cpuif_req_masked & (cpuif_addr == 12'h14);
        for(int i0=0; i0<8; i0++) begin
            decoded_reg_strb.CPTRA_FW_EXTENDED_ERROR_INFO[i0] = cpuif_req_masked & (cpuif_addr == 12'h18 + i0*12'h4);
        end
        decoded_reg_strb.CPTRA_BOOT_STATUS = cpuif_req_masked & (cpuif_addr == 12'h38);
        decoded_reg_strb.CPTRA_FLOW_STATUS = cpuif_req_masked & (cpuif_addr == 12'h3c);
        decoded_reg_strb.CPTRA_RESET_REASON = cpuif_req_masked & (cpuif_addr == 12'h40);
        decoded_reg_strb.CPTRA_SECURITY_STATE = cpuif_req_masked & (cpuif_addr == 12'h44);
        for(int i0=0; i0<5; i0++) begin
            decoded_reg_strb.CPTRA_MBOX_VALID_AXI_USER[i0] = cpuif_req_masked & (cpuif_addr == 12'h48 + i0*12'h4);
        end
        for(int i0=0; i0<5; i0++) begin
            decoded_reg_strb.CPTRA_MBOX_AXI_USER_LOCK[i0] = cpuif_req_masked & (cpuif_addr == 12'h5c + i0*12'h4);
        end
        decoded_reg_strb.CPTRA_TRNG_VALID_AXI_USER = cpuif_req_masked & (cpuif_addr == 12'h70);
        decoded_reg_strb.CPTRA_TRNG_AXI_USER_LOCK = cpuif_req_masked & (cpuif_addr == 12'h74);
        for(int i0=0; i0<12; i0++) begin
            decoded_reg_strb.CPTRA_TRNG_DATA[i0] = cpuif_req_masked & (cpuif_addr == 12'h78 + i0*12'h4);
        end
        decoded_reg_strb.CPTRA_TRNG_CTRL = cpuif_req_masked & (cpuif_addr == 12'ha8);
        decoded_reg_strb.CPTRA_TRNG_STATUS = cpuif_req_masked & (cpuif_addr == 12'hac);
        decoded_reg_strb.CPTRA_FUSE_WR_DONE = cpuif_req_masked & (cpuif_addr == 12'hb0);
        decoded_reg_strb.CPTRA_TIMER_CONFIG = cpuif_req_masked & (cpuif_addr == 12'hb4);
        decoded_reg_strb.CPTRA_BOOTFSM_GO = cpuif_req_masked & (cpuif_addr == 12'hb8);
        decoded_reg_strb.CPTRA_DBG_MANUF_SERVICE_REG = cpuif_req_masked & (cpuif_addr == 12'hbc);
        decoded_reg_strb.CPTRA_CLK_GATING_EN = cpuif_req_masked & (cpuif_addr == 12'hc0);
        for(int i0=0; i0<2; i0++) begin
            decoded_reg_strb.CPTRA_GENERIC_INPUT_WIRES[i0] = cpuif_req_masked & (cpuif_addr == 12'hc4 + i0*12'h4);
        end
        for(int i0=0; i0<2; i0++) begin
            decoded_reg_strb.CPTRA_GENERIC_OUTPUT_WIRES[i0] = cpuif_req_masked & (cpuif_addr == 12'hcc + i0*12'h4);
        end
        decoded_reg_strb.CPTRA_HW_REV_ID = cpuif_req_masked & (cpuif_addr == 12'hd4);
        for(int i0=0; i0<2; i0++) begin
            decoded_reg_strb.CPTRA_FW_REV_ID[i0] = cpuif_req_masked & (cpuif_addr == 12'hd8 + i0*12'h4);
        end
        decoded_reg_strb.CPTRA_HW_CONFIG = cpuif_req_masked & (cpuif_addr == 12'he0);
        decoded_reg_strb.CPTRA_WDT_TIMER1_EN = cpuif_req_masked & (cpuif_addr == 12'he4);
        decoded_reg_strb.CPTRA_WDT_TIMER1_CTRL = cpuif_req_masked & (cpuif_addr == 12'he8);
        for(int i0=0; i0<2; i0++) begin
            decoded_reg_strb.CPTRA_WDT_TIMER1_TIMEOUT_PERIOD[i0] = cpuif_req_masked & (cpuif_addr == 12'hec + i0*12'h4);
        end
        decoded_reg_strb.CPTRA_WDT_TIMER2_EN = cpuif_req_masked & (cpuif_addr == 12'hf4);
        decoded_reg_strb.CPTRA_WDT_TIMER2_CTRL = cpuif_req_masked & (cpuif_addr == 12'hf8);
        for(int i0=0; i0<2; i0++) begin
            decoded_reg_strb.CPTRA_WDT_TIMER2_TIMEOUT_PERIOD[i0] = cpuif_req_masked & (cpuif_addr == 12'hfc + i0*12'h4);
        end
        decoded_reg_strb.CPTRA_WDT_STATUS = cpuif_req_masked & (cpuif_addr == 12'h104);
        decoded_reg_strb.CPTRA_FUSE_VALID_AXI_USER = cpuif_req_masked & (cpuif_addr == 12'h108);
        decoded_reg_strb.CPTRA_FUSE_AXI_USER_LOCK = cpuif_req_masked & (cpuif_addr == 12'h10c);
        for(int i0=0; i0<2; i0++) begin
            decoded_reg_strb.CPTRA_WDT_CFG[i0] = cpuif_req_masked & (cpuif_addr == 12'h110 + i0*12'h4);
        end
        decoded_reg_strb.CPTRA_iTRNG_ENTROPY_CONFIG_0 = cpuif_req_masked & (cpuif_addr == 12'h118);
        decoded_reg_strb.CPTRA_iTRNG_ENTROPY_CONFIG_1 = cpuif_req_masked & (cpuif_addr == 12'h11c);
        for(int i0=0; i0<2; i0++) begin
            decoded_reg_strb.CPTRA_RSVD_REG[i0] = cpuif_req_masked & (cpuif_addr == 12'h120 + i0*12'h4);
        end
        decoded_reg_strb.CPTRA_HW_CAPABILITIES = cpuif_req_masked & (cpuif_addr == 12'h128);
        decoded_reg_strb.CPTRA_FW_CAPABILITIES = cpuif_req_masked & (cpuif_addr == 12'h12c);
        decoded_reg_strb.CPTRA_CAP_LOCK = cpuif_req_masked & (cpuif_addr == 12'h130);
        for(int i0=0; i0<12; i0++) begin
            decoded_reg_strb.CPTRA_OWNER_PK_HASH[i0] = cpuif_req_masked & (cpuif_addr == 12'h140 + i0*12'h4);
        end
        decoded_reg_strb.CPTRA_OWNER_PK_HASH_LOCK = cpuif_req_masked & (cpuif_addr == 12'h170);
        for(int i0=0; i0<16; i0++) begin
            decoded_reg_strb.fuse_uds_seed[i0] = cpuif_req_masked & (cpuif_addr == 12'h200 + i0*12'h4);
        end
        for(int i0=0; i0<8; i0++) begin
            decoded_reg_strb.fuse_field_entropy[i0] = cpuif_req_masked & (cpuif_addr == 12'h240 + i0*12'h4);
        end
        for(int i0=0; i0<12; i0++) begin
            decoded_reg_strb.fuse_key_manifest_pk_hash[i0] = cpuif_req_masked & (cpuif_addr == 12'h260 + i0*12'h4);
        end
        decoded_reg_strb.fuse_key_manifest_pk_hash_mask = cpuif_req_masked & (cpuif_addr == 12'h290);
        decoded_reg_strb.fuse_fmc_key_manifest_svn = cpuif_req_masked & (cpuif_addr == 12'h2b4);
        for(int i0=0; i0<4; i0++) begin
            decoded_reg_strb.fuse_runtime_svn[i0] = cpuif_req_masked & (cpuif_addr == 12'h2b8 + i0*12'h4);
        end
        decoded_reg_strb.fuse_anti_rollback_disable = cpuif_req_masked & (cpuif_addr == 12'h2c8);
        for(int i0=0; i0<24; i0++) begin
            decoded_reg_strb.fuse_idevid_cert_attr[i0] = cpuif_req_masked & (cpuif_addr == 12'h2cc + i0*12'h4);
        end
        for(int i0=0; i0<4; i0++) begin
            decoded_reg_strb.fuse_idevid_manuf_hsm_id[i0] = cpuif_req_masked & (cpuif_addr == 12'h32c + i0*12'h4);
        end
        decoded_reg_strb.fuse_lms_revocation = cpuif_req_masked & (cpuif_addr == 12'h340);
        decoded_reg_strb.fuse_mldsa_revocation = cpuif_req_masked & (cpuif_addr == 12'h344);
        decoded_reg_strb.fuse_soc_stepping_id = cpuif_req_masked & (cpuif_addr == 12'h348);
        for(int i0=0; i0<4; i0++) begin
            decoded_reg_strb.fuse_manuf_dbg_unlock_token[i0] = cpuif_req_masked & (cpuif_addr == 12'h34c + i0*12'h4);
        end
        decoded_reg_strb.SS_CALIPTRA_BASE_ADDR_L = cpuif_req_masked & (cpuif_addr == 12'h500);
        decoded_reg_strb.SS_CALIPTRA_BASE_ADDR_H = cpuif_req_masked & (cpuif_addr == 12'h504);
        decoded_reg_strb.SS_MCI_BASE_ADDR_L = cpuif_req_masked & (cpuif_addr == 12'h508);
        decoded_reg_strb.SS_MCI_BASE_ADDR_H = cpuif_req_masked & (cpuif_addr == 12'h50c);
        decoded_reg_strb.SS_RECOVERY_IFC_BASE_ADDR_L = cpuif_req_masked & (cpuif_addr == 12'h510);
        decoded_reg_strb.SS_RECOVERY_IFC_BASE_ADDR_H = cpuif_req_masked & (cpuif_addr == 12'h514);
        decoded_reg_strb.SS_OTP_FC_BASE_ADDR_L = cpuif_req_masked & (cpuif_addr == 12'h518);
        decoded_reg_strb.SS_OTP_FC_BASE_ADDR_H = cpuif_req_masked & (cpuif_addr == 12'h51c);
        decoded_reg_strb.SS_UDS_SEED_BASE_ADDR_L = cpuif_req_masked & (cpuif_addr == 12'h520);
        decoded_reg_strb.SS_UDS_SEED_BASE_ADDR_H = cpuif_req_masked & (cpuif_addr == 12'h524);
        decoded_reg_strb.SS_PROD_DEBUG_UNLOCK_AUTH_PK_HASH_REG_BANK_OFFSET = cpuif_req_masked & (cpuif_addr == 12'h528);
        decoded_reg_strb.SS_NUM_OF_PROD_DEBUG_UNLOCK_AUTH_PK_HASHES = cpuif_req_masked & (cpuif_addr == 12'h52c);
        decoded_reg_strb.SS_DEBUG_INTENT = cpuif_req_masked & (cpuif_addr == 12'h530);
        for(int i0=0; i0<4; i0++) begin
            decoded_reg_strb.SS_STRAP_GENERIC[i0] = cpuif_req_masked & (cpuif_addr == 12'h5a0 + i0*12'h4);
        end
        decoded_reg_strb.SS_DBG_MANUF_SERVICE_REG_REQ = cpuif_req_masked & (cpuif_addr == 12'h5c0);
        decoded_reg_strb.SS_DBG_MANUF_SERVICE_REG_RSP = cpuif_req_masked & (cpuif_addr == 12'h5c4);
        for(int i0=0; i0<2; i0++) begin
            decoded_reg_strb.SS_SOC_DBG_UNLOCK_LEVEL[i0] = cpuif_req_masked & (cpuif_addr == 12'h5c8 + i0*12'h4);
        end
        for(int i0=0; i0<4; i0++) begin
            decoded_reg_strb.SS_GENERIC_FW_EXEC_CTRL[i0] = cpuif_req_masked & (cpuif_addr == 12'h5d0 + i0*12'h4);
        end
        for(int i0=0; i0<8; i0++) begin
            decoded_reg_strb.internal_obf_key[i0] = cpuif_req_masked & (cpuif_addr == 12'h600 + i0*12'h4);
        end
        decoded_reg_strb.internal_iccm_lock = cpuif_req_masked & (cpuif_addr == 12'h620);
        decoded_reg_strb.internal_fw_update_reset = cpuif_req_masked & (cpuif_addr == 12'h624);
        decoded_reg_strb.internal_fw_update_reset_wait_cycles = cpuif_req_masked & (cpuif_addr == 12'h628);
        decoded_reg_strb.internal_nmi_vector = cpuif_req_masked & (cpuif_addr == 12'h62c);
        decoded_reg_strb.internal_hw_error_fatal_mask = cpuif_req_masked & (cpuif_addr == 12'h630);
        decoded_reg_strb.internal_hw_error_non_fatal_mask = cpuif_req_masked & (cpuif_addr == 12'h634);
        decoded_reg_strb.internal_fw_error_fatal_mask = cpuif_req_masked & (cpuif_addr == 12'h638);
        decoded_reg_strb.internal_fw_error_non_fatal_mask = cpuif_req_masked & (cpuif_addr == 12'h63c);
        decoded_reg_strb.internal_rv_mtime_l = cpuif_req_masked & (cpuif_addr == 12'h640);
        decoded_reg_strb.internal_rv_mtime_h = cpuif_req_masked & (cpuif_addr == 12'h644);
        decoded_reg_strb.internal_rv_mtimecmp_l = cpuif_req_masked & (cpuif_addr == 12'h648);
        decoded_reg_strb.internal_rv_mtimecmp_h = cpuif_req_masked & (cpuif_addr == 12'h64c);
        decoded_reg_strb.intr_block_rf.global_intr_en_r = cpuif_req_masked & (cpuif_addr == 12'h800);
        decoded_reg_strb.intr_block_rf.error_intr_en_r = cpuif_req_masked & (cpuif_addr == 12'h804);
        decoded_reg_strb.intr_block_rf.notif_intr_en_r = cpuif_req_masked & (cpuif_addr == 12'h808);
        decoded_reg_strb.intr_block_rf.error_global_intr_r = cpuif_req_masked & (cpuif_addr == 12'h80c);
        decoded_reg_strb.intr_block_rf.notif_global_intr_r = cpuif_req_masked & (cpuif_addr == 12'h810);
        decoded_reg_strb.intr_block_rf.error_internal_intr_r = cpuif_req_masked & (cpuif_addr == 12'h814);
        decoded_reg_strb.intr_block_rf.notif_internal_intr_r = cpuif_req_masked & (cpuif_addr == 12'h818);
        decoded_reg_strb.intr_block_rf.error_intr_trig_r = cpuif_req_masked & (cpuif_addr == 12'h81c);
        decoded_reg_strb.intr_block_rf.notif_intr_trig_r = cpuif_req_masked & (cpuif_addr == 12'h820);
        decoded_reg_strb.intr_block_rf.error_internal_intr_count_r = cpuif_req_masked & (cpuif_addr == 12'h900);
        decoded_reg_strb.intr_block_rf.error_inv_dev_intr_count_r = cpuif_req_masked & (cpuif_addr == 12'h904);
        decoded_reg_strb.intr_block_rf.error_cmd_fail_intr_count_r = cpuif_req_masked & (cpuif_addr == 12'h908);
        decoded_reg_strb.intr_block_rf.error_bad_fuse_intr_count_r = cpuif_req_masked & (cpuif_addr == 12'h90c);
        decoded_reg_strb.intr_block_rf.error_iccm_blocked_intr_count_r = cpuif_req_masked & (cpuif_addr == 12'h910);
        decoded_reg_strb.intr_block_rf.error_mbox_ecc_unc_intr_count_r = cpuif_req_masked & (cpuif_addr == 12'h914);
        decoded_reg_strb.intr_block_rf.error_wdt_timer1_timeout_intr_count_r = cpuif_req_masked & (cpuif_addr == 12'h918);
        decoded_reg_strb.intr_block_rf.error_wdt_timer2_timeout_intr_count_r = cpuif_req_masked & (cpuif_addr == 12'h91c);
        decoded_reg_strb.intr_block_rf.notif_cmd_avail_intr_count_r = cpuif_req_masked & (cpuif_addr == 12'h980);
        decoded_reg_strb.intr_block_rf.notif_mbox_ecc_cor_intr_count_r = cpuif_req_masked & (cpuif_addr == 12'h984);
        decoded_reg_strb.intr_block_rf.notif_debug_locked_intr_count_r = cpuif_req_masked & (cpuif_addr == 12'h988);
        decoded_reg_strb.intr_block_rf.notif_scan_mode_intr_count_r = cpuif_req_masked & (cpuif_addr == 12'h98c);
        decoded_reg_strb.intr_block_rf.notif_soc_req_lock_intr_count_r = cpuif_req_masked & (cpuif_addr == 12'h990);
        decoded_reg_strb.intr_block_rf.notif_gen_in_toggle_intr_count_r = cpuif_req_masked & (cpuif_addr == 12'h994);
        decoded_reg_strb.intr_block_rf.error_internal_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 12'ha00);
        decoded_reg_strb.intr_block_rf.error_inv_dev_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 12'ha04);
        decoded_reg_strb.intr_block_rf.error_cmd_fail_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 12'ha08);
        decoded_reg_strb.intr_block_rf.error_bad_fuse_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 12'ha0c);
        decoded_reg_strb.intr_block_rf.error_iccm_blocked_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 12'ha10);
        decoded_reg_strb.intr_block_rf.error_mbox_ecc_unc_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 12'ha14);
        decoded_reg_strb.intr_block_rf.error_wdt_timer1_timeout_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 12'ha18);
        decoded_reg_strb.intr_block_rf.error_wdt_timer2_timeout_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 12'ha1c);
        decoded_reg_strb.intr_block_rf.notif_cmd_avail_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 12'ha20);
        decoded_reg_strb.intr_block_rf.notif_mbox_ecc_cor_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 12'ha24);
        decoded_reg_strb.intr_block_rf.notif_debug_locked_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 12'ha28);
        decoded_reg_strb.intr_block_rf.notif_scan_mode_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 12'ha2c);
        decoded_reg_strb.intr_block_rf.notif_soc_req_lock_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 12'ha30);
        decoded_reg_strb.intr_block_rf.notif_gen_in_toggle_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 12'ha34);
    end

    // Pass down signals to next stage
    assign decoded_req = cpuif_req_masked;
    assign decoded_req_is_wr = cpuif_req_is_wr;
    assign decoded_wr_data = cpuif_wr_data;
    assign decoded_wr_biten = cpuif_wr_biten;

    //--------------------------------------------------------------------------
    // Field logic
    //--------------------------------------------------------------------------
    typedef struct packed{
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } iccm_ecc_unc;
            struct packed{
                logic next;
                logic load_next;
            } dccm_ecc_unc;
            struct packed{
                logic next;
                logic load_next;
            } nmi_pin;
            struct packed{
                logic next;
                logic load_next;
            } crypto_err;
        } CPTRA_HW_ERROR_FATAL;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } mbox_prot_no_lock;
            struct packed{
                logic next;
                logic load_next;
            } mbox_prot_ooo;
            struct packed{
                logic next;
                logic load_next;
            } mbox_ecc_unc;
        } CPTRA_HW_ERROR_NON_FATAL;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } error_code;
        } CPTRA_FW_ERROR_FATAL;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } error_code;
        } CPTRA_FW_ERROR_NON_FATAL;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } error_code;
        } CPTRA_HW_ERROR_ENC;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } error_code;
        } CPTRA_FW_ERROR_ENC;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } error_info;
        } [8-1:0]CPTRA_FW_EXTENDED_ERROR_INFO;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } status;
        } CPTRA_BOOT_STATUS;
        struct packed{
            struct packed{
                logic [23:0] next;
                logic load_next;
            } status;
            struct packed{
                logic next;
                logic load_next;
            } idevid_csr_ready;
            struct packed{
                logic next;
                logic load_next;
            } ready_for_mb_processing;
            struct packed{
                logic next;
                logic load_next;
            } ready_for_runtime;
            struct packed{
                logic next;
                logic load_next;
            } mailbox_flow_done;
        } CPTRA_FLOW_STATUS;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } FW_UPD_RESET;
            struct packed{
                logic next;
                logic load_next;
            } WARM_RESET;
        } CPTRA_RESET_REASON;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } AXI_USER;
        } [5-1:0]CPTRA_MBOX_VALID_AXI_USER;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } LOCK;
        } [5-1:0]CPTRA_MBOX_AXI_USER_LOCK;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } AXI_USER;
        } CPTRA_TRNG_VALID_AXI_USER;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } LOCK;
        } CPTRA_TRNG_AXI_USER_LOCK;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } DATA;
        } [12-1:0]CPTRA_TRNG_DATA;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } clear;
        } CPTRA_TRNG_CTRL;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } DATA_REQ;
            struct packed{
                logic next;
                logic load_next;
            } DATA_WR_DONE;
        } CPTRA_TRNG_STATUS;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } done;
        } CPTRA_FUSE_WR_DONE;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } clk_period;
        } CPTRA_TIMER_CONFIG;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } GO;
        } CPTRA_BOOTFSM_GO;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } DATA;
        } CPTRA_DBG_MANUF_SERVICE_REG;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } clk_gating_en;
        } CPTRA_CLK_GATING_EN;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } generic_wires;
        } [2-1:0]CPTRA_GENERIC_INPUT_WIRES;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } generic_wires;
        } [2-1:0]CPTRA_GENERIC_OUTPUT_WIRES;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } REV_ID;
        } [2-1:0]CPTRA_FW_REV_ID;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } timer1_en;
        } CPTRA_WDT_TIMER1_EN;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } timer1_restart;
        } CPTRA_WDT_TIMER1_CTRL;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } timer1_timeout_period;
        } [2-1:0]CPTRA_WDT_TIMER1_TIMEOUT_PERIOD;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } timer2_en;
        } CPTRA_WDT_TIMER2_EN;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } timer2_restart;
        } CPTRA_WDT_TIMER2_CTRL;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } timer2_timeout_period;
        } [2-1:0]CPTRA_WDT_TIMER2_TIMEOUT_PERIOD;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } t1_timeout;
            struct packed{
                logic next;
                logic load_next;
            } t2_timeout;
        } CPTRA_WDT_STATUS;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } AXI_USER;
        } CPTRA_FUSE_VALID_AXI_USER;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } LOCK;
        } CPTRA_FUSE_AXI_USER_LOCK;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } TIMEOUT;
        } [2-1:0]CPTRA_WDT_CFG;
        struct packed{
            struct packed{
                logic [15:0] next;
                logic load_next;
            } low_threshold;
            struct packed{
                logic [15:0] next;
                logic load_next;
            } high_threshold;
        } CPTRA_iTRNG_ENTROPY_CONFIG_0;
        struct packed{
            struct packed{
                logic [15:0] next;
                logic load_next;
            } repetition_count;
            struct packed{
                logic [15:0] next;
                logic load_next;
            } RSVD;
        } CPTRA_iTRNG_ENTROPY_CONFIG_1;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } RSVD;
        } [2-1:0]CPTRA_RSVD_REG;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } cap;
        } CPTRA_HW_CAPABILITIES;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } cap;
        } CPTRA_FW_CAPABILITIES;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } lock;
        } CPTRA_CAP_LOCK;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } hash;
        } [12-1:0]CPTRA_OWNER_PK_HASH;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } lock;
        } CPTRA_OWNER_PK_HASH_LOCK;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } seed;
        } [16-1:0]fuse_uds_seed;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } seed;
        } [8-1:0]fuse_field_entropy;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } hash;
        } [12-1:0]fuse_key_manifest_pk_hash;
        struct packed{
            struct packed{
                logic [3:0] next;
                logic load_next;
            } mask;
        } fuse_key_manifest_pk_hash_mask;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } svn;
        } fuse_fmc_key_manifest_svn;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } svn;
        } [4-1:0]fuse_runtime_svn;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } dis;
        } fuse_anti_rollback_disable;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } cert;
        } [24-1:0]fuse_idevid_cert_attr;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } hsm_id;
        } [4-1:0]fuse_idevid_manuf_hsm_id;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } lms_revocation;
        } fuse_lms_revocation;
        struct packed{
            struct packed{
                logic [3:0] next;
                logic load_next;
            } mldsa_revocation;
        } fuse_mldsa_revocation;
        struct packed{
            struct packed{
                logic [15:0] next;
                logic load_next;
            } soc_stepping_id;
        } fuse_soc_stepping_id;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } token;
        } [4-1:0]fuse_manuf_dbg_unlock_token;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } addr_l;
        } SS_CALIPTRA_BASE_ADDR_L;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } addr_h;
        } SS_CALIPTRA_BASE_ADDR_H;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } addr_l;
        } SS_MCI_BASE_ADDR_L;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } addr_h;
        } SS_MCI_BASE_ADDR_H;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } addr_l;
        } SS_RECOVERY_IFC_BASE_ADDR_L;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } addr_h;
        } SS_RECOVERY_IFC_BASE_ADDR_H;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } addr_l;
        } SS_OTP_FC_BASE_ADDR_L;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } addr_h;
        } SS_OTP_FC_BASE_ADDR_H;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } addr_l;
        } SS_UDS_SEED_BASE_ADDR_L;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } addr_h;
        } SS_UDS_SEED_BASE_ADDR_H;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } offset;
        } SS_PROD_DEBUG_UNLOCK_AUTH_PK_HASH_REG_BANK_OFFSET;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } num;
        } SS_NUM_OF_PROD_DEBUG_UNLOCK_AUTH_PK_HASHES;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } debug_intent;
        } SS_DEBUG_INTENT;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } data;
        } [4-1:0]SS_STRAP_GENERIC;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } MANUF_DBG_UNLOCK_REQ;
            struct packed{
                logic next;
                logic load_next;
            } PROD_DBG_UNLOCK_REQ;
            struct packed{
                logic next;
                logic load_next;
            } UDS_PROGRAM_REQ;
        } SS_DBG_MANUF_SERVICE_REG_REQ;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } MANUF_DBG_UNLOCK_SUCCESS;
            struct packed{
                logic next;
                logic load_next;
            } MANUF_DBG_UNLOCK_FAIL;
            struct packed{
                logic next;
                logic load_next;
            } MANUF_DBG_UNLOCK_IN_PROGRESS;
            struct packed{
                logic next;
                logic load_next;
            } PROD_DBG_UNLOCK_SUCCESS;
            struct packed{
                logic next;
                logic load_next;
            } PROD_DBG_UNLOCK_FAIL;
            struct packed{
                logic next;
                logic load_next;
            } PROD_DBG_UNLOCK_IN_PROGRESS;
            struct packed{
                logic next;
                logic load_next;
            } UDS_PROGRAM_SUCCESS;
            struct packed{
                logic next;
                logic load_next;
            } UDS_PROGRAM_FAIL;
            struct packed{
                logic next;
                logic load_next;
            } UDS_PROGRAM_IN_PROGRESS;
        } SS_DBG_MANUF_SERVICE_REG_RSP;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } LEVEL;
        } [2-1:0]SS_SOC_DBG_UNLOCK_LEVEL;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } go;
        } [4-1:0]SS_GENERIC_FW_EXEC_CTRL;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } key;
        } [8-1:0]internal_obf_key;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } lock;
        } internal_iccm_lock;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } core_rst;
        } internal_fw_update_reset;
        struct packed{
            struct packed{
                logic [7:0] next;
                logic load_next;
            } wait_cycles;
        } internal_fw_update_reset_wait_cycles;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } vec;
        } internal_nmi_vector;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } mask_iccm_ecc_unc;
            struct packed{
                logic next;
                logic load_next;
            } mask_dccm_ecc_unc;
            struct packed{
                logic next;
                logic load_next;
            } mask_nmi_pin;
        } internal_hw_error_fatal_mask;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } mask_mbox_prot_no_lock;
            struct packed{
                logic next;
                logic load_next;
            } mask_mbox_prot_ooo;
            struct packed{
                logic next;
                logic load_next;
            } mask_mbox_ecc_unc;
        } internal_hw_error_non_fatal_mask;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } mask;
        } internal_fw_error_fatal_mask;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } mask;
        } internal_fw_error_non_fatal_mask;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
                logic incrthreshold;
                logic overflow;
            } count_l;
        } internal_rv_mtime_l;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
                logic incrthreshold;
                logic overflow;
            } count_h;
        } internal_rv_mtime_h;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } compare_l;
        } internal_rv_mtimecmp_l;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } compare_h;
        } internal_rv_mtimecmp_h;
        struct packed{
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } error_en;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_en;
            } global_intr_en_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } error_internal_en;
                struct packed{
                    logic next;
                    logic load_next;
                } error_inv_dev_en;
                struct packed{
                    logic next;
                    logic load_next;
                } error_cmd_fail_en;
                struct packed{
                    logic next;
                    logic load_next;
                } error_bad_fuse_en;
                struct packed{
                    logic next;
                    logic load_next;
                } error_iccm_blocked_en;
                struct packed{
                    logic next;
                    logic load_next;
                } error_mbox_ecc_unc_en;
                struct packed{
                    logic next;
                    logic load_next;
                } error_wdt_timer1_timeout_en;
                struct packed{
                    logic next;
                    logic load_next;
                } error_wdt_timer2_timeout_en;
            } error_intr_en_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } notif_cmd_avail_en;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_mbox_ecc_cor_en;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_debug_locked_en;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_scan_mode_en;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_soc_req_lock_en;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_gen_in_toggle_en;
            } notif_intr_en_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } agg_sts;
            } error_global_intr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } agg_sts;
            } notif_global_intr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } error_internal_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } error_inv_dev_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } error_cmd_fail_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } error_bad_fuse_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } error_iccm_blocked_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } error_mbox_ecc_unc_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } error_wdt_timer1_timeout_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } error_wdt_timer2_timeout_sts;
            } error_internal_intr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } notif_cmd_avail_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_mbox_ecc_cor_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_debug_locked_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_scan_mode_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_soc_req_lock_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_gen_in_toggle_sts;
            } notif_internal_intr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } error_internal_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } error_inv_dev_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } error_cmd_fail_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } error_bad_fuse_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } error_iccm_blocked_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } error_mbox_ecc_unc_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } error_wdt_timer1_timeout_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } error_wdt_timer2_timeout_trig;
            } error_intr_trig_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } notif_cmd_avail_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_mbox_ecc_cor_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_debug_locked_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_scan_mode_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_soc_req_lock_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_gen_in_toggle_trig;
            } notif_intr_trig_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error_internal_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error_inv_dev_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error_cmd_fail_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error_bad_fuse_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error_iccm_blocked_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error_mbox_ecc_unc_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error_wdt_timer1_timeout_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error_wdt_timer2_timeout_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } notif_cmd_avail_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } notif_mbox_ecc_cor_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } notif_debug_locked_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } notif_scan_mode_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } notif_soc_req_lock_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } notif_gen_in_toggle_intr_count_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error_internal_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error_inv_dev_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error_cmd_fail_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error_bad_fuse_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error_iccm_blocked_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error_mbox_ecc_unc_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error_wdt_timer1_timeout_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error_wdt_timer2_timeout_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } notif_cmd_avail_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } notif_mbox_ecc_cor_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } notif_debug_locked_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } notif_scan_mode_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } notif_soc_req_lock_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } notif_gen_in_toggle_intr_count_incr_r;
        } intr_block_rf;
    } field_combo_t;
    field_combo_t field_combo;

    typedef struct packed{
        struct packed{
            struct packed{
                logic value;
            } iccm_ecc_unc;
            struct packed{
                logic value;
            } dccm_ecc_unc;
            struct packed{
                logic value;
            } nmi_pin;
            struct packed{
                logic value;
            } crypto_err;
        } CPTRA_HW_ERROR_FATAL;
        struct packed{
            struct packed{
                logic value;
            } mbox_prot_no_lock;
            struct packed{
                logic value;
            } mbox_prot_ooo;
            struct packed{
                logic value;
            } mbox_ecc_unc;
        } CPTRA_HW_ERROR_NON_FATAL;
        struct packed{
            struct packed{
                logic [31:0] value;
            } error_code;
        } CPTRA_FW_ERROR_FATAL;
        struct packed{
            struct packed{
                logic [31:0] value;
            } error_code;
        } CPTRA_FW_ERROR_NON_FATAL;
        struct packed{
            struct packed{
                logic [31:0] value;
            } error_code;
        } CPTRA_HW_ERROR_ENC;
        struct packed{
            struct packed{
                logic [31:0] value;
            } error_code;
        } CPTRA_FW_ERROR_ENC;
        struct packed{
            struct packed{
                logic [31:0] value;
            } error_info;
        } [8-1:0]CPTRA_FW_EXTENDED_ERROR_INFO;
        struct packed{
            struct packed{
                logic [31:0] value;
            } status;
        } CPTRA_BOOT_STATUS;
        struct packed{
            struct packed{
                logic [23:0] value;
            } status;
            struct packed{
                logic value;
            } idevid_csr_ready;
            struct packed{
                logic value;
            } ready_for_mb_processing;
            struct packed{
                logic value;
            } ready_for_runtime;
            struct packed{
                logic value;
            } mailbox_flow_done;
        } CPTRA_FLOW_STATUS;
        struct packed{
            struct packed{
                logic value;
            } FW_UPD_RESET;
            struct packed{
                logic value;
            } WARM_RESET;
        } CPTRA_RESET_REASON;
        struct packed{
            struct packed{
                logic [31:0] value;
            } AXI_USER;
        } [5-1:0]CPTRA_MBOX_VALID_AXI_USER;
        struct packed{
            struct packed{
                logic value;
            } LOCK;
        } [5-1:0]CPTRA_MBOX_AXI_USER_LOCK;
        struct packed{
            struct packed{
                logic [31:0] value;
            } AXI_USER;
        } CPTRA_TRNG_VALID_AXI_USER;
        struct packed{
            struct packed{
                logic value;
            } LOCK;
        } CPTRA_TRNG_AXI_USER_LOCK;
        struct packed{
            struct packed{
                logic [31:0] value;
            } DATA;
        } [12-1:0]CPTRA_TRNG_DATA;
        struct packed{
            struct packed{
                logic value;
            } clear;
        } CPTRA_TRNG_CTRL;
        struct packed{
            struct packed{
                logic value;
            } DATA_REQ;
            struct packed{
                logic value;
            } DATA_WR_DONE;
        } CPTRA_TRNG_STATUS;
        struct packed{
            struct packed{
                logic value;
            } done;
        } CPTRA_FUSE_WR_DONE;
        struct packed{
            struct packed{
                logic [31:0] value;
            } clk_period;
        } CPTRA_TIMER_CONFIG;
        struct packed{
            struct packed{
                logic value;
            } GO;
        } CPTRA_BOOTFSM_GO;
        struct packed{
            struct packed{
                logic [31:0] value;
            } DATA;
        } CPTRA_DBG_MANUF_SERVICE_REG;
        struct packed{
            struct packed{
                logic value;
            } clk_gating_en;
        } CPTRA_CLK_GATING_EN;
        struct packed{
            struct packed{
                logic [31:0] value;
            } generic_wires;
        } [2-1:0]CPTRA_GENERIC_INPUT_WIRES;
        struct packed{
            struct packed{
                logic [31:0] value;
            } generic_wires;
        } [2-1:0]CPTRA_GENERIC_OUTPUT_WIRES;
        struct packed{
            struct packed{
                logic [31:0] value;
            } REV_ID;
        } [2-1:0]CPTRA_FW_REV_ID;
        struct packed{
            struct packed{
                logic value;
            } timer1_en;
        } CPTRA_WDT_TIMER1_EN;
        struct packed{
            struct packed{
                logic value;
            } timer1_restart;
        } CPTRA_WDT_TIMER1_CTRL;
        struct packed{
            struct packed{
                logic [31:0] value;
            } timer1_timeout_period;
        } [2-1:0]CPTRA_WDT_TIMER1_TIMEOUT_PERIOD;
        struct packed{
            struct packed{
                logic value;
            } timer2_en;
        } CPTRA_WDT_TIMER2_EN;
        struct packed{
            struct packed{
                logic value;
            } timer2_restart;
        } CPTRA_WDT_TIMER2_CTRL;
        struct packed{
            struct packed{
                logic [31:0] value;
            } timer2_timeout_period;
        } [2-1:0]CPTRA_WDT_TIMER2_TIMEOUT_PERIOD;
        struct packed{
            struct packed{
                logic value;
            } t1_timeout;
            struct packed{
                logic value;
            } t2_timeout;
        } CPTRA_WDT_STATUS;
        struct packed{
            struct packed{
                logic [31:0] value;
            } AXI_USER;
        } CPTRA_FUSE_VALID_AXI_USER;
        struct packed{
            struct packed{
                logic value;
            } LOCK;
        } CPTRA_FUSE_AXI_USER_LOCK;
        struct packed{
            struct packed{
                logic [31:0] value;
            } TIMEOUT;
        } [2-1:0]CPTRA_WDT_CFG;
        struct packed{
            struct packed{
                logic [15:0] value;
            } low_threshold;
            struct packed{
                logic [15:0] value;
            } high_threshold;
        } CPTRA_iTRNG_ENTROPY_CONFIG_0;
        struct packed{
            struct packed{
                logic [15:0] value;
            } repetition_count;
            struct packed{
                logic [15:0] value;
            } RSVD;
        } CPTRA_iTRNG_ENTROPY_CONFIG_1;
        struct packed{
            struct packed{
                logic [31:0] value;
            } RSVD;
        } [2-1:0]CPTRA_RSVD_REG;
        struct packed{
            struct packed{
                logic [31:0] value;
            } cap;
        } CPTRA_HW_CAPABILITIES;
        struct packed{
            struct packed{
                logic [31:0] value;
            } cap;
        } CPTRA_FW_CAPABILITIES;
        struct packed{
            struct packed{
                logic value;
            } lock;
        } CPTRA_CAP_LOCK;
        struct packed{
            struct packed{
                logic [31:0] value;
            } hash;
        } [12-1:0]CPTRA_OWNER_PK_HASH;
        struct packed{
            struct packed{
                logic value;
            } lock;
        } CPTRA_OWNER_PK_HASH_LOCK;
        struct packed{
            struct packed{
                logic [31:0] value;
            } seed;
        } [16-1:0]fuse_uds_seed;
        struct packed{
            struct packed{
                logic [31:0] value;
            } seed;
        } [8-1:0]fuse_field_entropy;
        struct packed{
            struct packed{
                logic [31:0] value;
            } hash;
        } [12-1:0]fuse_key_manifest_pk_hash;
        struct packed{
            struct packed{
                logic [3:0] value;
            } mask;
        } fuse_key_manifest_pk_hash_mask;
        struct packed{
            struct packed{
                logic [31:0] value;
            } svn;
        } fuse_fmc_key_manifest_svn;
        struct packed{
            struct packed{
                logic [31:0] value;
            } svn;
        } [4-1:0]fuse_runtime_svn;
        struct packed{
            struct packed{
                logic value;
            } dis;
        } fuse_anti_rollback_disable;
        struct packed{
            struct packed{
                logic [31:0] value;
            } cert;
        } [24-1:0]fuse_idevid_cert_attr;
        struct packed{
            struct packed{
                logic [31:0] value;
            } hsm_id;
        } [4-1:0]fuse_idevid_manuf_hsm_id;
        struct packed{
            struct packed{
                logic [31:0] value;
            } lms_revocation;
        } fuse_lms_revocation;
        struct packed{
            struct packed{
                logic [3:0] value;
            } mldsa_revocation;
        } fuse_mldsa_revocation;
        struct packed{
            struct packed{
                logic [15:0] value;
            } soc_stepping_id;
        } fuse_soc_stepping_id;
        struct packed{
            struct packed{
                logic [31:0] value;
            } token;
        } [4-1:0]fuse_manuf_dbg_unlock_token;
        struct packed{
            struct packed{
                logic [31:0] value;
            } addr_l;
        } SS_CALIPTRA_BASE_ADDR_L;
        struct packed{
            struct packed{
                logic [31:0] value;
            } addr_h;
        } SS_CALIPTRA_BASE_ADDR_H;
        struct packed{
            struct packed{
                logic [31:0] value;
            } addr_l;
        } SS_MCI_BASE_ADDR_L;
        struct packed{
            struct packed{
                logic [31:0] value;
            } addr_h;
        } SS_MCI_BASE_ADDR_H;
        struct packed{
            struct packed{
                logic [31:0] value;
            } addr_l;
        } SS_RECOVERY_IFC_BASE_ADDR_L;
        struct packed{
            struct packed{
                logic [31:0] value;
            } addr_h;
        } SS_RECOVERY_IFC_BASE_ADDR_H;
        struct packed{
            struct packed{
                logic [31:0] value;
            } addr_l;
        } SS_OTP_FC_BASE_ADDR_L;
        struct packed{
            struct packed{
                logic [31:0] value;
            } addr_h;
        } SS_OTP_FC_BASE_ADDR_H;
        struct packed{
            struct packed{
                logic [31:0] value;
            } addr_l;
        } SS_UDS_SEED_BASE_ADDR_L;
        struct packed{
            struct packed{
                logic [31:0] value;
            } addr_h;
        } SS_UDS_SEED_BASE_ADDR_H;
        struct packed{
            struct packed{
                logic [31:0] value;
            } offset;
        } SS_PROD_DEBUG_UNLOCK_AUTH_PK_HASH_REG_BANK_OFFSET;
        struct packed{
            struct packed{
                logic [31:0] value;
            } num;
        } SS_NUM_OF_PROD_DEBUG_UNLOCK_AUTH_PK_HASHES;
        struct packed{
            struct packed{
                logic value;
            } debug_intent;
        } SS_DEBUG_INTENT;
        struct packed{
            struct packed{
                logic [31:0] value;
            } data;
        } [4-1:0]SS_STRAP_GENERIC;
        struct packed{
            struct packed{
                logic value;
            } MANUF_DBG_UNLOCK_REQ;
            struct packed{
                logic value;
            } PROD_DBG_UNLOCK_REQ;
            struct packed{
                logic value;
            } UDS_PROGRAM_REQ;
        } SS_DBG_MANUF_SERVICE_REG_REQ;
        struct packed{
            struct packed{
                logic value;
            } MANUF_DBG_UNLOCK_SUCCESS;
            struct packed{
                logic value;
            } MANUF_DBG_UNLOCK_FAIL;
            struct packed{
                logic value;
            } MANUF_DBG_UNLOCK_IN_PROGRESS;
            struct packed{
                logic value;
            } PROD_DBG_UNLOCK_SUCCESS;
            struct packed{
                logic value;
            } PROD_DBG_UNLOCK_FAIL;
            struct packed{
                logic value;
            } PROD_DBG_UNLOCK_IN_PROGRESS;
            struct packed{
                logic value;
            } UDS_PROGRAM_SUCCESS;
            struct packed{
                logic value;
            } UDS_PROGRAM_FAIL;
            struct packed{
                logic value;
            } UDS_PROGRAM_IN_PROGRESS;
        } SS_DBG_MANUF_SERVICE_REG_RSP;
        struct packed{
            struct packed{
                logic [31:0] value;
            } LEVEL;
        } [2-1:0]SS_SOC_DBG_UNLOCK_LEVEL;
        struct packed{
            struct packed{
                logic [31:0] value;
            } go;
        } [4-1:0]SS_GENERIC_FW_EXEC_CTRL;
        struct packed{
            struct packed{
                logic [31:0] value;
            } key;
        } [8-1:0]internal_obf_key;
        struct packed{
            struct packed{
                logic value;
            } lock;
        } internal_iccm_lock;
        struct packed{
            struct packed{
                logic value;
            } core_rst;
        } internal_fw_update_reset;
        struct packed{
            struct packed{
                logic [7:0] value;
            } wait_cycles;
        } internal_fw_update_reset_wait_cycles;
        struct packed{
            struct packed{
                logic [31:0] value;
            } vec;
        } internal_nmi_vector;
        struct packed{
            struct packed{
                logic value;
            } mask_iccm_ecc_unc;
            struct packed{
                logic value;
            } mask_dccm_ecc_unc;
            struct packed{
                logic value;
            } mask_nmi_pin;
        } internal_hw_error_fatal_mask;
        struct packed{
            struct packed{
                logic value;
            } mask_mbox_prot_no_lock;
            struct packed{
                logic value;
            } mask_mbox_prot_ooo;
            struct packed{
                logic value;
            } mask_mbox_ecc_unc;
        } internal_hw_error_non_fatal_mask;
        struct packed{
            struct packed{
                logic [31:0] value;
            } mask;
        } internal_fw_error_fatal_mask;
        struct packed{
            struct packed{
                logic [31:0] value;
            } mask;
        } internal_fw_error_non_fatal_mask;
        struct packed{
            struct packed{
                logic [31:0] value;
            } count_l;
        } internal_rv_mtime_l;
        struct packed{
            struct packed{
                logic [31:0] value;
            } count_h;
        } internal_rv_mtime_h;
        struct packed{
            struct packed{
                logic [31:0] value;
            } compare_l;
        } internal_rv_mtimecmp_l;
        struct packed{
            struct packed{
                logic [31:0] value;
            } compare_h;
        } internal_rv_mtimecmp_h;
        struct packed{
            struct packed{
                struct packed{
                    logic value;
                } error_en;
                struct packed{
                    logic value;
                } notif_en;
            } global_intr_en_r;
            struct packed{
                struct packed{
                    logic value;
                } error_internal_en;
                struct packed{
                    logic value;
                } error_inv_dev_en;
                struct packed{
                    logic value;
                } error_cmd_fail_en;
                struct packed{
                    logic value;
                } error_bad_fuse_en;
                struct packed{
                    logic value;
                } error_iccm_blocked_en;
                struct packed{
                    logic value;
                } error_mbox_ecc_unc_en;
                struct packed{
                    logic value;
                } error_wdt_timer1_timeout_en;
                struct packed{
                    logic value;
                } error_wdt_timer2_timeout_en;
            } error_intr_en_r;
            struct packed{
                struct packed{
                    logic value;
                } notif_cmd_avail_en;
                struct packed{
                    logic value;
                } notif_mbox_ecc_cor_en;
                struct packed{
                    logic value;
                } notif_debug_locked_en;
                struct packed{
                    logic value;
                } notif_scan_mode_en;
                struct packed{
                    logic value;
                } notif_soc_req_lock_en;
                struct packed{
                    logic value;
                } notif_gen_in_toggle_en;
            } notif_intr_en_r;
            struct packed{
                struct packed{
                    logic value;
                } agg_sts;
            } error_global_intr_r;
            struct packed{
                struct packed{
                    logic value;
                } agg_sts;
            } notif_global_intr_r;
            struct packed{
                struct packed{
                    logic value;
                } error_internal_sts;
                struct packed{
                    logic value;
                } error_inv_dev_sts;
                struct packed{
                    logic value;
                } error_cmd_fail_sts;
                struct packed{
                    logic value;
                } error_bad_fuse_sts;
                struct packed{
                    logic value;
                } error_iccm_blocked_sts;
                struct packed{
                    logic value;
                } error_mbox_ecc_unc_sts;
                struct packed{
                    logic value;
                } error_wdt_timer1_timeout_sts;
                struct packed{
                    logic value;
                } error_wdt_timer2_timeout_sts;
            } error_internal_intr_r;
            struct packed{
                struct packed{
                    logic value;
                } notif_cmd_avail_sts;
                struct packed{
                    logic value;
                } notif_mbox_ecc_cor_sts;
                struct packed{
                    logic value;
                } notif_debug_locked_sts;
                struct packed{
                    logic value;
                } notif_scan_mode_sts;
                struct packed{
                    logic value;
                } notif_soc_req_lock_sts;
                struct packed{
                    logic value;
                } notif_gen_in_toggle_sts;
            } notif_internal_intr_r;
            struct packed{
                struct packed{
                    logic value;
                } error_internal_trig;
                struct packed{
                    logic value;
                } error_inv_dev_trig;
                struct packed{
                    logic value;
                } error_cmd_fail_trig;
                struct packed{
                    logic value;
                } error_bad_fuse_trig;
                struct packed{
                    logic value;
                } error_iccm_blocked_trig;
                struct packed{
                    logic value;
                } error_mbox_ecc_unc_trig;
                struct packed{
                    logic value;
                } error_wdt_timer1_timeout_trig;
                struct packed{
                    logic value;
                } error_wdt_timer2_timeout_trig;
            } error_intr_trig_r;
            struct packed{
                struct packed{
                    logic value;
                } notif_cmd_avail_trig;
                struct packed{
                    logic value;
                } notif_mbox_ecc_cor_trig;
                struct packed{
                    logic value;
                } notif_debug_locked_trig;
                struct packed{
                    logic value;
                } notif_scan_mode_trig;
                struct packed{
                    logic value;
                } notif_soc_req_lock_trig;
                struct packed{
                    logic value;
                } notif_gen_in_toggle_trig;
            } notif_intr_trig_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error_internal_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error_inv_dev_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error_cmd_fail_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error_bad_fuse_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error_iccm_blocked_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error_mbox_ecc_unc_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error_wdt_timer1_timeout_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error_wdt_timer2_timeout_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } notif_cmd_avail_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } notif_mbox_ecc_cor_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } notif_debug_locked_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } notif_scan_mode_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } notif_soc_req_lock_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } notif_gen_in_toggle_intr_count_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error_internal_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error_inv_dev_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error_cmd_fail_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error_bad_fuse_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error_iccm_blocked_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error_mbox_ecc_unc_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error_wdt_timer1_timeout_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error_wdt_timer2_timeout_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } notif_cmd_avail_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } notif_mbox_ecc_cor_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } notif_debug_locked_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } notif_scan_mode_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } notif_soc_req_lock_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } notif_gen_in_toggle_intr_count_incr_r;
        } intr_block_rf;
    } field_storage_t;
    field_storage_t field_storage;

    // Field: soc_ifc_reg.CPTRA_HW_ERROR_FATAL.iccm_ecc_unc
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.CPTRA_HW_ERROR_FATAL.iccm_ecc_unc.value;
        load_next_c = '0;
        if(decoded_reg_strb.CPTRA_HW_ERROR_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.CPTRA_HW_ERROR_FATAL.iccm_ecc_unc.value & ~(decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end else if(hwif_in.CPTRA_HW_ERROR_FATAL.iccm_ecc_unc.we) begin // HW Write - we
            next_c = hwif_in.CPTRA_HW_ERROR_FATAL.iccm_ecc_unc.next;
            load_next_c = '1;
        end
        field_combo.CPTRA_HW_ERROR_FATAL.iccm_ecc_unc.next = next_c;
        field_combo.CPTRA_HW_ERROR_FATAL.iccm_ecc_unc.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.CPTRA_HW_ERROR_FATAL.iccm_ecc_unc.value <= 1'h0;
        end else if(field_combo.CPTRA_HW_ERROR_FATAL.iccm_ecc_unc.load_next) begin
            field_storage.CPTRA_HW_ERROR_FATAL.iccm_ecc_unc.value <= field_combo.CPTRA_HW_ERROR_FATAL.iccm_ecc_unc.next;
        end
    end
    assign hwif_out.CPTRA_HW_ERROR_FATAL.iccm_ecc_unc.value = field_storage.CPTRA_HW_ERROR_FATAL.iccm_ecc_unc.value;
    // Field: soc_ifc_reg.CPTRA_HW_ERROR_FATAL.dccm_ecc_unc
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.CPTRA_HW_ERROR_FATAL.dccm_ecc_unc.value;
        load_next_c = '0;
        if(decoded_reg_strb.CPTRA_HW_ERROR_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.CPTRA_HW_ERROR_FATAL.dccm_ecc_unc.value & ~(decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end else if(hwif_in.CPTRA_HW_ERROR_FATAL.dccm_ecc_unc.we) begin // HW Write - we
            next_c = hwif_in.CPTRA_HW_ERROR_FATAL.dccm_ecc_unc.next;
            load_next_c = '1;
        end
        field_combo.CPTRA_HW_ERROR_FATAL.dccm_ecc_unc.next = next_c;
        field_combo.CPTRA_HW_ERROR_FATAL.dccm_ecc_unc.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.CPTRA_HW_ERROR_FATAL.dccm_ecc_unc.value <= 1'h0;
        end else if(field_combo.CPTRA_HW_ERROR_FATAL.dccm_ecc_unc.load_next) begin
            field_storage.CPTRA_HW_ERROR_FATAL.dccm_ecc_unc.value <= field_combo.CPTRA_HW_ERROR_FATAL.dccm_ecc_unc.next;
        end
    end
    assign hwif_out.CPTRA_HW_ERROR_FATAL.dccm_ecc_unc.value = field_storage.CPTRA_HW_ERROR_FATAL.dccm_ecc_unc.value;
    // Field: soc_ifc_reg.CPTRA_HW_ERROR_FATAL.nmi_pin
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.CPTRA_HW_ERROR_FATAL.nmi_pin.value;
        load_next_c = '0;
        if(decoded_reg_strb.CPTRA_HW_ERROR_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.CPTRA_HW_ERROR_FATAL.nmi_pin.value & ~(decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end else if(hwif_in.CPTRA_HW_ERROR_FATAL.nmi_pin.we) begin // HW Write - we
            next_c = hwif_in.CPTRA_HW_ERROR_FATAL.nmi_pin.next;
            load_next_c = '1;
        end
        field_combo.CPTRA_HW_ERROR_FATAL.nmi_pin.next = next_c;
        field_combo.CPTRA_HW_ERROR_FATAL.nmi_pin.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.CPTRA_HW_ERROR_FATAL.nmi_pin.value <= 1'h0;
        end else if(field_combo.CPTRA_HW_ERROR_FATAL.nmi_pin.load_next) begin
            field_storage.CPTRA_HW_ERROR_FATAL.nmi_pin.value <= field_combo.CPTRA_HW_ERROR_FATAL.nmi_pin.next;
        end
    end
    assign hwif_out.CPTRA_HW_ERROR_FATAL.nmi_pin.value = field_storage.CPTRA_HW_ERROR_FATAL.nmi_pin.value;
    // Field: soc_ifc_reg.CPTRA_HW_ERROR_FATAL.crypto_err
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.CPTRA_HW_ERROR_FATAL.crypto_err.value;
        load_next_c = '0;
        if(decoded_reg_strb.CPTRA_HW_ERROR_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.CPTRA_HW_ERROR_FATAL.crypto_err.value & ~(decoded_wr_data[3:3] & decoded_wr_biten[3:3]);
            load_next_c = '1;
        end else if(hwif_in.CPTRA_HW_ERROR_FATAL.crypto_err.we) begin // HW Write - we
            next_c = hwif_in.CPTRA_HW_ERROR_FATAL.crypto_err.next;
            load_next_c = '1;
        end
        field_combo.CPTRA_HW_ERROR_FATAL.crypto_err.next = next_c;
        field_combo.CPTRA_HW_ERROR_FATAL.crypto_err.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.CPTRA_HW_ERROR_FATAL.crypto_err.value <= 1'h0;
        end else if(field_combo.CPTRA_HW_ERROR_FATAL.crypto_err.load_next) begin
            field_storage.CPTRA_HW_ERROR_FATAL.crypto_err.value <= field_combo.CPTRA_HW_ERROR_FATAL.crypto_err.next;
        end
    end
    assign hwif_out.CPTRA_HW_ERROR_FATAL.crypto_err.value = field_storage.CPTRA_HW_ERROR_FATAL.crypto_err.value;
    // Field: soc_ifc_reg.CPTRA_HW_ERROR_NON_FATAL.mbox_prot_no_lock
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.CPTRA_HW_ERROR_NON_FATAL.mbox_prot_no_lock.value;
        load_next_c = '0;
        if(decoded_reg_strb.CPTRA_HW_ERROR_NON_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.CPTRA_HW_ERROR_NON_FATAL.mbox_prot_no_lock.value & ~(decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end else if(hwif_in.CPTRA_HW_ERROR_NON_FATAL.mbox_prot_no_lock.we) begin // HW Write - we
            next_c = hwif_in.CPTRA_HW_ERROR_NON_FATAL.mbox_prot_no_lock.next;
            load_next_c = '1;
        end
        field_combo.CPTRA_HW_ERROR_NON_FATAL.mbox_prot_no_lock.next = next_c;
        field_combo.CPTRA_HW_ERROR_NON_FATAL.mbox_prot_no_lock.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.CPTRA_HW_ERROR_NON_FATAL.mbox_prot_no_lock.value <= 1'h0;
        end else if(field_combo.CPTRA_HW_ERROR_NON_FATAL.mbox_prot_no_lock.load_next) begin
            field_storage.CPTRA_HW_ERROR_NON_FATAL.mbox_prot_no_lock.value <= field_combo.CPTRA_HW_ERROR_NON_FATAL.mbox_prot_no_lock.next;
        end
    end
    assign hwif_out.CPTRA_HW_ERROR_NON_FATAL.mbox_prot_no_lock.value = field_storage.CPTRA_HW_ERROR_NON_FATAL.mbox_prot_no_lock.value;
    // Field: soc_ifc_reg.CPTRA_HW_ERROR_NON_FATAL.mbox_prot_ooo
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.CPTRA_HW_ERROR_NON_FATAL.mbox_prot_ooo.value;
        load_next_c = '0;
        if(decoded_reg_strb.CPTRA_HW_ERROR_NON_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.CPTRA_HW_ERROR_NON_FATAL.mbox_prot_ooo.value & ~(decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end else if(hwif_in.CPTRA_HW_ERROR_NON_FATAL.mbox_prot_ooo.we) begin // HW Write - we
            next_c = hwif_in.CPTRA_HW_ERROR_NON_FATAL.mbox_prot_ooo.next;
            load_next_c = '1;
        end
        field_combo.CPTRA_HW_ERROR_NON_FATAL.mbox_prot_ooo.next = next_c;
        field_combo.CPTRA_HW_ERROR_NON_FATAL.mbox_prot_ooo.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.CPTRA_HW_ERROR_NON_FATAL.mbox_prot_ooo.value <= 1'h0;
        end else if(field_combo.CPTRA_HW_ERROR_NON_FATAL.mbox_prot_ooo.load_next) begin
            field_storage.CPTRA_HW_ERROR_NON_FATAL.mbox_prot_ooo.value <= field_combo.CPTRA_HW_ERROR_NON_FATAL.mbox_prot_ooo.next;
        end
    end
    assign hwif_out.CPTRA_HW_ERROR_NON_FATAL.mbox_prot_ooo.value = field_storage.CPTRA_HW_ERROR_NON_FATAL.mbox_prot_ooo.value;
    // Field: soc_ifc_reg.CPTRA_HW_ERROR_NON_FATAL.mbox_ecc_unc
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.CPTRA_HW_ERROR_NON_FATAL.mbox_ecc_unc.value;
        load_next_c = '0;
        if(decoded_reg_strb.CPTRA_HW_ERROR_NON_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.CPTRA_HW_ERROR_NON_FATAL.mbox_ecc_unc.value & ~(decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end else if(hwif_in.CPTRA_HW_ERROR_NON_FATAL.mbox_ecc_unc.we) begin // HW Write - we
            next_c = hwif_in.CPTRA_HW_ERROR_NON_FATAL.mbox_ecc_unc.next;
            load_next_c = '1;
        end
        field_combo.CPTRA_HW_ERROR_NON_FATAL.mbox_ecc_unc.next = next_c;
        field_combo.CPTRA_HW_ERROR_NON_FATAL.mbox_ecc_unc.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.CPTRA_HW_ERROR_NON_FATAL.mbox_ecc_unc.value <= 1'h0;
        end else if(field_combo.CPTRA_HW_ERROR_NON_FATAL.mbox_ecc_unc.load_next) begin
            field_storage.CPTRA_HW_ERROR_NON_FATAL.mbox_ecc_unc.value <= field_combo.CPTRA_HW_ERROR_NON_FATAL.mbox_ecc_unc.next;
        end
    end
    assign hwif_out.CPTRA_HW_ERROR_NON_FATAL.mbox_ecc_unc.value = field_storage.CPTRA_HW_ERROR_NON_FATAL.mbox_ecc_unc.value;
    // Field: soc_ifc_reg.CPTRA_FW_ERROR_FATAL.error_code
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.CPTRA_FW_ERROR_FATAL.error_code.value;
        load_next_c = '0;
        if(decoded_reg_strb.CPTRA_FW_ERROR_FATAL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.CPTRA_FW_ERROR_FATAL.error_code.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end else if(hwif_in.CPTRA_FW_ERROR_FATAL.error_code.we) begin // HW Write - we
            next_c = hwif_in.CPTRA_FW_ERROR_FATAL.error_code.next;
            load_next_c = '1;
        end
        field_combo.CPTRA_FW_ERROR_FATAL.error_code.next = next_c;
        field_combo.CPTRA_FW_ERROR_FATAL.error_code.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.CPTRA_FW_ERROR_FATAL.error_code.value <= 32'h0;
        end else if(field_combo.CPTRA_FW_ERROR_FATAL.error_code.load_next) begin
            field_storage.CPTRA_FW_ERROR_FATAL.error_code.value <= field_combo.CPTRA_FW_ERROR_FATAL.error_code.next;
        end
    end
    assign hwif_out.CPTRA_FW_ERROR_FATAL.error_code.value = field_storage.CPTRA_FW_ERROR_FATAL.error_code.value;
    assign hwif_out.CPTRA_FW_ERROR_FATAL.error_code.swmod = decoded_reg_strb.CPTRA_FW_ERROR_FATAL && decoded_req_is_wr;
    // Field: soc_ifc_reg.CPTRA_FW_ERROR_NON_FATAL.error_code
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.CPTRA_FW_ERROR_NON_FATAL.error_code.value;
        load_next_c = '0;
        if(decoded_reg_strb.CPTRA_FW_ERROR_NON_FATAL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.CPTRA_FW_ERROR_NON_FATAL.error_code.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end else if(hwif_in.CPTRA_FW_ERROR_NON_FATAL.error_code.we) begin // HW Write - we
            next_c = hwif_in.CPTRA_FW_ERROR_NON_FATAL.error_code.next;
            load_next_c = '1;
        end
        field_combo.CPTRA_FW_ERROR_NON_FATAL.error_code.next = next_c;
        field_combo.CPTRA_FW_ERROR_NON_FATAL.error_code.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.CPTRA_FW_ERROR_NON_FATAL.error_code.value <= 32'h0;
        end else if(field_combo.CPTRA_FW_ERROR_NON_FATAL.error_code.load_next) begin
            field_storage.CPTRA_FW_ERROR_NON_FATAL.error_code.value <= field_combo.CPTRA_FW_ERROR_NON_FATAL.error_code.next;
        end
    end
    assign hwif_out.CPTRA_FW_ERROR_NON_FATAL.error_code.value = field_storage.CPTRA_FW_ERROR_NON_FATAL.error_code.value;
    assign hwif_out.CPTRA_FW_ERROR_NON_FATAL.error_code.swmod = decoded_reg_strb.CPTRA_FW_ERROR_NON_FATAL && decoded_req_is_wr;
    // Field: soc_ifc_reg.CPTRA_HW_ERROR_ENC.error_code
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.CPTRA_HW_ERROR_ENC.error_code.value;
        load_next_c = '0;
        if(decoded_reg_strb.CPTRA_HW_ERROR_ENC && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.CPTRA_HW_ERROR_ENC.error_code.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.CPTRA_HW_ERROR_ENC.error_code.next = next_c;
        field_combo.CPTRA_HW_ERROR_ENC.error_code.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.CPTRA_HW_ERROR_ENC.error_code.value <= 32'h0;
        end else if(field_combo.CPTRA_HW_ERROR_ENC.error_code.load_next) begin
            field_storage.CPTRA_HW_ERROR_ENC.error_code.value <= field_combo.CPTRA_HW_ERROR_ENC.error_code.next;
        end
    end
    assign hwif_out.CPTRA_HW_ERROR_ENC.error_code.value = field_storage.CPTRA_HW_ERROR_ENC.error_code.value;
    // Field: soc_ifc_reg.CPTRA_FW_ERROR_ENC.error_code
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.CPTRA_FW_ERROR_ENC.error_code.value;
        load_next_c = '0;
        if(decoded_reg_strb.CPTRA_FW_ERROR_ENC && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.CPTRA_FW_ERROR_ENC.error_code.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.CPTRA_FW_ERROR_ENC.error_code.next = next_c;
        field_combo.CPTRA_FW_ERROR_ENC.error_code.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.CPTRA_FW_ERROR_ENC.error_code.value <= 32'h0;
        end else if(field_combo.CPTRA_FW_ERROR_ENC.error_code.load_next) begin
            field_storage.CPTRA_FW_ERROR_ENC.error_code.value <= field_combo.CPTRA_FW_ERROR_ENC.error_code.next;
        end
    end
    assign hwif_out.CPTRA_FW_ERROR_ENC.error_code.value = field_storage.CPTRA_FW_ERROR_ENC.error_code.value;
    for(genvar i0=0; i0<8; i0++) begin
        // Field: soc_ifc_reg.CPTRA_FW_EXTENDED_ERROR_INFO[].error_info
        always_comb begin
            automatic logic [31:0] next_c;
            automatic logic load_next_c;
            next_c = field_storage.CPTRA_FW_EXTENDED_ERROR_INFO[i0].error_info.value;
            load_next_c = '0;
            if(decoded_reg_strb.CPTRA_FW_EXTENDED_ERROR_INFO[i0] && decoded_req_is_wr) begin // SW write
                next_c = (field_storage.CPTRA_FW_EXTENDED_ERROR_INFO[i0].error_info.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end
            field_combo.CPTRA_FW_EXTENDED_ERROR_INFO[i0].error_info.next = next_c;
            field_combo.CPTRA_FW_EXTENDED_ERROR_INFO[i0].error_info.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
            if(~hwif_in.cptra_pwrgood) begin
                field_storage.CPTRA_FW_EXTENDED_ERROR_INFO[i0].error_info.value <= 32'h0;
            end else if(field_combo.CPTRA_FW_EXTENDED_ERROR_INFO[i0].error_info.load_next) begin
                field_storage.CPTRA_FW_EXTENDED_ERROR_INFO[i0].error_info.value <= field_combo.CPTRA_FW_EXTENDED_ERROR_INFO[i0].error_info.next;
            end
        end
        assign hwif_out.CPTRA_FW_EXTENDED_ERROR_INFO[i0].error_info.value = field_storage.CPTRA_FW_EXTENDED_ERROR_INFO[i0].error_info.value;
    end
    // Field: soc_ifc_reg.CPTRA_BOOT_STATUS.status
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.CPTRA_BOOT_STATUS.status.value;
        load_next_c = '0;
        if(decoded_reg_strb.CPTRA_BOOT_STATUS && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.CPTRA_BOOT_STATUS.status.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.CPTRA_BOOT_STATUS.status.next = next_c;
        field_combo.CPTRA_BOOT_STATUS.status.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.CPTRA_BOOT_STATUS.status.value <= 32'h0;
        end else if(field_combo.CPTRA_BOOT_STATUS.status.load_next) begin
            field_storage.CPTRA_BOOT_STATUS.status.value <= field_combo.CPTRA_BOOT_STATUS.status.next;
        end
    end
    assign hwif_out.CPTRA_BOOT_STATUS.status.value = field_storage.CPTRA_BOOT_STATUS.status.value;
    // Field: soc_ifc_reg.CPTRA_FLOW_STATUS.status
    always_comb begin
        automatic logic [23:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.CPTRA_FLOW_STATUS.status.value;
        load_next_c = '0;
        if(decoded_reg_strb.CPTRA_FLOW_STATUS && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.CPTRA_FLOW_STATUS.status.value & ~decoded_wr_biten[23:0]) | (decoded_wr_data[23:0] & decoded_wr_biten[23:0]);
            load_next_c = '1;
        end
        field_combo.CPTRA_FLOW_STATUS.status.next = next_c;
        field_combo.CPTRA_FLOW_STATUS.status.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.CPTRA_FLOW_STATUS.status.value <= 24'h0;
        end else if(field_combo.CPTRA_FLOW_STATUS.status.load_next) begin
            field_storage.CPTRA_FLOW_STATUS.status.value <= field_combo.CPTRA_FLOW_STATUS.status.next;
        end
    end
    // Field: soc_ifc_reg.CPTRA_FLOW_STATUS.idevid_csr_ready
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.CPTRA_FLOW_STATUS.idevid_csr_ready.value;
        load_next_c = '0;
        if(decoded_reg_strb.CPTRA_FLOW_STATUS && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.CPTRA_FLOW_STATUS.idevid_csr_ready.value & ~decoded_wr_biten[24:24]) | (decoded_wr_data[24:24] & decoded_wr_biten[24:24]);
            load_next_c = '1;
        end
        field_combo.CPTRA_FLOW_STATUS.idevid_csr_ready.next = next_c;
        field_combo.CPTRA_FLOW_STATUS.idevid_csr_ready.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.CPTRA_FLOW_STATUS.idevid_csr_ready.value <= 1'h0;
        end else if(field_combo.CPTRA_FLOW_STATUS.idevid_csr_ready.load_next) begin
            field_storage.CPTRA_FLOW_STATUS.idevid_csr_ready.value <= field_combo.CPTRA_FLOW_STATUS.idevid_csr_ready.next;
        end
    end
    assign hwif_out.CPTRA_FLOW_STATUS.idevid_csr_ready.value = field_storage.CPTRA_FLOW_STATUS.idevid_csr_ready.value;
    // Field: soc_ifc_reg.CPTRA_FLOW_STATUS.ready_for_mb_processing
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.CPTRA_FLOW_STATUS.ready_for_mb_processing.value;
        load_next_c = '0;
        if(decoded_reg_strb.CPTRA_FLOW_STATUS && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.CPTRA_FLOW_STATUS.ready_for_mb_processing.value & ~decoded_wr_biten[28:28]) | (decoded_wr_data[28:28] & decoded_wr_biten[28:28]);
            load_next_c = '1;
        end
        field_combo.CPTRA_FLOW_STATUS.ready_for_mb_processing.next = next_c;
        field_combo.CPTRA_FLOW_STATUS.ready_for_mb_processing.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.CPTRA_FLOW_STATUS.ready_for_mb_processing.value <= 1'h0;
        end else if(field_combo.CPTRA_FLOW_STATUS.ready_for_mb_processing.load_next) begin
            field_storage.CPTRA_FLOW_STATUS.ready_for_mb_processing.value <= field_combo.CPTRA_FLOW_STATUS.ready_for_mb_processing.next;
        end
    end
    assign hwif_out.CPTRA_FLOW_STATUS.ready_for_mb_processing.value = field_storage.CPTRA_FLOW_STATUS.ready_for_mb_processing.value;
    // Field: soc_ifc_reg.CPTRA_FLOW_STATUS.ready_for_runtime
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.CPTRA_FLOW_STATUS.ready_for_runtime.value;
        load_next_c = '0;
        if(decoded_reg_strb.CPTRA_FLOW_STATUS && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.CPTRA_FLOW_STATUS.ready_for_runtime.value & ~decoded_wr_biten[29:29]) | (decoded_wr_data[29:29] & decoded_wr_biten[29:29]);
            load_next_c = '1;
        end
        field_combo.CPTRA_FLOW_STATUS.ready_for_runtime.next = next_c;
        field_combo.CPTRA_FLOW_STATUS.ready_for_runtime.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.CPTRA_FLOW_STATUS.ready_for_runtime.value <= 1'h0;
        end else if(field_combo.CPTRA_FLOW_STATUS.ready_for_runtime.load_next) begin
            field_storage.CPTRA_FLOW_STATUS.ready_for_runtime.value <= field_combo.CPTRA_FLOW_STATUS.ready_for_runtime.next;
        end
    end
    assign hwif_out.CPTRA_FLOW_STATUS.ready_for_runtime.value = field_storage.CPTRA_FLOW_STATUS.ready_for_runtime.value;
    // Field: soc_ifc_reg.CPTRA_FLOW_STATUS.mailbox_flow_done
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.CPTRA_FLOW_STATUS.mailbox_flow_done.value;
        load_next_c = '0;
        if(decoded_reg_strb.CPTRA_FLOW_STATUS && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.CPTRA_FLOW_STATUS.mailbox_flow_done.value & ~decoded_wr_biten[31:31]) | (decoded_wr_data[31:31] & decoded_wr_biten[31:31]);
            load_next_c = '1;
        end
        field_combo.CPTRA_FLOW_STATUS.mailbox_flow_done.next = next_c;
        field_combo.CPTRA_FLOW_STATUS.mailbox_flow_done.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.CPTRA_FLOW_STATUS.mailbox_flow_done.value <= 1'h0;
        end else if(field_combo.CPTRA_FLOW_STATUS.mailbox_flow_done.load_next) begin
            field_storage.CPTRA_FLOW_STATUS.mailbox_flow_done.value <= field_combo.CPTRA_FLOW_STATUS.mailbox_flow_done.next;
        end
    end
    assign hwif_out.CPTRA_FLOW_STATUS.mailbox_flow_done.value = field_storage.CPTRA_FLOW_STATUS.mailbox_flow_done.value;
    // Field: soc_ifc_reg.CPTRA_RESET_REASON.FW_UPD_RESET
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.CPTRA_RESET_REASON.FW_UPD_RESET.value;
        load_next_c = '0;
        if(hwif_in.CPTRA_RESET_REASON.FW_UPD_RESET.we) begin // HW Write - we
            next_c = hwif_in.CPTRA_RESET_REASON.FW_UPD_RESET.next;
            load_next_c = '1;
        end
        field_combo.CPTRA_RESET_REASON.FW_UPD_RESET.next = next_c;
        field_combo.CPTRA_RESET_REASON.FW_UPD_RESET.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.CPTRA_RESET_REASON.FW_UPD_RESET.value <= 1'h0;
        end else if(field_combo.CPTRA_RESET_REASON.FW_UPD_RESET.load_next) begin
            field_storage.CPTRA_RESET_REASON.FW_UPD_RESET.value <= field_combo.CPTRA_RESET_REASON.FW_UPD_RESET.next;
        end
    end
    assign hwif_out.CPTRA_RESET_REASON.FW_UPD_RESET.value = field_storage.CPTRA_RESET_REASON.FW_UPD_RESET.value;
    // Field: soc_ifc_reg.CPTRA_RESET_REASON.WARM_RESET
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.CPTRA_RESET_REASON.WARM_RESET.value;
        load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.CPTRA_RESET_REASON.WARM_RESET.next;
        load_next_c = '1;
        field_combo.CPTRA_RESET_REASON.WARM_RESET.next = next_c;
        field_combo.CPTRA_RESET_REASON.WARM_RESET.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.CPTRA_RESET_REASON.WARM_RESET.value <= 1'h0;
        end else if(field_combo.CPTRA_RESET_REASON.WARM_RESET.load_next) begin
            field_storage.CPTRA_RESET_REASON.WARM_RESET.value <= field_combo.CPTRA_RESET_REASON.WARM_RESET.next;
        end
    end
    assign hwif_out.CPTRA_RESET_REASON.WARM_RESET.value = field_storage.CPTRA_RESET_REASON.WARM_RESET.value;
    for(genvar i0=0; i0<5; i0++) begin
        // Field: soc_ifc_reg.CPTRA_MBOX_VALID_AXI_USER[].AXI_USER
        always_comb begin
            automatic logic [31:0] next_c;
            automatic logic load_next_c;
            next_c = field_storage.CPTRA_MBOX_VALID_AXI_USER[i0].AXI_USER.value;
            load_next_c = '0;
            if(decoded_reg_strb.CPTRA_MBOX_VALID_AXI_USER[i0] && decoded_req_is_wr && !(hwif_in.CPTRA_MBOX_VALID_AXI_USER[i0].AXI_USER.swwel)) begin // SW write
                next_c = (field_storage.CPTRA_MBOX_VALID_AXI_USER[i0].AXI_USER.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end
            field_combo.CPTRA_MBOX_VALID_AXI_USER[i0].AXI_USER.next = next_c;
            field_combo.CPTRA_MBOX_VALID_AXI_USER[i0].AXI_USER.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
            if(~hwif_in.cptra_rst_b) begin
                field_storage.CPTRA_MBOX_VALID_AXI_USER[i0].AXI_USER.value <= 32'hffffffff;
            end else if(field_combo.CPTRA_MBOX_VALID_AXI_USER[i0].AXI_USER.load_next) begin
                field_storage.CPTRA_MBOX_VALID_AXI_USER[i0].AXI_USER.value <= field_combo.CPTRA_MBOX_VALID_AXI_USER[i0].AXI_USER.next;
            end
        end
        assign hwif_out.CPTRA_MBOX_VALID_AXI_USER[i0].AXI_USER.value = field_storage.CPTRA_MBOX_VALID_AXI_USER[i0].AXI_USER.value;
    end
    for(genvar i0=0; i0<5; i0++) begin
        // Field: soc_ifc_reg.CPTRA_MBOX_AXI_USER_LOCK[].LOCK
        always_comb begin
            automatic logic [0:0] next_c;
            automatic logic load_next_c;
            next_c = field_storage.CPTRA_MBOX_AXI_USER_LOCK[i0].LOCK.value;
            load_next_c = '0;
            if(decoded_reg_strb.CPTRA_MBOX_AXI_USER_LOCK[i0] && decoded_req_is_wr && !(hwif_in.CPTRA_MBOX_AXI_USER_LOCK[i0].LOCK.swwel)) begin // SW write
                next_c = (field_storage.CPTRA_MBOX_AXI_USER_LOCK[i0].LOCK.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
                load_next_c = '1;
            end
            field_combo.CPTRA_MBOX_AXI_USER_LOCK[i0].LOCK.next = next_c;
            field_combo.CPTRA_MBOX_AXI_USER_LOCK[i0].LOCK.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
            if(~hwif_in.cptra_rst_b) begin
                field_storage.CPTRA_MBOX_AXI_USER_LOCK[i0].LOCK.value <= 1'h0;
            end else if(field_combo.CPTRA_MBOX_AXI_USER_LOCK[i0].LOCK.load_next) begin
                field_storage.CPTRA_MBOX_AXI_USER_LOCK[i0].LOCK.value <= field_combo.CPTRA_MBOX_AXI_USER_LOCK[i0].LOCK.next;
            end
        end
        assign hwif_out.CPTRA_MBOX_AXI_USER_LOCK[i0].LOCK.value = field_storage.CPTRA_MBOX_AXI_USER_LOCK[i0].LOCK.value;
    end
    // Field: soc_ifc_reg.CPTRA_TRNG_VALID_AXI_USER.AXI_USER
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.CPTRA_TRNG_VALID_AXI_USER.AXI_USER.value;
        load_next_c = '0;
        if(decoded_reg_strb.CPTRA_TRNG_VALID_AXI_USER && decoded_req_is_wr && !(hwif_in.CPTRA_TRNG_VALID_AXI_USER.AXI_USER.swwel)) begin // SW write
            next_c = (field_storage.CPTRA_TRNG_VALID_AXI_USER.AXI_USER.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.CPTRA_TRNG_VALID_AXI_USER.AXI_USER.next = next_c;
        field_combo.CPTRA_TRNG_VALID_AXI_USER.AXI_USER.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.CPTRA_TRNG_VALID_AXI_USER.AXI_USER.value <= 32'hffffffff;
        end else if(field_combo.CPTRA_TRNG_VALID_AXI_USER.AXI_USER.load_next) begin
            field_storage.CPTRA_TRNG_VALID_AXI_USER.AXI_USER.value <= field_combo.CPTRA_TRNG_VALID_AXI_USER.AXI_USER.next;
        end
    end
    assign hwif_out.CPTRA_TRNG_VALID_AXI_USER.AXI_USER.value = field_storage.CPTRA_TRNG_VALID_AXI_USER.AXI_USER.value;
    // Field: soc_ifc_reg.CPTRA_TRNG_AXI_USER_LOCK.LOCK
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.CPTRA_TRNG_AXI_USER_LOCK.LOCK.value;
        load_next_c = '0;
        if(decoded_reg_strb.CPTRA_TRNG_AXI_USER_LOCK && decoded_req_is_wr && !(hwif_in.CPTRA_TRNG_AXI_USER_LOCK.LOCK.swwel)) begin // SW write
            next_c = (field_storage.CPTRA_TRNG_AXI_USER_LOCK.LOCK.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.CPTRA_TRNG_AXI_USER_LOCK.LOCK.next = next_c;
        field_combo.CPTRA_TRNG_AXI_USER_LOCK.LOCK.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.CPTRA_TRNG_AXI_USER_LOCK.LOCK.value <= 1'h0;
        end else if(field_combo.CPTRA_TRNG_AXI_USER_LOCK.LOCK.load_next) begin
            field_storage.CPTRA_TRNG_AXI_USER_LOCK.LOCK.value <= field_combo.CPTRA_TRNG_AXI_USER_LOCK.LOCK.next;
        end
    end
    assign hwif_out.CPTRA_TRNG_AXI_USER_LOCK.LOCK.value = field_storage.CPTRA_TRNG_AXI_USER_LOCK.LOCK.value;
    for(genvar i0=0; i0<12; i0++) begin
        // Field: soc_ifc_reg.CPTRA_TRNG_DATA[].DATA
        always_comb begin
            automatic logic [31:0] next_c;
            automatic logic load_next_c;
            next_c = field_storage.CPTRA_TRNG_DATA[i0].DATA.value;
            load_next_c = '0;
            if(decoded_reg_strb.CPTRA_TRNG_DATA[i0] && decoded_req_is_wr && hwif_in.CPTRA_TRNG_DATA[i0].DATA.swwe) begin // SW write
                next_c = (field_storage.CPTRA_TRNG_DATA[i0].DATA.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end else if(hwif_in.CPTRA_TRNG_DATA[i0].DATA.hwclr) begin // HW Clear
                next_c = '0;
                load_next_c = '1;
            end
            field_combo.CPTRA_TRNG_DATA[i0].DATA.next = next_c;
            field_combo.CPTRA_TRNG_DATA[i0].DATA.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
            if(~hwif_in.cptra_rst_b) begin
                field_storage.CPTRA_TRNG_DATA[i0].DATA.value <= 32'h0;
            end else if(field_combo.CPTRA_TRNG_DATA[i0].DATA.load_next) begin
                field_storage.CPTRA_TRNG_DATA[i0].DATA.value <= field_combo.CPTRA_TRNG_DATA[i0].DATA.next;
            end
        end
        assign hwif_out.CPTRA_TRNG_DATA[i0].DATA.swacc = decoded_reg_strb.CPTRA_TRNG_DATA[i0];
    end
    // Field: soc_ifc_reg.CPTRA_TRNG_CTRL.clear
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.CPTRA_TRNG_CTRL.clear.value;
        load_next_c = '0;
        if(decoded_reg_strb.CPTRA_TRNG_CTRL && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.CPTRA_TRNG_CTRL.clear.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.CPTRA_TRNG_CTRL.clear.next = next_c;
        field_combo.CPTRA_TRNG_CTRL.clear.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.CPTRA_TRNG_CTRL.clear.value <= 1'h0;
        end else if(field_combo.CPTRA_TRNG_CTRL.clear.load_next) begin
            field_storage.CPTRA_TRNG_CTRL.clear.value <= field_combo.CPTRA_TRNG_CTRL.clear.next;
        end
    end
    assign hwif_out.CPTRA_TRNG_CTRL.clear.value = field_storage.CPTRA_TRNG_CTRL.clear.value;
    // Field: soc_ifc_reg.CPTRA_TRNG_STATUS.DATA_REQ
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.CPTRA_TRNG_STATUS.DATA_REQ.value;
        load_next_c = '0;
        if(decoded_reg_strb.CPTRA_TRNG_STATUS && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.CPTRA_TRNG_STATUS.DATA_REQ.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.CPTRA_TRNG_STATUS.DATA_REQ.next = next_c;
        field_combo.CPTRA_TRNG_STATUS.DATA_REQ.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.CPTRA_TRNG_STATUS.DATA_REQ.value <= 1'h0;
        end else if(field_combo.CPTRA_TRNG_STATUS.DATA_REQ.load_next) begin
            field_storage.CPTRA_TRNG_STATUS.DATA_REQ.value <= field_combo.CPTRA_TRNG_STATUS.DATA_REQ.next;
        end
    end
    assign hwif_out.CPTRA_TRNG_STATUS.DATA_REQ.value = field_storage.CPTRA_TRNG_STATUS.DATA_REQ.value;
    // Field: soc_ifc_reg.CPTRA_TRNG_STATUS.DATA_WR_DONE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.CPTRA_TRNG_STATUS.DATA_WR_DONE.value;
        load_next_c = '0;
        if(decoded_reg_strb.CPTRA_TRNG_STATUS && decoded_req_is_wr && hwif_in.CPTRA_TRNG_STATUS.DATA_WR_DONE.swwe) begin // SW write
            next_c = (field_storage.CPTRA_TRNG_STATUS.DATA_WR_DONE.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end else if(hwif_in.CPTRA_TRNG_STATUS.DATA_WR_DONE.hwclr) begin // HW Clear
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.CPTRA_TRNG_STATUS.DATA_WR_DONE.next = next_c;
        field_combo.CPTRA_TRNG_STATUS.DATA_WR_DONE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.CPTRA_TRNG_STATUS.DATA_WR_DONE.value <= 1'h0;
        end else if(field_combo.CPTRA_TRNG_STATUS.DATA_WR_DONE.load_next) begin
            field_storage.CPTRA_TRNG_STATUS.DATA_WR_DONE.value <= field_combo.CPTRA_TRNG_STATUS.DATA_WR_DONE.next;
        end
    end
    // Field: soc_ifc_reg.CPTRA_FUSE_WR_DONE.done
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.CPTRA_FUSE_WR_DONE.done.value;
        load_next_c = '0;
        if(decoded_reg_strb.CPTRA_FUSE_WR_DONE && decoded_req_is_wr && hwif_in.CPTRA_FUSE_WR_DONE.done.swwe) begin // SW write
            next_c = (field_storage.CPTRA_FUSE_WR_DONE.done.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.CPTRA_FUSE_WR_DONE.done.next = next_c;
        field_combo.CPTRA_FUSE_WR_DONE.done.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.CPTRA_FUSE_WR_DONE.done.value <= 1'h0;
        end else if(field_combo.CPTRA_FUSE_WR_DONE.done.load_next) begin
            field_storage.CPTRA_FUSE_WR_DONE.done.value <= field_combo.CPTRA_FUSE_WR_DONE.done.next;
        end
    end
    assign hwif_out.CPTRA_FUSE_WR_DONE.done.value = field_storage.CPTRA_FUSE_WR_DONE.done.value;
    assign hwif_out.CPTRA_FUSE_WR_DONE.done.swmod = decoded_reg_strb.CPTRA_FUSE_WR_DONE && decoded_req_is_wr;
    // Field: soc_ifc_reg.CPTRA_TIMER_CONFIG.clk_period
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.CPTRA_TIMER_CONFIG.clk_period.value;
        load_next_c = '0;
        if(decoded_reg_strb.CPTRA_TIMER_CONFIG && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.CPTRA_TIMER_CONFIG.clk_period.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.CPTRA_TIMER_CONFIG.clk_period.next = next_c;
        field_combo.CPTRA_TIMER_CONFIG.clk_period.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.CPTRA_TIMER_CONFIG.clk_period.value <= 32'h0;
        end else if(field_combo.CPTRA_TIMER_CONFIG.clk_period.load_next) begin
            field_storage.CPTRA_TIMER_CONFIG.clk_period.value <= field_combo.CPTRA_TIMER_CONFIG.clk_period.next;
        end
    end
    // Field: soc_ifc_reg.CPTRA_BOOTFSM_GO.GO
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.CPTRA_BOOTFSM_GO.GO.value;
        load_next_c = '0;
        if(decoded_reg_strb.CPTRA_BOOTFSM_GO && decoded_req_is_wr && hwif_in.soc_req) begin // SW write
            next_c = (field_storage.CPTRA_BOOTFSM_GO.GO.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end else if(hwif_in.CPTRA_BOOTFSM_GO.GO.we) begin // HW Write - we
            next_c = hwif_in.CPTRA_BOOTFSM_GO.GO.next;
            load_next_c = '1;
        end
        field_combo.CPTRA_BOOTFSM_GO.GO.next = next_c;
        field_combo.CPTRA_BOOTFSM_GO.GO.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.CPTRA_BOOTFSM_GO.GO.value <= 1'h0;
        end else if(field_combo.CPTRA_BOOTFSM_GO.GO.load_next) begin
            field_storage.CPTRA_BOOTFSM_GO.GO.value <= field_combo.CPTRA_BOOTFSM_GO.GO.next;
        end
    end
    assign hwif_out.CPTRA_BOOTFSM_GO.GO.value = field_storage.CPTRA_BOOTFSM_GO.GO.value;
    // Field: soc_ifc_reg.CPTRA_DBG_MANUF_SERVICE_REG.DATA
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.CPTRA_DBG_MANUF_SERVICE_REG.DATA.value;
        load_next_c = '0;
        if(decoded_reg_strb.CPTRA_DBG_MANUF_SERVICE_REG && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.CPTRA_DBG_MANUF_SERVICE_REG.DATA.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end else if(hwif_in.CPTRA_DBG_MANUF_SERVICE_REG.DATA.we) begin // HW Write - we
            next_c = hwif_in.CPTRA_DBG_MANUF_SERVICE_REG.DATA.next;
            load_next_c = '1;
        end
        field_combo.CPTRA_DBG_MANUF_SERVICE_REG.DATA.next = next_c;
        field_combo.CPTRA_DBG_MANUF_SERVICE_REG.DATA.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.CPTRA_DBG_MANUF_SERVICE_REG.DATA.value <= 32'h0;
        end else if(field_combo.CPTRA_DBG_MANUF_SERVICE_REG.DATA.load_next) begin
            field_storage.CPTRA_DBG_MANUF_SERVICE_REG.DATA.value <= field_combo.CPTRA_DBG_MANUF_SERVICE_REG.DATA.next;
        end
    end
    assign hwif_out.CPTRA_DBG_MANUF_SERVICE_REG.DATA.value = field_storage.CPTRA_DBG_MANUF_SERVICE_REG.DATA.value;
    // Field: soc_ifc_reg.CPTRA_CLK_GATING_EN.clk_gating_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.CPTRA_CLK_GATING_EN.clk_gating_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.CPTRA_CLK_GATING_EN && decoded_req_is_wr && hwif_in.soc_req) begin // SW write
            next_c = (field_storage.CPTRA_CLK_GATING_EN.clk_gating_en.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.CPTRA_CLK_GATING_EN.clk_gating_en.next = next_c;
        field_combo.CPTRA_CLK_GATING_EN.clk_gating_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.CPTRA_CLK_GATING_EN.clk_gating_en.value <= 1'h0;
        end else if(field_combo.CPTRA_CLK_GATING_EN.clk_gating_en.load_next) begin
            field_storage.CPTRA_CLK_GATING_EN.clk_gating_en.value <= field_combo.CPTRA_CLK_GATING_EN.clk_gating_en.next;
        end
    end
    assign hwif_out.CPTRA_CLK_GATING_EN.clk_gating_en.value = field_storage.CPTRA_CLK_GATING_EN.clk_gating_en.value;
    for(genvar i0=0; i0<2; i0++) begin
        // Field: soc_ifc_reg.CPTRA_GENERIC_INPUT_WIRES[].generic_wires
        always_comb begin
            automatic logic [31:0] next_c;
            automatic logic load_next_c;
            next_c = field_storage.CPTRA_GENERIC_INPUT_WIRES[i0].generic_wires.value;
            load_next_c = '0;
        
            // HW Write
            next_c = hwif_in.CPTRA_GENERIC_INPUT_WIRES[i0].generic_wires.next;
            load_next_c = '1;
            field_combo.CPTRA_GENERIC_INPUT_WIRES[i0].generic_wires.next = next_c;
            field_combo.CPTRA_GENERIC_INPUT_WIRES[i0].generic_wires.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
            if(~hwif_in.cptra_rst_b) begin
                field_storage.CPTRA_GENERIC_INPUT_WIRES[i0].generic_wires.value <= 32'h0;
            end else if(field_combo.CPTRA_GENERIC_INPUT_WIRES[i0].generic_wires.load_next) begin
                field_storage.CPTRA_GENERIC_INPUT_WIRES[i0].generic_wires.value <= field_combo.CPTRA_GENERIC_INPUT_WIRES[i0].generic_wires.next;
            end
        end
        assign hwif_out.CPTRA_GENERIC_INPUT_WIRES[i0].generic_wires.value = field_storage.CPTRA_GENERIC_INPUT_WIRES[i0].generic_wires.value;
    end
    for(genvar i0=0; i0<2; i0++) begin
        // Field: soc_ifc_reg.CPTRA_GENERIC_OUTPUT_WIRES[].generic_wires
        always_comb begin
            automatic logic [31:0] next_c;
            automatic logic load_next_c;
            next_c = field_storage.CPTRA_GENERIC_OUTPUT_WIRES[i0].generic_wires.value;
            load_next_c = '0;
            if(decoded_reg_strb.CPTRA_GENERIC_OUTPUT_WIRES[i0] && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
                next_c = (field_storage.CPTRA_GENERIC_OUTPUT_WIRES[i0].generic_wires.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end
            field_combo.CPTRA_GENERIC_OUTPUT_WIRES[i0].generic_wires.next = next_c;
            field_combo.CPTRA_GENERIC_OUTPUT_WIRES[i0].generic_wires.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
            if(~hwif_in.cptra_rst_b) begin
                field_storage.CPTRA_GENERIC_OUTPUT_WIRES[i0].generic_wires.value <= 32'h0;
            end else if(field_combo.CPTRA_GENERIC_OUTPUT_WIRES[i0].generic_wires.load_next) begin
                field_storage.CPTRA_GENERIC_OUTPUT_WIRES[i0].generic_wires.value <= field_combo.CPTRA_GENERIC_OUTPUT_WIRES[i0].generic_wires.next;
            end
        end
        assign hwif_out.CPTRA_GENERIC_OUTPUT_WIRES[i0].generic_wires.value = field_storage.CPTRA_GENERIC_OUTPUT_WIRES[i0].generic_wires.value;
    end
    for(genvar i0=0; i0<2; i0++) begin
        // Field: soc_ifc_reg.CPTRA_FW_REV_ID[].REV_ID
        always_comb begin
            automatic logic [31:0] next_c;
            automatic logic load_next_c;
            next_c = field_storage.CPTRA_FW_REV_ID[i0].REV_ID.value;
            load_next_c = '0;
            if(decoded_reg_strb.CPTRA_FW_REV_ID[i0] && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
                next_c = (field_storage.CPTRA_FW_REV_ID[i0].REV_ID.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end
            field_combo.CPTRA_FW_REV_ID[i0].REV_ID.next = next_c;
            field_combo.CPTRA_FW_REV_ID[i0].REV_ID.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
            if(~hwif_in.cptra_rst_b) begin
                field_storage.CPTRA_FW_REV_ID[i0].REV_ID.value <= 32'h0;
            end else if(field_combo.CPTRA_FW_REV_ID[i0].REV_ID.load_next) begin
                field_storage.CPTRA_FW_REV_ID[i0].REV_ID.value <= field_combo.CPTRA_FW_REV_ID[i0].REV_ID.next;
            end
        end
        assign hwif_out.CPTRA_FW_REV_ID[i0].REV_ID.value = field_storage.CPTRA_FW_REV_ID[i0].REV_ID.value;
    end
    // Field: soc_ifc_reg.CPTRA_WDT_TIMER1_EN.timer1_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.CPTRA_WDT_TIMER1_EN.timer1_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.CPTRA_WDT_TIMER1_EN && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.CPTRA_WDT_TIMER1_EN.timer1_en.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.CPTRA_WDT_TIMER1_EN.timer1_en.next = next_c;
        field_combo.CPTRA_WDT_TIMER1_EN.timer1_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.CPTRA_WDT_TIMER1_EN.timer1_en.value <= 1'h0;
        end else if(field_combo.CPTRA_WDT_TIMER1_EN.timer1_en.load_next) begin
            field_storage.CPTRA_WDT_TIMER1_EN.timer1_en.value <= field_combo.CPTRA_WDT_TIMER1_EN.timer1_en.next;
        end
    end
    assign hwif_out.CPTRA_WDT_TIMER1_EN.timer1_en.value = field_storage.CPTRA_WDT_TIMER1_EN.timer1_en.value;
    // Field: soc_ifc_reg.CPTRA_WDT_TIMER1_CTRL.timer1_restart
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.CPTRA_WDT_TIMER1_CTRL.timer1_restart.value;
        load_next_c = '0;
        if(decoded_reg_strb.CPTRA_WDT_TIMER1_CTRL && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.CPTRA_WDT_TIMER1_CTRL.timer1_restart.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.CPTRA_WDT_TIMER1_CTRL.timer1_restart.next = next_c;
        field_combo.CPTRA_WDT_TIMER1_CTRL.timer1_restart.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.CPTRA_WDT_TIMER1_CTRL.timer1_restart.value <= 1'h0;
        end else if(field_combo.CPTRA_WDT_TIMER1_CTRL.timer1_restart.load_next) begin
            field_storage.CPTRA_WDT_TIMER1_CTRL.timer1_restart.value <= field_combo.CPTRA_WDT_TIMER1_CTRL.timer1_restart.next;
        end
    end
    assign hwif_out.CPTRA_WDT_TIMER1_CTRL.timer1_restart.value = field_storage.CPTRA_WDT_TIMER1_CTRL.timer1_restart.value;
    for(genvar i0=0; i0<2; i0++) begin
        // Field: soc_ifc_reg.CPTRA_WDT_TIMER1_TIMEOUT_PERIOD[].timer1_timeout_period
        always_comb begin
            automatic logic [31:0] next_c;
            automatic logic load_next_c;
            next_c = field_storage.CPTRA_WDT_TIMER1_TIMEOUT_PERIOD[i0].timer1_timeout_period.value;
            load_next_c = '0;
            if(decoded_reg_strb.CPTRA_WDT_TIMER1_TIMEOUT_PERIOD[i0] && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
                next_c = (field_storage.CPTRA_WDT_TIMER1_TIMEOUT_PERIOD[i0].timer1_timeout_period.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end
            field_combo.CPTRA_WDT_TIMER1_TIMEOUT_PERIOD[i0].timer1_timeout_period.next = next_c;
            field_combo.CPTRA_WDT_TIMER1_TIMEOUT_PERIOD[i0].timer1_timeout_period.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
            if(~hwif_in.cptra_rst_b) begin
                field_storage.CPTRA_WDT_TIMER1_TIMEOUT_PERIOD[i0].timer1_timeout_period.value <= 32'hffffffff;
            end else if(field_combo.CPTRA_WDT_TIMER1_TIMEOUT_PERIOD[i0].timer1_timeout_period.load_next) begin
                field_storage.CPTRA_WDT_TIMER1_TIMEOUT_PERIOD[i0].timer1_timeout_period.value <= field_combo.CPTRA_WDT_TIMER1_TIMEOUT_PERIOD[i0].timer1_timeout_period.next;
            end
        end
        assign hwif_out.CPTRA_WDT_TIMER1_TIMEOUT_PERIOD[i0].timer1_timeout_period.value = field_storage.CPTRA_WDT_TIMER1_TIMEOUT_PERIOD[i0].timer1_timeout_period.value;
    end
    // Field: soc_ifc_reg.CPTRA_WDT_TIMER2_EN.timer2_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.CPTRA_WDT_TIMER2_EN.timer2_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.CPTRA_WDT_TIMER2_EN && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.CPTRA_WDT_TIMER2_EN.timer2_en.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.CPTRA_WDT_TIMER2_EN.timer2_en.next = next_c;
        field_combo.CPTRA_WDT_TIMER2_EN.timer2_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.CPTRA_WDT_TIMER2_EN.timer2_en.value <= 1'h0;
        end else if(field_combo.CPTRA_WDT_TIMER2_EN.timer2_en.load_next) begin
            field_storage.CPTRA_WDT_TIMER2_EN.timer2_en.value <= field_combo.CPTRA_WDT_TIMER2_EN.timer2_en.next;
        end
    end
    assign hwif_out.CPTRA_WDT_TIMER2_EN.timer2_en.value = field_storage.CPTRA_WDT_TIMER2_EN.timer2_en.value;
    // Field: soc_ifc_reg.CPTRA_WDT_TIMER2_CTRL.timer2_restart
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.CPTRA_WDT_TIMER2_CTRL.timer2_restart.value;
        load_next_c = '0;
        if(decoded_reg_strb.CPTRA_WDT_TIMER2_CTRL && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.CPTRA_WDT_TIMER2_CTRL.timer2_restart.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.CPTRA_WDT_TIMER2_CTRL.timer2_restart.next = next_c;
        field_combo.CPTRA_WDT_TIMER2_CTRL.timer2_restart.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.CPTRA_WDT_TIMER2_CTRL.timer2_restart.value <= 1'h0;
        end else if(field_combo.CPTRA_WDT_TIMER2_CTRL.timer2_restart.load_next) begin
            field_storage.CPTRA_WDT_TIMER2_CTRL.timer2_restart.value <= field_combo.CPTRA_WDT_TIMER2_CTRL.timer2_restart.next;
        end
    end
    assign hwif_out.CPTRA_WDT_TIMER2_CTRL.timer2_restart.value = field_storage.CPTRA_WDT_TIMER2_CTRL.timer2_restart.value;
    for(genvar i0=0; i0<2; i0++) begin
        // Field: soc_ifc_reg.CPTRA_WDT_TIMER2_TIMEOUT_PERIOD[].timer2_timeout_period
        always_comb begin
            automatic logic [31:0] next_c;
            automatic logic load_next_c;
            next_c = field_storage.CPTRA_WDT_TIMER2_TIMEOUT_PERIOD[i0].timer2_timeout_period.value;
            load_next_c = '0;
            if(decoded_reg_strb.CPTRA_WDT_TIMER2_TIMEOUT_PERIOD[i0] && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
                next_c = (field_storage.CPTRA_WDT_TIMER2_TIMEOUT_PERIOD[i0].timer2_timeout_period.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end
            field_combo.CPTRA_WDT_TIMER2_TIMEOUT_PERIOD[i0].timer2_timeout_period.next = next_c;
            field_combo.CPTRA_WDT_TIMER2_TIMEOUT_PERIOD[i0].timer2_timeout_period.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
            if(~hwif_in.cptra_rst_b) begin
                field_storage.CPTRA_WDT_TIMER2_TIMEOUT_PERIOD[i0].timer2_timeout_period.value <= 32'hffffffff;
            end else if(field_combo.CPTRA_WDT_TIMER2_TIMEOUT_PERIOD[i0].timer2_timeout_period.load_next) begin
                field_storage.CPTRA_WDT_TIMER2_TIMEOUT_PERIOD[i0].timer2_timeout_period.value <= field_combo.CPTRA_WDT_TIMER2_TIMEOUT_PERIOD[i0].timer2_timeout_period.next;
            end
        end
        assign hwif_out.CPTRA_WDT_TIMER2_TIMEOUT_PERIOD[i0].timer2_timeout_period.value = field_storage.CPTRA_WDT_TIMER2_TIMEOUT_PERIOD[i0].timer2_timeout_period.value;
    end
    // Field: soc_ifc_reg.CPTRA_WDT_STATUS.t1_timeout
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.CPTRA_WDT_STATUS.t1_timeout.value;
        load_next_c = '0;
        if(decoded_reg_strb.CPTRA_WDT_STATUS && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.CPTRA_WDT_STATUS.t1_timeout.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.CPTRA_WDT_STATUS.t1_timeout.next;
            load_next_c = '1;
        end
        field_combo.CPTRA_WDT_STATUS.t1_timeout.next = next_c;
        field_combo.CPTRA_WDT_STATUS.t1_timeout.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.CPTRA_WDT_STATUS.t1_timeout.value <= 1'h0;
        end else if(field_combo.CPTRA_WDT_STATUS.t1_timeout.load_next) begin
            field_storage.CPTRA_WDT_STATUS.t1_timeout.value <= field_combo.CPTRA_WDT_STATUS.t1_timeout.next;
        end
    end
    assign hwif_out.CPTRA_WDT_STATUS.t1_timeout.value = field_storage.CPTRA_WDT_STATUS.t1_timeout.value;
    // Field: soc_ifc_reg.CPTRA_WDT_STATUS.t2_timeout
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.CPTRA_WDT_STATUS.t2_timeout.value;
        load_next_c = '0;
        if(decoded_reg_strb.CPTRA_WDT_STATUS && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.CPTRA_WDT_STATUS.t2_timeout.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.CPTRA_WDT_STATUS.t2_timeout.next;
            load_next_c = '1;
        end
        field_combo.CPTRA_WDT_STATUS.t2_timeout.next = next_c;
        field_combo.CPTRA_WDT_STATUS.t2_timeout.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.CPTRA_WDT_STATUS.t2_timeout.value <= 1'h0;
        end else if(field_combo.CPTRA_WDT_STATUS.t2_timeout.load_next) begin
            field_storage.CPTRA_WDT_STATUS.t2_timeout.value <= field_combo.CPTRA_WDT_STATUS.t2_timeout.next;
        end
    end
    assign hwif_out.CPTRA_WDT_STATUS.t2_timeout.value = field_storage.CPTRA_WDT_STATUS.t2_timeout.value;
    // Field: soc_ifc_reg.CPTRA_FUSE_VALID_AXI_USER.AXI_USER
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.CPTRA_FUSE_VALID_AXI_USER.AXI_USER.value;
        load_next_c = '0;
        if(decoded_reg_strb.CPTRA_FUSE_VALID_AXI_USER && decoded_req_is_wr && !(hwif_in.CPTRA_FUSE_VALID_AXI_USER.AXI_USER.swwel)) begin // SW write
            next_c = (field_storage.CPTRA_FUSE_VALID_AXI_USER.AXI_USER.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.CPTRA_FUSE_VALID_AXI_USER.AXI_USER.next = next_c;
        field_combo.CPTRA_FUSE_VALID_AXI_USER.AXI_USER.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.CPTRA_FUSE_VALID_AXI_USER.AXI_USER.value <= 32'hffffffff;
        end else if(field_combo.CPTRA_FUSE_VALID_AXI_USER.AXI_USER.load_next) begin
            field_storage.CPTRA_FUSE_VALID_AXI_USER.AXI_USER.value <= field_combo.CPTRA_FUSE_VALID_AXI_USER.AXI_USER.next;
        end
    end
    assign hwif_out.CPTRA_FUSE_VALID_AXI_USER.AXI_USER.value = field_storage.CPTRA_FUSE_VALID_AXI_USER.AXI_USER.value;
    // Field: soc_ifc_reg.CPTRA_FUSE_AXI_USER_LOCK.LOCK
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.CPTRA_FUSE_AXI_USER_LOCK.LOCK.value;
        load_next_c = '0;
        if(decoded_reg_strb.CPTRA_FUSE_AXI_USER_LOCK && decoded_req_is_wr && !(hwif_in.CPTRA_FUSE_AXI_USER_LOCK.LOCK.swwel)) begin // SW write
            next_c = (field_storage.CPTRA_FUSE_AXI_USER_LOCK.LOCK.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.CPTRA_FUSE_AXI_USER_LOCK.LOCK.next = next_c;
        field_combo.CPTRA_FUSE_AXI_USER_LOCK.LOCK.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.CPTRA_FUSE_AXI_USER_LOCK.LOCK.value <= 1'h0;
        end else if(field_combo.CPTRA_FUSE_AXI_USER_LOCK.LOCK.load_next) begin
            field_storage.CPTRA_FUSE_AXI_USER_LOCK.LOCK.value <= field_combo.CPTRA_FUSE_AXI_USER_LOCK.LOCK.next;
        end
    end
    assign hwif_out.CPTRA_FUSE_AXI_USER_LOCK.LOCK.value = field_storage.CPTRA_FUSE_AXI_USER_LOCK.LOCK.value;
    for(genvar i0=0; i0<2; i0++) begin
        // Field: soc_ifc_reg.CPTRA_WDT_CFG[].TIMEOUT
        always_comb begin
            automatic logic [31:0] next_c;
            automatic logic load_next_c;
            next_c = field_storage.CPTRA_WDT_CFG[i0].TIMEOUT.value;
            load_next_c = '0;
            if(decoded_reg_strb.CPTRA_WDT_CFG[i0] && decoded_req_is_wr) begin // SW write
                next_c = (field_storage.CPTRA_WDT_CFG[i0].TIMEOUT.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end
            field_combo.CPTRA_WDT_CFG[i0].TIMEOUT.next = next_c;
            field_combo.CPTRA_WDT_CFG[i0].TIMEOUT.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
            if(~hwif_in.cptra_pwrgood) begin
                field_storage.CPTRA_WDT_CFG[i0].TIMEOUT.value <= 32'h0;
            end else if(field_combo.CPTRA_WDT_CFG[i0].TIMEOUT.load_next) begin
                field_storage.CPTRA_WDT_CFG[i0].TIMEOUT.value <= field_combo.CPTRA_WDT_CFG[i0].TIMEOUT.next;
            end
        end
    end
    // Field: soc_ifc_reg.CPTRA_iTRNG_ENTROPY_CONFIG_0.low_threshold
    always_comb begin
        automatic logic [15:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.CPTRA_iTRNG_ENTROPY_CONFIG_0.low_threshold.value;
        load_next_c = '0;
        if(decoded_reg_strb.CPTRA_iTRNG_ENTROPY_CONFIG_0 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.CPTRA_iTRNG_ENTROPY_CONFIG_0.low_threshold.value & ~decoded_wr_biten[15:0]) | (decoded_wr_data[15:0] & decoded_wr_biten[15:0]);
            load_next_c = '1;
        end
        field_combo.CPTRA_iTRNG_ENTROPY_CONFIG_0.low_threshold.next = next_c;
        field_combo.CPTRA_iTRNG_ENTROPY_CONFIG_0.low_threshold.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.CPTRA_iTRNG_ENTROPY_CONFIG_0.low_threshold.value <= 16'h0;
        end else if(field_combo.CPTRA_iTRNG_ENTROPY_CONFIG_0.low_threshold.load_next) begin
            field_storage.CPTRA_iTRNG_ENTROPY_CONFIG_0.low_threshold.value <= field_combo.CPTRA_iTRNG_ENTROPY_CONFIG_0.low_threshold.next;
        end
    end
    // Field: soc_ifc_reg.CPTRA_iTRNG_ENTROPY_CONFIG_0.high_threshold
    always_comb begin
        automatic logic [15:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.CPTRA_iTRNG_ENTROPY_CONFIG_0.high_threshold.value;
        load_next_c = '0;
        if(decoded_reg_strb.CPTRA_iTRNG_ENTROPY_CONFIG_0 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.CPTRA_iTRNG_ENTROPY_CONFIG_0.high_threshold.value & ~decoded_wr_biten[31:16]) | (decoded_wr_data[31:16] & decoded_wr_biten[31:16]);
            load_next_c = '1;
        end
        field_combo.CPTRA_iTRNG_ENTROPY_CONFIG_0.high_threshold.next = next_c;
        field_combo.CPTRA_iTRNG_ENTROPY_CONFIG_0.high_threshold.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.CPTRA_iTRNG_ENTROPY_CONFIG_0.high_threshold.value <= 16'h0;
        end else if(field_combo.CPTRA_iTRNG_ENTROPY_CONFIG_0.high_threshold.load_next) begin
            field_storage.CPTRA_iTRNG_ENTROPY_CONFIG_0.high_threshold.value <= field_combo.CPTRA_iTRNG_ENTROPY_CONFIG_0.high_threshold.next;
        end
    end
    // Field: soc_ifc_reg.CPTRA_iTRNG_ENTROPY_CONFIG_1.repetition_count
    always_comb begin
        automatic logic [15:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.CPTRA_iTRNG_ENTROPY_CONFIG_1.repetition_count.value;
        load_next_c = '0;
        if(decoded_reg_strb.CPTRA_iTRNG_ENTROPY_CONFIG_1 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.CPTRA_iTRNG_ENTROPY_CONFIG_1.repetition_count.value & ~decoded_wr_biten[15:0]) | (decoded_wr_data[15:0] & decoded_wr_biten[15:0]);
            load_next_c = '1;
        end
        field_combo.CPTRA_iTRNG_ENTROPY_CONFIG_1.repetition_count.next = next_c;
        field_combo.CPTRA_iTRNG_ENTROPY_CONFIG_1.repetition_count.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.CPTRA_iTRNG_ENTROPY_CONFIG_1.repetition_count.value <= 16'h0;
        end else if(field_combo.CPTRA_iTRNG_ENTROPY_CONFIG_1.repetition_count.load_next) begin
            field_storage.CPTRA_iTRNG_ENTROPY_CONFIG_1.repetition_count.value <= field_combo.CPTRA_iTRNG_ENTROPY_CONFIG_1.repetition_count.next;
        end
    end
    // Field: soc_ifc_reg.CPTRA_iTRNG_ENTROPY_CONFIG_1.RSVD
    always_comb begin
        automatic logic [15:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.CPTRA_iTRNG_ENTROPY_CONFIG_1.RSVD.value;
        load_next_c = '0;
        if(decoded_reg_strb.CPTRA_iTRNG_ENTROPY_CONFIG_1 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.CPTRA_iTRNG_ENTROPY_CONFIG_1.RSVD.value & ~decoded_wr_biten[31:16]) | (decoded_wr_data[31:16] & decoded_wr_biten[31:16]);
            load_next_c = '1;
        end
        field_combo.CPTRA_iTRNG_ENTROPY_CONFIG_1.RSVD.next = next_c;
        field_combo.CPTRA_iTRNG_ENTROPY_CONFIG_1.RSVD.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.CPTRA_iTRNG_ENTROPY_CONFIG_1.RSVD.value <= 16'h0;
        end else if(field_combo.CPTRA_iTRNG_ENTROPY_CONFIG_1.RSVD.load_next) begin
            field_storage.CPTRA_iTRNG_ENTROPY_CONFIG_1.RSVD.value <= field_combo.CPTRA_iTRNG_ENTROPY_CONFIG_1.RSVD.next;
        end
    end
    for(genvar i0=0; i0<2; i0++) begin
        // Field: soc_ifc_reg.CPTRA_RSVD_REG[].RSVD
        always_comb begin
            automatic logic [31:0] next_c;
            automatic logic load_next_c;
            next_c = field_storage.CPTRA_RSVD_REG[i0].RSVD.value;
            load_next_c = '0;
            if(decoded_reg_strb.CPTRA_RSVD_REG[i0] && decoded_req_is_wr) begin // SW write
                next_c = (field_storage.CPTRA_RSVD_REG[i0].RSVD.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end
            field_combo.CPTRA_RSVD_REG[i0].RSVD.next = next_c;
            field_combo.CPTRA_RSVD_REG[i0].RSVD.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
            if(~hwif_in.cptra_rst_b) begin
                field_storage.CPTRA_RSVD_REG[i0].RSVD.value <= 32'h0;
            end else if(field_combo.CPTRA_RSVD_REG[i0].RSVD.load_next) begin
                field_storage.CPTRA_RSVD_REG[i0].RSVD.value <= field_combo.CPTRA_RSVD_REG[i0].RSVD.next;
            end
        end
    end
    // Field: soc_ifc_reg.CPTRA_HW_CAPABILITIES.cap
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.CPTRA_HW_CAPABILITIES.cap.value;
        load_next_c = '0;
        if(decoded_reg_strb.CPTRA_HW_CAPABILITIES && decoded_req_is_wr && !(hwif_in.CPTRA_HW_CAPABILITIES.cap.swwel)) begin // SW write
            next_c = (field_storage.CPTRA_HW_CAPABILITIES.cap.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.CPTRA_HW_CAPABILITIES.cap.next = next_c;
        field_combo.CPTRA_HW_CAPABILITIES.cap.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.CPTRA_HW_CAPABILITIES.cap.value <= 32'h0;
        end else if(field_combo.CPTRA_HW_CAPABILITIES.cap.load_next) begin
            field_storage.CPTRA_HW_CAPABILITIES.cap.value <= field_combo.CPTRA_HW_CAPABILITIES.cap.next;
        end
    end
    // Field: soc_ifc_reg.CPTRA_FW_CAPABILITIES.cap
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.CPTRA_FW_CAPABILITIES.cap.value;
        load_next_c = '0;
        if(decoded_reg_strb.CPTRA_FW_CAPABILITIES && decoded_req_is_wr && !(hwif_in.CPTRA_FW_CAPABILITIES.cap.swwel)) begin // SW write
            next_c = (field_storage.CPTRA_FW_CAPABILITIES.cap.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.CPTRA_FW_CAPABILITIES.cap.next = next_c;
        field_combo.CPTRA_FW_CAPABILITIES.cap.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.CPTRA_FW_CAPABILITIES.cap.value <= 32'h0;
        end else if(field_combo.CPTRA_FW_CAPABILITIES.cap.load_next) begin
            field_storage.CPTRA_FW_CAPABILITIES.cap.value <= field_combo.CPTRA_FW_CAPABILITIES.cap.next;
        end
    end
    // Field: soc_ifc_reg.CPTRA_CAP_LOCK.lock
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.CPTRA_CAP_LOCK.lock.value;
        load_next_c = '0;
        if(decoded_reg_strb.CPTRA_CAP_LOCK && decoded_req_is_wr && !(hwif_in.CPTRA_CAP_LOCK.lock.swwel)) begin // SW write
            next_c = (field_storage.CPTRA_CAP_LOCK.lock.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.CPTRA_CAP_LOCK.lock.next = next_c;
        field_combo.CPTRA_CAP_LOCK.lock.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.CPTRA_CAP_LOCK.lock.value <= 1'h0;
        end else if(field_combo.CPTRA_CAP_LOCK.lock.load_next) begin
            field_storage.CPTRA_CAP_LOCK.lock.value <= field_combo.CPTRA_CAP_LOCK.lock.next;
        end
    end
    assign hwif_out.CPTRA_CAP_LOCK.lock.value = field_storage.CPTRA_CAP_LOCK.lock.value;
    for(genvar i0=0; i0<12; i0++) begin
        // Field: soc_ifc_reg.CPTRA_OWNER_PK_HASH[].hash
        always_comb begin
            automatic logic [31:0] next_c;
            automatic logic load_next_c;
            next_c = field_storage.CPTRA_OWNER_PK_HASH[i0].hash.value;
            load_next_c = '0;
            if(decoded_reg_strb.CPTRA_OWNER_PK_HASH[i0] && decoded_req_is_wr && !(hwif_in.CPTRA_OWNER_PK_HASH[i0].hash.swwel)) begin // SW write
                next_c = (field_storage.CPTRA_OWNER_PK_HASH[i0].hash.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end
            field_combo.CPTRA_OWNER_PK_HASH[i0].hash.next = next_c;
            field_combo.CPTRA_OWNER_PK_HASH[i0].hash.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
            if(~hwif_in.cptra_pwrgood) begin
                field_storage.CPTRA_OWNER_PK_HASH[i0].hash.value <= 32'h0;
            end else if(field_combo.CPTRA_OWNER_PK_HASH[i0].hash.load_next) begin
                field_storage.CPTRA_OWNER_PK_HASH[i0].hash.value <= field_combo.CPTRA_OWNER_PK_HASH[i0].hash.next;
            end
        end
        assign hwif_out.CPTRA_OWNER_PK_HASH[i0].hash.value = field_storage.CPTRA_OWNER_PK_HASH[i0].hash.value;
    end
    // Field: soc_ifc_reg.CPTRA_OWNER_PK_HASH_LOCK.lock
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.CPTRA_OWNER_PK_HASH_LOCK.lock.value;
        load_next_c = '0;
        if(decoded_reg_strb.CPTRA_OWNER_PK_HASH_LOCK && decoded_req_is_wr && hwif_in.CPTRA_OWNER_PK_HASH_LOCK.lock.swwe) begin // SW write
            next_c = (field_storage.CPTRA_OWNER_PK_HASH_LOCK.lock.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.CPTRA_OWNER_PK_HASH_LOCK.lock.next = next_c;
        field_combo.CPTRA_OWNER_PK_HASH_LOCK.lock.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.CPTRA_OWNER_PK_HASH_LOCK.lock.value <= 1'h0;
        end else if(field_combo.CPTRA_OWNER_PK_HASH_LOCK.lock.load_next) begin
            field_storage.CPTRA_OWNER_PK_HASH_LOCK.lock.value <= field_combo.CPTRA_OWNER_PK_HASH_LOCK.lock.next;
        end
    end
    assign hwif_out.CPTRA_OWNER_PK_HASH_LOCK.lock.value = field_storage.CPTRA_OWNER_PK_HASH_LOCK.lock.value;
    for(genvar i0=0; i0<16; i0++) begin
        // Field: soc_ifc_reg.fuse_uds_seed[].seed
        always_comb begin
            automatic logic [31:0] next_c;
            automatic logic load_next_c;
            next_c = field_storage.fuse_uds_seed[i0].seed.value;
            load_next_c = '0;
            if(decoded_reg_strb.fuse_uds_seed[i0] && decoded_req_is_wr && !(hwif_in.fuse_uds_seed[i0].seed.swwel)) begin // SW write
                next_c = (field_storage.fuse_uds_seed[i0].seed.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end else if(hwif_in.fuse_uds_seed[i0].seed.hwclr) begin // HW Clear
                next_c = '0;
                load_next_c = '1;
            end
            field_combo.fuse_uds_seed[i0].seed.next = next_c;
            field_combo.fuse_uds_seed[i0].seed.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
            if(~hwif_in.cptra_pwrgood) begin
                field_storage.fuse_uds_seed[i0].seed.value <= 32'h0;
            end else if(field_combo.fuse_uds_seed[i0].seed.load_next) begin
                field_storage.fuse_uds_seed[i0].seed.value <= field_combo.fuse_uds_seed[i0].seed.next;
            end
        end
        assign hwif_out.fuse_uds_seed[i0].seed.value = field_storage.fuse_uds_seed[i0].seed.value;
    end
    for(genvar i0=0; i0<8; i0++) begin
        // Field: soc_ifc_reg.fuse_field_entropy[].seed
        always_comb begin
            automatic logic [31:0] next_c;
            automatic logic load_next_c;
            next_c = field_storage.fuse_field_entropy[i0].seed.value;
            load_next_c = '0;
            if(decoded_reg_strb.fuse_field_entropy[i0] && decoded_req_is_wr && !(hwif_in.fuse_field_entropy[i0].seed.swwel)) begin // SW write
                next_c = (field_storage.fuse_field_entropy[i0].seed.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end else if(hwif_in.fuse_field_entropy[i0].seed.hwclr) begin // HW Clear
                next_c = '0;
                load_next_c = '1;
            end
            field_combo.fuse_field_entropy[i0].seed.next = next_c;
            field_combo.fuse_field_entropy[i0].seed.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
            if(~hwif_in.cptra_pwrgood) begin
                field_storage.fuse_field_entropy[i0].seed.value <= 32'h0;
            end else if(field_combo.fuse_field_entropy[i0].seed.load_next) begin
                field_storage.fuse_field_entropy[i0].seed.value <= field_combo.fuse_field_entropy[i0].seed.next;
            end
        end
        assign hwif_out.fuse_field_entropy[i0].seed.value = field_storage.fuse_field_entropy[i0].seed.value;
    end
    for(genvar i0=0; i0<12; i0++) begin
        // Field: soc_ifc_reg.fuse_key_manifest_pk_hash[].hash
        always_comb begin
            automatic logic [31:0] next_c;
            automatic logic load_next_c;
            next_c = field_storage.fuse_key_manifest_pk_hash[i0].hash.value;
            load_next_c = '0;
            if(decoded_reg_strb.fuse_key_manifest_pk_hash[i0] && decoded_req_is_wr && !(hwif_in.fuse_key_manifest_pk_hash[i0].hash.swwel)) begin // SW write
                next_c = (field_storage.fuse_key_manifest_pk_hash[i0].hash.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end
            field_combo.fuse_key_manifest_pk_hash[i0].hash.next = next_c;
            field_combo.fuse_key_manifest_pk_hash[i0].hash.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
            if(~hwif_in.cptra_pwrgood) begin
                field_storage.fuse_key_manifest_pk_hash[i0].hash.value <= 32'h0;
            end else if(field_combo.fuse_key_manifest_pk_hash[i0].hash.load_next) begin
                field_storage.fuse_key_manifest_pk_hash[i0].hash.value <= field_combo.fuse_key_manifest_pk_hash[i0].hash.next;
            end
        end
        assign hwif_out.fuse_key_manifest_pk_hash[i0].hash.value = field_storage.fuse_key_manifest_pk_hash[i0].hash.value;
    end
    // Field: soc_ifc_reg.fuse_key_manifest_pk_hash_mask.mask
    always_comb begin
        automatic logic [3:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.fuse_key_manifest_pk_hash_mask.mask.value;
        load_next_c = '0;
        if(decoded_reg_strb.fuse_key_manifest_pk_hash_mask && decoded_req_is_wr && !(hwif_in.fuse_key_manifest_pk_hash_mask.mask.swwel)) begin // SW write
            next_c = (field_storage.fuse_key_manifest_pk_hash_mask.mask.value & ~decoded_wr_biten[3:0]) | (decoded_wr_data[3:0] & decoded_wr_biten[3:0]);
            load_next_c = '1;
        end
        field_combo.fuse_key_manifest_pk_hash_mask.mask.next = next_c;
        field_combo.fuse_key_manifest_pk_hash_mask.mask.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.fuse_key_manifest_pk_hash_mask.mask.value <= 4'h0;
        end else if(field_combo.fuse_key_manifest_pk_hash_mask.mask.load_next) begin
            field_storage.fuse_key_manifest_pk_hash_mask.mask.value <= field_combo.fuse_key_manifest_pk_hash_mask.mask.next;
        end
    end
    assign hwif_out.fuse_key_manifest_pk_hash_mask.mask.value = field_storage.fuse_key_manifest_pk_hash_mask.mask.value;
    // Field: soc_ifc_reg.fuse_fmc_key_manifest_svn.svn
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.fuse_fmc_key_manifest_svn.svn.value;
        load_next_c = '0;
        if(decoded_reg_strb.fuse_fmc_key_manifest_svn && decoded_req_is_wr && !(hwif_in.fuse_fmc_key_manifest_svn.svn.swwel)) begin // SW write
            next_c = (field_storage.fuse_fmc_key_manifest_svn.svn.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.fuse_fmc_key_manifest_svn.svn.next = next_c;
        field_combo.fuse_fmc_key_manifest_svn.svn.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.fuse_fmc_key_manifest_svn.svn.value <= 32'h0;
        end else if(field_combo.fuse_fmc_key_manifest_svn.svn.load_next) begin
            field_storage.fuse_fmc_key_manifest_svn.svn.value <= field_combo.fuse_fmc_key_manifest_svn.svn.next;
        end
    end
    assign hwif_out.fuse_fmc_key_manifest_svn.svn.value = field_storage.fuse_fmc_key_manifest_svn.svn.value;
    for(genvar i0=0; i0<4; i0++) begin
        // Field: soc_ifc_reg.fuse_runtime_svn[].svn
        always_comb begin
            automatic logic [31:0] next_c;
            automatic logic load_next_c;
            next_c = field_storage.fuse_runtime_svn[i0].svn.value;
            load_next_c = '0;
            if(decoded_reg_strb.fuse_runtime_svn[i0] && decoded_req_is_wr && !(hwif_in.fuse_runtime_svn[i0].svn.swwel)) begin // SW write
                next_c = (field_storage.fuse_runtime_svn[i0].svn.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end
            field_combo.fuse_runtime_svn[i0].svn.next = next_c;
            field_combo.fuse_runtime_svn[i0].svn.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
            if(~hwif_in.cptra_pwrgood) begin
                field_storage.fuse_runtime_svn[i0].svn.value <= 32'h0;
            end else if(field_combo.fuse_runtime_svn[i0].svn.load_next) begin
                field_storage.fuse_runtime_svn[i0].svn.value <= field_combo.fuse_runtime_svn[i0].svn.next;
            end
        end
        assign hwif_out.fuse_runtime_svn[i0].svn.value = field_storage.fuse_runtime_svn[i0].svn.value;
    end
    // Field: soc_ifc_reg.fuse_anti_rollback_disable.dis
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.fuse_anti_rollback_disable.dis.value;
        load_next_c = '0;
        if(decoded_reg_strb.fuse_anti_rollback_disable && decoded_req_is_wr && !(hwif_in.fuse_anti_rollback_disable.dis.swwel)) begin // SW write
            next_c = (field_storage.fuse_anti_rollback_disable.dis.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.fuse_anti_rollback_disable.dis.next = next_c;
        field_combo.fuse_anti_rollback_disable.dis.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.fuse_anti_rollback_disable.dis.value <= 1'h0;
        end else if(field_combo.fuse_anti_rollback_disable.dis.load_next) begin
            field_storage.fuse_anti_rollback_disable.dis.value <= field_combo.fuse_anti_rollback_disable.dis.next;
        end
    end
    assign hwif_out.fuse_anti_rollback_disable.dis.value = field_storage.fuse_anti_rollback_disable.dis.value;
    for(genvar i0=0; i0<24; i0++) begin
        // Field: soc_ifc_reg.fuse_idevid_cert_attr[].cert
        always_comb begin
            automatic logic [31:0] next_c;
            automatic logic load_next_c;
            next_c = field_storage.fuse_idevid_cert_attr[i0].cert.value;
            load_next_c = '0;
            if(decoded_reg_strb.fuse_idevid_cert_attr[i0] && decoded_req_is_wr && !(hwif_in.fuse_idevid_cert_attr[i0].cert.swwel)) begin // SW write
                next_c = (field_storage.fuse_idevid_cert_attr[i0].cert.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end
            field_combo.fuse_idevid_cert_attr[i0].cert.next = next_c;
            field_combo.fuse_idevid_cert_attr[i0].cert.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
            if(~hwif_in.cptra_pwrgood) begin
                field_storage.fuse_idevid_cert_attr[i0].cert.value <= 32'h0;
            end else if(field_combo.fuse_idevid_cert_attr[i0].cert.load_next) begin
                field_storage.fuse_idevid_cert_attr[i0].cert.value <= field_combo.fuse_idevid_cert_attr[i0].cert.next;
            end
        end
        assign hwif_out.fuse_idevid_cert_attr[i0].cert.value = field_storage.fuse_idevid_cert_attr[i0].cert.value;
    end
    for(genvar i0=0; i0<4; i0++) begin
        // Field: soc_ifc_reg.fuse_idevid_manuf_hsm_id[].hsm_id
        always_comb begin
            automatic logic [31:0] next_c;
            automatic logic load_next_c;
            next_c = field_storage.fuse_idevid_manuf_hsm_id[i0].hsm_id.value;
            load_next_c = '0;
            if(decoded_reg_strb.fuse_idevid_manuf_hsm_id[i0] && decoded_req_is_wr && !(hwif_in.fuse_idevid_manuf_hsm_id[i0].hsm_id.swwel)) begin // SW write
                next_c = (field_storage.fuse_idevid_manuf_hsm_id[i0].hsm_id.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end
            field_combo.fuse_idevid_manuf_hsm_id[i0].hsm_id.next = next_c;
            field_combo.fuse_idevid_manuf_hsm_id[i0].hsm_id.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
            if(~hwif_in.cptra_pwrgood) begin
                field_storage.fuse_idevid_manuf_hsm_id[i0].hsm_id.value <= 32'h0;
            end else if(field_combo.fuse_idevid_manuf_hsm_id[i0].hsm_id.load_next) begin
                field_storage.fuse_idevid_manuf_hsm_id[i0].hsm_id.value <= field_combo.fuse_idevid_manuf_hsm_id[i0].hsm_id.next;
            end
        end
        assign hwif_out.fuse_idevid_manuf_hsm_id[i0].hsm_id.value = field_storage.fuse_idevid_manuf_hsm_id[i0].hsm_id.value;
    end
    // Field: soc_ifc_reg.fuse_lms_revocation.lms_revocation
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.fuse_lms_revocation.lms_revocation.value;
        load_next_c = '0;
        if(decoded_reg_strb.fuse_lms_revocation && decoded_req_is_wr && !(hwif_in.fuse_lms_revocation.lms_revocation.swwel)) begin // SW write
            next_c = (field_storage.fuse_lms_revocation.lms_revocation.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.fuse_lms_revocation.lms_revocation.next = next_c;
        field_combo.fuse_lms_revocation.lms_revocation.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.fuse_lms_revocation.lms_revocation.value <= 32'h0;
        end else if(field_combo.fuse_lms_revocation.lms_revocation.load_next) begin
            field_storage.fuse_lms_revocation.lms_revocation.value <= field_combo.fuse_lms_revocation.lms_revocation.next;
        end
    end
    assign hwif_out.fuse_lms_revocation.lms_revocation.value = field_storage.fuse_lms_revocation.lms_revocation.value;
    // Field: soc_ifc_reg.fuse_mldsa_revocation.mldsa_revocation
    always_comb begin
        automatic logic [3:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.fuse_mldsa_revocation.mldsa_revocation.value;
        load_next_c = '0;
        if(decoded_reg_strb.fuse_mldsa_revocation && decoded_req_is_wr && !(hwif_in.fuse_mldsa_revocation.mldsa_revocation.swwel)) begin // SW write
            next_c = (field_storage.fuse_mldsa_revocation.mldsa_revocation.value & ~decoded_wr_biten[3:0]) | (decoded_wr_data[3:0] & decoded_wr_biten[3:0]);
            load_next_c = '1;
        end
        field_combo.fuse_mldsa_revocation.mldsa_revocation.next = next_c;
        field_combo.fuse_mldsa_revocation.mldsa_revocation.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.fuse_mldsa_revocation.mldsa_revocation.value <= 4'h0;
        end else if(field_combo.fuse_mldsa_revocation.mldsa_revocation.load_next) begin
            field_storage.fuse_mldsa_revocation.mldsa_revocation.value <= field_combo.fuse_mldsa_revocation.mldsa_revocation.next;
        end
    end
    assign hwif_out.fuse_mldsa_revocation.mldsa_revocation.value = field_storage.fuse_mldsa_revocation.mldsa_revocation.value;
    // Field: soc_ifc_reg.fuse_soc_stepping_id.soc_stepping_id
    always_comb begin
        automatic logic [15:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.fuse_soc_stepping_id.soc_stepping_id.value;
        load_next_c = '0;
        if(decoded_reg_strb.fuse_soc_stepping_id && decoded_req_is_wr && !(hwif_in.fuse_soc_stepping_id.soc_stepping_id.swwel)) begin // SW write
            next_c = (field_storage.fuse_soc_stepping_id.soc_stepping_id.value & ~decoded_wr_biten[15:0]) | (decoded_wr_data[15:0] & decoded_wr_biten[15:0]);
            load_next_c = '1;
        end
        field_combo.fuse_soc_stepping_id.soc_stepping_id.next = next_c;
        field_combo.fuse_soc_stepping_id.soc_stepping_id.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.fuse_soc_stepping_id.soc_stepping_id.value <= 16'h0;
        end else if(field_combo.fuse_soc_stepping_id.soc_stepping_id.load_next) begin
            field_storage.fuse_soc_stepping_id.soc_stepping_id.value <= field_combo.fuse_soc_stepping_id.soc_stepping_id.next;
        end
    end
    assign hwif_out.fuse_soc_stepping_id.soc_stepping_id.value = field_storage.fuse_soc_stepping_id.soc_stepping_id.value;
    for(genvar i0=0; i0<4; i0++) begin
        // Field: soc_ifc_reg.fuse_manuf_dbg_unlock_token[].token
        always_comb begin
            automatic logic [31:0] next_c;
            automatic logic load_next_c;
            next_c = field_storage.fuse_manuf_dbg_unlock_token[i0].token.value;
            load_next_c = '0;
            if(decoded_reg_strb.fuse_manuf_dbg_unlock_token[i0] && decoded_req_is_wr && !(hwif_in.fuse_manuf_dbg_unlock_token[i0].token.swwel)) begin // SW write
                next_c = (field_storage.fuse_manuf_dbg_unlock_token[i0].token.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end
            field_combo.fuse_manuf_dbg_unlock_token[i0].token.next = next_c;
            field_combo.fuse_manuf_dbg_unlock_token[i0].token.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
            if(~hwif_in.cptra_pwrgood) begin
                field_storage.fuse_manuf_dbg_unlock_token[i0].token.value <= 32'h0;
            end else if(field_combo.fuse_manuf_dbg_unlock_token[i0].token.load_next) begin
                field_storage.fuse_manuf_dbg_unlock_token[i0].token.value <= field_combo.fuse_manuf_dbg_unlock_token[i0].token.next;
            end
        end
        assign hwif_out.fuse_manuf_dbg_unlock_token[i0].token.value = field_storage.fuse_manuf_dbg_unlock_token[i0].token.value;
    end
    // Field: soc_ifc_reg.SS_CALIPTRA_BASE_ADDR_L.addr_l
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.SS_CALIPTRA_BASE_ADDR_L.addr_l.value;
        load_next_c = '0;
        if(decoded_reg_strb.SS_CALIPTRA_BASE_ADDR_L && decoded_req_is_wr && !(hwif_in.SS_CALIPTRA_BASE_ADDR_L.addr_l.swwel)) begin // SW write
            next_c = (field_storage.SS_CALIPTRA_BASE_ADDR_L.addr_l.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end else if(hwif_in.SS_CALIPTRA_BASE_ADDR_L.addr_l.we) begin // HW Write - we
            next_c = hwif_in.SS_CALIPTRA_BASE_ADDR_L.addr_l.next;
            load_next_c = '1;
        end
        field_combo.SS_CALIPTRA_BASE_ADDR_L.addr_l.next = next_c;
        field_combo.SS_CALIPTRA_BASE_ADDR_L.addr_l.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.SS_CALIPTRA_BASE_ADDR_L.addr_l.value <= 32'h0;
        end else if(field_combo.SS_CALIPTRA_BASE_ADDR_L.addr_l.load_next) begin
            field_storage.SS_CALIPTRA_BASE_ADDR_L.addr_l.value <= field_combo.SS_CALIPTRA_BASE_ADDR_L.addr_l.next;
        end
    end
    assign hwif_out.SS_CALIPTRA_BASE_ADDR_L.addr_l.value = field_storage.SS_CALIPTRA_BASE_ADDR_L.addr_l.value;
    // Field: soc_ifc_reg.SS_CALIPTRA_BASE_ADDR_H.addr_h
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.SS_CALIPTRA_BASE_ADDR_H.addr_h.value;
        load_next_c = '0;
        if(decoded_reg_strb.SS_CALIPTRA_BASE_ADDR_H && decoded_req_is_wr && !(hwif_in.SS_CALIPTRA_BASE_ADDR_H.addr_h.swwel)) begin // SW write
            next_c = (field_storage.SS_CALIPTRA_BASE_ADDR_H.addr_h.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end else if(hwif_in.SS_CALIPTRA_BASE_ADDR_H.addr_h.we) begin // HW Write - we
            next_c = hwif_in.SS_CALIPTRA_BASE_ADDR_H.addr_h.next;
            load_next_c = '1;
        end
        field_combo.SS_CALIPTRA_BASE_ADDR_H.addr_h.next = next_c;
        field_combo.SS_CALIPTRA_BASE_ADDR_H.addr_h.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.SS_CALIPTRA_BASE_ADDR_H.addr_h.value <= 32'h0;
        end else if(field_combo.SS_CALIPTRA_BASE_ADDR_H.addr_h.load_next) begin
            field_storage.SS_CALIPTRA_BASE_ADDR_H.addr_h.value <= field_combo.SS_CALIPTRA_BASE_ADDR_H.addr_h.next;
        end
    end
    assign hwif_out.SS_CALIPTRA_BASE_ADDR_H.addr_h.value = field_storage.SS_CALIPTRA_BASE_ADDR_H.addr_h.value;
    // Field: soc_ifc_reg.SS_MCI_BASE_ADDR_L.addr_l
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.SS_MCI_BASE_ADDR_L.addr_l.value;
        load_next_c = '0;
        if(decoded_reg_strb.SS_MCI_BASE_ADDR_L && decoded_req_is_wr && !(hwif_in.SS_MCI_BASE_ADDR_L.addr_l.swwel)) begin // SW write
            next_c = (field_storage.SS_MCI_BASE_ADDR_L.addr_l.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end else if(hwif_in.SS_MCI_BASE_ADDR_L.addr_l.we) begin // HW Write - we
            next_c = hwif_in.SS_MCI_BASE_ADDR_L.addr_l.next;
            load_next_c = '1;
        end
        field_combo.SS_MCI_BASE_ADDR_L.addr_l.next = next_c;
        field_combo.SS_MCI_BASE_ADDR_L.addr_l.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.SS_MCI_BASE_ADDR_L.addr_l.value <= 32'h0;
        end else if(field_combo.SS_MCI_BASE_ADDR_L.addr_l.load_next) begin
            field_storage.SS_MCI_BASE_ADDR_L.addr_l.value <= field_combo.SS_MCI_BASE_ADDR_L.addr_l.next;
        end
    end
    assign hwif_out.SS_MCI_BASE_ADDR_L.addr_l.value = field_storage.SS_MCI_BASE_ADDR_L.addr_l.value;
    // Field: soc_ifc_reg.SS_MCI_BASE_ADDR_H.addr_h
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.SS_MCI_BASE_ADDR_H.addr_h.value;
        load_next_c = '0;
        if(decoded_reg_strb.SS_MCI_BASE_ADDR_H && decoded_req_is_wr && !(hwif_in.SS_MCI_BASE_ADDR_H.addr_h.swwel)) begin // SW write
            next_c = (field_storage.SS_MCI_BASE_ADDR_H.addr_h.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end else if(hwif_in.SS_MCI_BASE_ADDR_H.addr_h.we) begin // HW Write - we
            next_c = hwif_in.SS_MCI_BASE_ADDR_H.addr_h.next;
            load_next_c = '1;
        end
        field_combo.SS_MCI_BASE_ADDR_H.addr_h.next = next_c;
        field_combo.SS_MCI_BASE_ADDR_H.addr_h.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.SS_MCI_BASE_ADDR_H.addr_h.value <= 32'h0;
        end else if(field_combo.SS_MCI_BASE_ADDR_H.addr_h.load_next) begin
            field_storage.SS_MCI_BASE_ADDR_H.addr_h.value <= field_combo.SS_MCI_BASE_ADDR_H.addr_h.next;
        end
    end
    assign hwif_out.SS_MCI_BASE_ADDR_H.addr_h.value = field_storage.SS_MCI_BASE_ADDR_H.addr_h.value;
    // Field: soc_ifc_reg.SS_RECOVERY_IFC_BASE_ADDR_L.addr_l
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.SS_RECOVERY_IFC_BASE_ADDR_L.addr_l.value;
        load_next_c = '0;
        if(decoded_reg_strb.SS_RECOVERY_IFC_BASE_ADDR_L && decoded_req_is_wr && !(hwif_in.SS_RECOVERY_IFC_BASE_ADDR_L.addr_l.swwel)) begin // SW write
            next_c = (field_storage.SS_RECOVERY_IFC_BASE_ADDR_L.addr_l.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end else if(hwif_in.SS_RECOVERY_IFC_BASE_ADDR_L.addr_l.we) begin // HW Write - we
            next_c = hwif_in.SS_RECOVERY_IFC_BASE_ADDR_L.addr_l.next;
            load_next_c = '1;
        end
        field_combo.SS_RECOVERY_IFC_BASE_ADDR_L.addr_l.next = next_c;
        field_combo.SS_RECOVERY_IFC_BASE_ADDR_L.addr_l.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.SS_RECOVERY_IFC_BASE_ADDR_L.addr_l.value <= 32'h0;
        end else if(field_combo.SS_RECOVERY_IFC_BASE_ADDR_L.addr_l.load_next) begin
            field_storage.SS_RECOVERY_IFC_BASE_ADDR_L.addr_l.value <= field_combo.SS_RECOVERY_IFC_BASE_ADDR_L.addr_l.next;
        end
    end
    assign hwif_out.SS_RECOVERY_IFC_BASE_ADDR_L.addr_l.value = field_storage.SS_RECOVERY_IFC_BASE_ADDR_L.addr_l.value;
    // Field: soc_ifc_reg.SS_RECOVERY_IFC_BASE_ADDR_H.addr_h
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.SS_RECOVERY_IFC_BASE_ADDR_H.addr_h.value;
        load_next_c = '0;
        if(decoded_reg_strb.SS_RECOVERY_IFC_BASE_ADDR_H && decoded_req_is_wr && !(hwif_in.SS_RECOVERY_IFC_BASE_ADDR_H.addr_h.swwel)) begin // SW write
            next_c = (field_storage.SS_RECOVERY_IFC_BASE_ADDR_H.addr_h.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end else if(hwif_in.SS_RECOVERY_IFC_BASE_ADDR_H.addr_h.we) begin // HW Write - we
            next_c = hwif_in.SS_RECOVERY_IFC_BASE_ADDR_H.addr_h.next;
            load_next_c = '1;
        end
        field_combo.SS_RECOVERY_IFC_BASE_ADDR_H.addr_h.next = next_c;
        field_combo.SS_RECOVERY_IFC_BASE_ADDR_H.addr_h.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.SS_RECOVERY_IFC_BASE_ADDR_H.addr_h.value <= 32'h0;
        end else if(field_combo.SS_RECOVERY_IFC_BASE_ADDR_H.addr_h.load_next) begin
            field_storage.SS_RECOVERY_IFC_BASE_ADDR_H.addr_h.value <= field_combo.SS_RECOVERY_IFC_BASE_ADDR_H.addr_h.next;
        end
    end
    assign hwif_out.SS_RECOVERY_IFC_BASE_ADDR_H.addr_h.value = field_storage.SS_RECOVERY_IFC_BASE_ADDR_H.addr_h.value;
    // Field: soc_ifc_reg.SS_OTP_FC_BASE_ADDR_L.addr_l
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.SS_OTP_FC_BASE_ADDR_L.addr_l.value;
        load_next_c = '0;
        if(decoded_reg_strb.SS_OTP_FC_BASE_ADDR_L && decoded_req_is_wr && !(hwif_in.SS_OTP_FC_BASE_ADDR_L.addr_l.swwel)) begin // SW write
            next_c = (field_storage.SS_OTP_FC_BASE_ADDR_L.addr_l.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end else if(hwif_in.SS_OTP_FC_BASE_ADDR_L.addr_l.we) begin // HW Write - we
            next_c = hwif_in.SS_OTP_FC_BASE_ADDR_L.addr_l.next;
            load_next_c = '1;
        end
        field_combo.SS_OTP_FC_BASE_ADDR_L.addr_l.next = next_c;
        field_combo.SS_OTP_FC_BASE_ADDR_L.addr_l.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.SS_OTP_FC_BASE_ADDR_L.addr_l.value <= 32'h0;
        end else if(field_combo.SS_OTP_FC_BASE_ADDR_L.addr_l.load_next) begin
            field_storage.SS_OTP_FC_BASE_ADDR_L.addr_l.value <= field_combo.SS_OTP_FC_BASE_ADDR_L.addr_l.next;
        end
    end
    assign hwif_out.SS_OTP_FC_BASE_ADDR_L.addr_l.value = field_storage.SS_OTP_FC_BASE_ADDR_L.addr_l.value;
    // Field: soc_ifc_reg.SS_OTP_FC_BASE_ADDR_H.addr_h
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.SS_OTP_FC_BASE_ADDR_H.addr_h.value;
        load_next_c = '0;
        if(decoded_reg_strb.SS_OTP_FC_BASE_ADDR_H && decoded_req_is_wr && !(hwif_in.SS_OTP_FC_BASE_ADDR_H.addr_h.swwel)) begin // SW write
            next_c = (field_storage.SS_OTP_FC_BASE_ADDR_H.addr_h.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end else if(hwif_in.SS_OTP_FC_BASE_ADDR_H.addr_h.we) begin // HW Write - we
            next_c = hwif_in.SS_OTP_FC_BASE_ADDR_H.addr_h.next;
            load_next_c = '1;
        end
        field_combo.SS_OTP_FC_BASE_ADDR_H.addr_h.next = next_c;
        field_combo.SS_OTP_FC_BASE_ADDR_H.addr_h.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.SS_OTP_FC_BASE_ADDR_H.addr_h.value <= 32'h0;
        end else if(field_combo.SS_OTP_FC_BASE_ADDR_H.addr_h.load_next) begin
            field_storage.SS_OTP_FC_BASE_ADDR_H.addr_h.value <= field_combo.SS_OTP_FC_BASE_ADDR_H.addr_h.next;
        end
    end
    assign hwif_out.SS_OTP_FC_BASE_ADDR_H.addr_h.value = field_storage.SS_OTP_FC_BASE_ADDR_H.addr_h.value;
    // Field: soc_ifc_reg.SS_UDS_SEED_BASE_ADDR_L.addr_l
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.SS_UDS_SEED_BASE_ADDR_L.addr_l.value;
        load_next_c = '0;
        if(decoded_reg_strb.SS_UDS_SEED_BASE_ADDR_L && decoded_req_is_wr && !(hwif_in.SS_UDS_SEED_BASE_ADDR_L.addr_l.swwel)) begin // SW write
            next_c = (field_storage.SS_UDS_SEED_BASE_ADDR_L.addr_l.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end else if(hwif_in.SS_UDS_SEED_BASE_ADDR_L.addr_l.we) begin // HW Write - we
            next_c = hwif_in.SS_UDS_SEED_BASE_ADDR_L.addr_l.next;
            load_next_c = '1;
        end
        field_combo.SS_UDS_SEED_BASE_ADDR_L.addr_l.next = next_c;
        field_combo.SS_UDS_SEED_BASE_ADDR_L.addr_l.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.SS_UDS_SEED_BASE_ADDR_L.addr_l.value <= 32'h0;
        end else if(field_combo.SS_UDS_SEED_BASE_ADDR_L.addr_l.load_next) begin
            field_storage.SS_UDS_SEED_BASE_ADDR_L.addr_l.value <= field_combo.SS_UDS_SEED_BASE_ADDR_L.addr_l.next;
        end
    end
    assign hwif_out.SS_UDS_SEED_BASE_ADDR_L.addr_l.value = field_storage.SS_UDS_SEED_BASE_ADDR_L.addr_l.value;
    // Field: soc_ifc_reg.SS_UDS_SEED_BASE_ADDR_H.addr_h
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.SS_UDS_SEED_BASE_ADDR_H.addr_h.value;
        load_next_c = '0;
        if(decoded_reg_strb.SS_UDS_SEED_BASE_ADDR_H && decoded_req_is_wr && !(hwif_in.SS_UDS_SEED_BASE_ADDR_H.addr_h.swwel)) begin // SW write
            next_c = (field_storage.SS_UDS_SEED_BASE_ADDR_H.addr_h.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end else if(hwif_in.SS_UDS_SEED_BASE_ADDR_H.addr_h.we) begin // HW Write - we
            next_c = hwif_in.SS_UDS_SEED_BASE_ADDR_H.addr_h.next;
            load_next_c = '1;
        end
        field_combo.SS_UDS_SEED_BASE_ADDR_H.addr_h.next = next_c;
        field_combo.SS_UDS_SEED_BASE_ADDR_H.addr_h.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.SS_UDS_SEED_BASE_ADDR_H.addr_h.value <= 32'h0;
        end else if(field_combo.SS_UDS_SEED_BASE_ADDR_H.addr_h.load_next) begin
            field_storage.SS_UDS_SEED_BASE_ADDR_H.addr_h.value <= field_combo.SS_UDS_SEED_BASE_ADDR_H.addr_h.next;
        end
    end
    assign hwif_out.SS_UDS_SEED_BASE_ADDR_H.addr_h.value = field_storage.SS_UDS_SEED_BASE_ADDR_H.addr_h.value;
    // Field: soc_ifc_reg.SS_PROD_DEBUG_UNLOCK_AUTH_PK_HASH_REG_BANK_OFFSET.offset
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.SS_PROD_DEBUG_UNLOCK_AUTH_PK_HASH_REG_BANK_OFFSET.offset.value;
        load_next_c = '0;
        if(decoded_reg_strb.SS_PROD_DEBUG_UNLOCK_AUTH_PK_HASH_REG_BANK_OFFSET && decoded_req_is_wr && !(hwif_in.SS_PROD_DEBUG_UNLOCK_AUTH_PK_HASH_REG_BANK_OFFSET.offset.swwel)) begin // SW write
            next_c = (field_storage.SS_PROD_DEBUG_UNLOCK_AUTH_PK_HASH_REG_BANK_OFFSET.offset.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end else if(hwif_in.SS_PROD_DEBUG_UNLOCK_AUTH_PK_HASH_REG_BANK_OFFSET.offset.we) begin // HW Write - we
            next_c = hwif_in.SS_PROD_DEBUG_UNLOCK_AUTH_PK_HASH_REG_BANK_OFFSET.offset.next;
            load_next_c = '1;
        end
        field_combo.SS_PROD_DEBUG_UNLOCK_AUTH_PK_HASH_REG_BANK_OFFSET.offset.next = next_c;
        field_combo.SS_PROD_DEBUG_UNLOCK_AUTH_PK_HASH_REG_BANK_OFFSET.offset.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.SS_PROD_DEBUG_UNLOCK_AUTH_PK_HASH_REG_BANK_OFFSET.offset.value <= 32'h0;
        end else if(field_combo.SS_PROD_DEBUG_UNLOCK_AUTH_PK_HASH_REG_BANK_OFFSET.offset.load_next) begin
            field_storage.SS_PROD_DEBUG_UNLOCK_AUTH_PK_HASH_REG_BANK_OFFSET.offset.value <= field_combo.SS_PROD_DEBUG_UNLOCK_AUTH_PK_HASH_REG_BANK_OFFSET.offset.next;
        end
    end
    assign hwif_out.SS_PROD_DEBUG_UNLOCK_AUTH_PK_HASH_REG_BANK_OFFSET.offset.value = field_storage.SS_PROD_DEBUG_UNLOCK_AUTH_PK_HASH_REG_BANK_OFFSET.offset.value;
    // Field: soc_ifc_reg.SS_NUM_OF_PROD_DEBUG_UNLOCK_AUTH_PK_HASHES.num
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.SS_NUM_OF_PROD_DEBUG_UNLOCK_AUTH_PK_HASHES.num.value;
        load_next_c = '0;
        if(decoded_reg_strb.SS_NUM_OF_PROD_DEBUG_UNLOCK_AUTH_PK_HASHES && decoded_req_is_wr && !(hwif_in.SS_NUM_OF_PROD_DEBUG_UNLOCK_AUTH_PK_HASHES.num.swwel)) begin // SW write
            next_c = (field_storage.SS_NUM_OF_PROD_DEBUG_UNLOCK_AUTH_PK_HASHES.num.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end else if(hwif_in.SS_NUM_OF_PROD_DEBUG_UNLOCK_AUTH_PK_HASHES.num.we) begin // HW Write - we
            next_c = hwif_in.SS_NUM_OF_PROD_DEBUG_UNLOCK_AUTH_PK_HASHES.num.next;
            load_next_c = '1;
        end
        field_combo.SS_NUM_OF_PROD_DEBUG_UNLOCK_AUTH_PK_HASHES.num.next = next_c;
        field_combo.SS_NUM_OF_PROD_DEBUG_UNLOCK_AUTH_PK_HASHES.num.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.SS_NUM_OF_PROD_DEBUG_UNLOCK_AUTH_PK_HASHES.num.value <= 32'h8;
        end else if(field_combo.SS_NUM_OF_PROD_DEBUG_UNLOCK_AUTH_PK_HASHES.num.load_next) begin
            field_storage.SS_NUM_OF_PROD_DEBUG_UNLOCK_AUTH_PK_HASHES.num.value <= field_combo.SS_NUM_OF_PROD_DEBUG_UNLOCK_AUTH_PK_HASHES.num.next;
        end
    end
    assign hwif_out.SS_NUM_OF_PROD_DEBUG_UNLOCK_AUTH_PK_HASHES.num.value = field_storage.SS_NUM_OF_PROD_DEBUG_UNLOCK_AUTH_PK_HASHES.num.value;
    // Field: soc_ifc_reg.SS_DEBUG_INTENT.debug_intent
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.SS_DEBUG_INTENT.debug_intent.value;
        load_next_c = '0;
        if(hwif_in.SS_DEBUG_INTENT.debug_intent.we) begin // HW Write - we
            next_c = hwif_in.SS_DEBUG_INTENT.debug_intent.next;
            load_next_c = '1;
        end
        field_combo.SS_DEBUG_INTENT.debug_intent.next = next_c;
        field_combo.SS_DEBUG_INTENT.debug_intent.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.SS_DEBUG_INTENT.debug_intent.value <= 1'h0;
        end else if(field_combo.SS_DEBUG_INTENT.debug_intent.load_next) begin
            field_storage.SS_DEBUG_INTENT.debug_intent.value <= field_combo.SS_DEBUG_INTENT.debug_intent.next;
        end
    end
    assign hwif_out.SS_DEBUG_INTENT.debug_intent.value = field_storage.SS_DEBUG_INTENT.debug_intent.value;
    for(genvar i0=0; i0<4; i0++) begin
        // Field: soc_ifc_reg.SS_STRAP_GENERIC[].data
        always_comb begin
            automatic logic [31:0] next_c;
            automatic logic load_next_c;
            next_c = field_storage.SS_STRAP_GENERIC[i0].data.value;
            load_next_c = '0;
            if(decoded_reg_strb.SS_STRAP_GENERIC[i0] && decoded_req_is_wr && !(hwif_in.SS_STRAP_GENERIC[i0].data.swwel)) begin // SW write
                next_c = (field_storage.SS_STRAP_GENERIC[i0].data.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end else if(hwif_in.SS_STRAP_GENERIC[i0].data.we) begin // HW Write - we
                next_c = hwif_in.SS_STRAP_GENERIC[i0].data.next;
                load_next_c = '1;
            end
            field_combo.SS_STRAP_GENERIC[i0].data.next = next_c;
            field_combo.SS_STRAP_GENERIC[i0].data.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
            if(~hwif_in.cptra_pwrgood) begin
                field_storage.SS_STRAP_GENERIC[i0].data.value <= 32'h0;
            end else if(field_combo.SS_STRAP_GENERIC[i0].data.load_next) begin
                field_storage.SS_STRAP_GENERIC[i0].data.value <= field_combo.SS_STRAP_GENERIC[i0].data.next;
            end
        end
        assign hwif_out.SS_STRAP_GENERIC[i0].data.value = field_storage.SS_STRAP_GENERIC[i0].data.value;
    end
    // Field: soc_ifc_reg.SS_DBG_MANUF_SERVICE_REG_REQ.MANUF_DBG_UNLOCK_REQ
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.SS_DBG_MANUF_SERVICE_REG_REQ.MANUF_DBG_UNLOCK_REQ.value;
        load_next_c = '0;
        if(decoded_reg_strb.SS_DBG_MANUF_SERVICE_REG_REQ && decoded_req_is_wr && hwif_in.SS_DBG_MANUF_SERVICE_REG_REQ.MANUF_DBG_UNLOCK_REQ.swwe) begin // SW write
            next_c = (field_storage.SS_DBG_MANUF_SERVICE_REG_REQ.MANUF_DBG_UNLOCK_REQ.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end else if(hwif_in.SS_DBG_MANUF_SERVICE_REG_REQ.MANUF_DBG_UNLOCK_REQ.we) begin // HW Write - we
            next_c = hwif_in.SS_DBG_MANUF_SERVICE_REG_REQ.MANUF_DBG_UNLOCK_REQ.next;
            load_next_c = '1;
        end
        field_combo.SS_DBG_MANUF_SERVICE_REG_REQ.MANUF_DBG_UNLOCK_REQ.next = next_c;
        field_combo.SS_DBG_MANUF_SERVICE_REG_REQ.MANUF_DBG_UNLOCK_REQ.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.SS_DBG_MANUF_SERVICE_REG_REQ.MANUF_DBG_UNLOCK_REQ.value <= 1'h0;
        end else if(field_combo.SS_DBG_MANUF_SERVICE_REG_REQ.MANUF_DBG_UNLOCK_REQ.load_next) begin
            field_storage.SS_DBG_MANUF_SERVICE_REG_REQ.MANUF_DBG_UNLOCK_REQ.value <= field_combo.SS_DBG_MANUF_SERVICE_REG_REQ.MANUF_DBG_UNLOCK_REQ.next;
        end
    end
    assign hwif_out.SS_DBG_MANUF_SERVICE_REG_REQ.MANUF_DBG_UNLOCK_REQ.value = field_storage.SS_DBG_MANUF_SERVICE_REG_REQ.MANUF_DBG_UNLOCK_REQ.value;
    // Field: soc_ifc_reg.SS_DBG_MANUF_SERVICE_REG_REQ.PROD_DBG_UNLOCK_REQ
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.SS_DBG_MANUF_SERVICE_REG_REQ.PROD_DBG_UNLOCK_REQ.value;
        load_next_c = '0;
        if(decoded_reg_strb.SS_DBG_MANUF_SERVICE_REG_REQ && decoded_req_is_wr && hwif_in.SS_DBG_MANUF_SERVICE_REG_REQ.PROD_DBG_UNLOCK_REQ.swwe) begin // SW write
            next_c = (field_storage.SS_DBG_MANUF_SERVICE_REG_REQ.PROD_DBG_UNLOCK_REQ.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end else if(hwif_in.SS_DBG_MANUF_SERVICE_REG_REQ.PROD_DBG_UNLOCK_REQ.we) begin // HW Write - we
            next_c = hwif_in.SS_DBG_MANUF_SERVICE_REG_REQ.PROD_DBG_UNLOCK_REQ.next;
            load_next_c = '1;
        end
        field_combo.SS_DBG_MANUF_SERVICE_REG_REQ.PROD_DBG_UNLOCK_REQ.next = next_c;
        field_combo.SS_DBG_MANUF_SERVICE_REG_REQ.PROD_DBG_UNLOCK_REQ.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.SS_DBG_MANUF_SERVICE_REG_REQ.PROD_DBG_UNLOCK_REQ.value <= 1'h0;
        end else if(field_combo.SS_DBG_MANUF_SERVICE_REG_REQ.PROD_DBG_UNLOCK_REQ.load_next) begin
            field_storage.SS_DBG_MANUF_SERVICE_REG_REQ.PROD_DBG_UNLOCK_REQ.value <= field_combo.SS_DBG_MANUF_SERVICE_REG_REQ.PROD_DBG_UNLOCK_REQ.next;
        end
    end
    assign hwif_out.SS_DBG_MANUF_SERVICE_REG_REQ.PROD_DBG_UNLOCK_REQ.value = field_storage.SS_DBG_MANUF_SERVICE_REG_REQ.PROD_DBG_UNLOCK_REQ.value;
    // Field: soc_ifc_reg.SS_DBG_MANUF_SERVICE_REG_REQ.UDS_PROGRAM_REQ
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.SS_DBG_MANUF_SERVICE_REG_REQ.UDS_PROGRAM_REQ.value;
        load_next_c = '0;
        if(decoded_reg_strb.SS_DBG_MANUF_SERVICE_REG_REQ && decoded_req_is_wr && hwif_in.SS_DBG_MANUF_SERVICE_REG_REQ.UDS_PROGRAM_REQ.swwe) begin // SW write
            next_c = (field_storage.SS_DBG_MANUF_SERVICE_REG_REQ.UDS_PROGRAM_REQ.value & ~decoded_wr_biten[2:2]) | (decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end else if(hwif_in.SS_DBG_MANUF_SERVICE_REG_REQ.UDS_PROGRAM_REQ.we) begin // HW Write - we
            next_c = hwif_in.SS_DBG_MANUF_SERVICE_REG_REQ.UDS_PROGRAM_REQ.next;
            load_next_c = '1;
        end
        field_combo.SS_DBG_MANUF_SERVICE_REG_REQ.UDS_PROGRAM_REQ.next = next_c;
        field_combo.SS_DBG_MANUF_SERVICE_REG_REQ.UDS_PROGRAM_REQ.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.SS_DBG_MANUF_SERVICE_REG_REQ.UDS_PROGRAM_REQ.value <= 1'h0;
        end else if(field_combo.SS_DBG_MANUF_SERVICE_REG_REQ.UDS_PROGRAM_REQ.load_next) begin
            field_storage.SS_DBG_MANUF_SERVICE_REG_REQ.UDS_PROGRAM_REQ.value <= field_combo.SS_DBG_MANUF_SERVICE_REG_REQ.UDS_PROGRAM_REQ.next;
        end
    end
    assign hwif_out.SS_DBG_MANUF_SERVICE_REG_REQ.UDS_PROGRAM_REQ.value = field_storage.SS_DBG_MANUF_SERVICE_REG_REQ.UDS_PROGRAM_REQ.value;
    // Field: soc_ifc_reg.SS_DBG_MANUF_SERVICE_REG_RSP.MANUF_DBG_UNLOCK_SUCCESS
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.SS_DBG_MANUF_SERVICE_REG_RSP.MANUF_DBG_UNLOCK_SUCCESS.value;
        load_next_c = '0;
        if(decoded_reg_strb.SS_DBG_MANUF_SERVICE_REG_RSP && decoded_req_is_wr && hwif_in.SS_DBG_MANUF_SERVICE_REG_RSP.MANUF_DBG_UNLOCK_SUCCESS.swwe) begin // SW write
            next_c = (field_storage.SS_DBG_MANUF_SERVICE_REG_RSP.MANUF_DBG_UNLOCK_SUCCESS.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end else if(hwif_in.SS_DBG_MANUF_SERVICE_REG_RSP.MANUF_DBG_UNLOCK_SUCCESS.we) begin // HW Write - we
            next_c = hwif_in.SS_DBG_MANUF_SERVICE_REG_RSP.MANUF_DBG_UNLOCK_SUCCESS.next;
            load_next_c = '1;
        end
        field_combo.SS_DBG_MANUF_SERVICE_REG_RSP.MANUF_DBG_UNLOCK_SUCCESS.next = next_c;
        field_combo.SS_DBG_MANUF_SERVICE_REG_RSP.MANUF_DBG_UNLOCK_SUCCESS.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.SS_DBG_MANUF_SERVICE_REG_RSP.MANUF_DBG_UNLOCK_SUCCESS.value <= 1'h0;
        end else if(field_combo.SS_DBG_MANUF_SERVICE_REG_RSP.MANUF_DBG_UNLOCK_SUCCESS.load_next) begin
            field_storage.SS_DBG_MANUF_SERVICE_REG_RSP.MANUF_DBG_UNLOCK_SUCCESS.value <= field_combo.SS_DBG_MANUF_SERVICE_REG_RSP.MANUF_DBG_UNLOCK_SUCCESS.next;
        end
    end
    assign hwif_out.SS_DBG_MANUF_SERVICE_REG_RSP.MANUF_DBG_UNLOCK_SUCCESS.value = field_storage.SS_DBG_MANUF_SERVICE_REG_RSP.MANUF_DBG_UNLOCK_SUCCESS.value;
    // Field: soc_ifc_reg.SS_DBG_MANUF_SERVICE_REG_RSP.MANUF_DBG_UNLOCK_FAIL
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.SS_DBG_MANUF_SERVICE_REG_RSP.MANUF_DBG_UNLOCK_FAIL.value;
        load_next_c = '0;
        if(decoded_reg_strb.SS_DBG_MANUF_SERVICE_REG_RSP && decoded_req_is_wr && hwif_in.SS_DBG_MANUF_SERVICE_REG_RSP.MANUF_DBG_UNLOCK_FAIL.swwe) begin // SW write
            next_c = (field_storage.SS_DBG_MANUF_SERVICE_REG_RSP.MANUF_DBG_UNLOCK_FAIL.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end else if(hwif_in.SS_DBG_MANUF_SERVICE_REG_RSP.MANUF_DBG_UNLOCK_FAIL.we) begin // HW Write - we
            next_c = hwif_in.SS_DBG_MANUF_SERVICE_REG_RSP.MANUF_DBG_UNLOCK_FAIL.next;
            load_next_c = '1;
        end
        field_combo.SS_DBG_MANUF_SERVICE_REG_RSP.MANUF_DBG_UNLOCK_FAIL.next = next_c;
        field_combo.SS_DBG_MANUF_SERVICE_REG_RSP.MANUF_DBG_UNLOCK_FAIL.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.SS_DBG_MANUF_SERVICE_REG_RSP.MANUF_DBG_UNLOCK_FAIL.value <= 1'h0;
        end else if(field_combo.SS_DBG_MANUF_SERVICE_REG_RSP.MANUF_DBG_UNLOCK_FAIL.load_next) begin
            field_storage.SS_DBG_MANUF_SERVICE_REG_RSP.MANUF_DBG_UNLOCK_FAIL.value <= field_combo.SS_DBG_MANUF_SERVICE_REG_RSP.MANUF_DBG_UNLOCK_FAIL.next;
        end
    end
    assign hwif_out.SS_DBG_MANUF_SERVICE_REG_RSP.MANUF_DBG_UNLOCK_FAIL.value = field_storage.SS_DBG_MANUF_SERVICE_REG_RSP.MANUF_DBG_UNLOCK_FAIL.value;
    // Field: soc_ifc_reg.SS_DBG_MANUF_SERVICE_REG_RSP.MANUF_DBG_UNLOCK_IN_PROGRESS
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.SS_DBG_MANUF_SERVICE_REG_RSP.MANUF_DBG_UNLOCK_IN_PROGRESS.value;
        load_next_c = '0;
        if(decoded_reg_strb.SS_DBG_MANUF_SERVICE_REG_RSP && decoded_req_is_wr && hwif_in.SS_DBG_MANUF_SERVICE_REG_RSP.MANUF_DBG_UNLOCK_IN_PROGRESS.swwe) begin // SW write
            next_c = (field_storage.SS_DBG_MANUF_SERVICE_REG_RSP.MANUF_DBG_UNLOCK_IN_PROGRESS.value & ~decoded_wr_biten[2:2]) | (decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end else if(hwif_in.SS_DBG_MANUF_SERVICE_REG_RSP.MANUF_DBG_UNLOCK_IN_PROGRESS.we) begin // HW Write - we
            next_c = hwif_in.SS_DBG_MANUF_SERVICE_REG_RSP.MANUF_DBG_UNLOCK_IN_PROGRESS.next;
            load_next_c = '1;
        end
        field_combo.SS_DBG_MANUF_SERVICE_REG_RSP.MANUF_DBG_UNLOCK_IN_PROGRESS.next = next_c;
        field_combo.SS_DBG_MANUF_SERVICE_REG_RSP.MANUF_DBG_UNLOCK_IN_PROGRESS.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.SS_DBG_MANUF_SERVICE_REG_RSP.MANUF_DBG_UNLOCK_IN_PROGRESS.value <= 1'h0;
        end else if(field_combo.SS_DBG_MANUF_SERVICE_REG_RSP.MANUF_DBG_UNLOCK_IN_PROGRESS.load_next) begin
            field_storage.SS_DBG_MANUF_SERVICE_REG_RSP.MANUF_DBG_UNLOCK_IN_PROGRESS.value <= field_combo.SS_DBG_MANUF_SERVICE_REG_RSP.MANUF_DBG_UNLOCK_IN_PROGRESS.next;
        end
    end
    assign hwif_out.SS_DBG_MANUF_SERVICE_REG_RSP.MANUF_DBG_UNLOCK_IN_PROGRESS.value = field_storage.SS_DBG_MANUF_SERVICE_REG_RSP.MANUF_DBG_UNLOCK_IN_PROGRESS.value;
    // Field: soc_ifc_reg.SS_DBG_MANUF_SERVICE_REG_RSP.PROD_DBG_UNLOCK_SUCCESS
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.SS_DBG_MANUF_SERVICE_REG_RSP.PROD_DBG_UNLOCK_SUCCESS.value;
        load_next_c = '0;
        if(decoded_reg_strb.SS_DBG_MANUF_SERVICE_REG_RSP && decoded_req_is_wr && hwif_in.SS_DBG_MANUF_SERVICE_REG_RSP.PROD_DBG_UNLOCK_SUCCESS.swwe) begin // SW write
            next_c = (field_storage.SS_DBG_MANUF_SERVICE_REG_RSP.PROD_DBG_UNLOCK_SUCCESS.value & ~decoded_wr_biten[3:3]) | (decoded_wr_data[3:3] & decoded_wr_biten[3:3]);
            load_next_c = '1;
        end else if(hwif_in.SS_DBG_MANUF_SERVICE_REG_RSP.PROD_DBG_UNLOCK_SUCCESS.we) begin // HW Write - we
            next_c = hwif_in.SS_DBG_MANUF_SERVICE_REG_RSP.PROD_DBG_UNLOCK_SUCCESS.next;
            load_next_c = '1;
        end
        field_combo.SS_DBG_MANUF_SERVICE_REG_RSP.PROD_DBG_UNLOCK_SUCCESS.next = next_c;
        field_combo.SS_DBG_MANUF_SERVICE_REG_RSP.PROD_DBG_UNLOCK_SUCCESS.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.SS_DBG_MANUF_SERVICE_REG_RSP.PROD_DBG_UNLOCK_SUCCESS.value <= 1'h0;
        end else if(field_combo.SS_DBG_MANUF_SERVICE_REG_RSP.PROD_DBG_UNLOCK_SUCCESS.load_next) begin
            field_storage.SS_DBG_MANUF_SERVICE_REG_RSP.PROD_DBG_UNLOCK_SUCCESS.value <= field_combo.SS_DBG_MANUF_SERVICE_REG_RSP.PROD_DBG_UNLOCK_SUCCESS.next;
        end
    end
    assign hwif_out.SS_DBG_MANUF_SERVICE_REG_RSP.PROD_DBG_UNLOCK_SUCCESS.value = field_storage.SS_DBG_MANUF_SERVICE_REG_RSP.PROD_DBG_UNLOCK_SUCCESS.value;
    // Field: soc_ifc_reg.SS_DBG_MANUF_SERVICE_REG_RSP.PROD_DBG_UNLOCK_FAIL
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.SS_DBG_MANUF_SERVICE_REG_RSP.PROD_DBG_UNLOCK_FAIL.value;
        load_next_c = '0;
        if(decoded_reg_strb.SS_DBG_MANUF_SERVICE_REG_RSP && decoded_req_is_wr && hwif_in.SS_DBG_MANUF_SERVICE_REG_RSP.PROD_DBG_UNLOCK_FAIL.swwe) begin // SW write
            next_c = (field_storage.SS_DBG_MANUF_SERVICE_REG_RSP.PROD_DBG_UNLOCK_FAIL.value & ~decoded_wr_biten[4:4]) | (decoded_wr_data[4:4] & decoded_wr_biten[4:4]);
            load_next_c = '1;
        end else if(hwif_in.SS_DBG_MANUF_SERVICE_REG_RSP.PROD_DBG_UNLOCK_FAIL.we) begin // HW Write - we
            next_c = hwif_in.SS_DBG_MANUF_SERVICE_REG_RSP.PROD_DBG_UNLOCK_FAIL.next;
            load_next_c = '1;
        end
        field_combo.SS_DBG_MANUF_SERVICE_REG_RSP.PROD_DBG_UNLOCK_FAIL.next = next_c;
        field_combo.SS_DBG_MANUF_SERVICE_REG_RSP.PROD_DBG_UNLOCK_FAIL.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.SS_DBG_MANUF_SERVICE_REG_RSP.PROD_DBG_UNLOCK_FAIL.value <= 1'h0;
        end else if(field_combo.SS_DBG_MANUF_SERVICE_REG_RSP.PROD_DBG_UNLOCK_FAIL.load_next) begin
            field_storage.SS_DBG_MANUF_SERVICE_REG_RSP.PROD_DBG_UNLOCK_FAIL.value <= field_combo.SS_DBG_MANUF_SERVICE_REG_RSP.PROD_DBG_UNLOCK_FAIL.next;
        end
    end
    assign hwif_out.SS_DBG_MANUF_SERVICE_REG_RSP.PROD_DBG_UNLOCK_FAIL.value = field_storage.SS_DBG_MANUF_SERVICE_REG_RSP.PROD_DBG_UNLOCK_FAIL.value;
    // Field: soc_ifc_reg.SS_DBG_MANUF_SERVICE_REG_RSP.PROD_DBG_UNLOCK_IN_PROGRESS
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.SS_DBG_MANUF_SERVICE_REG_RSP.PROD_DBG_UNLOCK_IN_PROGRESS.value;
        load_next_c = '0;
        if(decoded_reg_strb.SS_DBG_MANUF_SERVICE_REG_RSP && decoded_req_is_wr && hwif_in.SS_DBG_MANUF_SERVICE_REG_RSP.PROD_DBG_UNLOCK_IN_PROGRESS.swwe) begin // SW write
            next_c = (field_storage.SS_DBG_MANUF_SERVICE_REG_RSP.PROD_DBG_UNLOCK_IN_PROGRESS.value & ~decoded_wr_biten[5:5]) | (decoded_wr_data[5:5] & decoded_wr_biten[5:5]);
            load_next_c = '1;
        end else if(hwif_in.SS_DBG_MANUF_SERVICE_REG_RSP.PROD_DBG_UNLOCK_IN_PROGRESS.we) begin // HW Write - we
            next_c = hwif_in.SS_DBG_MANUF_SERVICE_REG_RSP.PROD_DBG_UNLOCK_IN_PROGRESS.next;
            load_next_c = '1;
        end
        field_combo.SS_DBG_MANUF_SERVICE_REG_RSP.PROD_DBG_UNLOCK_IN_PROGRESS.next = next_c;
        field_combo.SS_DBG_MANUF_SERVICE_REG_RSP.PROD_DBG_UNLOCK_IN_PROGRESS.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.SS_DBG_MANUF_SERVICE_REG_RSP.PROD_DBG_UNLOCK_IN_PROGRESS.value <= 1'h0;
        end else if(field_combo.SS_DBG_MANUF_SERVICE_REG_RSP.PROD_DBG_UNLOCK_IN_PROGRESS.load_next) begin
            field_storage.SS_DBG_MANUF_SERVICE_REG_RSP.PROD_DBG_UNLOCK_IN_PROGRESS.value <= field_combo.SS_DBG_MANUF_SERVICE_REG_RSP.PROD_DBG_UNLOCK_IN_PROGRESS.next;
        end
    end
    assign hwif_out.SS_DBG_MANUF_SERVICE_REG_RSP.PROD_DBG_UNLOCK_IN_PROGRESS.value = field_storage.SS_DBG_MANUF_SERVICE_REG_RSP.PROD_DBG_UNLOCK_IN_PROGRESS.value;
    // Field: soc_ifc_reg.SS_DBG_MANUF_SERVICE_REG_RSP.UDS_PROGRAM_SUCCESS
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.SS_DBG_MANUF_SERVICE_REG_RSP.UDS_PROGRAM_SUCCESS.value;
        load_next_c = '0;
        if(decoded_reg_strb.SS_DBG_MANUF_SERVICE_REG_RSP && decoded_req_is_wr && hwif_in.SS_DBG_MANUF_SERVICE_REG_RSP.UDS_PROGRAM_SUCCESS.swwe) begin // SW write
            next_c = (field_storage.SS_DBG_MANUF_SERVICE_REG_RSP.UDS_PROGRAM_SUCCESS.value & ~decoded_wr_biten[6:6]) | (decoded_wr_data[6:6] & decoded_wr_biten[6:6]);
            load_next_c = '1;
        end else if(hwif_in.SS_DBG_MANUF_SERVICE_REG_RSP.UDS_PROGRAM_SUCCESS.we) begin // HW Write - we
            next_c = hwif_in.SS_DBG_MANUF_SERVICE_REG_RSP.UDS_PROGRAM_SUCCESS.next;
            load_next_c = '1;
        end
        field_combo.SS_DBG_MANUF_SERVICE_REG_RSP.UDS_PROGRAM_SUCCESS.next = next_c;
        field_combo.SS_DBG_MANUF_SERVICE_REG_RSP.UDS_PROGRAM_SUCCESS.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.SS_DBG_MANUF_SERVICE_REG_RSP.UDS_PROGRAM_SUCCESS.value <= 1'h0;
        end else if(field_combo.SS_DBG_MANUF_SERVICE_REG_RSP.UDS_PROGRAM_SUCCESS.load_next) begin
            field_storage.SS_DBG_MANUF_SERVICE_REG_RSP.UDS_PROGRAM_SUCCESS.value <= field_combo.SS_DBG_MANUF_SERVICE_REG_RSP.UDS_PROGRAM_SUCCESS.next;
        end
    end
    assign hwif_out.SS_DBG_MANUF_SERVICE_REG_RSP.UDS_PROGRAM_SUCCESS.value = field_storage.SS_DBG_MANUF_SERVICE_REG_RSP.UDS_PROGRAM_SUCCESS.value;
    // Field: soc_ifc_reg.SS_DBG_MANUF_SERVICE_REG_RSP.UDS_PROGRAM_FAIL
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.SS_DBG_MANUF_SERVICE_REG_RSP.UDS_PROGRAM_FAIL.value;
        load_next_c = '0;
        if(decoded_reg_strb.SS_DBG_MANUF_SERVICE_REG_RSP && decoded_req_is_wr && hwif_in.SS_DBG_MANUF_SERVICE_REG_RSP.UDS_PROGRAM_FAIL.swwe) begin // SW write
            next_c = (field_storage.SS_DBG_MANUF_SERVICE_REG_RSP.UDS_PROGRAM_FAIL.value & ~decoded_wr_biten[7:7]) | (decoded_wr_data[7:7] & decoded_wr_biten[7:7]);
            load_next_c = '1;
        end else if(hwif_in.SS_DBG_MANUF_SERVICE_REG_RSP.UDS_PROGRAM_FAIL.we) begin // HW Write - we
            next_c = hwif_in.SS_DBG_MANUF_SERVICE_REG_RSP.UDS_PROGRAM_FAIL.next;
            load_next_c = '1;
        end
        field_combo.SS_DBG_MANUF_SERVICE_REG_RSP.UDS_PROGRAM_FAIL.next = next_c;
        field_combo.SS_DBG_MANUF_SERVICE_REG_RSP.UDS_PROGRAM_FAIL.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.SS_DBG_MANUF_SERVICE_REG_RSP.UDS_PROGRAM_FAIL.value <= 1'h0;
        end else if(field_combo.SS_DBG_MANUF_SERVICE_REG_RSP.UDS_PROGRAM_FAIL.load_next) begin
            field_storage.SS_DBG_MANUF_SERVICE_REG_RSP.UDS_PROGRAM_FAIL.value <= field_combo.SS_DBG_MANUF_SERVICE_REG_RSP.UDS_PROGRAM_FAIL.next;
        end
    end
    assign hwif_out.SS_DBG_MANUF_SERVICE_REG_RSP.UDS_PROGRAM_FAIL.value = field_storage.SS_DBG_MANUF_SERVICE_REG_RSP.UDS_PROGRAM_FAIL.value;
    // Field: soc_ifc_reg.SS_DBG_MANUF_SERVICE_REG_RSP.UDS_PROGRAM_IN_PROGRESS
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.SS_DBG_MANUF_SERVICE_REG_RSP.UDS_PROGRAM_IN_PROGRESS.value;
        load_next_c = '0;
        if(decoded_reg_strb.SS_DBG_MANUF_SERVICE_REG_RSP && decoded_req_is_wr && hwif_in.SS_DBG_MANUF_SERVICE_REG_RSP.UDS_PROGRAM_IN_PROGRESS.swwe) begin // SW write
            next_c = (field_storage.SS_DBG_MANUF_SERVICE_REG_RSP.UDS_PROGRAM_IN_PROGRESS.value & ~decoded_wr_biten[8:8]) | (decoded_wr_data[8:8] & decoded_wr_biten[8:8]);
            load_next_c = '1;
        end else if(hwif_in.SS_DBG_MANUF_SERVICE_REG_RSP.UDS_PROGRAM_IN_PROGRESS.we) begin // HW Write - we
            next_c = hwif_in.SS_DBG_MANUF_SERVICE_REG_RSP.UDS_PROGRAM_IN_PROGRESS.next;
            load_next_c = '1;
        end
        field_combo.SS_DBG_MANUF_SERVICE_REG_RSP.UDS_PROGRAM_IN_PROGRESS.next = next_c;
        field_combo.SS_DBG_MANUF_SERVICE_REG_RSP.UDS_PROGRAM_IN_PROGRESS.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.SS_DBG_MANUF_SERVICE_REG_RSP.UDS_PROGRAM_IN_PROGRESS.value <= 1'h0;
        end else if(field_combo.SS_DBG_MANUF_SERVICE_REG_RSP.UDS_PROGRAM_IN_PROGRESS.load_next) begin
            field_storage.SS_DBG_MANUF_SERVICE_REG_RSP.UDS_PROGRAM_IN_PROGRESS.value <= field_combo.SS_DBG_MANUF_SERVICE_REG_RSP.UDS_PROGRAM_IN_PROGRESS.next;
        end
    end
    assign hwif_out.SS_DBG_MANUF_SERVICE_REG_RSP.UDS_PROGRAM_IN_PROGRESS.value = field_storage.SS_DBG_MANUF_SERVICE_REG_RSP.UDS_PROGRAM_IN_PROGRESS.value;
    for(genvar i0=0; i0<2; i0++) begin
        // Field: soc_ifc_reg.SS_SOC_DBG_UNLOCK_LEVEL[].LEVEL
        always_comb begin
            automatic logic [31:0] next_c;
            automatic logic load_next_c;
            next_c = field_storage.SS_SOC_DBG_UNLOCK_LEVEL[i0].LEVEL.value;
            load_next_c = '0;
            if(decoded_reg_strb.SS_SOC_DBG_UNLOCK_LEVEL[i0] && decoded_req_is_wr && !(hwif_in.SS_SOC_DBG_UNLOCK_LEVEL[i0].LEVEL.swwel)) begin // SW write
                next_c = (field_storage.SS_SOC_DBG_UNLOCK_LEVEL[i0].LEVEL.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end else if(hwif_in.SS_SOC_DBG_UNLOCK_LEVEL[i0].LEVEL.we) begin // HW Write - we
                next_c = hwif_in.SS_SOC_DBG_UNLOCK_LEVEL[i0].LEVEL.next;
                load_next_c = '1;
            end
            field_combo.SS_SOC_DBG_UNLOCK_LEVEL[i0].LEVEL.next = next_c;
            field_combo.SS_SOC_DBG_UNLOCK_LEVEL[i0].LEVEL.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
            if(~hwif_in.cptra_rst_b) begin
                field_storage.SS_SOC_DBG_UNLOCK_LEVEL[i0].LEVEL.value <= 32'h0;
            end else if(field_combo.SS_SOC_DBG_UNLOCK_LEVEL[i0].LEVEL.load_next) begin
                field_storage.SS_SOC_DBG_UNLOCK_LEVEL[i0].LEVEL.value <= field_combo.SS_SOC_DBG_UNLOCK_LEVEL[i0].LEVEL.next;
            end
        end
        assign hwif_out.SS_SOC_DBG_UNLOCK_LEVEL[i0].LEVEL.value = field_storage.SS_SOC_DBG_UNLOCK_LEVEL[i0].LEVEL.value;
    end
    for(genvar i0=0; i0<4; i0++) begin
        // Field: soc_ifc_reg.SS_GENERIC_FW_EXEC_CTRL[].go
        always_comb begin
            automatic logic [31:0] next_c;
            automatic logic load_next_c;
            next_c = field_storage.SS_GENERIC_FW_EXEC_CTRL[i0].go.value;
            load_next_c = '0;
            if(decoded_reg_strb.SS_GENERIC_FW_EXEC_CTRL[i0] && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
                next_c = (field_storage.SS_GENERIC_FW_EXEC_CTRL[i0].go.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end
            field_combo.SS_GENERIC_FW_EXEC_CTRL[i0].go.next = next_c;
            field_combo.SS_GENERIC_FW_EXEC_CTRL[i0].go.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
            if(~hwif_in.cptra_rst_b) begin
                field_storage.SS_GENERIC_FW_EXEC_CTRL[i0].go.value <= 32'h0;
            end else if(field_combo.SS_GENERIC_FW_EXEC_CTRL[i0].go.load_next) begin
                field_storage.SS_GENERIC_FW_EXEC_CTRL[i0].go.value <= field_combo.SS_GENERIC_FW_EXEC_CTRL[i0].go.next;
            end
        end
        assign hwif_out.SS_GENERIC_FW_EXEC_CTRL[i0].go.value = field_storage.SS_GENERIC_FW_EXEC_CTRL[i0].go.value;
    end
    for(genvar i0=0; i0<8; i0++) begin
        // Field: soc_ifc_reg.internal_obf_key[].key
        always_comb begin
            automatic logic [31:0] next_c;
            automatic logic load_next_c;
            next_c = field_storage.internal_obf_key[i0].key.value;
            load_next_c = '0;
            if(decoded_reg_strb.internal_obf_key[i0] && decoded_req_is_wr && hwif_in.internal_obf_key[i0].key.swwe) begin // SW write
                next_c = (field_storage.internal_obf_key[i0].key.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end else if(!hwif_in.internal_obf_key[i0].key.wel) begin // HW Write - wel
                next_c = hwif_in.internal_obf_key[i0].key.next;
                load_next_c = '1;
            end else if(hwif_in.internal_obf_key[i0].key.hwclr) begin // HW Clear
                next_c = '0;
                load_next_c = '1;
            end
            field_combo.internal_obf_key[i0].key.next = next_c;
            field_combo.internal_obf_key[i0].key.load_next = load_next_c;
        end

        always_ff @(posedge clk) begin
            if(field_combo.internal_obf_key[i0].key.load_next) begin
                field_storage.internal_obf_key[i0].key.value <= field_combo.internal_obf_key[i0].key.next;
            end
        end
        assign hwif_out.internal_obf_key[i0].key.value = field_storage.internal_obf_key[i0].key.value;
    end
    // Field: soc_ifc_reg.internal_iccm_lock.lock
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.internal_iccm_lock.lock.value;
        load_next_c = '0;
        if(hwif_in.internal_iccm_lock.lock.hwclr) begin // HW Clear
            next_c = '0;
            load_next_c = '1;
        end else if(decoded_reg_strb.internal_iccm_lock && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 set
            next_c = field_storage.internal_iccm_lock.lock.value | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.internal_iccm_lock.lock.next = next_c;
        field_combo.internal_iccm_lock.lock.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.internal_iccm_lock.lock.value <= 1'h0;
        end else if(field_combo.internal_iccm_lock.lock.load_next) begin
            field_storage.internal_iccm_lock.lock.value <= field_combo.internal_iccm_lock.lock.next;
        end
    end
    assign hwif_out.internal_iccm_lock.lock.value = field_storage.internal_iccm_lock.lock.value;
    // Field: soc_ifc_reg.internal_fw_update_reset.core_rst
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.internal_fw_update_reset.core_rst.value;
        load_next_c = '0;
        if(decoded_reg_strb.internal_fw_update_reset && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.internal_fw_update_reset.core_rst.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.internal_fw_update_reset.core_rst.next = next_c;
        field_combo.internal_fw_update_reset.core_rst.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.internal_fw_update_reset.core_rst.value <= 1'h0;
        end else if(field_combo.internal_fw_update_reset.core_rst.load_next) begin
            field_storage.internal_fw_update_reset.core_rst.value <= field_combo.internal_fw_update_reset.core_rst.next;
        end
    end
    assign hwif_out.internal_fw_update_reset.core_rst.value = field_storage.internal_fw_update_reset.core_rst.value;
    // Field: soc_ifc_reg.internal_fw_update_reset_wait_cycles.wait_cycles
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.internal_fw_update_reset_wait_cycles.wait_cycles.value;
        load_next_c = '0;
        if(decoded_reg_strb.internal_fw_update_reset_wait_cycles && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.internal_fw_update_reset_wait_cycles.wait_cycles.value & ~decoded_wr_biten[7:0]) | (decoded_wr_data[7:0] & decoded_wr_biten[7:0]);
            load_next_c = '1;
        end
        field_combo.internal_fw_update_reset_wait_cycles.wait_cycles.next = next_c;
        field_combo.internal_fw_update_reset_wait_cycles.wait_cycles.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.internal_fw_update_reset_wait_cycles.wait_cycles.value <= 8'h5;
        end else if(field_combo.internal_fw_update_reset_wait_cycles.wait_cycles.load_next) begin
            field_storage.internal_fw_update_reset_wait_cycles.wait_cycles.value <= field_combo.internal_fw_update_reset_wait_cycles.wait_cycles.next;
        end
    end
    assign hwif_out.internal_fw_update_reset_wait_cycles.wait_cycles.value = field_storage.internal_fw_update_reset_wait_cycles.wait_cycles.value;
    // Field: soc_ifc_reg.internal_nmi_vector.vec
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.internal_nmi_vector.vec.value;
        load_next_c = '0;
        if(decoded_reg_strb.internal_nmi_vector && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.internal_nmi_vector.vec.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.internal_nmi_vector.vec.next = next_c;
        field_combo.internal_nmi_vector.vec.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.internal_nmi_vector.vec.value <= 32'h0;
        end else if(field_combo.internal_nmi_vector.vec.load_next) begin
            field_storage.internal_nmi_vector.vec.value <= field_combo.internal_nmi_vector.vec.next;
        end
    end
    assign hwif_out.internal_nmi_vector.vec.value = field_storage.internal_nmi_vector.vec.value;
    // Field: soc_ifc_reg.internal_hw_error_fatal_mask.mask_iccm_ecc_unc
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.internal_hw_error_fatal_mask.mask_iccm_ecc_unc.value;
        load_next_c = '0;
        if(decoded_reg_strb.internal_hw_error_fatal_mask && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.internal_hw_error_fatal_mask.mask_iccm_ecc_unc.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.internal_hw_error_fatal_mask.mask_iccm_ecc_unc.next = next_c;
        field_combo.internal_hw_error_fatal_mask.mask_iccm_ecc_unc.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.internal_hw_error_fatal_mask.mask_iccm_ecc_unc.value <= 1'h0;
        end else if(field_combo.internal_hw_error_fatal_mask.mask_iccm_ecc_unc.load_next) begin
            field_storage.internal_hw_error_fatal_mask.mask_iccm_ecc_unc.value <= field_combo.internal_hw_error_fatal_mask.mask_iccm_ecc_unc.next;
        end
    end
    assign hwif_out.internal_hw_error_fatal_mask.mask_iccm_ecc_unc.value = field_storage.internal_hw_error_fatal_mask.mask_iccm_ecc_unc.value;
    // Field: soc_ifc_reg.internal_hw_error_fatal_mask.mask_dccm_ecc_unc
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.internal_hw_error_fatal_mask.mask_dccm_ecc_unc.value;
        load_next_c = '0;
        if(decoded_reg_strb.internal_hw_error_fatal_mask && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.internal_hw_error_fatal_mask.mask_dccm_ecc_unc.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end
        field_combo.internal_hw_error_fatal_mask.mask_dccm_ecc_unc.next = next_c;
        field_combo.internal_hw_error_fatal_mask.mask_dccm_ecc_unc.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.internal_hw_error_fatal_mask.mask_dccm_ecc_unc.value <= 1'h0;
        end else if(field_combo.internal_hw_error_fatal_mask.mask_dccm_ecc_unc.load_next) begin
            field_storage.internal_hw_error_fatal_mask.mask_dccm_ecc_unc.value <= field_combo.internal_hw_error_fatal_mask.mask_dccm_ecc_unc.next;
        end
    end
    assign hwif_out.internal_hw_error_fatal_mask.mask_dccm_ecc_unc.value = field_storage.internal_hw_error_fatal_mask.mask_dccm_ecc_unc.value;
    // Field: soc_ifc_reg.internal_hw_error_fatal_mask.mask_nmi_pin
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.internal_hw_error_fatal_mask.mask_nmi_pin.value;
        load_next_c = '0;
        if(decoded_reg_strb.internal_hw_error_fatal_mask && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.internal_hw_error_fatal_mask.mask_nmi_pin.value & ~decoded_wr_biten[2:2]) | (decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end
        field_combo.internal_hw_error_fatal_mask.mask_nmi_pin.next = next_c;
        field_combo.internal_hw_error_fatal_mask.mask_nmi_pin.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.internal_hw_error_fatal_mask.mask_nmi_pin.value <= 1'h0;
        end else if(field_combo.internal_hw_error_fatal_mask.mask_nmi_pin.load_next) begin
            field_storage.internal_hw_error_fatal_mask.mask_nmi_pin.value <= field_combo.internal_hw_error_fatal_mask.mask_nmi_pin.next;
        end
    end
    assign hwif_out.internal_hw_error_fatal_mask.mask_nmi_pin.value = field_storage.internal_hw_error_fatal_mask.mask_nmi_pin.value;
    // Field: soc_ifc_reg.internal_hw_error_non_fatal_mask.mask_mbox_prot_no_lock
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.internal_hw_error_non_fatal_mask.mask_mbox_prot_no_lock.value;
        load_next_c = '0;
        if(decoded_reg_strb.internal_hw_error_non_fatal_mask && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.internal_hw_error_non_fatal_mask.mask_mbox_prot_no_lock.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.internal_hw_error_non_fatal_mask.mask_mbox_prot_no_lock.next = next_c;
        field_combo.internal_hw_error_non_fatal_mask.mask_mbox_prot_no_lock.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.internal_hw_error_non_fatal_mask.mask_mbox_prot_no_lock.value <= 1'h0;
        end else if(field_combo.internal_hw_error_non_fatal_mask.mask_mbox_prot_no_lock.load_next) begin
            field_storage.internal_hw_error_non_fatal_mask.mask_mbox_prot_no_lock.value <= field_combo.internal_hw_error_non_fatal_mask.mask_mbox_prot_no_lock.next;
        end
    end
    assign hwif_out.internal_hw_error_non_fatal_mask.mask_mbox_prot_no_lock.value = field_storage.internal_hw_error_non_fatal_mask.mask_mbox_prot_no_lock.value;
    // Field: soc_ifc_reg.internal_hw_error_non_fatal_mask.mask_mbox_prot_ooo
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.internal_hw_error_non_fatal_mask.mask_mbox_prot_ooo.value;
        load_next_c = '0;
        if(decoded_reg_strb.internal_hw_error_non_fatal_mask && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.internal_hw_error_non_fatal_mask.mask_mbox_prot_ooo.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end
        field_combo.internal_hw_error_non_fatal_mask.mask_mbox_prot_ooo.next = next_c;
        field_combo.internal_hw_error_non_fatal_mask.mask_mbox_prot_ooo.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.internal_hw_error_non_fatal_mask.mask_mbox_prot_ooo.value <= 1'h0;
        end else if(field_combo.internal_hw_error_non_fatal_mask.mask_mbox_prot_ooo.load_next) begin
            field_storage.internal_hw_error_non_fatal_mask.mask_mbox_prot_ooo.value <= field_combo.internal_hw_error_non_fatal_mask.mask_mbox_prot_ooo.next;
        end
    end
    assign hwif_out.internal_hw_error_non_fatal_mask.mask_mbox_prot_ooo.value = field_storage.internal_hw_error_non_fatal_mask.mask_mbox_prot_ooo.value;
    // Field: soc_ifc_reg.internal_hw_error_non_fatal_mask.mask_mbox_ecc_unc
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.internal_hw_error_non_fatal_mask.mask_mbox_ecc_unc.value;
        load_next_c = '0;
        if(decoded_reg_strb.internal_hw_error_non_fatal_mask && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.internal_hw_error_non_fatal_mask.mask_mbox_ecc_unc.value & ~decoded_wr_biten[2:2]) | (decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end
        field_combo.internal_hw_error_non_fatal_mask.mask_mbox_ecc_unc.next = next_c;
        field_combo.internal_hw_error_non_fatal_mask.mask_mbox_ecc_unc.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.internal_hw_error_non_fatal_mask.mask_mbox_ecc_unc.value <= 1'h0;
        end else if(field_combo.internal_hw_error_non_fatal_mask.mask_mbox_ecc_unc.load_next) begin
            field_storage.internal_hw_error_non_fatal_mask.mask_mbox_ecc_unc.value <= field_combo.internal_hw_error_non_fatal_mask.mask_mbox_ecc_unc.next;
        end
    end
    assign hwif_out.internal_hw_error_non_fatal_mask.mask_mbox_ecc_unc.value = field_storage.internal_hw_error_non_fatal_mask.mask_mbox_ecc_unc.value;
    // Field: soc_ifc_reg.internal_fw_error_fatal_mask.mask
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.internal_fw_error_fatal_mask.mask.value;
        load_next_c = '0;
        if(decoded_reg_strb.internal_fw_error_fatal_mask && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.internal_fw_error_fatal_mask.mask.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.internal_fw_error_fatal_mask.mask.next = next_c;
        field_combo.internal_fw_error_fatal_mask.mask.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.internal_fw_error_fatal_mask.mask.value <= 32'h0;
        end else if(field_combo.internal_fw_error_fatal_mask.mask.load_next) begin
            field_storage.internal_fw_error_fatal_mask.mask.value <= field_combo.internal_fw_error_fatal_mask.mask.next;
        end
    end
    assign hwif_out.internal_fw_error_fatal_mask.mask.value = field_storage.internal_fw_error_fatal_mask.mask.value;
    // Field: soc_ifc_reg.internal_fw_error_non_fatal_mask.mask
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.internal_fw_error_non_fatal_mask.mask.value;
        load_next_c = '0;
        if(decoded_reg_strb.internal_fw_error_non_fatal_mask && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.internal_fw_error_non_fatal_mask.mask.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.internal_fw_error_non_fatal_mask.mask.next = next_c;
        field_combo.internal_fw_error_non_fatal_mask.mask.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.internal_fw_error_non_fatal_mask.mask.value <= 32'h0;
        end else if(field_combo.internal_fw_error_non_fatal_mask.mask.load_next) begin
            field_storage.internal_fw_error_non_fatal_mask.mask.value <= field_combo.internal_fw_error_non_fatal_mask.mask.next;
        end
    end
    assign hwif_out.internal_fw_error_non_fatal_mask.mask.value = field_storage.internal_fw_error_non_fatal_mask.mask.value;
    // Field: soc_ifc_reg.internal_rv_mtime_l.count_l
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.internal_rv_mtime_l.count_l.value;
        load_next_c = '0;
        if(decoded_reg_strb.internal_rv_mtime_l && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.internal_rv_mtime_l.count_l.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(hwif_in.internal_rv_mtime_l.count_l.incr) begin // increment
            field_combo.internal_rv_mtime_l.count_l.overflow = (((33)'(next_c) + 32'h1) > 32'hffffffff);
            next_c = next_c + 32'h1;
            load_next_c = '1;
        end else begin
            field_combo.internal_rv_mtime_l.count_l.overflow = '0;
        end
        field_combo.internal_rv_mtime_l.count_l.incrthreshold = (field_storage.internal_rv_mtime_l.count_l.value >= 32'hffffffff);
        field_combo.internal_rv_mtime_l.count_l.next = next_c;
        field_combo.internal_rv_mtime_l.count_l.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.internal_rv_mtime_l.count_l.value <= 32'h0;
        end else if(field_combo.internal_rv_mtime_l.count_l.load_next) begin
            field_storage.internal_rv_mtime_l.count_l.value <= field_combo.internal_rv_mtime_l.count_l.next;
        end
    end
    assign hwif_out.internal_rv_mtime_l.count_l.value = field_storage.internal_rv_mtime_l.count_l.value;
    assign hwif_out.internal_rv_mtime_l.count_l.swmod = decoded_reg_strb.internal_rv_mtime_l && decoded_req_is_wr;
    assign hwif_out.internal_rv_mtime_l.count_l.overflow = field_combo.internal_rv_mtime_l.count_l.overflow;
    // Field: soc_ifc_reg.internal_rv_mtime_h.count_h
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.internal_rv_mtime_h.count_h.value;
        load_next_c = '0;
        if(decoded_reg_strb.internal_rv_mtime_h && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.internal_rv_mtime_h.count_h.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(hwif_in.internal_rv_mtime_h.count_h.incr) begin // increment
            field_combo.internal_rv_mtime_h.count_h.overflow = (((33)'(next_c) + 32'h1) > 32'hffffffff);
            next_c = next_c + 32'h1;
            load_next_c = '1;
        end else begin
            field_combo.internal_rv_mtime_h.count_h.overflow = '0;
        end
        field_combo.internal_rv_mtime_h.count_h.incrthreshold = (field_storage.internal_rv_mtime_h.count_h.value >= 32'hffffffff);
        field_combo.internal_rv_mtime_h.count_h.next = next_c;
        field_combo.internal_rv_mtime_h.count_h.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.internal_rv_mtime_h.count_h.value <= 32'h0;
        end else if(field_combo.internal_rv_mtime_h.count_h.load_next) begin
            field_storage.internal_rv_mtime_h.count_h.value <= field_combo.internal_rv_mtime_h.count_h.next;
        end
    end
    assign hwif_out.internal_rv_mtime_h.count_h.value = field_storage.internal_rv_mtime_h.count_h.value;
    assign hwif_out.internal_rv_mtime_h.count_h.swmod = decoded_reg_strb.internal_rv_mtime_h && decoded_req_is_wr;
    // Field: soc_ifc_reg.internal_rv_mtimecmp_l.compare_l
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.internal_rv_mtimecmp_l.compare_l.value;
        load_next_c = '0;
        if(decoded_reg_strb.internal_rv_mtimecmp_l && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.internal_rv_mtimecmp_l.compare_l.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.internal_rv_mtimecmp_l.compare_l.next = next_c;
        field_combo.internal_rv_mtimecmp_l.compare_l.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.internal_rv_mtimecmp_l.compare_l.value <= 32'h0;
        end else if(field_combo.internal_rv_mtimecmp_l.compare_l.load_next) begin
            field_storage.internal_rv_mtimecmp_l.compare_l.value <= field_combo.internal_rv_mtimecmp_l.compare_l.next;
        end
    end
    assign hwif_out.internal_rv_mtimecmp_l.compare_l.value = field_storage.internal_rv_mtimecmp_l.compare_l.value;
    // Field: soc_ifc_reg.internal_rv_mtimecmp_h.compare_h
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.internal_rv_mtimecmp_h.compare_h.value;
        load_next_c = '0;
        if(decoded_reg_strb.internal_rv_mtimecmp_h && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.internal_rv_mtimecmp_h.compare_h.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.internal_rv_mtimecmp_h.compare_h.next = next_c;
        field_combo.internal_rv_mtimecmp_h.compare_h.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.internal_rv_mtimecmp_h.compare_h.value <= 32'h0;
        end else if(field_combo.internal_rv_mtimecmp_h.compare_h.load_next) begin
            field_storage.internal_rv_mtimecmp_h.compare_h.value <= field_combo.internal_rv_mtimecmp_h.compare_h.next;
        end
    end
    assign hwif_out.internal_rv_mtimecmp_h.compare_h.value = field_storage.internal_rv_mtimecmp_h.compare_h.value;
    // Field: soc_ifc_reg.intr_block_rf.global_intr_en_r.error_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.global_intr_en_r.error_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.global_intr_en_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.intr_block_rf.global_intr_en_r.error_en.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.global_intr_en_r.error_en.next = next_c;
        field_combo.intr_block_rf.global_intr_en_r.error_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.global_intr_en_r.error_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.global_intr_en_r.error_en.load_next) begin
            field_storage.intr_block_rf.global_intr_en_r.error_en.value <= field_combo.intr_block_rf.global_intr_en_r.error_en.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.global_intr_en_r.notif_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.global_intr_en_r.notif_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.global_intr_en_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.intr_block_rf.global_intr_en_r.notif_en.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.global_intr_en_r.notif_en.next = next_c;
        field_combo.intr_block_rf.global_intr_en_r.notif_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.global_intr_en_r.notif_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.global_intr_en_r.notif_en.load_next) begin
            field_storage.intr_block_rf.global_intr_en_r.notif_en.value <= field_combo.intr_block_rf.global_intr_en_r.notif_en.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_intr_en_r.error_internal_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_intr_en_r.error_internal_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_en_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.intr_block_rf.error_intr_en_r.error_internal_en.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_en_r.error_internal_en.next = next_c;
        field_combo.intr_block_rf.error_intr_en_r.error_internal_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.error_intr_en_r.error_internal_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_intr_en_r.error_internal_en.load_next) begin
            field_storage.intr_block_rf.error_intr_en_r.error_internal_en.value <= field_combo.intr_block_rf.error_intr_en_r.error_internal_en.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_intr_en_r.error_inv_dev_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_intr_en_r.error_inv_dev_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_en_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.intr_block_rf.error_intr_en_r.error_inv_dev_en.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_en_r.error_inv_dev_en.next = next_c;
        field_combo.intr_block_rf.error_intr_en_r.error_inv_dev_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.error_intr_en_r.error_inv_dev_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_intr_en_r.error_inv_dev_en.load_next) begin
            field_storage.intr_block_rf.error_intr_en_r.error_inv_dev_en.value <= field_combo.intr_block_rf.error_intr_en_r.error_inv_dev_en.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_intr_en_r.error_cmd_fail_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_intr_en_r.error_cmd_fail_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_en_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.intr_block_rf.error_intr_en_r.error_cmd_fail_en.value & ~decoded_wr_biten[2:2]) | (decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_en_r.error_cmd_fail_en.next = next_c;
        field_combo.intr_block_rf.error_intr_en_r.error_cmd_fail_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.error_intr_en_r.error_cmd_fail_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_intr_en_r.error_cmd_fail_en.load_next) begin
            field_storage.intr_block_rf.error_intr_en_r.error_cmd_fail_en.value <= field_combo.intr_block_rf.error_intr_en_r.error_cmd_fail_en.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_intr_en_r.error_bad_fuse_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_intr_en_r.error_bad_fuse_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_en_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.intr_block_rf.error_intr_en_r.error_bad_fuse_en.value & ~decoded_wr_biten[3:3]) | (decoded_wr_data[3:3] & decoded_wr_biten[3:3]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_en_r.error_bad_fuse_en.next = next_c;
        field_combo.intr_block_rf.error_intr_en_r.error_bad_fuse_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.error_intr_en_r.error_bad_fuse_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_intr_en_r.error_bad_fuse_en.load_next) begin
            field_storage.intr_block_rf.error_intr_en_r.error_bad_fuse_en.value <= field_combo.intr_block_rf.error_intr_en_r.error_bad_fuse_en.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_intr_en_r.error_iccm_blocked_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_intr_en_r.error_iccm_blocked_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_en_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.intr_block_rf.error_intr_en_r.error_iccm_blocked_en.value & ~decoded_wr_biten[4:4]) | (decoded_wr_data[4:4] & decoded_wr_biten[4:4]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_en_r.error_iccm_blocked_en.next = next_c;
        field_combo.intr_block_rf.error_intr_en_r.error_iccm_blocked_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.error_intr_en_r.error_iccm_blocked_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_intr_en_r.error_iccm_blocked_en.load_next) begin
            field_storage.intr_block_rf.error_intr_en_r.error_iccm_blocked_en.value <= field_combo.intr_block_rf.error_intr_en_r.error_iccm_blocked_en.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_intr_en_r.error_mbox_ecc_unc_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_intr_en_r.error_mbox_ecc_unc_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_en_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.intr_block_rf.error_intr_en_r.error_mbox_ecc_unc_en.value & ~decoded_wr_biten[5:5]) | (decoded_wr_data[5:5] & decoded_wr_biten[5:5]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_en_r.error_mbox_ecc_unc_en.next = next_c;
        field_combo.intr_block_rf.error_intr_en_r.error_mbox_ecc_unc_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.error_intr_en_r.error_mbox_ecc_unc_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_intr_en_r.error_mbox_ecc_unc_en.load_next) begin
            field_storage.intr_block_rf.error_intr_en_r.error_mbox_ecc_unc_en.value <= field_combo.intr_block_rf.error_intr_en_r.error_mbox_ecc_unc_en.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_intr_en_r.error_wdt_timer1_timeout_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_intr_en_r.error_wdt_timer1_timeout_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_en_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.intr_block_rf.error_intr_en_r.error_wdt_timer1_timeout_en.value & ~decoded_wr_biten[6:6]) | (decoded_wr_data[6:6] & decoded_wr_biten[6:6]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_en_r.error_wdt_timer1_timeout_en.next = next_c;
        field_combo.intr_block_rf.error_intr_en_r.error_wdt_timer1_timeout_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.error_intr_en_r.error_wdt_timer1_timeout_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_intr_en_r.error_wdt_timer1_timeout_en.load_next) begin
            field_storage.intr_block_rf.error_intr_en_r.error_wdt_timer1_timeout_en.value <= field_combo.intr_block_rf.error_intr_en_r.error_wdt_timer1_timeout_en.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_intr_en_r.error_wdt_timer2_timeout_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_intr_en_r.error_wdt_timer2_timeout_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_en_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.intr_block_rf.error_intr_en_r.error_wdt_timer2_timeout_en.value & ~decoded_wr_biten[7:7]) | (decoded_wr_data[7:7] & decoded_wr_biten[7:7]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_en_r.error_wdt_timer2_timeout_en.next = next_c;
        field_combo.intr_block_rf.error_intr_en_r.error_wdt_timer2_timeout_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.error_intr_en_r.error_wdt_timer2_timeout_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_intr_en_r.error_wdt_timer2_timeout_en.load_next) begin
            field_storage.intr_block_rf.error_intr_en_r.error_wdt_timer2_timeout_en.value <= field_combo.intr_block_rf.error_intr_en_r.error_wdt_timer2_timeout_en.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.notif_intr_en_r.notif_cmd_avail_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_intr_en_r.notif_cmd_avail_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_intr_en_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.intr_block_rf.notif_intr_en_r.notif_cmd_avail_en.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_intr_en_r.notif_cmd_avail_en.next = next_c;
        field_combo.intr_block_rf.notif_intr_en_r.notif_cmd_avail_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.notif_intr_en_r.notif_cmd_avail_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_intr_en_r.notif_cmd_avail_en.load_next) begin
            field_storage.intr_block_rf.notif_intr_en_r.notif_cmd_avail_en.value <= field_combo.intr_block_rf.notif_intr_en_r.notif_cmd_avail_en.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.notif_intr_en_r.notif_mbox_ecc_cor_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_intr_en_r.notif_mbox_ecc_cor_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_intr_en_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.intr_block_rf.notif_intr_en_r.notif_mbox_ecc_cor_en.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_intr_en_r.notif_mbox_ecc_cor_en.next = next_c;
        field_combo.intr_block_rf.notif_intr_en_r.notif_mbox_ecc_cor_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.notif_intr_en_r.notif_mbox_ecc_cor_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_intr_en_r.notif_mbox_ecc_cor_en.load_next) begin
            field_storage.intr_block_rf.notif_intr_en_r.notif_mbox_ecc_cor_en.value <= field_combo.intr_block_rf.notif_intr_en_r.notif_mbox_ecc_cor_en.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.notif_intr_en_r.notif_debug_locked_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_intr_en_r.notif_debug_locked_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_intr_en_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.intr_block_rf.notif_intr_en_r.notif_debug_locked_en.value & ~decoded_wr_biten[2:2]) | (decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_intr_en_r.notif_debug_locked_en.next = next_c;
        field_combo.intr_block_rf.notif_intr_en_r.notif_debug_locked_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.notif_intr_en_r.notif_debug_locked_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_intr_en_r.notif_debug_locked_en.load_next) begin
            field_storage.intr_block_rf.notif_intr_en_r.notif_debug_locked_en.value <= field_combo.intr_block_rf.notif_intr_en_r.notif_debug_locked_en.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.notif_intr_en_r.notif_scan_mode_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_intr_en_r.notif_scan_mode_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_intr_en_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.intr_block_rf.notif_intr_en_r.notif_scan_mode_en.value & ~decoded_wr_biten[3:3]) | (decoded_wr_data[3:3] & decoded_wr_biten[3:3]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_intr_en_r.notif_scan_mode_en.next = next_c;
        field_combo.intr_block_rf.notif_intr_en_r.notif_scan_mode_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.notif_intr_en_r.notif_scan_mode_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_intr_en_r.notif_scan_mode_en.load_next) begin
            field_storage.intr_block_rf.notif_intr_en_r.notif_scan_mode_en.value <= field_combo.intr_block_rf.notif_intr_en_r.notif_scan_mode_en.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.notif_intr_en_r.notif_soc_req_lock_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_intr_en_r.notif_soc_req_lock_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_intr_en_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.intr_block_rf.notif_intr_en_r.notif_soc_req_lock_en.value & ~decoded_wr_biten[4:4]) | (decoded_wr_data[4:4] & decoded_wr_biten[4:4]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_intr_en_r.notif_soc_req_lock_en.next = next_c;
        field_combo.intr_block_rf.notif_intr_en_r.notif_soc_req_lock_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.notif_intr_en_r.notif_soc_req_lock_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_intr_en_r.notif_soc_req_lock_en.load_next) begin
            field_storage.intr_block_rf.notif_intr_en_r.notif_soc_req_lock_en.value <= field_combo.intr_block_rf.notif_intr_en_r.notif_soc_req_lock_en.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.notif_intr_en_r.notif_gen_in_toggle_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_intr_en_r.notif_gen_in_toggle_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_intr_en_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.intr_block_rf.notif_intr_en_r.notif_gen_in_toggle_en.value & ~decoded_wr_biten[5:5]) | (decoded_wr_data[5:5] & decoded_wr_biten[5:5]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_intr_en_r.notif_gen_in_toggle_en.next = next_c;
        field_combo.intr_block_rf.notif_intr_en_r.notif_gen_in_toggle_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.notif_intr_en_r.notif_gen_in_toggle_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_intr_en_r.notif_gen_in_toggle_en.load_next) begin
            field_storage.intr_block_rf.notif_intr_en_r.notif_gen_in_toggle_en.value <= field_combo.intr_block_rf.notif_intr_en_r.notif_gen_in_toggle_en.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_global_intr_r.agg_sts
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_global_intr_r.agg_sts.value;
        load_next_c = '0;
        
        // HW Write
        next_c = hwif_out.intr_block_rf.error_internal_intr_r.intr;
        load_next_c = '1;
        field_combo.intr_block_rf.error_global_intr_r.agg_sts.next = next_c;
        field_combo.intr_block_rf.error_global_intr_r.agg_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.error_global_intr_r.agg_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_global_intr_r.agg_sts.load_next) begin
            field_storage.intr_block_rf.error_global_intr_r.agg_sts.value <= field_combo.intr_block_rf.error_global_intr_r.agg_sts.next;
        end
    end
    assign hwif_out.intr_block_rf.error_global_intr_r.intr =
        |(field_storage.intr_block_rf.error_global_intr_r.agg_sts.value & field_storage.intr_block_rf.global_intr_en_r.error_en.value);
    // Field: soc_ifc_reg.intr_block_rf.notif_global_intr_r.agg_sts
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_global_intr_r.agg_sts.value;
        load_next_c = '0;
        
        // HW Write
        next_c = hwif_out.intr_block_rf.notif_internal_intr_r.intr;
        load_next_c = '1;
        field_combo.intr_block_rf.notif_global_intr_r.agg_sts.next = next_c;
        field_combo.intr_block_rf.notif_global_intr_r.agg_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.notif_global_intr_r.agg_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_global_intr_r.agg_sts.load_next) begin
            field_storage.intr_block_rf.notif_global_intr_r.agg_sts.value <= field_combo.intr_block_rf.notif_global_intr_r.agg_sts.next;
        end
    end
    assign hwif_out.intr_block_rf.notif_global_intr_r.intr =
        |(field_storage.intr_block_rf.notif_global_intr_r.agg_sts.value & field_storage.intr_block_rf.global_intr_en_r.notif_en.value);
    // Field: soc_ifc_reg.intr_block_rf.error_internal_intr_r.error_internal_sts
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_internal_intr_r.error_internal_sts.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error_internal_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error_internal_sts.value | field_storage.intr_block_rf.error_intr_trig_r.error_internal_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error_internal_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error_internal_intr_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error_internal_sts.value & ~(decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_internal_intr_r.error_internal_sts.next = next_c;
        field_combo.intr_block_rf.error_internal_intr_r.error_internal_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.intr_block_rf.error_internal_intr_r.error_internal_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_internal_intr_r.error_internal_sts.load_next) begin
            field_storage.intr_block_rf.error_internal_intr_r.error_internal_sts.value <= field_combo.intr_block_rf.error_internal_intr_r.error_internal_sts.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_internal_intr_r.error_inv_dev_sts
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_internal_intr_r.error_inv_dev_sts.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error_inv_dev_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error_inv_dev_sts.value | field_storage.intr_block_rf.error_intr_trig_r.error_inv_dev_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error_inv_dev_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error_internal_intr_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error_inv_dev_sts.value & ~(decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_internal_intr_r.error_inv_dev_sts.next = next_c;
        field_combo.intr_block_rf.error_internal_intr_r.error_inv_dev_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.intr_block_rf.error_internal_intr_r.error_inv_dev_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_internal_intr_r.error_inv_dev_sts.load_next) begin
            field_storage.intr_block_rf.error_internal_intr_r.error_inv_dev_sts.value <= field_combo.intr_block_rf.error_internal_intr_r.error_inv_dev_sts.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_internal_intr_r.error_cmd_fail_sts
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_internal_intr_r.error_cmd_fail_sts.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error_cmd_fail_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error_cmd_fail_sts.value | field_storage.intr_block_rf.error_intr_trig_r.error_cmd_fail_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error_cmd_fail_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error_internal_intr_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error_cmd_fail_sts.value & ~(decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_internal_intr_r.error_cmd_fail_sts.next = next_c;
        field_combo.intr_block_rf.error_internal_intr_r.error_cmd_fail_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.intr_block_rf.error_internal_intr_r.error_cmd_fail_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_internal_intr_r.error_cmd_fail_sts.load_next) begin
            field_storage.intr_block_rf.error_internal_intr_r.error_cmd_fail_sts.value <= field_combo.intr_block_rf.error_internal_intr_r.error_cmd_fail_sts.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_internal_intr_r.error_bad_fuse_sts
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_internal_intr_r.error_bad_fuse_sts.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error_bad_fuse_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error_bad_fuse_sts.value | field_storage.intr_block_rf.error_intr_trig_r.error_bad_fuse_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error_bad_fuse_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error_internal_intr_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error_bad_fuse_sts.value & ~(decoded_wr_data[3:3] & decoded_wr_biten[3:3]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_internal_intr_r.error_bad_fuse_sts.next = next_c;
        field_combo.intr_block_rf.error_internal_intr_r.error_bad_fuse_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.intr_block_rf.error_internal_intr_r.error_bad_fuse_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_internal_intr_r.error_bad_fuse_sts.load_next) begin
            field_storage.intr_block_rf.error_internal_intr_r.error_bad_fuse_sts.value <= field_combo.intr_block_rf.error_internal_intr_r.error_bad_fuse_sts.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_internal_intr_r.error_iccm_blocked_sts
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_internal_intr_r.error_iccm_blocked_sts.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error_iccm_blocked_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error_iccm_blocked_sts.value | field_storage.intr_block_rf.error_intr_trig_r.error_iccm_blocked_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error_iccm_blocked_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error_internal_intr_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error_iccm_blocked_sts.value & ~(decoded_wr_data[4:4] & decoded_wr_biten[4:4]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_internal_intr_r.error_iccm_blocked_sts.next = next_c;
        field_combo.intr_block_rf.error_internal_intr_r.error_iccm_blocked_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.intr_block_rf.error_internal_intr_r.error_iccm_blocked_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_internal_intr_r.error_iccm_blocked_sts.load_next) begin
            field_storage.intr_block_rf.error_internal_intr_r.error_iccm_blocked_sts.value <= field_combo.intr_block_rf.error_internal_intr_r.error_iccm_blocked_sts.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_internal_intr_r.error_mbox_ecc_unc_sts
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_internal_intr_r.error_mbox_ecc_unc_sts.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error_mbox_ecc_unc_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error_mbox_ecc_unc_sts.value | field_storage.intr_block_rf.error_intr_trig_r.error_mbox_ecc_unc_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error_mbox_ecc_unc_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error_internal_intr_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error_mbox_ecc_unc_sts.value & ~(decoded_wr_data[5:5] & decoded_wr_biten[5:5]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_internal_intr_r.error_mbox_ecc_unc_sts.next = next_c;
        field_combo.intr_block_rf.error_internal_intr_r.error_mbox_ecc_unc_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.intr_block_rf.error_internal_intr_r.error_mbox_ecc_unc_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_internal_intr_r.error_mbox_ecc_unc_sts.load_next) begin
            field_storage.intr_block_rf.error_internal_intr_r.error_mbox_ecc_unc_sts.value <= field_combo.intr_block_rf.error_internal_intr_r.error_mbox_ecc_unc_sts.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_internal_intr_r.error_wdt_timer1_timeout_sts
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_internal_intr_r.error_wdt_timer1_timeout_sts.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error_wdt_timer1_timeout_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error_wdt_timer1_timeout_sts.value | field_storage.intr_block_rf.error_intr_trig_r.error_wdt_timer1_timeout_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error_wdt_timer1_timeout_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error_internal_intr_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error_wdt_timer1_timeout_sts.value & ~(decoded_wr_data[6:6] & decoded_wr_biten[6:6]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_internal_intr_r.error_wdt_timer1_timeout_sts.next = next_c;
        field_combo.intr_block_rf.error_internal_intr_r.error_wdt_timer1_timeout_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.intr_block_rf.error_internal_intr_r.error_wdt_timer1_timeout_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_internal_intr_r.error_wdt_timer1_timeout_sts.load_next) begin
            field_storage.intr_block_rf.error_internal_intr_r.error_wdt_timer1_timeout_sts.value <= field_combo.intr_block_rf.error_internal_intr_r.error_wdt_timer1_timeout_sts.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_internal_intr_r.error_wdt_timer2_timeout_sts
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_internal_intr_r.error_wdt_timer2_timeout_sts.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error_wdt_timer2_timeout_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error_wdt_timer2_timeout_sts.value | field_storage.intr_block_rf.error_intr_trig_r.error_wdt_timer2_timeout_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error_wdt_timer2_timeout_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error_internal_intr_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error_wdt_timer2_timeout_sts.value & ~(decoded_wr_data[7:7] & decoded_wr_biten[7:7]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_internal_intr_r.error_wdt_timer2_timeout_sts.next = next_c;
        field_combo.intr_block_rf.error_internal_intr_r.error_wdt_timer2_timeout_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.intr_block_rf.error_internal_intr_r.error_wdt_timer2_timeout_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_internal_intr_r.error_wdt_timer2_timeout_sts.load_next) begin
            field_storage.intr_block_rf.error_internal_intr_r.error_wdt_timer2_timeout_sts.value <= field_combo.intr_block_rf.error_internal_intr_r.error_wdt_timer2_timeout_sts.next;
        end
    end
    assign hwif_out.intr_block_rf.error_internal_intr_r.intr =
        |(field_storage.intr_block_rf.error_internal_intr_r.error_internal_sts.value & field_storage.intr_block_rf.error_intr_en_r.error_internal_en.value)
        || |(field_storage.intr_block_rf.error_internal_intr_r.error_inv_dev_sts.value & field_storage.intr_block_rf.error_intr_en_r.error_inv_dev_en.value)
        || |(field_storage.intr_block_rf.error_internal_intr_r.error_cmd_fail_sts.value & field_storage.intr_block_rf.error_intr_en_r.error_cmd_fail_en.value)
        || |(field_storage.intr_block_rf.error_internal_intr_r.error_bad_fuse_sts.value & field_storage.intr_block_rf.error_intr_en_r.error_bad_fuse_en.value)
        || |(field_storage.intr_block_rf.error_internal_intr_r.error_iccm_blocked_sts.value & field_storage.intr_block_rf.error_intr_en_r.error_iccm_blocked_en.value)
        || |(field_storage.intr_block_rf.error_internal_intr_r.error_mbox_ecc_unc_sts.value & field_storage.intr_block_rf.error_intr_en_r.error_mbox_ecc_unc_en.value)
        || |(field_storage.intr_block_rf.error_internal_intr_r.error_wdt_timer1_timeout_sts.value & field_storage.intr_block_rf.error_intr_en_r.error_wdt_timer1_timeout_en.value)
        || |(field_storage.intr_block_rf.error_internal_intr_r.error_wdt_timer2_timeout_sts.value & field_storage.intr_block_rf.error_intr_en_r.error_wdt_timer2_timeout_en.value);
    // Field: soc_ifc_reg.intr_block_rf.notif_internal_intr_r.notif_cmd_avail_sts
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif_cmd_avail_sts.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_avail_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif_cmd_avail_sts.value | field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_avail_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif_internal_intr_r.notif_cmd_avail_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.notif_internal_intr_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif_cmd_avail_sts.value & ~(decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_internal_intr_r.notif_cmd_avail_sts.next = next_c;
        field_combo.intr_block_rf.notif_internal_intr_r.notif_cmd_avail_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.notif_internal_intr_r.notif_cmd_avail_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_internal_intr_r.notif_cmd_avail_sts.load_next) begin
            field_storage.intr_block_rf.notif_internal_intr_r.notif_cmd_avail_sts.value <= field_combo.intr_block_rf.notif_internal_intr_r.notif_cmd_avail_sts.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.notif_internal_intr_r.notif_mbox_ecc_cor_sts
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif_mbox_ecc_cor_sts.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.notif_intr_trig_r.notif_mbox_ecc_cor_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif_mbox_ecc_cor_sts.value | field_storage.intr_block_rf.notif_intr_trig_r.notif_mbox_ecc_cor_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif_internal_intr_r.notif_mbox_ecc_cor_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.notif_internal_intr_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif_mbox_ecc_cor_sts.value & ~(decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_internal_intr_r.notif_mbox_ecc_cor_sts.next = next_c;
        field_combo.intr_block_rf.notif_internal_intr_r.notif_mbox_ecc_cor_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.notif_internal_intr_r.notif_mbox_ecc_cor_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_internal_intr_r.notif_mbox_ecc_cor_sts.load_next) begin
            field_storage.intr_block_rf.notif_internal_intr_r.notif_mbox_ecc_cor_sts.value <= field_combo.intr_block_rf.notif_internal_intr_r.notif_mbox_ecc_cor_sts.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.notif_internal_intr_r.notif_debug_locked_sts
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif_debug_locked_sts.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.notif_intr_trig_r.notif_debug_locked_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif_debug_locked_sts.value | field_storage.intr_block_rf.notif_intr_trig_r.notif_debug_locked_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif_internal_intr_r.notif_debug_locked_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.notif_internal_intr_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif_debug_locked_sts.value & ~(decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_internal_intr_r.notif_debug_locked_sts.next = next_c;
        field_combo.intr_block_rf.notif_internal_intr_r.notif_debug_locked_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.notif_internal_intr_r.notif_debug_locked_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_internal_intr_r.notif_debug_locked_sts.load_next) begin
            field_storage.intr_block_rf.notif_internal_intr_r.notif_debug_locked_sts.value <= field_combo.intr_block_rf.notif_internal_intr_r.notif_debug_locked_sts.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.notif_internal_intr_r.notif_scan_mode_sts
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif_scan_mode_sts.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.notif_intr_trig_r.notif_scan_mode_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif_scan_mode_sts.value | field_storage.intr_block_rf.notif_intr_trig_r.notif_scan_mode_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif_internal_intr_r.notif_scan_mode_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.notif_internal_intr_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif_scan_mode_sts.value & ~(decoded_wr_data[3:3] & decoded_wr_biten[3:3]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_internal_intr_r.notif_scan_mode_sts.next = next_c;
        field_combo.intr_block_rf.notif_internal_intr_r.notif_scan_mode_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.notif_internal_intr_r.notif_scan_mode_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_internal_intr_r.notif_scan_mode_sts.load_next) begin
            field_storage.intr_block_rf.notif_internal_intr_r.notif_scan_mode_sts.value <= field_combo.intr_block_rf.notif_internal_intr_r.notif_scan_mode_sts.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.notif_internal_intr_r.notif_soc_req_lock_sts
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif_soc_req_lock_sts.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.notif_intr_trig_r.notif_soc_req_lock_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif_soc_req_lock_sts.value | field_storage.intr_block_rf.notif_intr_trig_r.notif_soc_req_lock_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif_internal_intr_r.notif_soc_req_lock_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.notif_internal_intr_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif_soc_req_lock_sts.value & ~(decoded_wr_data[4:4] & decoded_wr_biten[4:4]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_internal_intr_r.notif_soc_req_lock_sts.next = next_c;
        field_combo.intr_block_rf.notif_internal_intr_r.notif_soc_req_lock_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.notif_internal_intr_r.notif_soc_req_lock_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_internal_intr_r.notif_soc_req_lock_sts.load_next) begin
            field_storage.intr_block_rf.notif_internal_intr_r.notif_soc_req_lock_sts.value <= field_combo.intr_block_rf.notif_internal_intr_r.notif_soc_req_lock_sts.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.notif_internal_intr_r.notif_gen_in_toggle_sts
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif_gen_in_toggle_sts.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.notif_intr_trig_r.notif_gen_in_toggle_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif_gen_in_toggle_sts.value | field_storage.intr_block_rf.notif_intr_trig_r.notif_gen_in_toggle_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif_internal_intr_r.notif_gen_in_toggle_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.notif_internal_intr_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif_gen_in_toggle_sts.value & ~(decoded_wr_data[5:5] & decoded_wr_biten[5:5]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_internal_intr_r.notif_gen_in_toggle_sts.next = next_c;
        field_combo.intr_block_rf.notif_internal_intr_r.notif_gen_in_toggle_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.notif_internal_intr_r.notif_gen_in_toggle_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_internal_intr_r.notif_gen_in_toggle_sts.load_next) begin
            field_storage.intr_block_rf.notif_internal_intr_r.notif_gen_in_toggle_sts.value <= field_combo.intr_block_rf.notif_internal_intr_r.notif_gen_in_toggle_sts.next;
        end
    end
    assign hwif_out.intr_block_rf.notif_internal_intr_r.intr =
        |(field_storage.intr_block_rf.notif_internal_intr_r.notif_cmd_avail_sts.value & field_storage.intr_block_rf.notif_intr_en_r.notif_cmd_avail_en.value)
        || |(field_storage.intr_block_rf.notif_internal_intr_r.notif_mbox_ecc_cor_sts.value & field_storage.intr_block_rf.notif_intr_en_r.notif_mbox_ecc_cor_en.value)
        || |(field_storage.intr_block_rf.notif_internal_intr_r.notif_debug_locked_sts.value & field_storage.intr_block_rf.notif_intr_en_r.notif_debug_locked_en.value)
        || |(field_storage.intr_block_rf.notif_internal_intr_r.notif_scan_mode_sts.value & field_storage.intr_block_rf.notif_intr_en_r.notif_scan_mode_en.value)
        || |(field_storage.intr_block_rf.notif_internal_intr_r.notif_soc_req_lock_sts.value & field_storage.intr_block_rf.notif_intr_en_r.notif_soc_req_lock_en.value)
        || |(field_storage.intr_block_rf.notif_internal_intr_r.notif_gen_in_toggle_sts.value & field_storage.intr_block_rf.notif_intr_en_r.notif_gen_in_toggle_en.value);
    // Field: soc_ifc_reg.intr_block_rf.error_intr_trig_r.error_internal_trig
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_intr_trig_r.error_internal_trig.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_trig_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error_internal_trig.value | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_trig_r.error_internal_trig.next = next_c;
        field_combo.intr_block_rf.error_intr_trig_r.error_internal_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.error_intr_trig_r.error_internal_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_intr_trig_r.error_internal_trig.load_next) begin
            field_storage.intr_block_rf.error_intr_trig_r.error_internal_trig.value <= field_combo.intr_block_rf.error_intr_trig_r.error_internal_trig.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_intr_trig_r.error_inv_dev_trig
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_intr_trig_r.error_inv_dev_trig.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_trig_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error_inv_dev_trig.value | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_trig_r.error_inv_dev_trig.next = next_c;
        field_combo.intr_block_rf.error_intr_trig_r.error_inv_dev_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.error_intr_trig_r.error_inv_dev_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_intr_trig_r.error_inv_dev_trig.load_next) begin
            field_storage.intr_block_rf.error_intr_trig_r.error_inv_dev_trig.value <= field_combo.intr_block_rf.error_intr_trig_r.error_inv_dev_trig.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_intr_trig_r.error_cmd_fail_trig
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_intr_trig_r.error_cmd_fail_trig.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_trig_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error_cmd_fail_trig.value | (decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_trig_r.error_cmd_fail_trig.next = next_c;
        field_combo.intr_block_rf.error_intr_trig_r.error_cmd_fail_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.error_intr_trig_r.error_cmd_fail_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_intr_trig_r.error_cmd_fail_trig.load_next) begin
            field_storage.intr_block_rf.error_intr_trig_r.error_cmd_fail_trig.value <= field_combo.intr_block_rf.error_intr_trig_r.error_cmd_fail_trig.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_intr_trig_r.error_bad_fuse_trig
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_intr_trig_r.error_bad_fuse_trig.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_trig_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error_bad_fuse_trig.value | (decoded_wr_data[3:3] & decoded_wr_biten[3:3]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_trig_r.error_bad_fuse_trig.next = next_c;
        field_combo.intr_block_rf.error_intr_trig_r.error_bad_fuse_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.error_intr_trig_r.error_bad_fuse_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_intr_trig_r.error_bad_fuse_trig.load_next) begin
            field_storage.intr_block_rf.error_intr_trig_r.error_bad_fuse_trig.value <= field_combo.intr_block_rf.error_intr_trig_r.error_bad_fuse_trig.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_intr_trig_r.error_iccm_blocked_trig
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_intr_trig_r.error_iccm_blocked_trig.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_trig_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error_iccm_blocked_trig.value | (decoded_wr_data[4:4] & decoded_wr_biten[4:4]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_trig_r.error_iccm_blocked_trig.next = next_c;
        field_combo.intr_block_rf.error_intr_trig_r.error_iccm_blocked_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.error_intr_trig_r.error_iccm_blocked_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_intr_trig_r.error_iccm_blocked_trig.load_next) begin
            field_storage.intr_block_rf.error_intr_trig_r.error_iccm_blocked_trig.value <= field_combo.intr_block_rf.error_intr_trig_r.error_iccm_blocked_trig.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_intr_trig_r.error_mbox_ecc_unc_trig
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_intr_trig_r.error_mbox_ecc_unc_trig.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_trig_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error_mbox_ecc_unc_trig.value | (decoded_wr_data[5:5] & decoded_wr_biten[5:5]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_trig_r.error_mbox_ecc_unc_trig.next = next_c;
        field_combo.intr_block_rf.error_intr_trig_r.error_mbox_ecc_unc_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.error_intr_trig_r.error_mbox_ecc_unc_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_intr_trig_r.error_mbox_ecc_unc_trig.load_next) begin
            field_storage.intr_block_rf.error_intr_trig_r.error_mbox_ecc_unc_trig.value <= field_combo.intr_block_rf.error_intr_trig_r.error_mbox_ecc_unc_trig.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_intr_trig_r.error_wdt_timer1_timeout_trig
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_intr_trig_r.error_wdt_timer1_timeout_trig.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_trig_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error_wdt_timer1_timeout_trig.value | (decoded_wr_data[6:6] & decoded_wr_biten[6:6]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_trig_r.error_wdt_timer1_timeout_trig.next = next_c;
        field_combo.intr_block_rf.error_intr_trig_r.error_wdt_timer1_timeout_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.error_intr_trig_r.error_wdt_timer1_timeout_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_intr_trig_r.error_wdt_timer1_timeout_trig.load_next) begin
            field_storage.intr_block_rf.error_intr_trig_r.error_wdt_timer1_timeout_trig.value <= field_combo.intr_block_rf.error_intr_trig_r.error_wdt_timer1_timeout_trig.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_intr_trig_r.error_wdt_timer2_timeout_trig
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_intr_trig_r.error_wdt_timer2_timeout_trig.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_trig_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error_wdt_timer2_timeout_trig.value | (decoded_wr_data[7:7] & decoded_wr_biten[7:7]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_trig_r.error_wdt_timer2_timeout_trig.next = next_c;
        field_combo.intr_block_rf.error_intr_trig_r.error_wdt_timer2_timeout_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.error_intr_trig_r.error_wdt_timer2_timeout_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_intr_trig_r.error_wdt_timer2_timeout_trig.load_next) begin
            field_storage.intr_block_rf.error_intr_trig_r.error_wdt_timer2_timeout_trig.value <= field_combo.intr_block_rf.error_intr_trig_r.error_wdt_timer2_timeout_trig.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.notif_intr_trig_r.notif_cmd_avail_trig
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_avail_trig.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_intr_trig_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_avail_trig.value | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_intr_trig_r.notif_cmd_avail_trig.next = next_c;
        field_combo.intr_block_rf.notif_intr_trig_r.notif_cmd_avail_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_avail_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_intr_trig_r.notif_cmd_avail_trig.load_next) begin
            field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_avail_trig.value <= field_combo.intr_block_rf.notif_intr_trig_r.notif_cmd_avail_trig.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.notif_intr_trig_r.notif_mbox_ecc_cor_trig
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif_mbox_ecc_cor_trig.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_intr_trig_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif_mbox_ecc_cor_trig.value | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_intr_trig_r.notif_mbox_ecc_cor_trig.next = next_c;
        field_combo.intr_block_rf.notif_intr_trig_r.notif_mbox_ecc_cor_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.notif_intr_trig_r.notif_mbox_ecc_cor_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_intr_trig_r.notif_mbox_ecc_cor_trig.load_next) begin
            field_storage.intr_block_rf.notif_intr_trig_r.notif_mbox_ecc_cor_trig.value <= field_combo.intr_block_rf.notif_intr_trig_r.notif_mbox_ecc_cor_trig.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.notif_intr_trig_r.notif_debug_locked_trig
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif_debug_locked_trig.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_intr_trig_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif_debug_locked_trig.value | (decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_intr_trig_r.notif_debug_locked_trig.next = next_c;
        field_combo.intr_block_rf.notif_intr_trig_r.notif_debug_locked_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.notif_intr_trig_r.notif_debug_locked_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_intr_trig_r.notif_debug_locked_trig.load_next) begin
            field_storage.intr_block_rf.notif_intr_trig_r.notif_debug_locked_trig.value <= field_combo.intr_block_rf.notif_intr_trig_r.notif_debug_locked_trig.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.notif_intr_trig_r.notif_scan_mode_trig
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif_scan_mode_trig.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_intr_trig_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif_scan_mode_trig.value | (decoded_wr_data[3:3] & decoded_wr_biten[3:3]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_intr_trig_r.notif_scan_mode_trig.next = next_c;
        field_combo.intr_block_rf.notif_intr_trig_r.notif_scan_mode_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.notif_intr_trig_r.notif_scan_mode_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_intr_trig_r.notif_scan_mode_trig.load_next) begin
            field_storage.intr_block_rf.notif_intr_trig_r.notif_scan_mode_trig.value <= field_combo.intr_block_rf.notif_intr_trig_r.notif_scan_mode_trig.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.notif_intr_trig_r.notif_soc_req_lock_trig
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif_soc_req_lock_trig.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_intr_trig_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif_soc_req_lock_trig.value | (decoded_wr_data[4:4] & decoded_wr_biten[4:4]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_intr_trig_r.notif_soc_req_lock_trig.next = next_c;
        field_combo.intr_block_rf.notif_intr_trig_r.notif_soc_req_lock_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.notif_intr_trig_r.notif_soc_req_lock_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_intr_trig_r.notif_soc_req_lock_trig.load_next) begin
            field_storage.intr_block_rf.notif_intr_trig_r.notif_soc_req_lock_trig.value <= field_combo.intr_block_rf.notif_intr_trig_r.notif_soc_req_lock_trig.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.notif_intr_trig_r.notif_gen_in_toggle_trig
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif_gen_in_toggle_trig.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_intr_trig_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif_gen_in_toggle_trig.value | (decoded_wr_data[5:5] & decoded_wr_biten[5:5]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_intr_trig_r.notif_gen_in_toggle_trig.next = next_c;
        field_combo.intr_block_rf.notif_intr_trig_r.notif_gen_in_toggle_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.notif_intr_trig_r.notif_gen_in_toggle_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_intr_trig_r.notif_gen_in_toggle_trig.load_next) begin
            field_storage.intr_block_rf.notif_intr_trig_r.notif_gen_in_toggle_trig.value <= field_combo.intr_block_rf.notif_intr_trig_r.notif_gen_in_toggle_trig.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_internal_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_internal_intr_count_r.cnt.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_internal_intr_count_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.intr_block_rf.error_internal_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_internal_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_internal_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error_internal_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.error_internal_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error_internal_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_internal_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error_internal_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.intr_block_rf.error_internal_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.error_internal_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error_internal_intr_count_r.cnt.value <= field_combo.intr_block_rf.error_internal_intr_count_r.cnt.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_inv_dev_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_inv_dev_intr_count_r.cnt.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_inv_dev_intr_count_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.intr_block_rf.error_inv_dev_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_inv_dev_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_inv_dev_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error_inv_dev_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.error_inv_dev_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error_inv_dev_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_inv_dev_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error_inv_dev_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.intr_block_rf.error_inv_dev_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.error_inv_dev_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error_inv_dev_intr_count_r.cnt.value <= field_combo.intr_block_rf.error_inv_dev_intr_count_r.cnt.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_cmd_fail_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_cmd_fail_intr_count_r.cnt.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_cmd_fail_intr_count_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.intr_block_rf.error_cmd_fail_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_cmd_fail_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_cmd_fail_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error_cmd_fail_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.error_cmd_fail_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error_cmd_fail_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_cmd_fail_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error_cmd_fail_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.intr_block_rf.error_cmd_fail_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.error_cmd_fail_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error_cmd_fail_intr_count_r.cnt.value <= field_combo.intr_block_rf.error_cmd_fail_intr_count_r.cnt.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_bad_fuse_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_bad_fuse_intr_count_r.cnt.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_bad_fuse_intr_count_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.intr_block_rf.error_bad_fuse_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_bad_fuse_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_bad_fuse_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error_bad_fuse_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.error_bad_fuse_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error_bad_fuse_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_bad_fuse_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error_bad_fuse_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.intr_block_rf.error_bad_fuse_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.error_bad_fuse_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error_bad_fuse_intr_count_r.cnt.value <= field_combo.intr_block_rf.error_bad_fuse_intr_count_r.cnt.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_iccm_blocked_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_iccm_blocked_intr_count_r.cnt.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_iccm_blocked_intr_count_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.intr_block_rf.error_iccm_blocked_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_iccm_blocked_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_iccm_blocked_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error_iccm_blocked_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.error_iccm_blocked_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error_iccm_blocked_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_iccm_blocked_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error_iccm_blocked_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.intr_block_rf.error_iccm_blocked_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.error_iccm_blocked_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error_iccm_blocked_intr_count_r.cnt.value <= field_combo.intr_block_rf.error_iccm_blocked_intr_count_r.cnt.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_mbox_ecc_unc_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_mbox_ecc_unc_intr_count_r.cnt.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_mbox_ecc_unc_intr_count_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.intr_block_rf.error_mbox_ecc_unc_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_mbox_ecc_unc_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_mbox_ecc_unc_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error_mbox_ecc_unc_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.error_mbox_ecc_unc_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error_mbox_ecc_unc_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_mbox_ecc_unc_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error_mbox_ecc_unc_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.intr_block_rf.error_mbox_ecc_unc_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.error_mbox_ecc_unc_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error_mbox_ecc_unc_intr_count_r.cnt.value <= field_combo.intr_block_rf.error_mbox_ecc_unc_intr_count_r.cnt.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_wdt_timer1_timeout_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_wdt_timer1_timeout_intr_count_r.cnt.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_wdt_timer1_timeout_intr_count_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.intr_block_rf.error_wdt_timer1_timeout_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_wdt_timer1_timeout_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_wdt_timer1_timeout_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error_wdt_timer1_timeout_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.error_wdt_timer1_timeout_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error_wdt_timer1_timeout_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_wdt_timer1_timeout_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error_wdt_timer1_timeout_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.intr_block_rf.error_wdt_timer1_timeout_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.error_wdt_timer1_timeout_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error_wdt_timer1_timeout_intr_count_r.cnt.value <= field_combo.intr_block_rf.error_wdt_timer1_timeout_intr_count_r.cnt.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_wdt_timer2_timeout_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_wdt_timer2_timeout_intr_count_r.cnt.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_wdt_timer2_timeout_intr_count_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.intr_block_rf.error_wdt_timer2_timeout_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_wdt_timer2_timeout_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_wdt_timer2_timeout_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error_wdt_timer2_timeout_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.error_wdt_timer2_timeout_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error_wdt_timer2_timeout_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_wdt_timer2_timeout_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error_wdt_timer2_timeout_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_pwrgood) begin
        if(~hwif_in.cptra_pwrgood) begin
            field_storage.intr_block_rf.error_wdt_timer2_timeout_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.error_wdt_timer2_timeout_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error_wdt_timer2_timeout_intr_count_r.cnt.value <= field_combo.intr_block_rf.error_wdt_timer2_timeout_intr_count_r.cnt.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.notif_cmd_avail_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_cmd_avail_intr_count_r.cnt.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_cmd_avail_intr_count_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.intr_block_rf.notif_cmd_avail_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_cmd_avail_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_cmd_avail_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.notif_cmd_avail_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.notif_cmd_avail_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.notif_cmd_avail_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_cmd_avail_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.notif_cmd_avail_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.notif_cmd_avail_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.notif_cmd_avail_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.notif_cmd_avail_intr_count_r.cnt.value <= field_combo.intr_block_rf.notif_cmd_avail_intr_count_r.cnt.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.notif_mbox_ecc_cor_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_mbox_ecc_cor_intr_count_r.cnt.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_mbox_ecc_cor_intr_count_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.intr_block_rf.notif_mbox_ecc_cor_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_mbox_ecc_cor_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_mbox_ecc_cor_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.notif_mbox_ecc_cor_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.notif_mbox_ecc_cor_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.notif_mbox_ecc_cor_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_mbox_ecc_cor_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.notif_mbox_ecc_cor_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.notif_mbox_ecc_cor_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.notif_mbox_ecc_cor_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.notif_mbox_ecc_cor_intr_count_r.cnt.value <= field_combo.intr_block_rf.notif_mbox_ecc_cor_intr_count_r.cnt.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.notif_debug_locked_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_debug_locked_intr_count_r.cnt.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_debug_locked_intr_count_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.intr_block_rf.notif_debug_locked_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_debug_locked_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_debug_locked_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.notif_debug_locked_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.notif_debug_locked_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.notif_debug_locked_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_debug_locked_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.notif_debug_locked_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.notif_debug_locked_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.notif_debug_locked_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.notif_debug_locked_intr_count_r.cnt.value <= field_combo.intr_block_rf.notif_debug_locked_intr_count_r.cnt.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.notif_scan_mode_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_scan_mode_intr_count_r.cnt.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_scan_mode_intr_count_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.intr_block_rf.notif_scan_mode_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_scan_mode_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_scan_mode_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.notif_scan_mode_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.notif_scan_mode_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.notif_scan_mode_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_scan_mode_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.notif_scan_mode_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.notif_scan_mode_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.notif_scan_mode_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.notif_scan_mode_intr_count_r.cnt.value <= field_combo.intr_block_rf.notif_scan_mode_intr_count_r.cnt.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.notif_soc_req_lock_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_soc_req_lock_intr_count_r.cnt.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_soc_req_lock_intr_count_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.intr_block_rf.notif_soc_req_lock_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_soc_req_lock_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_soc_req_lock_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.notif_soc_req_lock_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.notif_soc_req_lock_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.notif_soc_req_lock_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_soc_req_lock_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.notif_soc_req_lock_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.notif_soc_req_lock_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.notif_soc_req_lock_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.notif_soc_req_lock_intr_count_r.cnt.value <= field_combo.intr_block_rf.notif_soc_req_lock_intr_count_r.cnt.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.notif_gen_in_toggle_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_gen_in_toggle_intr_count_r.cnt.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_gen_in_toggle_intr_count_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = (field_storage.intr_block_rf.notif_gen_in_toggle_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_gen_in_toggle_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_gen_in_toggle_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.notif_gen_in_toggle_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.notif_gen_in_toggle_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.notif_gen_in_toggle_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_gen_in_toggle_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.notif_gen_in_toggle_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.notif_gen_in_toggle_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.notif_gen_in_toggle_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.notif_gen_in_toggle_intr_count_r.cnt.value <= field_combo.intr_block_rf.notif_gen_in_toggle_intr_count_r.cnt.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_internal_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_internal_intr_count_incr_r.pulse.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error_internal_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error_internal_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error_internal_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_internal_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error_internal_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error_internal_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error_internal_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error_internal_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.error_internal_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error_internal_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.error_internal_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_internal_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error_internal_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error_internal_intr_count_incr_r.pulse.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_inv_dev_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_inv_dev_intr_count_incr_r.pulse.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error_inv_dev_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error_inv_dev_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error_inv_dev_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_inv_dev_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error_inv_dev_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error_inv_dev_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error_inv_dev_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error_inv_dev_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.error_inv_dev_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error_inv_dev_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.error_inv_dev_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_inv_dev_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error_inv_dev_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error_inv_dev_intr_count_incr_r.pulse.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_cmd_fail_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_cmd_fail_intr_count_incr_r.pulse.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error_cmd_fail_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error_cmd_fail_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error_cmd_fail_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_cmd_fail_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error_cmd_fail_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error_cmd_fail_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error_cmd_fail_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error_cmd_fail_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.error_cmd_fail_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error_cmd_fail_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.error_cmd_fail_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_cmd_fail_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error_cmd_fail_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error_cmd_fail_intr_count_incr_r.pulse.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_bad_fuse_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_bad_fuse_intr_count_incr_r.pulse.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error_bad_fuse_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error_bad_fuse_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error_bad_fuse_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_bad_fuse_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error_bad_fuse_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error_bad_fuse_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error_bad_fuse_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error_bad_fuse_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.error_bad_fuse_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error_bad_fuse_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.error_bad_fuse_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_bad_fuse_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error_bad_fuse_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error_bad_fuse_intr_count_incr_r.pulse.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_iccm_blocked_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_iccm_blocked_intr_count_incr_r.pulse.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error_iccm_blocked_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error_iccm_blocked_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error_iccm_blocked_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_iccm_blocked_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error_iccm_blocked_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error_iccm_blocked_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error_iccm_blocked_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error_iccm_blocked_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.error_iccm_blocked_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error_iccm_blocked_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.error_iccm_blocked_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_iccm_blocked_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error_iccm_blocked_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error_iccm_blocked_intr_count_incr_r.pulse.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_mbox_ecc_unc_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_mbox_ecc_unc_intr_count_incr_r.pulse.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error_mbox_ecc_unc_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error_mbox_ecc_unc_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error_mbox_ecc_unc_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_mbox_ecc_unc_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error_mbox_ecc_unc_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error_mbox_ecc_unc_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error_mbox_ecc_unc_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error_mbox_ecc_unc_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.error_mbox_ecc_unc_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error_mbox_ecc_unc_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.error_mbox_ecc_unc_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_mbox_ecc_unc_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error_mbox_ecc_unc_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error_mbox_ecc_unc_intr_count_incr_r.pulse.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_wdt_timer1_timeout_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_wdt_timer1_timeout_intr_count_incr_r.pulse.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error_wdt_timer1_timeout_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error_wdt_timer1_timeout_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error_wdt_timer1_timeout_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_wdt_timer1_timeout_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error_wdt_timer1_timeout_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error_wdt_timer1_timeout_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error_wdt_timer1_timeout_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error_wdt_timer1_timeout_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.error_wdt_timer1_timeout_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error_wdt_timer1_timeout_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.error_wdt_timer1_timeout_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_wdt_timer1_timeout_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error_wdt_timer1_timeout_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error_wdt_timer1_timeout_intr_count_incr_r.pulse.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_wdt_timer2_timeout_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_wdt_timer2_timeout_intr_count_incr_r.pulse.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error_wdt_timer2_timeout_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error_wdt_timer2_timeout_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error_wdt_timer2_timeout_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_wdt_timer2_timeout_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error_wdt_timer2_timeout_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error_wdt_timer2_timeout_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error_wdt_timer2_timeout_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error_wdt_timer2_timeout_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.error_wdt_timer2_timeout_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error_wdt_timer2_timeout_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.error_wdt_timer2_timeout_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_wdt_timer2_timeout_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error_wdt_timer2_timeout_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error_wdt_timer2_timeout_intr_count_incr_r.pulse.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.notif_cmd_avail_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_cmd_avail_intr_count_incr_r.pulse.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_avail_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_avail_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif_internal_intr_r.notif_cmd_avail_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_cmd_avail_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.notif_cmd_avail_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.notif_cmd_avail_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.notif_cmd_avail_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.notif_cmd_avail_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.notif_cmd_avail_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.notif_cmd_avail_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.notif_cmd_avail_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_cmd_avail_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.notif_cmd_avail_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.notif_cmd_avail_intr_count_incr_r.pulse.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.notif_mbox_ecc_cor_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_mbox_ecc_cor_intr_count_incr_r.pulse.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.notif_intr_trig_r.notif_mbox_ecc_cor_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif_mbox_ecc_cor_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif_internal_intr_r.notif_mbox_ecc_cor_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_mbox_ecc_cor_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.notif_mbox_ecc_cor_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.notif_mbox_ecc_cor_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.notif_mbox_ecc_cor_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.notif_mbox_ecc_cor_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.notif_mbox_ecc_cor_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.notif_mbox_ecc_cor_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.notif_mbox_ecc_cor_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_mbox_ecc_cor_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.notif_mbox_ecc_cor_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.notif_mbox_ecc_cor_intr_count_incr_r.pulse.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.notif_debug_locked_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_debug_locked_intr_count_incr_r.pulse.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.notif_intr_trig_r.notif_debug_locked_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif_debug_locked_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif_internal_intr_r.notif_debug_locked_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_debug_locked_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.notif_debug_locked_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.notif_debug_locked_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.notif_debug_locked_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.notif_debug_locked_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.notif_debug_locked_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.notif_debug_locked_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.notif_debug_locked_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_debug_locked_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.notif_debug_locked_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.notif_debug_locked_intr_count_incr_r.pulse.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.notif_scan_mode_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_scan_mode_intr_count_incr_r.pulse.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.notif_intr_trig_r.notif_scan_mode_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif_scan_mode_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif_internal_intr_r.notif_scan_mode_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_scan_mode_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.notif_scan_mode_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.notif_scan_mode_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.notif_scan_mode_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.notif_scan_mode_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.notif_scan_mode_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.notif_scan_mode_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.notif_scan_mode_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_scan_mode_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.notif_scan_mode_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.notif_scan_mode_intr_count_incr_r.pulse.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.notif_soc_req_lock_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_soc_req_lock_intr_count_incr_r.pulse.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.notif_intr_trig_r.notif_soc_req_lock_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif_soc_req_lock_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif_internal_intr_r.notif_soc_req_lock_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_soc_req_lock_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.notif_soc_req_lock_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.notif_soc_req_lock_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.notif_soc_req_lock_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.notif_soc_req_lock_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.notif_soc_req_lock_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.notif_soc_req_lock_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.notif_soc_req_lock_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_soc_req_lock_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.notif_soc_req_lock_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.notif_soc_req_lock_intr_count_incr_r.pulse.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.notif_gen_in_toggle_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_gen_in_toggle_intr_count_incr_r.pulse.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.notif_intr_trig_r.notif_gen_in_toggle_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif_gen_in_toggle_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif_internal_intr_r.notif_gen_in_toggle_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_gen_in_toggle_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.notif_gen_in_toggle_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.notif_gen_in_toggle_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.notif_gen_in_toggle_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.notif_gen_in_toggle_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.notif_gen_in_toggle_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.notif_gen_in_toggle_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.cptra_rst_b) begin
        if(~hwif_in.cptra_rst_b) begin
            field_storage.intr_block_rf.notif_gen_in_toggle_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_gen_in_toggle_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.notif_gen_in_toggle_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.notif_gen_in_toggle_intr_count_incr_r.pulse.next;
        end
    end

    //--------------------------------------------------------------------------
    // Write response
    //--------------------------------------------------------------------------
    assign cpuif_wr_ack = decoded_req & decoded_req_is_wr;
    // Writes are always granted with no error response
    assign cpuif_wr_err = '0;

    //--------------------------------------------------------------------------
    // Readback
    //--------------------------------------------------------------------------

    logic readback_err;
    logic readback_done;
    logic [31:0] readback_data;

    // Assign readback values to a flattened array
    logic [218-1:0][31:0] readback_array;
    assign readback_array[0][0:0] = (decoded_reg_strb.CPTRA_HW_ERROR_FATAL && !decoded_req_is_wr) ? field_storage.CPTRA_HW_ERROR_FATAL.iccm_ecc_unc.value : '0;
    assign readback_array[0][1:1] = (decoded_reg_strb.CPTRA_HW_ERROR_FATAL && !decoded_req_is_wr) ? field_storage.CPTRA_HW_ERROR_FATAL.dccm_ecc_unc.value : '0;
    assign readback_array[0][2:2] = (decoded_reg_strb.CPTRA_HW_ERROR_FATAL && !decoded_req_is_wr) ? field_storage.CPTRA_HW_ERROR_FATAL.nmi_pin.value : '0;
    assign readback_array[0][3:3] = (decoded_reg_strb.CPTRA_HW_ERROR_FATAL && !decoded_req_is_wr) ? field_storage.CPTRA_HW_ERROR_FATAL.crypto_err.value : '0;
    assign readback_array[0][31:4] = (decoded_reg_strb.CPTRA_HW_ERROR_FATAL && !decoded_req_is_wr) ? hwif_in.CPTRA_HW_ERROR_FATAL.rsvd.next : '0;
    assign readback_array[1][0:0] = (decoded_reg_strb.CPTRA_HW_ERROR_NON_FATAL && !decoded_req_is_wr) ? field_storage.CPTRA_HW_ERROR_NON_FATAL.mbox_prot_no_lock.value : '0;
    assign readback_array[1][1:1] = (decoded_reg_strb.CPTRA_HW_ERROR_NON_FATAL && !decoded_req_is_wr) ? field_storage.CPTRA_HW_ERROR_NON_FATAL.mbox_prot_ooo.value : '0;
    assign readback_array[1][2:2] = (decoded_reg_strb.CPTRA_HW_ERROR_NON_FATAL && !decoded_req_is_wr) ? field_storage.CPTRA_HW_ERROR_NON_FATAL.mbox_ecc_unc.value : '0;
    assign readback_array[1][31:3] = (decoded_reg_strb.CPTRA_HW_ERROR_NON_FATAL && !decoded_req_is_wr) ? hwif_in.CPTRA_HW_ERROR_NON_FATAL.rsvd.next : '0;
    assign readback_array[2][31:0] = (decoded_reg_strb.CPTRA_FW_ERROR_FATAL && !decoded_req_is_wr) ? field_storage.CPTRA_FW_ERROR_FATAL.error_code.value : '0;
    assign readback_array[3][31:0] = (decoded_reg_strb.CPTRA_FW_ERROR_NON_FATAL && !decoded_req_is_wr) ? field_storage.CPTRA_FW_ERROR_NON_FATAL.error_code.value : '0;
    assign readback_array[4][31:0] = (decoded_reg_strb.CPTRA_HW_ERROR_ENC && !decoded_req_is_wr) ? field_storage.CPTRA_HW_ERROR_ENC.error_code.value : '0;
    assign readback_array[5][31:0] = (decoded_reg_strb.CPTRA_FW_ERROR_ENC && !decoded_req_is_wr) ? field_storage.CPTRA_FW_ERROR_ENC.error_code.value : '0;
    for(genvar i0=0; i0<8; i0++) begin
        assign readback_array[i0*1 + 6][31:0] = (decoded_reg_strb.CPTRA_FW_EXTENDED_ERROR_INFO[i0] && !decoded_req_is_wr) ? field_storage.CPTRA_FW_EXTENDED_ERROR_INFO[i0].error_info.value : '0;
    end
    assign readback_array[14][31:0] = (decoded_reg_strb.CPTRA_BOOT_STATUS && !decoded_req_is_wr) ? field_storage.CPTRA_BOOT_STATUS.status.value : '0;
    assign readback_array[15][23:0] = (decoded_reg_strb.CPTRA_FLOW_STATUS && !decoded_req_is_wr) ? field_storage.CPTRA_FLOW_STATUS.status.value : '0;
    assign readback_array[15][24:24] = (decoded_reg_strb.CPTRA_FLOW_STATUS && !decoded_req_is_wr) ? field_storage.CPTRA_FLOW_STATUS.idevid_csr_ready.value : '0;
    assign readback_array[15][27:25] = (decoded_reg_strb.CPTRA_FLOW_STATUS && !decoded_req_is_wr) ? hwif_in.CPTRA_FLOW_STATUS.boot_fsm_ps.next : '0;
    assign readback_array[15][28:28] = (decoded_reg_strb.CPTRA_FLOW_STATUS && !decoded_req_is_wr) ? field_storage.CPTRA_FLOW_STATUS.ready_for_mb_processing.value : '0;
    assign readback_array[15][29:29] = (decoded_reg_strb.CPTRA_FLOW_STATUS && !decoded_req_is_wr) ? field_storage.CPTRA_FLOW_STATUS.ready_for_runtime.value : '0;
    assign readback_array[15][30:30] = (decoded_reg_strb.CPTRA_FLOW_STATUS && !decoded_req_is_wr) ? hwif_in.CPTRA_FLOW_STATUS.ready_for_fuses.next : '0;
    assign readback_array[15][31:31] = (decoded_reg_strb.CPTRA_FLOW_STATUS && !decoded_req_is_wr) ? field_storage.CPTRA_FLOW_STATUS.mailbox_flow_done.value : '0;
    assign readback_array[16][0:0] = (decoded_reg_strb.CPTRA_RESET_REASON && !decoded_req_is_wr) ? field_storage.CPTRA_RESET_REASON.FW_UPD_RESET.value : '0;
    assign readback_array[16][1:1] = (decoded_reg_strb.CPTRA_RESET_REASON && !decoded_req_is_wr) ? field_storage.CPTRA_RESET_REASON.WARM_RESET.value : '0;
    assign readback_array[16][31:2] = '0;
    assign readback_array[17][1:0] = (decoded_reg_strb.CPTRA_SECURITY_STATE && !decoded_req_is_wr) ? hwif_in.CPTRA_SECURITY_STATE.device_lifecycle.next : '0;
    assign readback_array[17][2:2] = (decoded_reg_strb.CPTRA_SECURITY_STATE && !decoded_req_is_wr) ? hwif_in.CPTRA_SECURITY_STATE.debug_locked.next : '0;
    assign readback_array[17][3:3] = (decoded_reg_strb.CPTRA_SECURITY_STATE && !decoded_req_is_wr) ? hwif_in.CPTRA_SECURITY_STATE.scan_mode.next : '0;
    assign readback_array[17][31:4] = (decoded_reg_strb.CPTRA_SECURITY_STATE && !decoded_req_is_wr) ? 28'h0 : '0;
    for(genvar i0=0; i0<5; i0++) begin
        assign readback_array[i0*1 + 18][31:0] = (decoded_reg_strb.CPTRA_MBOX_VALID_AXI_USER[i0] && !decoded_req_is_wr) ? field_storage.CPTRA_MBOX_VALID_AXI_USER[i0].AXI_USER.value : '0;
    end
    for(genvar i0=0; i0<5; i0++) begin
        assign readback_array[i0*1 + 23][0:0] = (decoded_reg_strb.CPTRA_MBOX_AXI_USER_LOCK[i0] && !decoded_req_is_wr) ? field_storage.CPTRA_MBOX_AXI_USER_LOCK[i0].LOCK.value : '0;
        assign readback_array[i0*1 + 23][31:1] = '0;
    end
    assign readback_array[28][31:0] = (decoded_reg_strb.CPTRA_TRNG_VALID_AXI_USER && !decoded_req_is_wr) ? field_storage.CPTRA_TRNG_VALID_AXI_USER.AXI_USER.value : '0;
    assign readback_array[29][0:0] = (decoded_reg_strb.CPTRA_TRNG_AXI_USER_LOCK && !decoded_req_is_wr) ? field_storage.CPTRA_TRNG_AXI_USER_LOCK.LOCK.value : '0;
    assign readback_array[29][31:1] = '0;
    for(genvar i0=0; i0<12; i0++) begin
        assign readback_array[i0*1 + 30][31:0] = (decoded_reg_strb.CPTRA_TRNG_DATA[i0] && !decoded_req_is_wr) ? field_storage.CPTRA_TRNG_DATA[i0].DATA.value : '0;
    end
    assign readback_array[42][0:0] = (decoded_reg_strb.CPTRA_TRNG_CTRL && !decoded_req_is_wr) ? field_storage.CPTRA_TRNG_CTRL.clear.value : '0;
    assign readback_array[42][31:1] = '0;
    assign readback_array[43][0:0] = (decoded_reg_strb.CPTRA_TRNG_STATUS && !decoded_req_is_wr) ? field_storage.CPTRA_TRNG_STATUS.DATA_REQ.value : '0;
    assign readback_array[43][1:1] = (decoded_reg_strb.CPTRA_TRNG_STATUS && !decoded_req_is_wr) ? field_storage.CPTRA_TRNG_STATUS.DATA_WR_DONE.value : '0;
    assign readback_array[43][31:2] = '0;
    assign readback_array[44][0:0] = (decoded_reg_strb.CPTRA_FUSE_WR_DONE && !decoded_req_is_wr) ? field_storage.CPTRA_FUSE_WR_DONE.done.value : '0;
    assign readback_array[44][31:1] = '0;
    assign readback_array[45][31:0] = (decoded_reg_strb.CPTRA_TIMER_CONFIG && !decoded_req_is_wr) ? field_storage.CPTRA_TIMER_CONFIG.clk_period.value : '0;
    assign readback_array[46][0:0] = (decoded_reg_strb.CPTRA_BOOTFSM_GO && !decoded_req_is_wr) ? field_storage.CPTRA_BOOTFSM_GO.GO.value : '0;
    assign readback_array[46][31:1] = '0;
    assign readback_array[47][31:0] = (decoded_reg_strb.CPTRA_DBG_MANUF_SERVICE_REG && !decoded_req_is_wr) ? field_storage.CPTRA_DBG_MANUF_SERVICE_REG.DATA.value : '0;
    assign readback_array[48][0:0] = (decoded_reg_strb.CPTRA_CLK_GATING_EN && !decoded_req_is_wr) ? field_storage.CPTRA_CLK_GATING_EN.clk_gating_en.value : '0;
    assign readback_array[48][31:1] = '0;
    for(genvar i0=0; i0<2; i0++) begin
        assign readback_array[i0*1 + 49][31:0] = (decoded_reg_strb.CPTRA_GENERIC_INPUT_WIRES[i0] && !decoded_req_is_wr) ? field_storage.CPTRA_GENERIC_INPUT_WIRES[i0].generic_wires.value : '0;
    end
    for(genvar i0=0; i0<2; i0++) begin
        assign readback_array[i0*1 + 51][31:0] = (decoded_reg_strb.CPTRA_GENERIC_OUTPUT_WIRES[i0] && !decoded_req_is_wr) ? field_storage.CPTRA_GENERIC_OUTPUT_WIRES[i0].generic_wires.value : '0;
    end
    assign readback_array[53][15:0] = (decoded_reg_strb.CPTRA_HW_REV_ID && !decoded_req_is_wr) ? 16'h11 : '0;
    assign readback_array[53][31:16] = (decoded_reg_strb.CPTRA_HW_REV_ID && !decoded_req_is_wr) ? hwif_in.CPTRA_HW_REV_ID.SOC_STEPPING_ID.next : '0;
    for(genvar i0=0; i0<2; i0++) begin
        assign readback_array[i0*1 + 54][31:0] = (decoded_reg_strb.CPTRA_FW_REV_ID[i0] && !decoded_req_is_wr) ? field_storage.CPTRA_FW_REV_ID[i0].REV_ID.value : '0;
    end
    assign readback_array[56][0:0] = (decoded_reg_strb.CPTRA_HW_CONFIG && !decoded_req_is_wr) ? hwif_in.CPTRA_HW_CONFIG.iTRNG_en.next : '0;
    assign readback_array[56][3:1] = (decoded_reg_strb.CPTRA_HW_CONFIG && !decoded_req_is_wr) ? hwif_in.CPTRA_HW_CONFIG.RSVD_en.next : '0;
    assign readback_array[56][4:4] = (decoded_reg_strb.CPTRA_HW_CONFIG && !decoded_req_is_wr) ? hwif_in.CPTRA_HW_CONFIG.LMS_acc_en.next : '0;
    assign readback_array[56][5:5] = (decoded_reg_strb.CPTRA_HW_CONFIG && !decoded_req_is_wr) ? hwif_in.CPTRA_HW_CONFIG.ACTIVE_MODE_en.next : '0;
    assign readback_array[56][31:6] = '0;
    assign readback_array[57][0:0] = (decoded_reg_strb.CPTRA_WDT_TIMER1_EN && !decoded_req_is_wr) ? field_storage.CPTRA_WDT_TIMER1_EN.timer1_en.value : '0;
    assign readback_array[57][31:1] = '0;
    assign readback_array[58][0:0] = (decoded_reg_strb.CPTRA_WDT_TIMER1_CTRL && !decoded_req_is_wr) ? field_storage.CPTRA_WDT_TIMER1_CTRL.timer1_restart.value : '0;
    assign readback_array[58][31:1] = '0;
    for(genvar i0=0; i0<2; i0++) begin
        assign readback_array[i0*1 + 59][31:0] = (decoded_reg_strb.CPTRA_WDT_TIMER1_TIMEOUT_PERIOD[i0] && !decoded_req_is_wr) ? field_storage.CPTRA_WDT_TIMER1_TIMEOUT_PERIOD[i0].timer1_timeout_period.value : '0;
    end
    assign readback_array[61][0:0] = (decoded_reg_strb.CPTRA_WDT_TIMER2_EN && !decoded_req_is_wr) ? field_storage.CPTRA_WDT_TIMER2_EN.timer2_en.value : '0;
    assign readback_array[61][31:1] = '0;
    assign readback_array[62][0:0] = (decoded_reg_strb.CPTRA_WDT_TIMER2_CTRL && !decoded_req_is_wr) ? field_storage.CPTRA_WDT_TIMER2_CTRL.timer2_restart.value : '0;
    assign readback_array[62][31:1] = '0;
    for(genvar i0=0; i0<2; i0++) begin
        assign readback_array[i0*1 + 63][31:0] = (decoded_reg_strb.CPTRA_WDT_TIMER2_TIMEOUT_PERIOD[i0] && !decoded_req_is_wr) ? field_storage.CPTRA_WDT_TIMER2_TIMEOUT_PERIOD[i0].timer2_timeout_period.value : '0;
    end
    assign readback_array[65][0:0] = (decoded_reg_strb.CPTRA_WDT_STATUS && !decoded_req_is_wr) ? field_storage.CPTRA_WDT_STATUS.t1_timeout.value : '0;
    assign readback_array[65][1:1] = (decoded_reg_strb.CPTRA_WDT_STATUS && !decoded_req_is_wr) ? field_storage.CPTRA_WDT_STATUS.t2_timeout.value : '0;
    assign readback_array[65][31:2] = '0;
    assign readback_array[66][31:0] = (decoded_reg_strb.CPTRA_FUSE_VALID_AXI_USER && !decoded_req_is_wr) ? field_storage.CPTRA_FUSE_VALID_AXI_USER.AXI_USER.value : '0;
    assign readback_array[67][0:0] = (decoded_reg_strb.CPTRA_FUSE_AXI_USER_LOCK && !decoded_req_is_wr) ? field_storage.CPTRA_FUSE_AXI_USER_LOCK.LOCK.value : '0;
    assign readback_array[67][31:1] = '0;
    for(genvar i0=0; i0<2; i0++) begin
        assign readback_array[i0*1 + 68][31:0] = (decoded_reg_strb.CPTRA_WDT_CFG[i0] && !decoded_req_is_wr) ? field_storage.CPTRA_WDT_CFG[i0].TIMEOUT.value : '0;
    end
    assign readback_array[70][15:0] = (decoded_reg_strb.CPTRA_iTRNG_ENTROPY_CONFIG_0 && !decoded_req_is_wr) ? field_storage.CPTRA_iTRNG_ENTROPY_CONFIG_0.low_threshold.value : '0;
    assign readback_array[70][31:16] = (decoded_reg_strb.CPTRA_iTRNG_ENTROPY_CONFIG_0 && !decoded_req_is_wr) ? field_storage.CPTRA_iTRNG_ENTROPY_CONFIG_0.high_threshold.value : '0;
    assign readback_array[71][15:0] = (decoded_reg_strb.CPTRA_iTRNG_ENTROPY_CONFIG_1 && !decoded_req_is_wr) ? field_storage.CPTRA_iTRNG_ENTROPY_CONFIG_1.repetition_count.value : '0;
    assign readback_array[71][31:16] = (decoded_reg_strb.CPTRA_iTRNG_ENTROPY_CONFIG_1 && !decoded_req_is_wr) ? field_storage.CPTRA_iTRNG_ENTROPY_CONFIG_1.RSVD.value : '0;
    for(genvar i0=0; i0<2; i0++) begin
        assign readback_array[i0*1 + 72][31:0] = (decoded_reg_strb.CPTRA_RSVD_REG[i0] && !decoded_req_is_wr) ? field_storage.CPTRA_RSVD_REG[i0].RSVD.value : '0;
    end
    assign readback_array[74][31:0] = (decoded_reg_strb.CPTRA_HW_CAPABILITIES && !decoded_req_is_wr) ? field_storage.CPTRA_HW_CAPABILITIES.cap.value : '0;
    assign readback_array[75][31:0] = (decoded_reg_strb.CPTRA_FW_CAPABILITIES && !decoded_req_is_wr) ? field_storage.CPTRA_FW_CAPABILITIES.cap.value : '0;
    assign readback_array[76][0:0] = (decoded_reg_strb.CPTRA_CAP_LOCK && !decoded_req_is_wr) ? field_storage.CPTRA_CAP_LOCK.lock.value : '0;
    assign readback_array[76][31:1] = '0;
    for(genvar i0=0; i0<12; i0++) begin
        assign readback_array[i0*1 + 77][31:0] = (decoded_reg_strb.CPTRA_OWNER_PK_HASH[i0] && !decoded_req_is_wr) ? field_storage.CPTRA_OWNER_PK_HASH[i0].hash.value : '0;
    end
    assign readback_array[89][0:0] = (decoded_reg_strb.CPTRA_OWNER_PK_HASH_LOCK && !decoded_req_is_wr) ? field_storage.CPTRA_OWNER_PK_HASH_LOCK.lock.value : '0;
    assign readback_array[89][31:1] = '0;
    for(genvar i0=0; i0<12; i0++) begin
        assign readback_array[i0*1 + 90][31:0] = (decoded_reg_strb.fuse_key_manifest_pk_hash[i0] && !decoded_req_is_wr) ? field_storage.fuse_key_manifest_pk_hash[i0].hash.value : '0;
    end
    assign readback_array[102][3:0] = (decoded_reg_strb.fuse_key_manifest_pk_hash_mask && !decoded_req_is_wr) ? field_storage.fuse_key_manifest_pk_hash_mask.mask.value : '0;
    assign readback_array[102][31:4] = '0;
    assign readback_array[103][31:0] = (decoded_reg_strb.fuse_fmc_key_manifest_svn && !decoded_req_is_wr) ? field_storage.fuse_fmc_key_manifest_svn.svn.value : '0;
    for(genvar i0=0; i0<4; i0++) begin
        assign readback_array[i0*1 + 104][31:0] = (decoded_reg_strb.fuse_runtime_svn[i0] && !decoded_req_is_wr) ? field_storage.fuse_runtime_svn[i0].svn.value : '0;
    end
    assign readback_array[108][0:0] = (decoded_reg_strb.fuse_anti_rollback_disable && !decoded_req_is_wr) ? field_storage.fuse_anti_rollback_disable.dis.value : '0;
    assign readback_array[108][31:1] = '0;
    for(genvar i0=0; i0<24; i0++) begin
        assign readback_array[i0*1 + 109][31:0] = (decoded_reg_strb.fuse_idevid_cert_attr[i0] && !decoded_req_is_wr) ? field_storage.fuse_idevid_cert_attr[i0].cert.value : '0;
    end
    for(genvar i0=0; i0<4; i0++) begin
        assign readback_array[i0*1 + 133][31:0] = (decoded_reg_strb.fuse_idevid_manuf_hsm_id[i0] && !decoded_req_is_wr) ? field_storage.fuse_idevid_manuf_hsm_id[i0].hsm_id.value : '0;
    end
    assign readback_array[137][31:0] = (decoded_reg_strb.fuse_lms_revocation && !decoded_req_is_wr) ? field_storage.fuse_lms_revocation.lms_revocation.value : '0;
    assign readback_array[138][3:0] = (decoded_reg_strb.fuse_mldsa_revocation && !decoded_req_is_wr) ? field_storage.fuse_mldsa_revocation.mldsa_revocation.value : '0;
    assign readback_array[138][31:4] = '0;
    assign readback_array[139][15:0] = (decoded_reg_strb.fuse_soc_stepping_id && !decoded_req_is_wr) ? field_storage.fuse_soc_stepping_id.soc_stepping_id.value : '0;
    assign readback_array[139][31:16] = '0;
    for(genvar i0=0; i0<4; i0++) begin
        assign readback_array[i0*1 + 140][31:0] = (decoded_reg_strb.fuse_manuf_dbg_unlock_token[i0] && !decoded_req_is_wr) ? field_storage.fuse_manuf_dbg_unlock_token[i0].token.value : '0;
    end
    assign readback_array[144][31:0] = (decoded_reg_strb.SS_CALIPTRA_BASE_ADDR_L && !decoded_req_is_wr) ? field_storage.SS_CALIPTRA_BASE_ADDR_L.addr_l.value : '0;
    assign readback_array[145][31:0] = (decoded_reg_strb.SS_CALIPTRA_BASE_ADDR_H && !decoded_req_is_wr) ? field_storage.SS_CALIPTRA_BASE_ADDR_H.addr_h.value : '0;
    assign readback_array[146][31:0] = (decoded_reg_strb.SS_MCI_BASE_ADDR_L && !decoded_req_is_wr) ? field_storage.SS_MCI_BASE_ADDR_L.addr_l.value : '0;
    assign readback_array[147][31:0] = (decoded_reg_strb.SS_MCI_BASE_ADDR_H && !decoded_req_is_wr) ? field_storage.SS_MCI_BASE_ADDR_H.addr_h.value : '0;
    assign readback_array[148][31:0] = (decoded_reg_strb.SS_RECOVERY_IFC_BASE_ADDR_L && !decoded_req_is_wr) ? field_storage.SS_RECOVERY_IFC_BASE_ADDR_L.addr_l.value : '0;
    assign readback_array[149][31:0] = (decoded_reg_strb.SS_RECOVERY_IFC_BASE_ADDR_H && !decoded_req_is_wr) ? field_storage.SS_RECOVERY_IFC_BASE_ADDR_H.addr_h.value : '0;
    assign readback_array[150][31:0] = (decoded_reg_strb.SS_OTP_FC_BASE_ADDR_L && !decoded_req_is_wr) ? field_storage.SS_OTP_FC_BASE_ADDR_L.addr_l.value : '0;
    assign readback_array[151][31:0] = (decoded_reg_strb.SS_OTP_FC_BASE_ADDR_H && !decoded_req_is_wr) ? field_storage.SS_OTP_FC_BASE_ADDR_H.addr_h.value : '0;
    assign readback_array[152][31:0] = (decoded_reg_strb.SS_UDS_SEED_BASE_ADDR_L && !decoded_req_is_wr) ? field_storage.SS_UDS_SEED_BASE_ADDR_L.addr_l.value : '0;
    assign readback_array[153][31:0] = (decoded_reg_strb.SS_UDS_SEED_BASE_ADDR_H && !decoded_req_is_wr) ? field_storage.SS_UDS_SEED_BASE_ADDR_H.addr_h.value : '0;
    assign readback_array[154][31:0] = (decoded_reg_strb.SS_PROD_DEBUG_UNLOCK_AUTH_PK_HASH_REG_BANK_OFFSET && !decoded_req_is_wr) ? field_storage.SS_PROD_DEBUG_UNLOCK_AUTH_PK_HASH_REG_BANK_OFFSET.offset.value : '0;
    assign readback_array[155][31:0] = (decoded_reg_strb.SS_NUM_OF_PROD_DEBUG_UNLOCK_AUTH_PK_HASHES && !decoded_req_is_wr) ? field_storage.SS_NUM_OF_PROD_DEBUG_UNLOCK_AUTH_PK_HASHES.num.value : '0;
    assign readback_array[156][0:0] = (decoded_reg_strb.SS_DEBUG_INTENT && !decoded_req_is_wr) ? field_storage.SS_DEBUG_INTENT.debug_intent.value : '0;
    assign readback_array[156][31:1] = '0;
    for(genvar i0=0; i0<4; i0++) begin
        assign readback_array[i0*1 + 157][31:0] = (decoded_reg_strb.SS_STRAP_GENERIC[i0] && !decoded_req_is_wr) ? field_storage.SS_STRAP_GENERIC[i0].data.value : '0;
    end
    assign readback_array[161][0:0] = (decoded_reg_strb.SS_DBG_MANUF_SERVICE_REG_REQ && !decoded_req_is_wr) ? field_storage.SS_DBG_MANUF_SERVICE_REG_REQ.MANUF_DBG_UNLOCK_REQ.value : '0;
    assign readback_array[161][1:1] = (decoded_reg_strb.SS_DBG_MANUF_SERVICE_REG_REQ && !decoded_req_is_wr) ? field_storage.SS_DBG_MANUF_SERVICE_REG_REQ.PROD_DBG_UNLOCK_REQ.value : '0;
    assign readback_array[161][2:2] = (decoded_reg_strb.SS_DBG_MANUF_SERVICE_REG_REQ && !decoded_req_is_wr) ? field_storage.SS_DBG_MANUF_SERVICE_REG_REQ.UDS_PROGRAM_REQ.value : '0;
    assign readback_array[161][31:3] = (decoded_reg_strb.SS_DBG_MANUF_SERVICE_REG_REQ && !decoded_req_is_wr) ? hwif_in.SS_DBG_MANUF_SERVICE_REG_REQ.RSVD.next : '0;
    assign readback_array[162][0:0] = (decoded_reg_strb.SS_DBG_MANUF_SERVICE_REG_RSP && !decoded_req_is_wr) ? field_storage.SS_DBG_MANUF_SERVICE_REG_RSP.MANUF_DBG_UNLOCK_SUCCESS.value : '0;
    assign readback_array[162][1:1] = (decoded_reg_strb.SS_DBG_MANUF_SERVICE_REG_RSP && !decoded_req_is_wr) ? field_storage.SS_DBG_MANUF_SERVICE_REG_RSP.MANUF_DBG_UNLOCK_FAIL.value : '0;
    assign readback_array[162][2:2] = (decoded_reg_strb.SS_DBG_MANUF_SERVICE_REG_RSP && !decoded_req_is_wr) ? field_storage.SS_DBG_MANUF_SERVICE_REG_RSP.MANUF_DBG_UNLOCK_IN_PROGRESS.value : '0;
    assign readback_array[162][3:3] = (decoded_reg_strb.SS_DBG_MANUF_SERVICE_REG_RSP && !decoded_req_is_wr) ? field_storage.SS_DBG_MANUF_SERVICE_REG_RSP.PROD_DBG_UNLOCK_SUCCESS.value : '0;
    assign readback_array[162][4:4] = (decoded_reg_strb.SS_DBG_MANUF_SERVICE_REG_RSP && !decoded_req_is_wr) ? field_storage.SS_DBG_MANUF_SERVICE_REG_RSP.PROD_DBG_UNLOCK_FAIL.value : '0;
    assign readback_array[162][5:5] = (decoded_reg_strb.SS_DBG_MANUF_SERVICE_REG_RSP && !decoded_req_is_wr) ? field_storage.SS_DBG_MANUF_SERVICE_REG_RSP.PROD_DBG_UNLOCK_IN_PROGRESS.value : '0;
    assign readback_array[162][6:6] = (decoded_reg_strb.SS_DBG_MANUF_SERVICE_REG_RSP && !decoded_req_is_wr) ? field_storage.SS_DBG_MANUF_SERVICE_REG_RSP.UDS_PROGRAM_SUCCESS.value : '0;
    assign readback_array[162][7:7] = (decoded_reg_strb.SS_DBG_MANUF_SERVICE_REG_RSP && !decoded_req_is_wr) ? field_storage.SS_DBG_MANUF_SERVICE_REG_RSP.UDS_PROGRAM_FAIL.value : '0;
    assign readback_array[162][8:8] = (decoded_reg_strb.SS_DBG_MANUF_SERVICE_REG_RSP && !decoded_req_is_wr) ? field_storage.SS_DBG_MANUF_SERVICE_REG_RSP.UDS_PROGRAM_IN_PROGRESS.value : '0;
    assign readback_array[162][31:9] = (decoded_reg_strb.SS_DBG_MANUF_SERVICE_REG_RSP && !decoded_req_is_wr) ? hwif_in.SS_DBG_MANUF_SERVICE_REG_RSP.RSVD.next : '0;
    for(genvar i0=0; i0<2; i0++) begin
        assign readback_array[i0*1 + 163][31:0] = (decoded_reg_strb.SS_SOC_DBG_UNLOCK_LEVEL[i0] && !decoded_req_is_wr) ? field_storage.SS_SOC_DBG_UNLOCK_LEVEL[i0].LEVEL.value : '0;
    end
    for(genvar i0=0; i0<4; i0++) begin
        assign readback_array[i0*1 + 165][31:0] = (decoded_reg_strb.SS_GENERIC_FW_EXEC_CTRL[i0] && !decoded_req_is_wr) ? field_storage.SS_GENERIC_FW_EXEC_CTRL[i0].go.value : '0;
    end
    assign readback_array[169][0:0] = (decoded_reg_strb.internal_iccm_lock && !decoded_req_is_wr) ? field_storage.internal_iccm_lock.lock.value : '0;
    assign readback_array[169][31:1] = '0;
    assign readback_array[170][0:0] = (decoded_reg_strb.internal_fw_update_reset && !decoded_req_is_wr) ? field_storage.internal_fw_update_reset.core_rst.value : '0;
    assign readback_array[170][31:1] = '0;
    assign readback_array[171][7:0] = (decoded_reg_strb.internal_fw_update_reset_wait_cycles && !decoded_req_is_wr) ? field_storage.internal_fw_update_reset_wait_cycles.wait_cycles.value : '0;
    assign readback_array[171][31:8] = '0;
    assign readback_array[172][31:0] = (decoded_reg_strb.internal_nmi_vector && !decoded_req_is_wr) ? field_storage.internal_nmi_vector.vec.value : '0;
    assign readback_array[173][0:0] = (decoded_reg_strb.internal_hw_error_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_hw_error_fatal_mask.mask_iccm_ecc_unc.value : '0;
    assign readback_array[173][1:1] = (decoded_reg_strb.internal_hw_error_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_hw_error_fatal_mask.mask_dccm_ecc_unc.value : '0;
    assign readback_array[173][2:2] = (decoded_reg_strb.internal_hw_error_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_hw_error_fatal_mask.mask_nmi_pin.value : '0;
    assign readback_array[173][3:3] = (decoded_reg_strb.internal_hw_error_fatal_mask && !decoded_req_is_wr) ? 1'h0 : '0;
    assign readback_array[173][31:4] = '0;
    assign readback_array[174][0:0] = (decoded_reg_strb.internal_hw_error_non_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_hw_error_non_fatal_mask.mask_mbox_prot_no_lock.value : '0;
    assign readback_array[174][1:1] = (decoded_reg_strb.internal_hw_error_non_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_hw_error_non_fatal_mask.mask_mbox_prot_ooo.value : '0;
    assign readback_array[174][2:2] = (decoded_reg_strb.internal_hw_error_non_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_hw_error_non_fatal_mask.mask_mbox_ecc_unc.value : '0;
    assign readback_array[174][31:3] = '0;
    assign readback_array[175][31:0] = (decoded_reg_strb.internal_fw_error_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_fw_error_fatal_mask.mask.value : '0;
    assign readback_array[176][31:0] = (decoded_reg_strb.internal_fw_error_non_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_fw_error_non_fatal_mask.mask.value : '0;
    assign readback_array[177][31:0] = (decoded_reg_strb.internal_rv_mtime_l && !decoded_req_is_wr) ? field_storage.internal_rv_mtime_l.count_l.value : '0;
    assign readback_array[178][31:0] = (decoded_reg_strb.internal_rv_mtime_h && !decoded_req_is_wr) ? field_storage.internal_rv_mtime_h.count_h.value : '0;
    assign readback_array[179][31:0] = (decoded_reg_strb.internal_rv_mtimecmp_l && !decoded_req_is_wr) ? field_storage.internal_rv_mtimecmp_l.compare_l.value : '0;
    assign readback_array[180][31:0] = (decoded_reg_strb.internal_rv_mtimecmp_h && !decoded_req_is_wr) ? field_storage.internal_rv_mtimecmp_h.compare_h.value : '0;
    assign readback_array[181][0:0] = (decoded_reg_strb.intr_block_rf.global_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.global_intr_en_r.error_en.value : '0;
    assign readback_array[181][1:1] = (decoded_reg_strb.intr_block_rf.global_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.global_intr_en_r.notif_en.value : '0;
    assign readback_array[181][31:2] = '0;
    assign readback_array[182][0:0] = (decoded_reg_strb.intr_block_rf.error_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_en_r.error_internal_en.value : '0;
    assign readback_array[182][1:1] = (decoded_reg_strb.intr_block_rf.error_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_en_r.error_inv_dev_en.value : '0;
    assign readback_array[182][2:2] = (decoded_reg_strb.intr_block_rf.error_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_en_r.error_cmd_fail_en.value : '0;
    assign readback_array[182][3:3] = (decoded_reg_strb.intr_block_rf.error_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_en_r.error_bad_fuse_en.value : '0;
    assign readback_array[182][4:4] = (decoded_reg_strb.intr_block_rf.error_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_en_r.error_iccm_blocked_en.value : '0;
    assign readback_array[182][5:5] = (decoded_reg_strb.intr_block_rf.error_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_en_r.error_mbox_ecc_unc_en.value : '0;
    assign readback_array[182][6:6] = (decoded_reg_strb.intr_block_rf.error_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_en_r.error_wdt_timer1_timeout_en.value : '0;
    assign readback_array[182][7:7] = (decoded_reg_strb.intr_block_rf.error_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_en_r.error_wdt_timer2_timeout_en.value : '0;
    assign readback_array[182][31:8] = '0;
    assign readback_array[183][0:0] = (decoded_reg_strb.intr_block_rf.notif_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_intr_en_r.notif_cmd_avail_en.value : '0;
    assign readback_array[183][1:1] = (decoded_reg_strb.intr_block_rf.notif_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_intr_en_r.notif_mbox_ecc_cor_en.value : '0;
    assign readback_array[183][2:2] = (decoded_reg_strb.intr_block_rf.notif_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_intr_en_r.notif_debug_locked_en.value : '0;
    assign readback_array[183][3:3] = (decoded_reg_strb.intr_block_rf.notif_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_intr_en_r.notif_scan_mode_en.value : '0;
    assign readback_array[183][4:4] = (decoded_reg_strb.intr_block_rf.notif_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_intr_en_r.notif_soc_req_lock_en.value : '0;
    assign readback_array[183][5:5] = (decoded_reg_strb.intr_block_rf.notif_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_intr_en_r.notif_gen_in_toggle_en.value : '0;
    assign readback_array[183][31:6] = '0;
    assign readback_array[184][0:0] = (decoded_reg_strb.intr_block_rf.error_global_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_global_intr_r.agg_sts.value : '0;
    assign readback_array[184][31:1] = '0;
    assign readback_array[185][0:0] = (decoded_reg_strb.intr_block_rf.notif_global_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_global_intr_r.agg_sts.value : '0;
    assign readback_array[185][31:1] = '0;
    assign readback_array[186][0:0] = (decoded_reg_strb.intr_block_rf.error_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_internal_intr_r.error_internal_sts.value : '0;
    assign readback_array[186][1:1] = (decoded_reg_strb.intr_block_rf.error_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_internal_intr_r.error_inv_dev_sts.value : '0;
    assign readback_array[186][2:2] = (decoded_reg_strb.intr_block_rf.error_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_internal_intr_r.error_cmd_fail_sts.value : '0;
    assign readback_array[186][3:3] = (decoded_reg_strb.intr_block_rf.error_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_internal_intr_r.error_bad_fuse_sts.value : '0;
    assign readback_array[186][4:4] = (decoded_reg_strb.intr_block_rf.error_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_internal_intr_r.error_iccm_blocked_sts.value : '0;
    assign readback_array[186][5:5] = (decoded_reg_strb.intr_block_rf.error_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_internal_intr_r.error_mbox_ecc_unc_sts.value : '0;
    assign readback_array[186][6:6] = (decoded_reg_strb.intr_block_rf.error_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_internal_intr_r.error_wdt_timer1_timeout_sts.value : '0;
    assign readback_array[186][7:7] = (decoded_reg_strb.intr_block_rf.error_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_internal_intr_r.error_wdt_timer2_timeout_sts.value : '0;
    assign readback_array[186][31:8] = '0;
    assign readback_array[187][0:0] = (decoded_reg_strb.intr_block_rf.notif_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_internal_intr_r.notif_cmd_avail_sts.value : '0;
    assign readback_array[187][1:1] = (decoded_reg_strb.intr_block_rf.notif_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_internal_intr_r.notif_mbox_ecc_cor_sts.value : '0;
    assign readback_array[187][2:2] = (decoded_reg_strb.intr_block_rf.notif_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_internal_intr_r.notif_debug_locked_sts.value : '0;
    assign readback_array[187][3:3] = (decoded_reg_strb.intr_block_rf.notif_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_internal_intr_r.notif_scan_mode_sts.value : '0;
    assign readback_array[187][4:4] = (decoded_reg_strb.intr_block_rf.notif_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_internal_intr_r.notif_soc_req_lock_sts.value : '0;
    assign readback_array[187][5:5] = (decoded_reg_strb.intr_block_rf.notif_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_internal_intr_r.notif_gen_in_toggle_sts.value : '0;
    assign readback_array[187][31:6] = '0;
    assign readback_array[188][0:0] = (decoded_reg_strb.intr_block_rf.error_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_trig_r.error_internal_trig.value : '0;
    assign readback_array[188][1:1] = (decoded_reg_strb.intr_block_rf.error_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_trig_r.error_inv_dev_trig.value : '0;
    assign readback_array[188][2:2] = (decoded_reg_strb.intr_block_rf.error_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_trig_r.error_cmd_fail_trig.value : '0;
    assign readback_array[188][3:3] = (decoded_reg_strb.intr_block_rf.error_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_trig_r.error_bad_fuse_trig.value : '0;
    assign readback_array[188][4:4] = (decoded_reg_strb.intr_block_rf.error_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_trig_r.error_iccm_blocked_trig.value : '0;
    assign readback_array[188][5:5] = (decoded_reg_strb.intr_block_rf.error_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_trig_r.error_mbox_ecc_unc_trig.value : '0;
    assign readback_array[188][6:6] = (decoded_reg_strb.intr_block_rf.error_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_trig_r.error_wdt_timer1_timeout_trig.value : '0;
    assign readback_array[188][7:7] = (decoded_reg_strb.intr_block_rf.error_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_trig_r.error_wdt_timer2_timeout_trig.value : '0;
    assign readback_array[188][31:8] = '0;
    assign readback_array[189][0:0] = (decoded_reg_strb.intr_block_rf.notif_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_avail_trig.value : '0;
    assign readback_array[189][1:1] = (decoded_reg_strb.intr_block_rf.notif_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_intr_trig_r.notif_mbox_ecc_cor_trig.value : '0;
    assign readback_array[189][2:2] = (decoded_reg_strb.intr_block_rf.notif_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_intr_trig_r.notif_debug_locked_trig.value : '0;
    assign readback_array[189][3:3] = (decoded_reg_strb.intr_block_rf.notif_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_intr_trig_r.notif_scan_mode_trig.value : '0;
    assign readback_array[189][4:4] = (decoded_reg_strb.intr_block_rf.notif_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_intr_trig_r.notif_soc_req_lock_trig.value : '0;
    assign readback_array[189][5:5] = (decoded_reg_strb.intr_block_rf.notif_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_intr_trig_r.notif_gen_in_toggle_trig.value : '0;
    assign readback_array[189][31:6] = '0;
    assign readback_array[190][31:0] = (decoded_reg_strb.intr_block_rf.error_internal_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_internal_intr_count_r.cnt.value : '0;
    assign readback_array[191][31:0] = (decoded_reg_strb.intr_block_rf.error_inv_dev_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_inv_dev_intr_count_r.cnt.value : '0;
    assign readback_array[192][31:0] = (decoded_reg_strb.intr_block_rf.error_cmd_fail_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_cmd_fail_intr_count_r.cnt.value : '0;
    assign readback_array[193][31:0] = (decoded_reg_strb.intr_block_rf.error_bad_fuse_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_bad_fuse_intr_count_r.cnt.value : '0;
    assign readback_array[194][31:0] = (decoded_reg_strb.intr_block_rf.error_iccm_blocked_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_iccm_blocked_intr_count_r.cnt.value : '0;
    assign readback_array[195][31:0] = (decoded_reg_strb.intr_block_rf.error_mbox_ecc_unc_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_mbox_ecc_unc_intr_count_r.cnt.value : '0;
    assign readback_array[196][31:0] = (decoded_reg_strb.intr_block_rf.error_wdt_timer1_timeout_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_wdt_timer1_timeout_intr_count_r.cnt.value : '0;
    assign readback_array[197][31:0] = (decoded_reg_strb.intr_block_rf.error_wdt_timer2_timeout_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_wdt_timer2_timeout_intr_count_r.cnt.value : '0;
    assign readback_array[198][31:0] = (decoded_reg_strb.intr_block_rf.notif_cmd_avail_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_cmd_avail_intr_count_r.cnt.value : '0;
    assign readback_array[199][31:0] = (decoded_reg_strb.intr_block_rf.notif_mbox_ecc_cor_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_mbox_ecc_cor_intr_count_r.cnt.value : '0;
    assign readback_array[200][31:0] = (decoded_reg_strb.intr_block_rf.notif_debug_locked_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_debug_locked_intr_count_r.cnt.value : '0;
    assign readback_array[201][31:0] = (decoded_reg_strb.intr_block_rf.notif_scan_mode_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_scan_mode_intr_count_r.cnt.value : '0;
    assign readback_array[202][31:0] = (decoded_reg_strb.intr_block_rf.notif_soc_req_lock_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_soc_req_lock_intr_count_r.cnt.value : '0;
    assign readback_array[203][31:0] = (decoded_reg_strb.intr_block_rf.notif_gen_in_toggle_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_gen_in_toggle_intr_count_r.cnt.value : '0;
    assign readback_array[204][0:0] = (decoded_reg_strb.intr_block_rf.error_internal_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_internal_intr_count_incr_r.pulse.value : '0;
    assign readback_array[204][31:1] = '0;
    assign readback_array[205][0:0] = (decoded_reg_strb.intr_block_rf.error_inv_dev_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_inv_dev_intr_count_incr_r.pulse.value : '0;
    assign readback_array[205][31:1] = '0;
    assign readback_array[206][0:0] = (decoded_reg_strb.intr_block_rf.error_cmd_fail_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_cmd_fail_intr_count_incr_r.pulse.value : '0;
    assign readback_array[206][31:1] = '0;
    assign readback_array[207][0:0] = (decoded_reg_strb.intr_block_rf.error_bad_fuse_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_bad_fuse_intr_count_incr_r.pulse.value : '0;
    assign readback_array[207][31:1] = '0;
    assign readback_array[208][0:0] = (decoded_reg_strb.intr_block_rf.error_iccm_blocked_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_iccm_blocked_intr_count_incr_r.pulse.value : '0;
    assign readback_array[208][31:1] = '0;
    assign readback_array[209][0:0] = (decoded_reg_strb.intr_block_rf.error_mbox_ecc_unc_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_mbox_ecc_unc_intr_count_incr_r.pulse.value : '0;
    assign readback_array[209][31:1] = '0;
    assign readback_array[210][0:0] = (decoded_reg_strb.intr_block_rf.error_wdt_timer1_timeout_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_wdt_timer1_timeout_intr_count_incr_r.pulse.value : '0;
    assign readback_array[210][31:1] = '0;
    assign readback_array[211][0:0] = (decoded_reg_strb.intr_block_rf.error_wdt_timer2_timeout_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_wdt_timer2_timeout_intr_count_incr_r.pulse.value : '0;
    assign readback_array[211][31:1] = '0;
    assign readback_array[212][0:0] = (decoded_reg_strb.intr_block_rf.notif_cmd_avail_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_cmd_avail_intr_count_incr_r.pulse.value : '0;
    assign readback_array[212][31:1] = '0;
    assign readback_array[213][0:0] = (decoded_reg_strb.intr_block_rf.notif_mbox_ecc_cor_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_mbox_ecc_cor_intr_count_incr_r.pulse.value : '0;
    assign readback_array[213][31:1] = '0;
    assign readback_array[214][0:0] = (decoded_reg_strb.intr_block_rf.notif_debug_locked_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_debug_locked_intr_count_incr_r.pulse.value : '0;
    assign readback_array[214][31:1] = '0;
    assign readback_array[215][0:0] = (decoded_reg_strb.intr_block_rf.notif_scan_mode_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_scan_mode_intr_count_incr_r.pulse.value : '0;
    assign readback_array[215][31:1] = '0;
    assign readback_array[216][0:0] = (decoded_reg_strb.intr_block_rf.notif_soc_req_lock_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_soc_req_lock_intr_count_incr_r.pulse.value : '0;
    assign readback_array[216][31:1] = '0;
    assign readback_array[217][0:0] = (decoded_reg_strb.intr_block_rf.notif_gen_in_toggle_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_gen_in_toggle_intr_count_incr_r.pulse.value : '0;
    assign readback_array[217][31:1] = '0;

    // Reduce the array
    always_comb begin
        automatic logic [31:0] readback_data_var;
        readback_done = decoded_req & ~decoded_req_is_wr;
        readback_err = '0;
        readback_data_var = '0;
        for(int i=0; i<218; i++) readback_data_var |= readback_array[i];
        readback_data = readback_data_var;
    end

    assign cpuif_rd_ack = readback_done;
    assign cpuif_rd_data = readback_data;
    assign cpuif_rd_err = readback_err;

`CALIPTRA_ASSERT_KNOWN(ERR_HWIF_IN, hwif_in, clk, !hwif_in.cptra_pwrgood)

endmodule
