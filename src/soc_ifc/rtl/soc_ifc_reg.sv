// Generated by PeakRDL-regblock - A free and open-source SystemVerilog generator
//  https://github.com/SystemRDL/PeakRDL-regblock

module soc_ifc_reg (
        input wire clk,
        input wire rst,

        input wire s_cpuif_req,
        input wire s_cpuif_req_is_wr,
        input wire [11:0] s_cpuif_addr,
        input wire [31:0] s_cpuif_wr_data,
        output wire s_cpuif_req_stall_wr,
        output wire s_cpuif_req_stall_rd,
        output wire s_cpuif_rd_ack,
        output wire s_cpuif_rd_err,
        output wire [31:0] s_cpuif_rd_data,
        output wire s_cpuif_wr_ack,
        output wire s_cpuif_wr_err,

        input soc_ifc_reg_pkg::soc_ifc_reg__in_t hwif_in,
        output soc_ifc_reg_pkg::soc_ifc_reg__out_t hwif_out
    );

    //--------------------------------------------------------------------------
    // CPU Bus interface logic
    //--------------------------------------------------------------------------
    logic cpuif_req;
    logic cpuif_req_is_wr;
    logic [11:0] cpuif_addr;
    logic [31:0] cpuif_wr_data;
    logic cpuif_req_stall_wr;
    logic cpuif_req_stall_rd;

    logic cpuif_rd_ack;
    logic cpuif_rd_err;
    logic [31:0] cpuif_rd_data;

    logic cpuif_wr_ack;
    logic cpuif_wr_err;

    assign cpuif_req = s_cpuif_req;
    assign cpuif_req_is_wr = s_cpuif_req_is_wr;
    assign cpuif_addr = s_cpuif_addr;
    assign cpuif_wr_data = s_cpuif_wr_data;
    assign s_cpuif_req_stall_wr = cpuif_req_stall_wr;
    assign s_cpuif_req_stall_rd = cpuif_req_stall_rd;
    assign s_cpuif_rd_ack = cpuif_rd_ack;
    assign s_cpuif_rd_err = cpuif_rd_err;
    assign s_cpuif_rd_data = cpuif_rd_data;
    assign s_cpuif_wr_ack = cpuif_wr_ack;
    assign s_cpuif_wr_err = cpuif_wr_err;

    logic cpuif_req_masked;

    // Read & write latencies are balanced. Stalls not required
    assign cpuif_req_stall_rd = '0;
    assign cpuif_req_stall_wr = '0;
    assign cpuif_req_masked = cpuif_req;

    //--------------------------------------------------------------------------
    // Address Decode
    //--------------------------------------------------------------------------
    typedef struct packed{
        logic HW_ERROR_FATAL;
        logic HW_ERROR_NON_FATAL;
        logic FW_ERROR_FATAL;
        logic FW_ERROR_NON_FATAL;
        logic HW_ERROR_ENC;
        logic FW_ERROR_ENC;
        logic BOOT_STATUS;
        logic FLOW_STATUS;
        logic CLEAR_SECRETS;
        logic [2-1:0]generic_input_wires;
        logic [2-1:0]generic_output_wires;
        logic [12-1:0]TRNG;
        logic TRNG_DONE;
        logic [12-1:0]uds_seed;
        logic [32-1:0]field_entropy;
        logic [12-1:0]key_manifest_pk_hash_0;
        logic [12-1:0]key_manifest_pk_hash_1;
        logic [12-1:0]key_manifest_pk_hash_2;
        logic [12-1:0]key_manifest_pk_hash_3;
        logic key_manifest_pk_hash_mask;
        logic key_manifest_svn;
        logic boot_loader_svn;
        logic [4-1:0]runtime_svn;
        logic anti_rollback_disable;
        logic [24-1:0]ieee_idevid_cert_chain;
        logic fuse_done;
        logic [8-1:0]obf_key;
        logic iccm_lock;
        logic fw_update_reset;
        logic fw_update_reset_wait_cycles;
        struct packed{
            logic global_intr_en_r;
            logic error_intr_en_r;
            logic notif_intr_en_r;
            logic error_global_intr_r;
            logic notif_global_intr_r;
            logic error_internal_intr_r;
            logic notif_internal_intr_r;
            logic error_intr_trig_r;
            logic notif_intr_trig_r;
            logic error_internal_intr_count_r;
            logic error_inv_dev_intr_count_r;
            logic error_cmd_fail_intr_count_r;
            logic error_bad_fuse_intr_count_r;
            logic error_iccm_blocked_intr_count_r;
            logic error_mbox_ecc_unc_intr_count_r;
            logic notif_cmd_avail_intr_count_r;
            logic notif_mbox_ecc_cor_intr_count_r;
            logic error_internal_intr_count_incr_r;
            logic error_inv_dev_intr_count_incr_r;
            logic error_cmd_fail_intr_count_incr_r;
            logic error_bad_fuse_intr_count_incr_r;
            logic error_iccm_blocked_intr_count_incr_r;
            logic error_mbox_ecc_unc_intr_count_incr_r;
            logic notif_cmd_avail_intr_count_incr_r;
            logic notif_mbox_ecc_cor_intr_count_incr_r;
        } intr_block_rf;
    } decoded_reg_strb_t;
    decoded_reg_strb_t decoded_reg_strb;
    logic decoded_req;
    logic decoded_req_is_wr;
    logic [31:0] decoded_wr_data;

    always_comb begin
        decoded_reg_strb.HW_ERROR_FATAL = cpuif_req_masked & (cpuif_addr == 'h0);
        decoded_reg_strb.HW_ERROR_NON_FATAL = cpuif_req_masked & (cpuif_addr == 'h4);
        decoded_reg_strb.FW_ERROR_FATAL = cpuif_req_masked & (cpuif_addr == 'h8);
        decoded_reg_strb.FW_ERROR_NON_FATAL = cpuif_req_masked & (cpuif_addr == 'hc);
        decoded_reg_strb.HW_ERROR_ENC = cpuif_req_masked & (cpuif_addr == 'h10);
        decoded_reg_strb.FW_ERROR_ENC = cpuif_req_masked & (cpuif_addr == 'h14);
        decoded_reg_strb.BOOT_STATUS = cpuif_req_masked & (cpuif_addr == 'h18);
        decoded_reg_strb.FLOW_STATUS = cpuif_req_masked & (cpuif_addr == 'h1c);
        decoded_reg_strb.CLEAR_SECRETS = cpuif_req_masked & (cpuif_addr == 'h20);
        for(int i0=0; i0<2; i0++) begin
            decoded_reg_strb.generic_input_wires[i0] = cpuif_req_masked & (cpuif_addr == 'h24 + i0*'h4);
        end
        for(int i0=0; i0<2; i0++) begin
            decoded_reg_strb.generic_output_wires[i0] = cpuif_req_masked & (cpuif_addr == 'h2c + i0*'h4);
        end
        for(int i0=0; i0<12; i0++) begin
            decoded_reg_strb.TRNG[i0] = cpuif_req_masked & (cpuif_addr == 'h34 + i0*'h4);
        end
        decoded_reg_strb.TRNG_DONE = cpuif_req_masked & (cpuif_addr == 'h64);
        for(int i0=0; i0<12; i0++) begin
            decoded_reg_strb.uds_seed[i0] = cpuif_req_masked & (cpuif_addr == 'h200 + i0*'h4);
        end
        for(int i0=0; i0<32; i0++) begin
            decoded_reg_strb.field_entropy[i0] = cpuif_req_masked & (cpuif_addr == 'h230 + i0*'h4);
        end
        for(int i0=0; i0<12; i0++) begin
            decoded_reg_strb.key_manifest_pk_hash_0[i0] = cpuif_req_masked & (cpuif_addr == 'h2b0 + i0*'h4);
        end
        for(int i0=0; i0<12; i0++) begin
            decoded_reg_strb.key_manifest_pk_hash_1[i0] = cpuif_req_masked & (cpuif_addr == 'h2e0 + i0*'h4);
        end
        for(int i0=0; i0<12; i0++) begin
            decoded_reg_strb.key_manifest_pk_hash_2[i0] = cpuif_req_masked & (cpuif_addr == 'h310 + i0*'h4);
        end
        for(int i0=0; i0<12; i0++) begin
            decoded_reg_strb.key_manifest_pk_hash_3[i0] = cpuif_req_masked & (cpuif_addr == 'h340 + i0*'h4);
        end
        decoded_reg_strb.key_manifest_pk_hash_mask = cpuif_req_masked & (cpuif_addr == 'h370);
        decoded_reg_strb.key_manifest_svn = cpuif_req_masked & (cpuif_addr == 'h374);
        decoded_reg_strb.boot_loader_svn = cpuif_req_masked & (cpuif_addr == 'h378);
        for(int i0=0; i0<4; i0++) begin
            decoded_reg_strb.runtime_svn[i0] = cpuif_req_masked & (cpuif_addr == 'h37c + i0*'h4);
        end
        decoded_reg_strb.anti_rollback_disable = cpuif_req_masked & (cpuif_addr == 'h38c);
        for(int i0=0; i0<24; i0++) begin
            decoded_reg_strb.ieee_idevid_cert_chain[i0] = cpuif_req_masked & (cpuif_addr == 'h390 + i0*'h4);
        end
        decoded_reg_strb.fuse_done = cpuif_req_masked & (cpuif_addr == 'h3f0);
        for(int i0=0; i0<8; i0++) begin
            decoded_reg_strb.obf_key[i0] = cpuif_req_masked & (cpuif_addr == 'h3f4 + i0*'h4);
        end
        decoded_reg_strb.iccm_lock = cpuif_req_masked & (cpuif_addr == 'h414);
        decoded_reg_strb.fw_update_reset = cpuif_req_masked & (cpuif_addr == 'h418);
        decoded_reg_strb.fw_update_reset_wait_cycles = cpuif_req_masked & (cpuif_addr == 'h41c);
        decoded_reg_strb.intr_block_rf.global_intr_en_r = cpuif_req_masked & (cpuif_addr == 'h800);
        decoded_reg_strb.intr_block_rf.error_intr_en_r = cpuif_req_masked & (cpuif_addr == 'h804);
        decoded_reg_strb.intr_block_rf.notif_intr_en_r = cpuif_req_masked & (cpuif_addr == 'h808);
        decoded_reg_strb.intr_block_rf.error_global_intr_r = cpuif_req_masked & (cpuif_addr == 'h80c);
        decoded_reg_strb.intr_block_rf.notif_global_intr_r = cpuif_req_masked & (cpuif_addr == 'h810);
        decoded_reg_strb.intr_block_rf.error_internal_intr_r = cpuif_req_masked & (cpuif_addr == 'h814);
        decoded_reg_strb.intr_block_rf.notif_internal_intr_r = cpuif_req_masked & (cpuif_addr == 'h818);
        decoded_reg_strb.intr_block_rf.error_intr_trig_r = cpuif_req_masked & (cpuif_addr == 'h81c);
        decoded_reg_strb.intr_block_rf.notif_intr_trig_r = cpuif_req_masked & (cpuif_addr == 'h820);
        decoded_reg_strb.intr_block_rf.error_internal_intr_count_r = cpuif_req_masked & (cpuif_addr == 'h900);
        decoded_reg_strb.intr_block_rf.error_inv_dev_intr_count_r = cpuif_req_masked & (cpuif_addr == 'h904);
        decoded_reg_strb.intr_block_rf.error_cmd_fail_intr_count_r = cpuif_req_masked & (cpuif_addr == 'h908);
        decoded_reg_strb.intr_block_rf.error_bad_fuse_intr_count_r = cpuif_req_masked & (cpuif_addr == 'h90c);
        decoded_reg_strb.intr_block_rf.error_iccm_blocked_intr_count_r = cpuif_req_masked & (cpuif_addr == 'h910);
        decoded_reg_strb.intr_block_rf.error_mbox_ecc_unc_intr_count_r = cpuif_req_masked & (cpuif_addr == 'h914);
        decoded_reg_strb.intr_block_rf.notif_cmd_avail_intr_count_r = cpuif_req_masked & (cpuif_addr == 'h980);
        decoded_reg_strb.intr_block_rf.notif_mbox_ecc_cor_intr_count_r = cpuif_req_masked & (cpuif_addr == 'h984);
        decoded_reg_strb.intr_block_rf.error_internal_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 'ha00);
        decoded_reg_strb.intr_block_rf.error_inv_dev_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 'ha04);
        decoded_reg_strb.intr_block_rf.error_cmd_fail_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 'ha08);
        decoded_reg_strb.intr_block_rf.error_bad_fuse_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 'ha0c);
        decoded_reg_strb.intr_block_rf.error_iccm_blocked_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 'ha10);
        decoded_reg_strb.intr_block_rf.error_mbox_ecc_unc_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 'ha14);
        decoded_reg_strb.intr_block_rf.notif_cmd_avail_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 'ha18);
        decoded_reg_strb.intr_block_rf.notif_mbox_ecc_cor_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 'ha1c);
    end

    // Pass down signals to next stage
    assign decoded_req = cpuif_req_masked;
    assign decoded_req_is_wr = cpuif_req_is_wr;
    assign decoded_wr_data = cpuif_wr_data;

    // Writes are always granted with no error response
    assign cpuif_wr_ack = decoded_req & decoded_req_is_wr;
    assign cpuif_wr_err = '0;

    //--------------------------------------------------------------------------
    // Field logic
    //--------------------------------------------------------------------------
    typedef struct packed{
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } error_code;
        } HW_ERROR_FATAL;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } error_code;
        } HW_ERROR_NON_FATAL;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } error_code;
        } FW_ERROR_FATAL;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } error_code;
        } FW_ERROR_NON_FATAL;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } error_code;
        } HW_ERROR_ENC;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } error_code;
        } FW_ERROR_ENC;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } status;
        } BOOT_STATUS;
        struct packed{
            struct packed{
                logic [29:0] next;
                logic load_next;
            } status;
            struct packed{
                logic next;
                logic load_next;
            } ready_for_fw;
            struct packed{
                logic next;
                logic load_next;
            } ready_for_runtime;
        } FLOW_STATUS;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } clear_secrets;
        } CLEAR_SECRETS;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } generic_wires;
        } [2-1:0]generic_input_wires;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } generic_wires;
        } [2-1:0]generic_output_wires;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } DATA;
        } [12-1:0]TRNG;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } DONE;
        } TRNG_DONE;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } seed;
        } [12-1:0]uds_seed;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } seed;
        } [32-1:0]field_entropy;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } hash;
        } [12-1:0]key_manifest_pk_hash_0;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } hash;
        } [12-1:0]key_manifest_pk_hash_1;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } hash;
        } [12-1:0]key_manifest_pk_hash_2;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } hash;
        } [12-1:0]key_manifest_pk_hash_3;
        struct packed{
            struct packed{
                logic [3:0] next;
                logic load_next;
            } mask;
        } key_manifest_pk_hash_mask;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } svn;
        } key_manifest_svn;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } svn;
        } boot_loader_svn;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } svn;
        } [4-1:0]runtime_svn;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } dis;
        } anti_rollback_disable;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } cert;
        } [24-1:0]ieee_idevid_cert_chain;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } done;
        } fuse_done;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } key;
        } [8-1:0]obf_key;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } lock;
        } iccm_lock;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } core_rst;
        } fw_update_reset;
        struct packed{
            struct packed{
                logic [7:0] next;
                logic load_next;
            } wait_cycles;
        } fw_update_reset_wait_cycles;
        struct packed{
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } error_en;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_en;
            } global_intr_en_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } error_internal_en;
                struct packed{
                    logic next;
                    logic load_next;
                } error_inv_dev_en;
                struct packed{
                    logic next;
                    logic load_next;
                } error_cmd_fail_en;
                struct packed{
                    logic next;
                    logic load_next;
                } error_bad_fuse_en;
                struct packed{
                    logic next;
                    logic load_next;
                } error_iccm_blocked_en;
                struct packed{
                    logic next;
                    logic load_next;
                } error_mbox_ecc_unc_en;
            } error_intr_en_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } notif_cmd_avail_en;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_mbox_ecc_cor_en;
            } notif_intr_en_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } agg_sts;
            } error_global_intr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } agg_sts;
            } notif_global_intr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } error_internal_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } error_inv_dev_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } error_cmd_fail_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } error_bad_fuse_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } error_iccm_blocked_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } error_mbox_ecc_unc_sts;
            } error_internal_intr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } notif_cmd_avail_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_mbox_ecc_cor_sts;
            } notif_internal_intr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } error_internal_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } error_inv_dev_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } error_cmd_fail_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } error_bad_fuse_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } error_iccm_blocked_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } error_mbox_ecc_unc_trig;
            } error_intr_trig_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } notif_cmd_avail_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_mbox_ecc_cor_trig;
            } notif_intr_trig_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error_internal_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error_inv_dev_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error_cmd_fail_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error_bad_fuse_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error_iccm_blocked_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error_mbox_ecc_unc_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } notif_cmd_avail_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } notif_mbox_ecc_cor_intr_count_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error_internal_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error_inv_dev_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error_cmd_fail_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error_bad_fuse_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error_iccm_blocked_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error_mbox_ecc_unc_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } notif_cmd_avail_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } notif_mbox_ecc_cor_intr_count_incr_r;
        } intr_block_rf;
    } field_combo_t;
    field_combo_t field_combo;

    typedef struct packed{
        struct packed{
            struct packed{
                logic [31:0] value;
            } error_code;
        } HW_ERROR_FATAL;
        struct packed{
            struct packed{
                logic [31:0] value;
            } error_code;
        } HW_ERROR_NON_FATAL;
        struct packed{
            struct packed{
                logic [31:0] value;
            } error_code;
        } FW_ERROR_FATAL;
        struct packed{
            struct packed{
                logic [31:0] value;
            } error_code;
        } FW_ERROR_NON_FATAL;
        struct packed{
            struct packed{
                logic [31:0] value;
            } error_code;
        } HW_ERROR_ENC;
        struct packed{
            struct packed{
                logic [31:0] value;
            } error_code;
        } FW_ERROR_ENC;
        struct packed{
            struct packed{
                logic [31:0] value;
            } status;
        } BOOT_STATUS;
        struct packed{
            struct packed{
                logic [29:0] value;
            } status;
            struct packed{
                logic value;
            } ready_for_fw;
            struct packed{
                logic value;
            } ready_for_runtime;
        } FLOW_STATUS;
        struct packed{
            struct packed{
                logic value;
            } clear_secrets;
        } CLEAR_SECRETS;
        struct packed{
            struct packed{
                logic [31:0] value;
            } generic_wires;
        } [2-1:0]generic_input_wires;
        struct packed{
            struct packed{
                logic [31:0] value;
            } generic_wires;
        } [2-1:0]generic_output_wires;
        struct packed{
            struct packed{
                logic [31:0] value;
            } DATA;
        } [12-1:0]TRNG;
        struct packed{
            struct packed{
                logic value;
            } DONE;
        } TRNG_DONE;
        struct packed{
            struct packed{
                logic [31:0] value;
            } seed;
        } [12-1:0]uds_seed;
        struct packed{
            struct packed{
                logic [31:0] value;
            } seed;
        } [32-1:0]field_entropy;
        struct packed{
            struct packed{
                logic [31:0] value;
            } hash;
        } [12-1:0]key_manifest_pk_hash_0;
        struct packed{
            struct packed{
                logic [31:0] value;
            } hash;
        } [12-1:0]key_manifest_pk_hash_1;
        struct packed{
            struct packed{
                logic [31:0] value;
            } hash;
        } [12-1:0]key_manifest_pk_hash_2;
        struct packed{
            struct packed{
                logic [31:0] value;
            } hash;
        } [12-1:0]key_manifest_pk_hash_3;
        struct packed{
            struct packed{
                logic [3:0] value;
            } mask;
        } key_manifest_pk_hash_mask;
        struct packed{
            struct packed{
                logic [31:0] value;
            } svn;
        } key_manifest_svn;
        struct packed{
            struct packed{
                logic [31:0] value;
            } svn;
        } boot_loader_svn;
        struct packed{
            struct packed{
                logic [31:0] value;
            } svn;
        } [4-1:0]runtime_svn;
        struct packed{
            struct packed{
                logic value;
            } dis;
        } anti_rollback_disable;
        struct packed{
            struct packed{
                logic [31:0] value;
            } cert;
        } [24-1:0]ieee_idevid_cert_chain;
        struct packed{
            struct packed{
                logic value;
            } done;
        } fuse_done;
        struct packed{
            struct packed{
                logic [31:0] value;
            } key;
        } [8-1:0]obf_key;
        struct packed{
            struct packed{
                logic value;
            } lock;
        } iccm_lock;
        struct packed{
            struct packed{
                logic value;
            } core_rst;
        } fw_update_reset;
        struct packed{
            struct packed{
                logic [7:0] value;
            } wait_cycles;
        } fw_update_reset_wait_cycles;
        struct packed{
            struct packed{
                struct packed{
                    logic value;
                } error_en;
                struct packed{
                    logic value;
                } notif_en;
            } global_intr_en_r;
            struct packed{
                struct packed{
                    logic value;
                } error_internal_en;
                struct packed{
                    logic value;
                } error_inv_dev_en;
                struct packed{
                    logic value;
                } error_cmd_fail_en;
                struct packed{
                    logic value;
                } error_bad_fuse_en;
                struct packed{
                    logic value;
                } error_iccm_blocked_en;
                struct packed{
                    logic value;
                } error_mbox_ecc_unc_en;
            } error_intr_en_r;
            struct packed{
                struct packed{
                    logic value;
                } notif_cmd_avail_en;
                struct packed{
                    logic value;
                } notif_mbox_ecc_cor_en;
            } notif_intr_en_r;
            struct packed{
                struct packed{
                    logic value;
                } agg_sts;
            } error_global_intr_r;
            struct packed{
                struct packed{
                    logic value;
                } agg_sts;
            } notif_global_intr_r;
            struct packed{
                struct packed{
                    logic value;
                } error_internal_sts;
                struct packed{
                    logic value;
                } error_inv_dev_sts;
                struct packed{
                    logic value;
                } error_cmd_fail_sts;
                struct packed{
                    logic value;
                } error_bad_fuse_sts;
                struct packed{
                    logic value;
                } error_iccm_blocked_sts;
                struct packed{
                    logic value;
                } error_mbox_ecc_unc_sts;
            } error_internal_intr_r;
            struct packed{
                struct packed{
                    logic value;
                } notif_cmd_avail_sts;
                struct packed{
                    logic value;
                } notif_mbox_ecc_cor_sts;
            } notif_internal_intr_r;
            struct packed{
                struct packed{
                    logic value;
                } error_internal_trig;
                struct packed{
                    logic value;
                } error_inv_dev_trig;
                struct packed{
                    logic value;
                } error_cmd_fail_trig;
                struct packed{
                    logic value;
                } error_bad_fuse_trig;
                struct packed{
                    logic value;
                } error_iccm_blocked_trig;
                struct packed{
                    logic value;
                } error_mbox_ecc_unc_trig;
            } error_intr_trig_r;
            struct packed{
                struct packed{
                    logic value;
                } notif_cmd_avail_trig;
                struct packed{
                    logic value;
                } notif_mbox_ecc_cor_trig;
            } notif_intr_trig_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error_internal_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error_inv_dev_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error_cmd_fail_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error_bad_fuse_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error_iccm_blocked_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error_mbox_ecc_unc_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } notif_cmd_avail_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } notif_mbox_ecc_cor_intr_count_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error_internal_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error_inv_dev_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error_cmd_fail_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error_bad_fuse_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error_iccm_blocked_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error_mbox_ecc_unc_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } notif_cmd_avail_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } notif_mbox_ecc_cor_intr_count_incr_r;
        } intr_block_rf;
    } field_storage_t;
    field_storage_t field_storage;

    // Field: soc_ifc_reg.HW_ERROR_FATAL.error_code
    always_comb begin
        automatic logic [31:0] next_c = field_storage.HW_ERROR_FATAL.error_code.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.HW_ERROR_FATAL && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = decoded_wr_data[31:0];
            load_next_c = '1;
        end
        field_combo.HW_ERROR_FATAL.error_code.next = next_c;
        field_combo.HW_ERROR_FATAL.error_code.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.hard_reset_b) begin
        if(~hwif_in.hard_reset_b) begin
            field_storage.HW_ERROR_FATAL.error_code.value <= 'h0;
        end else if(field_combo.HW_ERROR_FATAL.error_code.load_next) begin
            field_storage.HW_ERROR_FATAL.error_code.value <= field_combo.HW_ERROR_FATAL.error_code.next;
        end
    end
    // Field: soc_ifc_reg.HW_ERROR_NON_FATAL.error_code
    always_comb begin
        automatic logic [31:0] next_c = field_storage.HW_ERROR_NON_FATAL.error_code.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.HW_ERROR_NON_FATAL && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = decoded_wr_data[31:0];
            load_next_c = '1;
        end
        field_combo.HW_ERROR_NON_FATAL.error_code.next = next_c;
        field_combo.HW_ERROR_NON_FATAL.error_code.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.hard_reset_b) begin
        if(~hwif_in.hard_reset_b) begin
            field_storage.HW_ERROR_NON_FATAL.error_code.value <= 'h0;
        end else if(field_combo.HW_ERROR_NON_FATAL.error_code.load_next) begin
            field_storage.HW_ERROR_NON_FATAL.error_code.value <= field_combo.HW_ERROR_NON_FATAL.error_code.next;
        end
    end
    // Field: soc_ifc_reg.FW_ERROR_FATAL.error_code
    always_comb begin
        automatic logic [31:0] next_c = field_storage.FW_ERROR_FATAL.error_code.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.FW_ERROR_FATAL && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = decoded_wr_data[31:0];
            load_next_c = '1;
        end
        field_combo.FW_ERROR_FATAL.error_code.next = next_c;
        field_combo.FW_ERROR_FATAL.error_code.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.hard_reset_b) begin
        if(~hwif_in.hard_reset_b) begin
            field_storage.FW_ERROR_FATAL.error_code.value <= 'h0;
        end else if(field_combo.FW_ERROR_FATAL.error_code.load_next) begin
            field_storage.FW_ERROR_FATAL.error_code.value <= field_combo.FW_ERROR_FATAL.error_code.next;
        end
    end
    // Field: soc_ifc_reg.FW_ERROR_NON_FATAL.error_code
    always_comb begin
        automatic logic [31:0] next_c = field_storage.FW_ERROR_NON_FATAL.error_code.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.FW_ERROR_NON_FATAL && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = decoded_wr_data[31:0];
            load_next_c = '1;
        end
        field_combo.FW_ERROR_NON_FATAL.error_code.next = next_c;
        field_combo.FW_ERROR_NON_FATAL.error_code.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.hard_reset_b) begin
        if(~hwif_in.hard_reset_b) begin
            field_storage.FW_ERROR_NON_FATAL.error_code.value <= 'h0;
        end else if(field_combo.FW_ERROR_NON_FATAL.error_code.load_next) begin
            field_storage.FW_ERROR_NON_FATAL.error_code.value <= field_combo.FW_ERROR_NON_FATAL.error_code.next;
        end
    end
    // Field: soc_ifc_reg.HW_ERROR_ENC.error_code
    always_comb begin
        automatic logic [31:0] next_c = field_storage.HW_ERROR_ENC.error_code.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.HW_ERROR_ENC && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = decoded_wr_data[31:0];
            load_next_c = '1;
        end
        field_combo.HW_ERROR_ENC.error_code.next = next_c;
        field_combo.HW_ERROR_ENC.error_code.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.hard_reset_b) begin
        if(~hwif_in.hard_reset_b) begin
            field_storage.HW_ERROR_ENC.error_code.value <= 'h0;
        end else if(field_combo.HW_ERROR_ENC.error_code.load_next) begin
            field_storage.HW_ERROR_ENC.error_code.value <= field_combo.HW_ERROR_ENC.error_code.next;
        end
    end
    // Field: soc_ifc_reg.FW_ERROR_ENC.error_code
    always_comb begin
        automatic logic [31:0] next_c = field_storage.FW_ERROR_ENC.error_code.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.FW_ERROR_ENC && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = decoded_wr_data[31:0];
            load_next_c = '1;
        end
        field_combo.FW_ERROR_ENC.error_code.next = next_c;
        field_combo.FW_ERROR_ENC.error_code.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.hard_reset_b) begin
        if(~hwif_in.hard_reset_b) begin
            field_storage.FW_ERROR_ENC.error_code.value <= 'h0;
        end else if(field_combo.FW_ERROR_ENC.error_code.load_next) begin
            field_storage.FW_ERROR_ENC.error_code.value <= field_combo.FW_ERROR_ENC.error_code.next;
        end
    end
    // Field: soc_ifc_reg.BOOT_STATUS.status
    always_comb begin
        automatic logic [31:0] next_c = field_storage.BOOT_STATUS.status.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.BOOT_STATUS && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = decoded_wr_data[31:0];
            load_next_c = '1;
        end
        field_combo.BOOT_STATUS.status.next = next_c;
        field_combo.BOOT_STATUS.status.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.BOOT_STATUS.status.value <= 'h0;
        end else if(field_combo.BOOT_STATUS.status.load_next) begin
            field_storage.BOOT_STATUS.status.value <= field_combo.BOOT_STATUS.status.next;
        end
    end
    // Field: soc_ifc_reg.FLOW_STATUS.status
    always_comb begin
        automatic logic [29:0] next_c = field_storage.FLOW_STATUS.status.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.FLOW_STATUS && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = decoded_wr_data[29:0];
            load_next_c = '1;
        end
        field_combo.FLOW_STATUS.status.next = next_c;
        field_combo.FLOW_STATUS.status.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.FLOW_STATUS.status.value <= 'h0;
        end else if(field_combo.FLOW_STATUS.status.load_next) begin
            field_storage.FLOW_STATUS.status.value <= field_combo.FLOW_STATUS.status.next;
        end
    end
    // Field: soc_ifc_reg.FLOW_STATUS.ready_for_fw
    always_comb begin
        automatic logic [0:0] next_c = field_storage.FLOW_STATUS.ready_for_fw.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.FLOW_STATUS && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = decoded_wr_data[30:30];
            load_next_c = '1;
        end
        field_combo.FLOW_STATUS.ready_for_fw.next = next_c;
        field_combo.FLOW_STATUS.ready_for_fw.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.FLOW_STATUS.ready_for_fw.value <= 'h0;
        end else if(field_combo.FLOW_STATUS.ready_for_fw.load_next) begin
            field_storage.FLOW_STATUS.ready_for_fw.value <= field_combo.FLOW_STATUS.ready_for_fw.next;
        end
    end
    assign hwif_out.FLOW_STATUS.ready_for_fw.value = field_storage.FLOW_STATUS.ready_for_fw.value;
    // Field: soc_ifc_reg.FLOW_STATUS.ready_for_runtime
    always_comb begin
        automatic logic [0:0] next_c = field_storage.FLOW_STATUS.ready_for_runtime.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.FLOW_STATUS && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = decoded_wr_data[31:31];
            load_next_c = '1;
        end
        field_combo.FLOW_STATUS.ready_for_runtime.next = next_c;
        field_combo.FLOW_STATUS.ready_for_runtime.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.FLOW_STATUS.ready_for_runtime.value <= 'h0;
        end else if(field_combo.FLOW_STATUS.ready_for_runtime.load_next) begin
            field_storage.FLOW_STATUS.ready_for_runtime.value <= field_combo.FLOW_STATUS.ready_for_runtime.next;
        end
    end
    assign hwif_out.FLOW_STATUS.ready_for_runtime.value = field_storage.FLOW_STATUS.ready_for_runtime.value;
    // Field: soc_ifc_reg.CLEAR_SECRETS.clear_secrets
    always_comb begin
        automatic logic [0:0] next_c = field_storage.CLEAR_SECRETS.clear_secrets.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.CLEAR_SECRETS && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = decoded_wr_data[0:0];
            load_next_c = '1;
        end else if(1) begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.CLEAR_SECRETS.clear_secrets.next = next_c;
        field_combo.CLEAR_SECRETS.clear_secrets.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.CLEAR_SECRETS.clear_secrets.value <= 'h0;
        end else if(field_combo.CLEAR_SECRETS.clear_secrets.load_next) begin
            field_storage.CLEAR_SECRETS.clear_secrets.value <= field_combo.CLEAR_SECRETS.clear_secrets.next;
        end
    end
    assign hwif_out.CLEAR_SECRETS.clear_secrets.value = field_storage.CLEAR_SECRETS.clear_secrets.value;
    for(genvar i0=0; i0<2; i0++) begin
        // Field: soc_ifc_reg.generic_input_wires[].generic_wires
        always_comb begin
            automatic logic [31:0] next_c = field_storage.generic_input_wires[i0].generic_wires.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.generic_input_wires[i0] && decoded_req_is_wr) begin // SW write
                next_c = decoded_wr_data[31:0];
                load_next_c = '1;
            end else if(1) begin // HW Write
                next_c = hwif_in.generic_input_wires[i0].generic_wires.next;
                load_next_c = '1;
            end
            field_combo.generic_input_wires[i0].generic_wires.next = next_c;
            field_combo.generic_input_wires[i0].generic_wires.load_next = load_next_c;
        end
        always_ff @(posedge clk) begin
            if(field_combo.generic_input_wires[i0].generic_wires.load_next) begin
                field_storage.generic_input_wires[i0].generic_wires.value <= field_combo.generic_input_wires[i0].generic_wires.next;
            end
        end
    end
    for(genvar i0=0; i0<2; i0++) begin
        // Field: soc_ifc_reg.generic_output_wires[].generic_wires
        always_comb begin
            automatic logic [31:0] next_c = field_storage.generic_output_wires[i0].generic_wires.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.generic_output_wires[i0] && decoded_req_is_wr) begin // SW write
                next_c = decoded_wr_data[31:0];
                load_next_c = '1;
            end
            field_combo.generic_output_wires[i0].generic_wires.next = next_c;
            field_combo.generic_output_wires[i0].generic_wires.load_next = load_next_c;
        end
        always_ff @(posedge clk) begin
            if(field_combo.generic_output_wires[i0].generic_wires.load_next) begin
                field_storage.generic_output_wires[i0].generic_wires.value <= field_combo.generic_output_wires[i0].generic_wires.next;
            end
        end
        assign hwif_out.generic_output_wires[i0].generic_wires.value = field_storage.generic_output_wires[i0].generic_wires.value;
    end
    for(genvar i0=0; i0<12; i0++) begin
        // Field: soc_ifc_reg.TRNG[].DATA
        always_comb begin
            automatic logic [31:0] next_c = field_storage.TRNG[i0].DATA.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.TRNG[i0] && decoded_req_is_wr) begin // SW write
                next_c = decoded_wr_data[31:0];
                load_next_c = '1;
            end
            field_combo.TRNG[i0].DATA.next = next_c;
            field_combo.TRNG[i0].DATA.load_next = load_next_c;
        end
        always_ff @(posedge clk) begin
            if(field_combo.TRNG[i0].DATA.load_next) begin
                field_storage.TRNG[i0].DATA.value <= field_combo.TRNG[i0].DATA.next;
            end
        end
    end
    // Field: soc_ifc_reg.TRNG_DONE.DONE
    always_comb begin
        automatic logic [0:0] next_c = field_storage.TRNG_DONE.DONE.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.TRNG_DONE && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[0:0];
            load_next_c = '1;
        end
        field_combo.TRNG_DONE.DONE.next = next_c;
        field_combo.TRNG_DONE.DONE.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.TRNG_DONE.DONE.load_next) begin
            field_storage.TRNG_DONE.DONE.value <= field_combo.TRNG_DONE.DONE.next;
        end
    end
    for(genvar i0=0; i0<12; i0++) begin
        // Field: soc_ifc_reg.uds_seed[].seed
        always_comb begin
            automatic logic [31:0] next_c = field_storage.uds_seed[i0].seed.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.uds_seed[i0] && decoded_req_is_wr) begin // SW write
                next_c = decoded_wr_data[31:0];
                load_next_c = '1;
            end else if(hwif_in.uds_seed[i0].seed.hwclr) begin // HW Clear
                next_c = '0;
                load_next_c = '1;
            end
            field_combo.uds_seed[i0].seed.next = next_c;
            field_combo.uds_seed[i0].seed.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.hard_reset_b) begin
            if(~hwif_in.hard_reset_b) begin
                field_storage.uds_seed[i0].seed.value <= 'h0;
            end else if(field_combo.uds_seed[i0].seed.load_next) begin
                field_storage.uds_seed[i0].seed.value <= field_combo.uds_seed[i0].seed.next;
            end
        end
        assign hwif_out.uds_seed[i0].seed.value = field_storage.uds_seed[i0].seed.value;
    end
    for(genvar i0=0; i0<32; i0++) begin
        // Field: soc_ifc_reg.field_entropy[].seed
        always_comb begin
            automatic logic [31:0] next_c = field_storage.field_entropy[i0].seed.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.field_entropy[i0] && decoded_req_is_wr) begin // SW write
                next_c = decoded_wr_data[31:0];
                load_next_c = '1;
            end else if(hwif_in.field_entropy[i0].seed.hwclr) begin // HW Clear
                next_c = '0;
                load_next_c = '1;
            end
            field_combo.field_entropy[i0].seed.next = next_c;
            field_combo.field_entropy[i0].seed.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.hard_reset_b) begin
            if(~hwif_in.hard_reset_b) begin
                field_storage.field_entropy[i0].seed.value <= 'h0;
            end else if(field_combo.field_entropy[i0].seed.load_next) begin
                field_storage.field_entropy[i0].seed.value <= field_combo.field_entropy[i0].seed.next;
            end
        end
        assign hwif_out.field_entropy[i0].seed.value = field_storage.field_entropy[i0].seed.value;
    end
    for(genvar i0=0; i0<12; i0++) begin
        // Field: soc_ifc_reg.key_manifest_pk_hash_0[].hash
        always_comb begin
            automatic logic [31:0] next_c = field_storage.key_manifest_pk_hash_0[i0].hash.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.key_manifest_pk_hash_0[i0] && decoded_req_is_wr) begin // SW write
                next_c = decoded_wr_data[31:0];
                load_next_c = '1;
            end
            field_combo.key_manifest_pk_hash_0[i0].hash.next = next_c;
            field_combo.key_manifest_pk_hash_0[i0].hash.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.hard_reset_b) begin
            if(~hwif_in.hard_reset_b) begin
                field_storage.key_manifest_pk_hash_0[i0].hash.value <= 'h0;
            end else if(field_combo.key_manifest_pk_hash_0[i0].hash.load_next) begin
                field_storage.key_manifest_pk_hash_0[i0].hash.value <= field_combo.key_manifest_pk_hash_0[i0].hash.next;
            end
        end
    end
    for(genvar i0=0; i0<12; i0++) begin
        // Field: soc_ifc_reg.key_manifest_pk_hash_1[].hash
        always_comb begin
            automatic logic [31:0] next_c = field_storage.key_manifest_pk_hash_1[i0].hash.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.key_manifest_pk_hash_1[i0] && decoded_req_is_wr) begin // SW write
                next_c = decoded_wr_data[31:0];
                load_next_c = '1;
            end
            field_combo.key_manifest_pk_hash_1[i0].hash.next = next_c;
            field_combo.key_manifest_pk_hash_1[i0].hash.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.hard_reset_b) begin
            if(~hwif_in.hard_reset_b) begin
                field_storage.key_manifest_pk_hash_1[i0].hash.value <= 'h0;
            end else if(field_combo.key_manifest_pk_hash_1[i0].hash.load_next) begin
                field_storage.key_manifest_pk_hash_1[i0].hash.value <= field_combo.key_manifest_pk_hash_1[i0].hash.next;
            end
        end
    end
    for(genvar i0=0; i0<12; i0++) begin
        // Field: soc_ifc_reg.key_manifest_pk_hash_2[].hash
        always_comb begin
            automatic logic [31:0] next_c = field_storage.key_manifest_pk_hash_2[i0].hash.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.key_manifest_pk_hash_2[i0] && decoded_req_is_wr) begin // SW write
                next_c = decoded_wr_data[31:0];
                load_next_c = '1;
            end
            field_combo.key_manifest_pk_hash_2[i0].hash.next = next_c;
            field_combo.key_manifest_pk_hash_2[i0].hash.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.hard_reset_b) begin
            if(~hwif_in.hard_reset_b) begin
                field_storage.key_manifest_pk_hash_2[i0].hash.value <= 'h0;
            end else if(field_combo.key_manifest_pk_hash_2[i0].hash.load_next) begin
                field_storage.key_manifest_pk_hash_2[i0].hash.value <= field_combo.key_manifest_pk_hash_2[i0].hash.next;
            end
        end
    end
    for(genvar i0=0; i0<12; i0++) begin
        // Field: soc_ifc_reg.key_manifest_pk_hash_3[].hash
        always_comb begin
            automatic logic [31:0] next_c = field_storage.key_manifest_pk_hash_3[i0].hash.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.key_manifest_pk_hash_3[i0] && decoded_req_is_wr) begin // SW write
                next_c = decoded_wr_data[31:0];
                load_next_c = '1;
            end
            field_combo.key_manifest_pk_hash_3[i0].hash.next = next_c;
            field_combo.key_manifest_pk_hash_3[i0].hash.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.hard_reset_b) begin
            if(~hwif_in.hard_reset_b) begin
                field_storage.key_manifest_pk_hash_3[i0].hash.value <= 'h0;
            end else if(field_combo.key_manifest_pk_hash_3[i0].hash.load_next) begin
                field_storage.key_manifest_pk_hash_3[i0].hash.value <= field_combo.key_manifest_pk_hash_3[i0].hash.next;
            end
        end
    end
    // Field: soc_ifc_reg.key_manifest_pk_hash_mask.mask
    always_comb begin
        automatic logic [3:0] next_c = field_storage.key_manifest_pk_hash_mask.mask.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.key_manifest_pk_hash_mask && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[3:0];
            load_next_c = '1;
        end
        field_combo.key_manifest_pk_hash_mask.mask.next = next_c;
        field_combo.key_manifest_pk_hash_mask.mask.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.hard_reset_b) begin
        if(~hwif_in.hard_reset_b) begin
            field_storage.key_manifest_pk_hash_mask.mask.value <= 'h0;
        end else if(field_combo.key_manifest_pk_hash_mask.mask.load_next) begin
            field_storage.key_manifest_pk_hash_mask.mask.value <= field_combo.key_manifest_pk_hash_mask.mask.next;
        end
    end
    // Field: soc_ifc_reg.key_manifest_svn.svn
    always_comb begin
        automatic logic [31:0] next_c = field_storage.key_manifest_svn.svn.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.key_manifest_svn && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[31:0];
            load_next_c = '1;
        end
        field_combo.key_manifest_svn.svn.next = next_c;
        field_combo.key_manifest_svn.svn.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.hard_reset_b) begin
        if(~hwif_in.hard_reset_b) begin
            field_storage.key_manifest_svn.svn.value <= 'h0;
        end else if(field_combo.key_manifest_svn.svn.load_next) begin
            field_storage.key_manifest_svn.svn.value <= field_combo.key_manifest_svn.svn.next;
        end
    end
    // Field: soc_ifc_reg.boot_loader_svn.svn
    always_comb begin
        automatic logic [31:0] next_c = field_storage.boot_loader_svn.svn.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.boot_loader_svn && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[31:0];
            load_next_c = '1;
        end
        field_combo.boot_loader_svn.svn.next = next_c;
        field_combo.boot_loader_svn.svn.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.hard_reset_b) begin
        if(~hwif_in.hard_reset_b) begin
            field_storage.boot_loader_svn.svn.value <= 'h0;
        end else if(field_combo.boot_loader_svn.svn.load_next) begin
            field_storage.boot_loader_svn.svn.value <= field_combo.boot_loader_svn.svn.next;
        end
    end
    for(genvar i0=0; i0<4; i0++) begin
        // Field: soc_ifc_reg.runtime_svn[].svn
        always_comb begin
            automatic logic [31:0] next_c = field_storage.runtime_svn[i0].svn.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.runtime_svn[i0] && decoded_req_is_wr) begin // SW write
                next_c = decoded_wr_data[31:0];
                load_next_c = '1;
            end
            field_combo.runtime_svn[i0].svn.next = next_c;
            field_combo.runtime_svn[i0].svn.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.hard_reset_b) begin
            if(~hwif_in.hard_reset_b) begin
                field_storage.runtime_svn[i0].svn.value <= 'h0;
            end else if(field_combo.runtime_svn[i0].svn.load_next) begin
                field_storage.runtime_svn[i0].svn.value <= field_combo.runtime_svn[i0].svn.next;
            end
        end
    end
    // Field: soc_ifc_reg.anti_rollback_disable.dis
    always_comb begin
        automatic logic [0:0] next_c = field_storage.anti_rollback_disable.dis.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.anti_rollback_disable && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[0:0];
            load_next_c = '1;
        end
        field_combo.anti_rollback_disable.dis.next = next_c;
        field_combo.anti_rollback_disable.dis.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.hard_reset_b) begin
        if(~hwif_in.hard_reset_b) begin
            field_storage.anti_rollback_disable.dis.value <= 'h0;
        end else if(field_combo.anti_rollback_disable.dis.load_next) begin
            field_storage.anti_rollback_disable.dis.value <= field_combo.anti_rollback_disable.dis.next;
        end
    end
    for(genvar i0=0; i0<24; i0++) begin
        // Field: soc_ifc_reg.ieee_idevid_cert_chain[].cert
        always_comb begin
            automatic logic [31:0] next_c = field_storage.ieee_idevid_cert_chain[i0].cert.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.ieee_idevid_cert_chain[i0] && decoded_req_is_wr) begin // SW write
                next_c = decoded_wr_data[31:0];
                load_next_c = '1;
            end
            field_combo.ieee_idevid_cert_chain[i0].cert.next = next_c;
            field_combo.ieee_idevid_cert_chain[i0].cert.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.hard_reset_b) begin
            if(~hwif_in.hard_reset_b) begin
                field_storage.ieee_idevid_cert_chain[i0].cert.value <= 'h0;
            end else if(field_combo.ieee_idevid_cert_chain[i0].cert.load_next) begin
                field_storage.ieee_idevid_cert_chain[i0].cert.value <= field_combo.ieee_idevid_cert_chain[i0].cert.next;
            end
        end
    end
    // Field: soc_ifc_reg.fuse_done.done
    always_comb begin
        automatic logic [0:0] next_c = field_storage.fuse_done.done.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.fuse_done && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[0:0];
            load_next_c = '1;
        end
        field_combo.fuse_done.done.next = next_c;
        field_combo.fuse_done.done.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.fuse_done.done.value <= 'h0;
        end else if(field_combo.fuse_done.done.load_next) begin
            field_storage.fuse_done.done.value <= field_combo.fuse_done.done.next;
        end
    end
    assign hwif_out.fuse_done.done.value = field_storage.fuse_done.done.value;
    for(genvar i0=0; i0<8; i0++) begin
        // Field: soc_ifc_reg.obf_key[].key
        always_comb begin
            automatic logic [31:0] next_c = field_storage.obf_key[i0].key.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.obf_key[i0] && decoded_req_is_wr && hwif_in.obf_key[i0].key.swwe) begin // SW write
                next_c = decoded_wr_data[31:0];
                load_next_c = '1;
            end else if(!hwif_in.obf_key[i0].key.wel) begin // HW Write - wel
                next_c = hwif_in.obf_key[i0].key.next;
                load_next_c = '1;
            end else if(hwif_in.obf_key[i0].key.hwclr) begin // HW Clear
                next_c = '0;
                load_next_c = '1;
            end
            field_combo.obf_key[i0].key.next = next_c;
            field_combo.obf_key[i0].key.load_next = load_next_c;
        end
        always_ff @(posedge clk) begin
            if(field_combo.obf_key[i0].key.load_next) begin
                field_storage.obf_key[i0].key.value <= field_combo.obf_key[i0].key.next;
            end
        end
        assign hwif_out.obf_key[i0].key.value = field_storage.obf_key[i0].key.value;
    end
    // Field: soc_ifc_reg.iccm_lock.lock
    always_comb begin
        automatic logic [0:0] next_c = field_storage.iccm_lock.lock.value;
        automatic logic load_next_c = '0;
        if(hwif_in.iccm_lock.lock.hwclr) begin // HW Clear
            next_c = '0;
            load_next_c = '1;
        end else if(decoded_reg_strb.iccm_lock && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 set
            next_c = field_storage.iccm_lock.lock.value | decoded_wr_data[0:0];
            load_next_c = '1;
        end
        field_combo.iccm_lock.lock.next = next_c;
        field_combo.iccm_lock.lock.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.iccm_lock.lock.value <= 'h0;
        end else if(field_combo.iccm_lock.lock.load_next) begin
            field_storage.iccm_lock.lock.value <= field_combo.iccm_lock.lock.next;
        end
    end
    assign hwif_out.iccm_lock.lock.value = field_storage.iccm_lock.lock.value;
    // Field: soc_ifc_reg.fw_update_reset.core_rst
    always_comb begin
        automatic logic [0:0] next_c = field_storage.fw_update_reset.core_rst.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.fw_update_reset && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = decoded_wr_data[0:0];
            load_next_c = '1;
        end else if(1) begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.fw_update_reset.core_rst.next = next_c;
        field_combo.fw_update_reset.core_rst.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.fw_update_reset.core_rst.value <= 'h0;
        end else if(field_combo.fw_update_reset.core_rst.load_next) begin
            field_storage.fw_update_reset.core_rst.value <= field_combo.fw_update_reset.core_rst.next;
        end
    end
    assign hwif_out.fw_update_reset.core_rst.value = field_storage.fw_update_reset.core_rst.value;
    // Field: soc_ifc_reg.fw_update_reset_wait_cycles.wait_cycles
    always_comb begin
        automatic logic [7:0] next_c = field_storage.fw_update_reset_wait_cycles.wait_cycles.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.fw_update_reset_wait_cycles && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = decoded_wr_data[7:0];
            load_next_c = '1;
        end
        field_combo.fw_update_reset_wait_cycles.wait_cycles.next = next_c;
        field_combo.fw_update_reset_wait_cycles.wait_cycles.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.fw_update_reset_wait_cycles.wait_cycles.value <= 'h5;
        end else if(field_combo.fw_update_reset_wait_cycles.wait_cycles.load_next) begin
            field_storage.fw_update_reset_wait_cycles.wait_cycles.value <= field_combo.fw_update_reset_wait_cycles.wait_cycles.next;
        end
    end
    assign hwif_out.fw_update_reset_wait_cycles.wait_cycles.value = field_storage.fw_update_reset_wait_cycles.wait_cycles.value;
    // Field: soc_ifc_reg.intr_block_rf.global_intr_en_r.error_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.global_intr_en_r.error_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.global_intr_en_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = decoded_wr_data[0:0];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.global_intr_en_r.error_en.next = next_c;
        field_combo.intr_block_rf.global_intr_en_r.error_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.global_intr_en_r.error_en.value <= 'h0;
        end else if(field_combo.intr_block_rf.global_intr_en_r.error_en.load_next) begin
            field_storage.intr_block_rf.global_intr_en_r.error_en.value <= field_combo.intr_block_rf.global_intr_en_r.error_en.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.global_intr_en_r.notif_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.global_intr_en_r.notif_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.global_intr_en_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = decoded_wr_data[1:1];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.global_intr_en_r.notif_en.next = next_c;
        field_combo.intr_block_rf.global_intr_en_r.notif_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.global_intr_en_r.notif_en.value <= 'h0;
        end else if(field_combo.intr_block_rf.global_intr_en_r.notif_en.load_next) begin
            field_storage.intr_block_rf.global_intr_en_r.notif_en.value <= field_combo.intr_block_rf.global_intr_en_r.notif_en.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_intr_en_r.error_internal_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_intr_en_r.error_internal_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_en_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = decoded_wr_data[0:0];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_en_r.error_internal_en.next = next_c;
        field_combo.intr_block_rf.error_intr_en_r.error_internal_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error_intr_en_r.error_internal_en.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_intr_en_r.error_internal_en.load_next) begin
            field_storage.intr_block_rf.error_intr_en_r.error_internal_en.value <= field_combo.intr_block_rf.error_intr_en_r.error_internal_en.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_intr_en_r.error_inv_dev_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_intr_en_r.error_inv_dev_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_en_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = decoded_wr_data[1:1];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_en_r.error_inv_dev_en.next = next_c;
        field_combo.intr_block_rf.error_intr_en_r.error_inv_dev_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error_intr_en_r.error_inv_dev_en.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_intr_en_r.error_inv_dev_en.load_next) begin
            field_storage.intr_block_rf.error_intr_en_r.error_inv_dev_en.value <= field_combo.intr_block_rf.error_intr_en_r.error_inv_dev_en.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_intr_en_r.error_cmd_fail_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_intr_en_r.error_cmd_fail_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_en_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = decoded_wr_data[2:2];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_en_r.error_cmd_fail_en.next = next_c;
        field_combo.intr_block_rf.error_intr_en_r.error_cmd_fail_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error_intr_en_r.error_cmd_fail_en.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_intr_en_r.error_cmd_fail_en.load_next) begin
            field_storage.intr_block_rf.error_intr_en_r.error_cmd_fail_en.value <= field_combo.intr_block_rf.error_intr_en_r.error_cmd_fail_en.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_intr_en_r.error_bad_fuse_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_intr_en_r.error_bad_fuse_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_en_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = decoded_wr_data[3:3];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_en_r.error_bad_fuse_en.next = next_c;
        field_combo.intr_block_rf.error_intr_en_r.error_bad_fuse_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error_intr_en_r.error_bad_fuse_en.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_intr_en_r.error_bad_fuse_en.load_next) begin
            field_storage.intr_block_rf.error_intr_en_r.error_bad_fuse_en.value <= field_combo.intr_block_rf.error_intr_en_r.error_bad_fuse_en.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_intr_en_r.error_iccm_blocked_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_intr_en_r.error_iccm_blocked_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_en_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = decoded_wr_data[4:4];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_en_r.error_iccm_blocked_en.next = next_c;
        field_combo.intr_block_rf.error_intr_en_r.error_iccm_blocked_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error_intr_en_r.error_iccm_blocked_en.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_intr_en_r.error_iccm_blocked_en.load_next) begin
            field_storage.intr_block_rf.error_intr_en_r.error_iccm_blocked_en.value <= field_combo.intr_block_rf.error_intr_en_r.error_iccm_blocked_en.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_intr_en_r.error_mbox_ecc_unc_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_intr_en_r.error_mbox_ecc_unc_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_en_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = decoded_wr_data[5:5];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_en_r.error_mbox_ecc_unc_en.next = next_c;
        field_combo.intr_block_rf.error_intr_en_r.error_mbox_ecc_unc_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error_intr_en_r.error_mbox_ecc_unc_en.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_intr_en_r.error_mbox_ecc_unc_en.load_next) begin
            field_storage.intr_block_rf.error_intr_en_r.error_mbox_ecc_unc_en.value <= field_combo.intr_block_rf.error_intr_en_r.error_mbox_ecc_unc_en.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.notif_intr_en_r.notif_cmd_avail_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_intr_en_r.notif_cmd_avail_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_intr_en_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = decoded_wr_data[0:0];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_intr_en_r.notif_cmd_avail_en.next = next_c;
        field_combo.intr_block_rf.notif_intr_en_r.notif_cmd_avail_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.notif_intr_en_r.notif_cmd_avail_en.value <= 'h0;
        end else if(field_combo.intr_block_rf.notif_intr_en_r.notif_cmd_avail_en.load_next) begin
            field_storage.intr_block_rf.notif_intr_en_r.notif_cmd_avail_en.value <= field_combo.intr_block_rf.notif_intr_en_r.notif_cmd_avail_en.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.notif_intr_en_r.notif_mbox_ecc_cor_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_intr_en_r.notif_mbox_ecc_cor_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_intr_en_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = decoded_wr_data[1:1];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_intr_en_r.notif_mbox_ecc_cor_en.next = next_c;
        field_combo.intr_block_rf.notif_intr_en_r.notif_mbox_ecc_cor_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.notif_intr_en_r.notif_mbox_ecc_cor_en.value <= 'h0;
        end else if(field_combo.intr_block_rf.notif_intr_en_r.notif_mbox_ecc_cor_en.load_next) begin
            field_storage.intr_block_rf.notif_intr_en_r.notif_mbox_ecc_cor_en.value <= field_combo.intr_block_rf.notif_intr_en_r.notif_mbox_ecc_cor_en.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_global_intr_r.agg_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_global_intr_r.agg_sts.value;
        automatic logic load_next_c = '0;
        if(1) begin // HW Write
            next_c = hwif_out.intr_block_rf.error_internal_intr_r.intr;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_global_intr_r.agg_sts.next = next_c;
        field_combo.intr_block_rf.error_global_intr_r.agg_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error_global_intr_r.agg_sts.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_global_intr_r.agg_sts.load_next) begin
            field_storage.intr_block_rf.error_global_intr_r.agg_sts.value <= field_combo.intr_block_rf.error_global_intr_r.agg_sts.next;
        end
    end
    assign hwif_out.intr_block_rf.error_global_intr_r.intr =
        |(field_storage.intr_block_rf.error_global_intr_r.agg_sts.value & field_storage.intr_block_rf.global_intr_en_r.error_en.value);
    // Field: soc_ifc_reg.intr_block_rf.notif_global_intr_r.agg_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_global_intr_r.agg_sts.value;
        automatic logic load_next_c = '0;
        if(1) begin // HW Write
            next_c = hwif_out.intr_block_rf.notif_internal_intr_r.intr;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_global_intr_r.agg_sts.next = next_c;
        field_combo.intr_block_rf.notif_global_intr_r.agg_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.notif_global_intr_r.agg_sts.value <= 'h0;
        end else if(field_combo.intr_block_rf.notif_global_intr_r.agg_sts.load_next) begin
            field_storage.intr_block_rf.notif_global_intr_r.agg_sts.value <= field_combo.intr_block_rf.notif_global_intr_r.agg_sts.next;
        end
    end
    assign hwif_out.intr_block_rf.notif_global_intr_r.intr =
        |(field_storage.intr_block_rf.notif_global_intr_r.agg_sts.value & field_storage.intr_block_rf.global_intr_en_r.notif_en.value);
    // Field: soc_ifc_reg.intr_block_rf.error_internal_intr_r.error_internal_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_internal_intr_r.error_internal_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error_internal_trig.value) begin // stickybit
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error_internal_sts.value | field_storage.intr_block_rf.error_intr_trig_r.error_internal_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error_internal_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error_internal_intr_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error_internal_sts.value & ~decoded_wr_data[0:0];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_internal_intr_r.error_internal_sts.next = next_c;
        field_combo.intr_block_rf.error_internal_intr_r.error_internal_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.hard_reset_b) begin
        if(~hwif_in.hard_reset_b) begin
            field_storage.intr_block_rf.error_internal_intr_r.error_internal_sts.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_internal_intr_r.error_internal_sts.load_next) begin
            field_storage.intr_block_rf.error_internal_intr_r.error_internal_sts.value <= field_combo.intr_block_rf.error_internal_intr_r.error_internal_sts.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_internal_intr_r.error_inv_dev_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_internal_intr_r.error_inv_dev_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error_inv_dev_trig.value) begin // stickybit
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error_inv_dev_sts.value | field_storage.intr_block_rf.error_intr_trig_r.error_inv_dev_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error_inv_dev_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error_internal_intr_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error_inv_dev_sts.value & ~decoded_wr_data[1:1];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_internal_intr_r.error_inv_dev_sts.next = next_c;
        field_combo.intr_block_rf.error_internal_intr_r.error_inv_dev_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.hard_reset_b) begin
        if(~hwif_in.hard_reset_b) begin
            field_storage.intr_block_rf.error_internal_intr_r.error_inv_dev_sts.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_internal_intr_r.error_inv_dev_sts.load_next) begin
            field_storage.intr_block_rf.error_internal_intr_r.error_inv_dev_sts.value <= field_combo.intr_block_rf.error_internal_intr_r.error_inv_dev_sts.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_internal_intr_r.error_cmd_fail_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_internal_intr_r.error_cmd_fail_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error_cmd_fail_trig.value) begin // stickybit
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error_cmd_fail_sts.value | field_storage.intr_block_rf.error_intr_trig_r.error_cmd_fail_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error_cmd_fail_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error_internal_intr_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error_cmd_fail_sts.value & ~decoded_wr_data[2:2];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_internal_intr_r.error_cmd_fail_sts.next = next_c;
        field_combo.intr_block_rf.error_internal_intr_r.error_cmd_fail_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.hard_reset_b) begin
        if(~hwif_in.hard_reset_b) begin
            field_storage.intr_block_rf.error_internal_intr_r.error_cmd_fail_sts.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_internal_intr_r.error_cmd_fail_sts.load_next) begin
            field_storage.intr_block_rf.error_internal_intr_r.error_cmd_fail_sts.value <= field_combo.intr_block_rf.error_internal_intr_r.error_cmd_fail_sts.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_internal_intr_r.error_bad_fuse_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_internal_intr_r.error_bad_fuse_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error_bad_fuse_trig.value) begin // stickybit
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error_bad_fuse_sts.value | field_storage.intr_block_rf.error_intr_trig_r.error_bad_fuse_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error_bad_fuse_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error_internal_intr_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error_bad_fuse_sts.value & ~decoded_wr_data[3:3];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_internal_intr_r.error_bad_fuse_sts.next = next_c;
        field_combo.intr_block_rf.error_internal_intr_r.error_bad_fuse_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.hard_reset_b) begin
        if(~hwif_in.hard_reset_b) begin
            field_storage.intr_block_rf.error_internal_intr_r.error_bad_fuse_sts.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_internal_intr_r.error_bad_fuse_sts.load_next) begin
            field_storage.intr_block_rf.error_internal_intr_r.error_bad_fuse_sts.value <= field_combo.intr_block_rf.error_internal_intr_r.error_bad_fuse_sts.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_internal_intr_r.error_iccm_blocked_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_internal_intr_r.error_iccm_blocked_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error_iccm_blocked_trig.value) begin // stickybit
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error_iccm_blocked_sts.value | field_storage.intr_block_rf.error_intr_trig_r.error_iccm_blocked_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error_iccm_blocked_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error_internal_intr_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error_iccm_blocked_sts.value & ~decoded_wr_data[4:4];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_internal_intr_r.error_iccm_blocked_sts.next = next_c;
        field_combo.intr_block_rf.error_internal_intr_r.error_iccm_blocked_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.hard_reset_b) begin
        if(~hwif_in.hard_reset_b) begin
            field_storage.intr_block_rf.error_internal_intr_r.error_iccm_blocked_sts.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_internal_intr_r.error_iccm_blocked_sts.load_next) begin
            field_storage.intr_block_rf.error_internal_intr_r.error_iccm_blocked_sts.value <= field_combo.intr_block_rf.error_internal_intr_r.error_iccm_blocked_sts.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_internal_intr_r.error_mbox_ecc_unc_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_internal_intr_r.error_mbox_ecc_unc_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error_mbox_ecc_unc_trig.value) begin // stickybit
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error_mbox_ecc_unc_sts.value | field_storage.intr_block_rf.error_intr_trig_r.error_mbox_ecc_unc_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error_mbox_ecc_unc_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error_internal_intr_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error_mbox_ecc_unc_sts.value & ~decoded_wr_data[5:5];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_internal_intr_r.error_mbox_ecc_unc_sts.next = next_c;
        field_combo.intr_block_rf.error_internal_intr_r.error_mbox_ecc_unc_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.hard_reset_b) begin
        if(~hwif_in.hard_reset_b) begin
            field_storage.intr_block_rf.error_internal_intr_r.error_mbox_ecc_unc_sts.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_internal_intr_r.error_mbox_ecc_unc_sts.load_next) begin
            field_storage.intr_block_rf.error_internal_intr_r.error_mbox_ecc_unc_sts.value <= field_combo.intr_block_rf.error_internal_intr_r.error_mbox_ecc_unc_sts.next;
        end
    end
    assign hwif_out.intr_block_rf.error_internal_intr_r.intr =
        |(field_storage.intr_block_rf.error_internal_intr_r.error_internal_sts.value & field_storage.intr_block_rf.error_intr_en_r.error_internal_en.value)
        || |(field_storage.intr_block_rf.error_internal_intr_r.error_inv_dev_sts.value & field_storage.intr_block_rf.error_intr_en_r.error_inv_dev_en.value)
        || |(field_storage.intr_block_rf.error_internal_intr_r.error_cmd_fail_sts.value & field_storage.intr_block_rf.error_intr_en_r.error_cmd_fail_en.value)
        || |(field_storage.intr_block_rf.error_internal_intr_r.error_bad_fuse_sts.value & field_storage.intr_block_rf.error_intr_en_r.error_bad_fuse_en.value)
        || |(field_storage.intr_block_rf.error_internal_intr_r.error_iccm_blocked_sts.value & field_storage.intr_block_rf.error_intr_en_r.error_iccm_blocked_en.value)
        || |(field_storage.intr_block_rf.error_internal_intr_r.error_mbox_ecc_unc_sts.value & field_storage.intr_block_rf.error_intr_en_r.error_mbox_ecc_unc_en.value);
    // Field: soc_ifc_reg.intr_block_rf.notif_internal_intr_r.notif_cmd_avail_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif_cmd_avail_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_avail_trig.value) begin // stickybit
            next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif_cmd_avail_sts.value | field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_avail_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif_internal_intr_r.notif_cmd_avail_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.notif_internal_intr_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif_cmd_avail_sts.value & ~decoded_wr_data[0:0];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_internal_intr_r.notif_cmd_avail_sts.next = next_c;
        field_combo.intr_block_rf.notif_internal_intr_r.notif_cmd_avail_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.notif_internal_intr_r.notif_cmd_avail_sts.value <= 'h0;
        end else if(field_combo.intr_block_rf.notif_internal_intr_r.notif_cmd_avail_sts.load_next) begin
            field_storage.intr_block_rf.notif_internal_intr_r.notif_cmd_avail_sts.value <= field_combo.intr_block_rf.notif_internal_intr_r.notif_cmd_avail_sts.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.notif_internal_intr_r.notif_mbox_ecc_cor_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif_mbox_ecc_cor_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif_intr_trig_r.notif_mbox_ecc_cor_trig.value) begin // stickybit
            next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif_mbox_ecc_cor_sts.value | field_storage.intr_block_rf.notif_intr_trig_r.notif_mbox_ecc_cor_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif_internal_intr_r.notif_mbox_ecc_cor_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.notif_internal_intr_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif_mbox_ecc_cor_sts.value & ~decoded_wr_data[1:1];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_internal_intr_r.notif_mbox_ecc_cor_sts.next = next_c;
        field_combo.intr_block_rf.notif_internal_intr_r.notif_mbox_ecc_cor_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.notif_internal_intr_r.notif_mbox_ecc_cor_sts.value <= 'h0;
        end else if(field_combo.intr_block_rf.notif_internal_intr_r.notif_mbox_ecc_cor_sts.load_next) begin
            field_storage.intr_block_rf.notif_internal_intr_r.notif_mbox_ecc_cor_sts.value <= field_combo.intr_block_rf.notif_internal_intr_r.notif_mbox_ecc_cor_sts.next;
        end
    end
    assign hwif_out.intr_block_rf.notif_internal_intr_r.intr =
        |(field_storage.intr_block_rf.notif_internal_intr_r.notif_cmd_avail_sts.value & field_storage.intr_block_rf.notif_intr_en_r.notif_cmd_avail_en.value)
        || |(field_storage.intr_block_rf.notif_internal_intr_r.notif_mbox_ecc_cor_sts.value & field_storage.intr_block_rf.notif_intr_en_r.notif_mbox_ecc_cor_en.value);
    // Field: soc_ifc_reg.intr_block_rf.error_intr_trig_r.error_internal_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_intr_trig_r.error_internal_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_trig_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error_internal_trig.value | decoded_wr_data[0:0];
            load_next_c = '1;
        end else if(1) begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_trig_r.error_internal_trig.next = next_c;
        field_combo.intr_block_rf.error_intr_trig_r.error_internal_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error_intr_trig_r.error_internal_trig.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_intr_trig_r.error_internal_trig.load_next) begin
            field_storage.intr_block_rf.error_intr_trig_r.error_internal_trig.value <= field_combo.intr_block_rf.error_intr_trig_r.error_internal_trig.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_intr_trig_r.error_inv_dev_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_intr_trig_r.error_inv_dev_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_trig_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error_inv_dev_trig.value | decoded_wr_data[1:1];
            load_next_c = '1;
        end else if(1) begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_trig_r.error_inv_dev_trig.next = next_c;
        field_combo.intr_block_rf.error_intr_trig_r.error_inv_dev_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error_intr_trig_r.error_inv_dev_trig.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_intr_trig_r.error_inv_dev_trig.load_next) begin
            field_storage.intr_block_rf.error_intr_trig_r.error_inv_dev_trig.value <= field_combo.intr_block_rf.error_intr_trig_r.error_inv_dev_trig.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_intr_trig_r.error_cmd_fail_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_intr_trig_r.error_cmd_fail_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_trig_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error_cmd_fail_trig.value | decoded_wr_data[2:2];
            load_next_c = '1;
        end else if(1) begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_trig_r.error_cmd_fail_trig.next = next_c;
        field_combo.intr_block_rf.error_intr_trig_r.error_cmd_fail_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error_intr_trig_r.error_cmd_fail_trig.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_intr_trig_r.error_cmd_fail_trig.load_next) begin
            field_storage.intr_block_rf.error_intr_trig_r.error_cmd_fail_trig.value <= field_combo.intr_block_rf.error_intr_trig_r.error_cmd_fail_trig.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_intr_trig_r.error_bad_fuse_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_intr_trig_r.error_bad_fuse_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_trig_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error_bad_fuse_trig.value | decoded_wr_data[3:3];
            load_next_c = '1;
        end else if(1) begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_trig_r.error_bad_fuse_trig.next = next_c;
        field_combo.intr_block_rf.error_intr_trig_r.error_bad_fuse_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error_intr_trig_r.error_bad_fuse_trig.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_intr_trig_r.error_bad_fuse_trig.load_next) begin
            field_storage.intr_block_rf.error_intr_trig_r.error_bad_fuse_trig.value <= field_combo.intr_block_rf.error_intr_trig_r.error_bad_fuse_trig.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_intr_trig_r.error_iccm_blocked_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_intr_trig_r.error_iccm_blocked_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_trig_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error_iccm_blocked_trig.value | decoded_wr_data[4:4];
            load_next_c = '1;
        end else if(1) begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_trig_r.error_iccm_blocked_trig.next = next_c;
        field_combo.intr_block_rf.error_intr_trig_r.error_iccm_blocked_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error_intr_trig_r.error_iccm_blocked_trig.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_intr_trig_r.error_iccm_blocked_trig.load_next) begin
            field_storage.intr_block_rf.error_intr_trig_r.error_iccm_blocked_trig.value <= field_combo.intr_block_rf.error_intr_trig_r.error_iccm_blocked_trig.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_intr_trig_r.error_mbox_ecc_unc_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_intr_trig_r.error_mbox_ecc_unc_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_trig_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error_mbox_ecc_unc_trig.value | decoded_wr_data[5:5];
            load_next_c = '1;
        end else if(1) begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_trig_r.error_mbox_ecc_unc_trig.next = next_c;
        field_combo.intr_block_rf.error_intr_trig_r.error_mbox_ecc_unc_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error_intr_trig_r.error_mbox_ecc_unc_trig.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_intr_trig_r.error_mbox_ecc_unc_trig.load_next) begin
            field_storage.intr_block_rf.error_intr_trig_r.error_mbox_ecc_unc_trig.value <= field_combo.intr_block_rf.error_intr_trig_r.error_mbox_ecc_unc_trig.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.notif_intr_trig_r.notif_cmd_avail_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_avail_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_intr_trig_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_avail_trig.value | decoded_wr_data[0:0];
            load_next_c = '1;
        end else if(1) begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_intr_trig_r.notif_cmd_avail_trig.next = next_c;
        field_combo.intr_block_rf.notif_intr_trig_r.notif_cmd_avail_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_avail_trig.value <= 'h0;
        end else if(field_combo.intr_block_rf.notif_intr_trig_r.notif_cmd_avail_trig.load_next) begin
            field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_avail_trig.value <= field_combo.intr_block_rf.notif_intr_trig_r.notif_cmd_avail_trig.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.notif_intr_trig_r.notif_mbox_ecc_cor_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif_mbox_ecc_cor_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_intr_trig_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif_mbox_ecc_cor_trig.value | decoded_wr_data[1:1];
            load_next_c = '1;
        end else if(1) begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_intr_trig_r.notif_mbox_ecc_cor_trig.next = next_c;
        field_combo.intr_block_rf.notif_intr_trig_r.notif_mbox_ecc_cor_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.notif_intr_trig_r.notif_mbox_ecc_cor_trig.value <= 'h0;
        end else if(field_combo.intr_block_rf.notif_intr_trig_r.notif_mbox_ecc_cor_trig.load_next) begin
            field_storage.intr_block_rf.notif_intr_trig_r.notif_mbox_ecc_cor_trig.value <= field_combo.intr_block_rf.notif_intr_trig_r.notif_mbox_ecc_cor_trig.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_internal_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.error_internal_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_internal_intr_count_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = decoded_wr_data[31:0];
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_internal_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 'h1) > 'hffffffff) begin // up-counter saturated
                next_c = 'hffffffff;
            end else begin
                next_c = next_c + 'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_internal_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error_internal_intr_count_r.cnt.value >= 'hffffffff);
        field_combo.intr_block_rf.error_internal_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error_internal_intr_count_r.cnt.value >= 'hffffffff);
        if(next_c > 'hffffffff) begin
            next_c = 'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_internal_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error_internal_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.hard_reset_b) begin
        if(~hwif_in.hard_reset_b) begin
            field_storage.intr_block_rf.error_internal_intr_count_r.cnt.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_internal_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error_internal_intr_count_r.cnt.value <= field_combo.intr_block_rf.error_internal_intr_count_r.cnt.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_inv_dev_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.error_inv_dev_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_inv_dev_intr_count_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = decoded_wr_data[31:0];
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_inv_dev_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 'h1) > 'hffffffff) begin // up-counter saturated
                next_c = 'hffffffff;
            end else begin
                next_c = next_c + 'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_inv_dev_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error_inv_dev_intr_count_r.cnt.value >= 'hffffffff);
        field_combo.intr_block_rf.error_inv_dev_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error_inv_dev_intr_count_r.cnt.value >= 'hffffffff);
        if(next_c > 'hffffffff) begin
            next_c = 'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_inv_dev_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error_inv_dev_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.hard_reset_b) begin
        if(~hwif_in.hard_reset_b) begin
            field_storage.intr_block_rf.error_inv_dev_intr_count_r.cnt.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_inv_dev_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error_inv_dev_intr_count_r.cnt.value <= field_combo.intr_block_rf.error_inv_dev_intr_count_r.cnt.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_cmd_fail_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.error_cmd_fail_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_cmd_fail_intr_count_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = decoded_wr_data[31:0];
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_cmd_fail_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 'h1) > 'hffffffff) begin // up-counter saturated
                next_c = 'hffffffff;
            end else begin
                next_c = next_c + 'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_cmd_fail_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error_cmd_fail_intr_count_r.cnt.value >= 'hffffffff);
        field_combo.intr_block_rf.error_cmd_fail_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error_cmd_fail_intr_count_r.cnt.value >= 'hffffffff);
        if(next_c > 'hffffffff) begin
            next_c = 'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_cmd_fail_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error_cmd_fail_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.hard_reset_b) begin
        if(~hwif_in.hard_reset_b) begin
            field_storage.intr_block_rf.error_cmd_fail_intr_count_r.cnt.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_cmd_fail_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error_cmd_fail_intr_count_r.cnt.value <= field_combo.intr_block_rf.error_cmd_fail_intr_count_r.cnt.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_bad_fuse_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.error_bad_fuse_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_bad_fuse_intr_count_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = decoded_wr_data[31:0];
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_bad_fuse_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 'h1) > 'hffffffff) begin // up-counter saturated
                next_c = 'hffffffff;
            end else begin
                next_c = next_c + 'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_bad_fuse_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error_bad_fuse_intr_count_r.cnt.value >= 'hffffffff);
        field_combo.intr_block_rf.error_bad_fuse_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error_bad_fuse_intr_count_r.cnt.value >= 'hffffffff);
        if(next_c > 'hffffffff) begin
            next_c = 'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_bad_fuse_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error_bad_fuse_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.hard_reset_b) begin
        if(~hwif_in.hard_reset_b) begin
            field_storage.intr_block_rf.error_bad_fuse_intr_count_r.cnt.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_bad_fuse_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error_bad_fuse_intr_count_r.cnt.value <= field_combo.intr_block_rf.error_bad_fuse_intr_count_r.cnt.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_iccm_blocked_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.error_iccm_blocked_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_iccm_blocked_intr_count_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = decoded_wr_data[31:0];
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_iccm_blocked_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 'h1) > 'hffffffff) begin // up-counter saturated
                next_c = 'hffffffff;
            end else begin
                next_c = next_c + 'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_iccm_blocked_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error_iccm_blocked_intr_count_r.cnt.value >= 'hffffffff);
        field_combo.intr_block_rf.error_iccm_blocked_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error_iccm_blocked_intr_count_r.cnt.value >= 'hffffffff);
        if(next_c > 'hffffffff) begin
            next_c = 'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_iccm_blocked_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error_iccm_blocked_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.hard_reset_b) begin
        if(~hwif_in.hard_reset_b) begin
            field_storage.intr_block_rf.error_iccm_blocked_intr_count_r.cnt.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_iccm_blocked_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error_iccm_blocked_intr_count_r.cnt.value <= field_combo.intr_block_rf.error_iccm_blocked_intr_count_r.cnt.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_mbox_ecc_unc_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.error_mbox_ecc_unc_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_mbox_ecc_unc_intr_count_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = decoded_wr_data[31:0];
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_mbox_ecc_unc_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 'h1) > 'hffffffff) begin // up-counter saturated
                next_c = 'hffffffff;
            end else begin
                next_c = next_c + 'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_mbox_ecc_unc_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error_mbox_ecc_unc_intr_count_r.cnt.value >= 'hffffffff);
        field_combo.intr_block_rf.error_mbox_ecc_unc_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error_mbox_ecc_unc_intr_count_r.cnt.value >= 'hffffffff);
        if(next_c > 'hffffffff) begin
            next_c = 'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_mbox_ecc_unc_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error_mbox_ecc_unc_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.hard_reset_b) begin
        if(~hwif_in.hard_reset_b) begin
            field_storage.intr_block_rf.error_mbox_ecc_unc_intr_count_r.cnt.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_mbox_ecc_unc_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error_mbox_ecc_unc_intr_count_r.cnt.value <= field_combo.intr_block_rf.error_mbox_ecc_unc_intr_count_r.cnt.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.notif_cmd_avail_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.notif_cmd_avail_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_cmd_avail_intr_count_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = decoded_wr_data[31:0];
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_cmd_avail_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 'h1) > 'hffffffff) begin // up-counter saturated
                next_c = 'hffffffff;
            end else begin
                next_c = next_c + 'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_cmd_avail_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.notif_cmd_avail_intr_count_r.cnt.value >= 'hffffffff);
        field_combo.intr_block_rf.notif_cmd_avail_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.notif_cmd_avail_intr_count_r.cnt.value >= 'hffffffff);
        if(next_c > 'hffffffff) begin
            next_c = 'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_cmd_avail_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.notif_cmd_avail_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.notif_cmd_avail_intr_count_r.cnt.value <= 'h0;
        end else if(field_combo.intr_block_rf.notif_cmd_avail_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.notif_cmd_avail_intr_count_r.cnt.value <= field_combo.intr_block_rf.notif_cmd_avail_intr_count_r.cnt.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.notif_mbox_ecc_cor_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.notif_mbox_ecc_cor_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_mbox_ecc_cor_intr_count_r && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = decoded_wr_data[31:0];
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_mbox_ecc_cor_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 'h1) > 'hffffffff) begin // up-counter saturated
                next_c = 'hffffffff;
            end else begin
                next_c = next_c + 'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_mbox_ecc_cor_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.notif_mbox_ecc_cor_intr_count_r.cnt.value >= 'hffffffff);
        field_combo.intr_block_rf.notif_mbox_ecc_cor_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.notif_mbox_ecc_cor_intr_count_r.cnt.value >= 'hffffffff);
        if(next_c > 'hffffffff) begin
            next_c = 'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_mbox_ecc_cor_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.notif_mbox_ecc_cor_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.notif_mbox_ecc_cor_intr_count_r.cnt.value <= 'h0;
        end else if(field_combo.intr_block_rf.notif_mbox_ecc_cor_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.notif_mbox_ecc_cor_intr_count_r.cnt.value <= field_combo.intr_block_rf.notif_mbox_ecc_cor_intr_count_r.cnt.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_internal_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_internal_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error_internal_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error_internal_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error_internal_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_internal_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error_internal_intr_count_incr_r.pulse.underflow = (next_c < ('h1));
            next_c = next_c - 'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error_internal_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error_internal_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error_internal_intr_count_incr_r.pulse.value <= 'd0);
        field_combo.intr_block_rf.error_internal_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error_internal_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error_internal_intr_count_incr_r.pulse.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_internal_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error_internal_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error_internal_intr_count_incr_r.pulse.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_inv_dev_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_inv_dev_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error_inv_dev_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error_inv_dev_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error_inv_dev_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_inv_dev_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error_inv_dev_intr_count_incr_r.pulse.underflow = (next_c < ('h1));
            next_c = next_c - 'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error_inv_dev_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error_inv_dev_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error_inv_dev_intr_count_incr_r.pulse.value <= 'd0);
        field_combo.intr_block_rf.error_inv_dev_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error_inv_dev_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error_inv_dev_intr_count_incr_r.pulse.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_inv_dev_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error_inv_dev_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error_inv_dev_intr_count_incr_r.pulse.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_cmd_fail_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_cmd_fail_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error_cmd_fail_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error_cmd_fail_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error_cmd_fail_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_cmd_fail_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error_cmd_fail_intr_count_incr_r.pulse.underflow = (next_c < ('h1));
            next_c = next_c - 'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error_cmd_fail_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error_cmd_fail_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error_cmd_fail_intr_count_incr_r.pulse.value <= 'd0);
        field_combo.intr_block_rf.error_cmd_fail_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error_cmd_fail_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error_cmd_fail_intr_count_incr_r.pulse.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_cmd_fail_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error_cmd_fail_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error_cmd_fail_intr_count_incr_r.pulse.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_bad_fuse_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_bad_fuse_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error_bad_fuse_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error_bad_fuse_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error_bad_fuse_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_bad_fuse_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error_bad_fuse_intr_count_incr_r.pulse.underflow = (next_c < ('h1));
            next_c = next_c - 'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error_bad_fuse_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error_bad_fuse_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error_bad_fuse_intr_count_incr_r.pulse.value <= 'd0);
        field_combo.intr_block_rf.error_bad_fuse_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error_bad_fuse_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error_bad_fuse_intr_count_incr_r.pulse.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_bad_fuse_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error_bad_fuse_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error_bad_fuse_intr_count_incr_r.pulse.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_iccm_blocked_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_iccm_blocked_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error_iccm_blocked_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error_iccm_blocked_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error_iccm_blocked_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_iccm_blocked_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error_iccm_blocked_intr_count_incr_r.pulse.underflow = (next_c < ('h1));
            next_c = next_c - 'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error_iccm_blocked_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error_iccm_blocked_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error_iccm_blocked_intr_count_incr_r.pulse.value <= 'd0);
        field_combo.intr_block_rf.error_iccm_blocked_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error_iccm_blocked_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error_iccm_blocked_intr_count_incr_r.pulse.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_iccm_blocked_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error_iccm_blocked_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error_iccm_blocked_intr_count_incr_r.pulse.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.error_mbox_ecc_unc_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_mbox_ecc_unc_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error_mbox_ecc_unc_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error_mbox_ecc_unc_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error_mbox_ecc_unc_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_mbox_ecc_unc_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error_mbox_ecc_unc_intr_count_incr_r.pulse.underflow = (next_c < ('h1));
            next_c = next_c - 'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error_mbox_ecc_unc_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error_mbox_ecc_unc_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error_mbox_ecc_unc_intr_count_incr_r.pulse.value <= 'd0);
        field_combo.intr_block_rf.error_mbox_ecc_unc_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error_mbox_ecc_unc_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error_mbox_ecc_unc_intr_count_incr_r.pulse.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_mbox_ecc_unc_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error_mbox_ecc_unc_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error_mbox_ecc_unc_intr_count_incr_r.pulse.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.notif_cmd_avail_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_cmd_avail_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_avail_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_avail_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif_internal_intr_r.notif_cmd_avail_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_cmd_avail_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.notif_cmd_avail_intr_count_incr_r.pulse.underflow = (next_c < ('h1));
            next_c = next_c - 'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.notif_cmd_avail_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.notif_cmd_avail_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.notif_cmd_avail_intr_count_incr_r.pulse.value <= 'd0);
        field_combo.intr_block_rf.notif_cmd_avail_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.notif_cmd_avail_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.notif_cmd_avail_intr_count_incr_r.pulse.value <= 'h0;
        end else if(field_combo.intr_block_rf.notif_cmd_avail_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.notif_cmd_avail_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.notif_cmd_avail_intr_count_incr_r.pulse.next;
        end
    end
    // Field: soc_ifc_reg.intr_block_rf.notif_mbox_ecc_cor_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_mbox_ecc_cor_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif_intr_trig_r.notif_mbox_ecc_cor_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif_mbox_ecc_cor_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif_internal_intr_r.notif_mbox_ecc_cor_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_mbox_ecc_cor_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.notif_mbox_ecc_cor_intr_count_incr_r.pulse.underflow = (next_c < ('h1));
            next_c = next_c - 'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.notif_mbox_ecc_cor_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.notif_mbox_ecc_cor_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.notif_mbox_ecc_cor_intr_count_incr_r.pulse.value <= 'd0);
        field_combo.intr_block_rf.notif_mbox_ecc_cor_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.notif_mbox_ecc_cor_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.notif_mbox_ecc_cor_intr_count_incr_r.pulse.value <= 'h0;
        end else if(field_combo.intr_block_rf.notif_mbox_ecc_cor_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.notif_mbox_ecc_cor_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.notif_mbox_ecc_cor_intr_count_incr_r.pulse.next;
        end
    end

    //--------------------------------------------------------------------------
    // Readback
    //--------------------------------------------------------------------------
    logic readback_err;
    logic readback_done;
    logic [31:0] readback_data;
    
    // Assign readback values to a flattened array
    logic [134-1:0][31:0] readback_array;
    assign readback_array[0][31:0] = (decoded_reg_strb.HW_ERROR_FATAL && !decoded_req_is_wr) ? field_storage.HW_ERROR_FATAL.error_code.value : '0;
    assign readback_array[1][31:0] = (decoded_reg_strb.HW_ERROR_NON_FATAL && !decoded_req_is_wr) ? field_storage.HW_ERROR_NON_FATAL.error_code.value : '0;
    assign readback_array[2][31:0] = (decoded_reg_strb.FW_ERROR_FATAL && !decoded_req_is_wr) ? field_storage.FW_ERROR_FATAL.error_code.value : '0;
    assign readback_array[3][31:0] = (decoded_reg_strb.FW_ERROR_NON_FATAL && !decoded_req_is_wr) ? field_storage.FW_ERROR_NON_FATAL.error_code.value : '0;
    assign readback_array[4][31:0] = (decoded_reg_strb.HW_ERROR_ENC && !decoded_req_is_wr) ? field_storage.HW_ERROR_ENC.error_code.value : '0;
    assign readback_array[5][31:0] = (decoded_reg_strb.FW_ERROR_ENC && !decoded_req_is_wr) ? field_storage.FW_ERROR_ENC.error_code.value : '0;
    assign readback_array[6][31:0] = (decoded_reg_strb.BOOT_STATUS && !decoded_req_is_wr) ? field_storage.BOOT_STATUS.status.value : '0;
    assign readback_array[7][29:0] = (decoded_reg_strb.FLOW_STATUS && !decoded_req_is_wr) ? field_storage.FLOW_STATUS.status.value : '0;
    assign readback_array[7][30:30] = (decoded_reg_strb.FLOW_STATUS && !decoded_req_is_wr) ? field_storage.FLOW_STATUS.ready_for_fw.value : '0;
    assign readback_array[7][31:31] = (decoded_reg_strb.FLOW_STATUS && !decoded_req_is_wr) ? field_storage.FLOW_STATUS.ready_for_runtime.value : '0;
    for(genvar i0=0; i0<2; i0++) begin
        assign readback_array[i0*1 + 8][31:0] = (decoded_reg_strb.generic_input_wires[i0] && !decoded_req_is_wr) ? field_storage.generic_input_wires[i0].generic_wires.value : '0;
    end
    for(genvar i0=0; i0<2; i0++) begin
        assign readback_array[i0*1 + 10][31:0] = (decoded_reg_strb.generic_output_wires[i0] && !decoded_req_is_wr) ? field_storage.generic_output_wires[i0].generic_wires.value : '0;
    end
    for(genvar i0=0; i0<12; i0++) begin
        assign readback_array[i0*1 + 12][31:0] = (decoded_reg_strb.TRNG[i0] && !decoded_req_is_wr) ? field_storage.TRNG[i0].DATA.value : '0;
    end
    assign readback_array[24][0:0] = (decoded_reg_strb.TRNG_DONE && !decoded_req_is_wr) ? field_storage.TRNG_DONE.DONE.value : '0;
    assign readback_array[24][31:1] = '0;
    for(genvar i0=0; i0<12; i0++) begin
        assign readback_array[i0*1 + 25][31:0] = (decoded_reg_strb.key_manifest_pk_hash_0[i0] && !decoded_req_is_wr) ? field_storage.key_manifest_pk_hash_0[i0].hash.value : '0;
    end
    for(genvar i0=0; i0<12; i0++) begin
        assign readback_array[i0*1 + 37][31:0] = (decoded_reg_strb.key_manifest_pk_hash_1[i0] && !decoded_req_is_wr) ? field_storage.key_manifest_pk_hash_1[i0].hash.value : '0;
    end
    for(genvar i0=0; i0<12; i0++) begin
        assign readback_array[i0*1 + 49][31:0] = (decoded_reg_strb.key_manifest_pk_hash_2[i0] && !decoded_req_is_wr) ? field_storage.key_manifest_pk_hash_2[i0].hash.value : '0;
    end
    for(genvar i0=0; i0<12; i0++) begin
        assign readback_array[i0*1 + 61][31:0] = (decoded_reg_strb.key_manifest_pk_hash_3[i0] && !decoded_req_is_wr) ? field_storage.key_manifest_pk_hash_3[i0].hash.value : '0;
    end
    assign readback_array[73][3:0] = (decoded_reg_strb.key_manifest_pk_hash_mask && !decoded_req_is_wr) ? field_storage.key_manifest_pk_hash_mask.mask.value : '0;
    assign readback_array[73][31:4] = '0;
    assign readback_array[74][31:0] = (decoded_reg_strb.key_manifest_svn && !decoded_req_is_wr) ? field_storage.key_manifest_svn.svn.value : '0;
    assign readback_array[75][31:0] = (decoded_reg_strb.boot_loader_svn && !decoded_req_is_wr) ? field_storage.boot_loader_svn.svn.value : '0;
    for(genvar i0=0; i0<4; i0++) begin
        assign readback_array[i0*1 + 76][31:0] = (decoded_reg_strb.runtime_svn[i0] && !decoded_req_is_wr) ? field_storage.runtime_svn[i0].svn.value : '0;
    end
    assign readback_array[80][0:0] = (decoded_reg_strb.anti_rollback_disable && !decoded_req_is_wr) ? field_storage.anti_rollback_disable.dis.value : '0;
    assign readback_array[80][31:1] = '0;
    for(genvar i0=0; i0<24; i0++) begin
        assign readback_array[i0*1 + 81][31:0] = (decoded_reg_strb.ieee_idevid_cert_chain[i0] && !decoded_req_is_wr) ? field_storage.ieee_idevid_cert_chain[i0].cert.value : '0;
    end
    assign readback_array[105][0:0] = (decoded_reg_strb.fuse_done && !decoded_req_is_wr) ? field_storage.fuse_done.done.value : '0;
    assign readback_array[105][31:1] = '0;
    assign readback_array[106][0:0] = (decoded_reg_strb.iccm_lock && !decoded_req_is_wr) ? field_storage.iccm_lock.lock.value : '0;
    assign readback_array[106][31:1] = '0;
    assign readback_array[107][0:0] = (decoded_reg_strb.fw_update_reset && !decoded_req_is_wr) ? field_storage.fw_update_reset.core_rst.value : '0;
    assign readback_array[107][31:1] = '0;
    assign readback_array[108][7:0] = (decoded_reg_strb.fw_update_reset_wait_cycles && !decoded_req_is_wr) ? field_storage.fw_update_reset_wait_cycles.wait_cycles.value : '0;
    assign readback_array[108][31:8] = '0;
    assign readback_array[109][0:0] = (decoded_reg_strb.intr_block_rf.global_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.global_intr_en_r.error_en.value : '0;
    assign readback_array[109][1:1] = (decoded_reg_strb.intr_block_rf.global_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.global_intr_en_r.notif_en.value : '0;
    assign readback_array[109][31:2] = '0;
    assign readback_array[110][0:0] = (decoded_reg_strb.intr_block_rf.error_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_en_r.error_internal_en.value : '0;
    assign readback_array[110][1:1] = (decoded_reg_strb.intr_block_rf.error_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_en_r.error_inv_dev_en.value : '0;
    assign readback_array[110][2:2] = (decoded_reg_strb.intr_block_rf.error_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_en_r.error_cmd_fail_en.value : '0;
    assign readback_array[110][3:3] = (decoded_reg_strb.intr_block_rf.error_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_en_r.error_bad_fuse_en.value : '0;
    assign readback_array[110][4:4] = (decoded_reg_strb.intr_block_rf.error_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_en_r.error_iccm_blocked_en.value : '0;
    assign readback_array[110][5:5] = (decoded_reg_strb.intr_block_rf.error_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_en_r.error_mbox_ecc_unc_en.value : '0;
    assign readback_array[110][31:6] = '0;
    assign readback_array[111][0:0] = (decoded_reg_strb.intr_block_rf.notif_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_intr_en_r.notif_cmd_avail_en.value : '0;
    assign readback_array[111][1:1] = (decoded_reg_strb.intr_block_rf.notif_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_intr_en_r.notif_mbox_ecc_cor_en.value : '0;
    assign readback_array[111][31:2] = '0;
    assign readback_array[112][0:0] = (decoded_reg_strb.intr_block_rf.error_global_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_global_intr_r.agg_sts.value : '0;
    assign readback_array[112][31:1] = '0;
    assign readback_array[113][0:0] = (decoded_reg_strb.intr_block_rf.notif_global_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_global_intr_r.agg_sts.value : '0;
    assign readback_array[113][31:1] = '0;
    assign readback_array[114][0:0] = (decoded_reg_strb.intr_block_rf.error_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_internal_intr_r.error_internal_sts.value : '0;
    assign readback_array[114][1:1] = (decoded_reg_strb.intr_block_rf.error_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_internal_intr_r.error_inv_dev_sts.value : '0;
    assign readback_array[114][2:2] = (decoded_reg_strb.intr_block_rf.error_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_internal_intr_r.error_cmd_fail_sts.value : '0;
    assign readback_array[114][3:3] = (decoded_reg_strb.intr_block_rf.error_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_internal_intr_r.error_bad_fuse_sts.value : '0;
    assign readback_array[114][4:4] = (decoded_reg_strb.intr_block_rf.error_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_internal_intr_r.error_iccm_blocked_sts.value : '0;
    assign readback_array[114][5:5] = (decoded_reg_strb.intr_block_rf.error_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_internal_intr_r.error_mbox_ecc_unc_sts.value : '0;
    assign readback_array[114][31:6] = '0;
    assign readback_array[115][0:0] = (decoded_reg_strb.intr_block_rf.notif_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_internal_intr_r.notif_cmd_avail_sts.value : '0;
    assign readback_array[115][1:1] = (decoded_reg_strb.intr_block_rf.notif_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_internal_intr_r.notif_mbox_ecc_cor_sts.value : '0;
    assign readback_array[115][31:2] = '0;
    assign readback_array[116][0:0] = (decoded_reg_strb.intr_block_rf.error_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_trig_r.error_internal_trig.value : '0;
    assign readback_array[116][1:1] = (decoded_reg_strb.intr_block_rf.error_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_trig_r.error_inv_dev_trig.value : '0;
    assign readback_array[116][2:2] = (decoded_reg_strb.intr_block_rf.error_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_trig_r.error_cmd_fail_trig.value : '0;
    assign readback_array[116][3:3] = (decoded_reg_strb.intr_block_rf.error_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_trig_r.error_bad_fuse_trig.value : '0;
    assign readback_array[116][4:4] = (decoded_reg_strb.intr_block_rf.error_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_trig_r.error_iccm_blocked_trig.value : '0;
    assign readback_array[116][5:5] = (decoded_reg_strb.intr_block_rf.error_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_trig_r.error_mbox_ecc_unc_trig.value : '0;
    assign readback_array[116][31:6] = '0;
    assign readback_array[117][0:0] = (decoded_reg_strb.intr_block_rf.notif_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_avail_trig.value : '0;
    assign readback_array[117][1:1] = (decoded_reg_strb.intr_block_rf.notif_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_intr_trig_r.notif_mbox_ecc_cor_trig.value : '0;
    assign readback_array[117][31:2] = '0;
    assign readback_array[118][31:0] = (decoded_reg_strb.intr_block_rf.error_internal_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_internal_intr_count_r.cnt.value : '0;
    assign readback_array[119][31:0] = (decoded_reg_strb.intr_block_rf.error_inv_dev_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_inv_dev_intr_count_r.cnt.value : '0;
    assign readback_array[120][31:0] = (decoded_reg_strb.intr_block_rf.error_cmd_fail_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_cmd_fail_intr_count_r.cnt.value : '0;
    assign readback_array[121][31:0] = (decoded_reg_strb.intr_block_rf.error_bad_fuse_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_bad_fuse_intr_count_r.cnt.value : '0;
    assign readback_array[122][31:0] = (decoded_reg_strb.intr_block_rf.error_iccm_blocked_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_iccm_blocked_intr_count_r.cnt.value : '0;
    assign readback_array[123][31:0] = (decoded_reg_strb.intr_block_rf.error_mbox_ecc_unc_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_mbox_ecc_unc_intr_count_r.cnt.value : '0;
    assign readback_array[124][31:0] = (decoded_reg_strb.intr_block_rf.notif_cmd_avail_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_cmd_avail_intr_count_r.cnt.value : '0;
    assign readback_array[125][31:0] = (decoded_reg_strb.intr_block_rf.notif_mbox_ecc_cor_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_mbox_ecc_cor_intr_count_r.cnt.value : '0;
    assign readback_array[126][0:0] = (decoded_reg_strb.intr_block_rf.error_internal_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_internal_intr_count_incr_r.pulse.value : '0;
    assign readback_array[126][31:1] = '0;
    assign readback_array[127][0:0] = (decoded_reg_strb.intr_block_rf.error_inv_dev_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_inv_dev_intr_count_incr_r.pulse.value : '0;
    assign readback_array[127][31:1] = '0;
    assign readback_array[128][0:0] = (decoded_reg_strb.intr_block_rf.error_cmd_fail_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_cmd_fail_intr_count_incr_r.pulse.value : '0;
    assign readback_array[128][31:1] = '0;
    assign readback_array[129][0:0] = (decoded_reg_strb.intr_block_rf.error_bad_fuse_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_bad_fuse_intr_count_incr_r.pulse.value : '0;
    assign readback_array[129][31:1] = '0;
    assign readback_array[130][0:0] = (decoded_reg_strb.intr_block_rf.error_iccm_blocked_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_iccm_blocked_intr_count_incr_r.pulse.value : '0;
    assign readback_array[130][31:1] = '0;
    assign readback_array[131][0:0] = (decoded_reg_strb.intr_block_rf.error_mbox_ecc_unc_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_mbox_ecc_unc_intr_count_incr_r.pulse.value : '0;
    assign readback_array[131][31:1] = '0;
    assign readback_array[132][0:0] = (decoded_reg_strb.intr_block_rf.notif_cmd_avail_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_cmd_avail_intr_count_incr_r.pulse.value : '0;
    assign readback_array[132][31:1] = '0;
    assign readback_array[133][0:0] = (decoded_reg_strb.intr_block_rf.notif_mbox_ecc_cor_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_mbox_ecc_cor_intr_count_incr_r.pulse.value : '0;
    assign readback_array[133][31:1] = '0;


    // Reduce the array
    always_comb begin
        automatic logic [31:0] readback_data_var;
        readback_done = decoded_req & ~decoded_req_is_wr;
        readback_err = '0;
        readback_data_var = '0;
        for(int i=0; i<134; i++) readback_data_var |= readback_array[i];
        readback_data = readback_data_var;
    end


    assign cpuif_rd_ack = readback_done;
    assign cpuif_rd_data = readback_data;
    assign cpuif_rd_err = readback_err;


endmodule