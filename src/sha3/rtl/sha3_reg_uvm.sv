
// This file was autogenerated by PeakRDL-uvm
package sha3_reg_uvm;
    `include "uvm_macros.svh"
    import uvm_pkg::*;
    `include "sha3_reg_covergroups.svh"
    // Reg - sha3_reg::SHA3_NAME
    class sha3_reg__SHA3_NAME extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        sha3_reg__SHA3_NAME_bit_cg NAME_bit_cg[32];
        sha3_reg__SHA3_NAME_fld_cg fld_cg;
        rand uvm_reg_field NAME;

        function new(string name = "sha3_reg__SHA3_NAME");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.NAME = new("NAME");
            this.NAME.configure(this, 32, 0, "RO", 1, 'h0, 0, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(NAME_bit_cg[bt]) NAME_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : sha3_reg__SHA3_NAME

    // Reg - sha3_reg::SHA3_VERSION
    class sha3_reg__SHA3_VERSION extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        sha3_reg__SHA3_VERSION_bit_cg VERSION_bit_cg[32];
        sha3_reg__SHA3_VERSION_fld_cg fld_cg;
        rand uvm_reg_field VERSION;

        function new(string name = "sha3_reg__SHA3_VERSION");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.VERSION = new("VERSION");
            this.VERSION.configure(this, 32, 0, "RO", 1, 'h0, 0, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(VERSION_bit_cg[bt]) VERSION_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : sha3_reg__SHA3_VERSION

    // Reg - sha3_reg::ALERT_TEST
    class sha3_reg__ALERT_TEST extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        sha3_reg__ALERT_TEST_bit_cg RECOV_OPERATION_ERR_bit_cg[1];
        sha3_reg__ALERT_TEST_bit_cg FATAL_FAULT_ERR_bit_cg[1];
        sha3_reg__ALERT_TEST_fld_cg fld_cg;
        rand uvm_reg_field RECOV_OPERATION_ERR;
        rand uvm_reg_field FATAL_FAULT_ERR;

        function new(string name = "sha3_reg__ALERT_TEST");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.RECOV_OPERATION_ERR = new("RECOV_OPERATION_ERR");
            this.RECOV_OPERATION_ERR.configure(this, 1, 0, "WO", 0, 'h0, 1, 1, 0);
            this.FATAL_FAULT_ERR = new("FATAL_FAULT_ERR");
            this.FATAL_FAULT_ERR.configure(this, 1, 1, "WO", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(RECOV_OPERATION_ERR_bit_cg[bt]) RECOV_OPERATION_ERR_bit_cg[bt] = new();
                foreach(FATAL_FAULT_ERR_bit_cg[bt]) FATAL_FAULT_ERR_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : sha3_reg__ALERT_TEST

    // Reg - sha3_reg::CFG_REGWEN
    class sha3_reg__CFG_REGWEN extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        sha3_reg__CFG_REGWEN_bit_cg en_bit_cg[1];
        sha3_reg__CFG_REGWEN_fld_cg fld_cg;
        rand uvm_reg_field en;

        function new(string name = "sha3_reg__CFG_REGWEN");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.en = new("en");
            this.en.configure(this, 1, 0, "RO", 1, 'h1, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(en_bit_cg[bt]) en_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : sha3_reg__CFG_REGWEN

    // Reg - sha3_reg::CFG_SHADOWED
    class sha3_reg__CFG_SHADOWED extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        sha3_reg__CFG_SHADOWED_bit_cg kstrength_bit_cg[3];
        sha3_reg__CFG_SHADOWED_bit_cg mode_bit_cg[2];
        sha3_reg__CFG_SHADOWED_bit_cg msg_endianness_bit_cg[1];
        sha3_reg__CFG_SHADOWED_bit_cg state_endianness_bit_cg[1];
        sha3_reg__CFG_SHADOWED_fld_cg fld_cg;
        rand uvm_reg_field kstrength;
        rand uvm_reg_field mode;
        rand uvm_reg_field msg_endianness;
        rand uvm_reg_field state_endianness;

        function new(string name = "sha3_reg__CFG_SHADOWED");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.kstrength = new("kstrength");
            this.kstrength.configure(this, 3, 1, "RW", 0, 'h0, 1, 1, 0);
            this.mode = new("mode");
            this.mode.configure(this, 2, 4, "RW", 0, 'h0, 1, 1, 0);
            this.msg_endianness = new("msg_endianness");
            this.msg_endianness.configure(this, 1, 8, "RW", 0, 'h0, 1, 1, 0);
            this.state_endianness = new("state_endianness");
            this.state_endianness.configure(this, 1, 9, "RW", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(kstrength_bit_cg[bt]) kstrength_bit_cg[bt] = new();
                foreach(mode_bit_cg[bt]) mode_bit_cg[bt] = new();
                foreach(msg_endianness_bit_cg[bt]) msg_endianness_bit_cg[bt] = new();
                foreach(state_endianness_bit_cg[bt]) state_endianness_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : sha3_reg__CFG_SHADOWED

    // Reg - sha3_reg::CMD
    class sha3_reg__CMD extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        sha3_reg__CMD_bit_cg cmd_bit_cg[6];
        sha3_reg__CMD_bit_cg err_processed_bit_cg[1];
        sha3_reg__CMD_fld_cg fld_cg;
        rand uvm_reg_field cmd;
        rand uvm_reg_field err_processed;

        function new(string name = "sha3_reg__CMD");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cmd = new("cmd");
            this.cmd.configure(this, 6, 0, "W1C", 0, 'h0, 1, 1, 0);
            this.err_processed = new("err_processed");
            this.err_processed.configure(this, 1, 10, "W1C", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cmd_bit_cg[bt]) cmd_bit_cg[bt] = new();
                foreach(err_processed_bit_cg[bt]) err_processed_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : sha3_reg__CMD

    // Reg - sha3_reg::STATUS
    class sha3_reg__STATUS extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        sha3_reg__STATUS_bit_cg sha3_idle_bit_cg[1];
        sha3_reg__STATUS_bit_cg sha3_absorb_bit_cg[1];
        sha3_reg__STATUS_bit_cg sha3_squeeze_bit_cg[1];
        sha3_reg__STATUS_bit_cg fifo_depth_bit_cg[5];
        sha3_reg__STATUS_bit_cg fifo_empty_bit_cg[1];
        sha3_reg__STATUS_bit_cg fifo_full_bit_cg[1];
        sha3_reg__STATUS_bit_cg ALERT_FATAL_FAULT_bit_cg[1];
        sha3_reg__STATUS_bit_cg ALERT_RECOV_CTRL_UPDATE_ERR_bit_cg[1];
        sha3_reg__STATUS_fld_cg fld_cg;
        rand uvm_reg_field sha3_idle;
        rand uvm_reg_field sha3_absorb;
        rand uvm_reg_field sha3_squeeze;
        rand uvm_reg_field fifo_depth;
        rand uvm_reg_field fifo_empty;
        rand uvm_reg_field fifo_full;
        rand uvm_reg_field ALERT_FATAL_FAULT;
        rand uvm_reg_field ALERT_RECOV_CTRL_UPDATE_ERR;

        function new(string name = "sha3_reg__STATUS");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.sha3_idle = new("sha3_idle");
            this.sha3_idle.configure(this, 1, 0, "RO", 1, 'h1, 1, 1, 0);
            this.sha3_absorb = new("sha3_absorb");
            this.sha3_absorb.configure(this, 1, 1, "RO", 1, 'h0, 1, 1, 0);
            this.sha3_squeeze = new("sha3_squeeze");
            this.sha3_squeeze.configure(this, 1, 2, "RO", 1, 'h0, 1, 1, 0);
            this.fifo_depth = new("fifo_depth");
            this.fifo_depth.configure(this, 5, 8, "RO", 1, 'h0, 1, 1, 0);
            this.fifo_empty = new("fifo_empty");
            this.fifo_empty.configure(this, 1, 14, "RO", 1, 'h1, 1, 1, 0);
            this.fifo_full = new("fifo_full");
            this.fifo_full.configure(this, 1, 15, "RO", 1, 'h0, 1, 1, 0);
            this.ALERT_FATAL_FAULT = new("ALERT_FATAL_FAULT");
            this.ALERT_FATAL_FAULT.configure(this, 1, 16, "RO", 1, 'h0, 1, 1, 0);
            this.ALERT_RECOV_CTRL_UPDATE_ERR = new("ALERT_RECOV_CTRL_UPDATE_ERR");
            this.ALERT_RECOV_CTRL_UPDATE_ERR.configure(this, 1, 17, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(sha3_idle_bit_cg[bt]) sha3_idle_bit_cg[bt] = new();
                foreach(sha3_absorb_bit_cg[bt]) sha3_absorb_bit_cg[bt] = new();
                foreach(sha3_squeeze_bit_cg[bt]) sha3_squeeze_bit_cg[bt] = new();
                foreach(fifo_depth_bit_cg[bt]) fifo_depth_bit_cg[bt] = new();
                foreach(fifo_empty_bit_cg[bt]) fifo_empty_bit_cg[bt] = new();
                foreach(fifo_full_bit_cg[bt]) fifo_full_bit_cg[bt] = new();
                foreach(ALERT_FATAL_FAULT_bit_cg[bt]) ALERT_FATAL_FAULT_bit_cg[bt] = new();
                foreach(ALERT_RECOV_CTRL_UPDATE_ERR_bit_cg[bt]) ALERT_RECOV_CTRL_UPDATE_ERR_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : sha3_reg__STATUS

    // Reg - sha3_reg::ERR_CODE
    class sha3_reg__ERR_CODE extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        sha3_reg__ERR_CODE_bit_cg ERR_CODE_bit_cg[32];
        sha3_reg__ERR_CODE_fld_cg fld_cg;
        rand uvm_reg_field ERR_CODE;

        function new(string name = "sha3_reg__ERR_CODE");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.ERR_CODE = new("ERR_CODE");
            this.ERR_CODE.configure(this, 32, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(ERR_CODE_bit_cg[bt]) ERR_CODE_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : sha3_reg__ERR_CODE

    // Mem - sha3_reg::STATE
    class sha3_reg__STATE extends uvm_reg_block;
        rand uvm_mem m_mem;
        
        function new(string name = "sha3_reg__STATE");
            super.new(name);
        endfunction : new

        virtual function void build();
            this.default_map = create_map("reg_map", 0, 4.0, UVM_NO_ENDIAN);
            this.m_mem = new("m_mem", 64, 32, "RO");
            this.m_mem.configure(this);
            this.default_map.add_mem(this.m_mem, 0);
        endfunction : build
    endclass : sha3_reg__STATE

    // Reg - sha3_reg::global_intr_en_t
    class sha3_reg__global_intr_en_t extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        sha3_reg__global_intr_en_t_bit_cg error_en_bit_cg[1];
        sha3_reg__global_intr_en_t_bit_cg notif_en_bit_cg[1];
        sha3_reg__global_intr_en_t_fld_cg fld_cg;
        rand uvm_reg_field error_en;
        rand uvm_reg_field notif_en;

        function new(string name = "sha3_reg__global_intr_en_t");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.error_en = new("error_en");
            this.error_en.configure(this, 1, 0, "RW", 0, 'h0, 1, 1, 0);
            this.notif_en = new("notif_en");
            this.notif_en.configure(this, 1, 1, "RW", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(error_en_bit_cg[bt]) error_en_bit_cg[bt] = new();
                foreach(notif_en_bit_cg[bt]) notif_en_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : sha3_reg__global_intr_en_t

    // Reg - sha3_reg::error_intr_en_t
    class sha3_reg__error_intr_en_t extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        sha3_reg__error_intr_en_t_bit_cg error0_en_bit_cg[1];
        sha3_reg__error_intr_en_t_bit_cg error1_en_bit_cg[1];
        sha3_reg__error_intr_en_t_bit_cg error2_en_bit_cg[1];
        sha3_reg__error_intr_en_t_bit_cg error3_en_bit_cg[1];
        sha3_reg__error_intr_en_t_fld_cg fld_cg;
        rand uvm_reg_field error0_en;
        rand uvm_reg_field error1_en;
        rand uvm_reg_field error2_en;
        rand uvm_reg_field error3_en;

        function new(string name = "sha3_reg__error_intr_en_t");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.error0_en = new("error0_en");
            this.error0_en.configure(this, 1, 0, "RW", 0, 'h0, 1, 1, 0);
            this.error1_en = new("error1_en");
            this.error1_en.configure(this, 1, 1, "RW", 0, 'h0, 1, 1, 0);
            this.error2_en = new("error2_en");
            this.error2_en.configure(this, 1, 2, "RW", 0, 'h0, 1, 1, 0);
            this.error3_en = new("error3_en");
            this.error3_en.configure(this, 1, 3, "RW", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(error0_en_bit_cg[bt]) error0_en_bit_cg[bt] = new();
                foreach(error1_en_bit_cg[bt]) error1_en_bit_cg[bt] = new();
                foreach(error2_en_bit_cg[bt]) error2_en_bit_cg[bt] = new();
                foreach(error3_en_bit_cg[bt]) error3_en_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : sha3_reg__error_intr_en_t

    // Reg - sha3_reg::notif_intr_en_t
    class sha3_reg__notif_intr_en_t extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        sha3_reg__notif_intr_en_t_bit_cg notif_cmd_done_en_bit_cg[1];
        sha3_reg__notif_intr_en_t_bit_cg notif_msg_fifo_empty_en_bit_cg[1];
        sha3_reg__notif_intr_en_t_fld_cg fld_cg;
        rand uvm_reg_field notif_cmd_done_en;
        rand uvm_reg_field notif_msg_fifo_empty_en;

        function new(string name = "sha3_reg__notif_intr_en_t");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.notif_cmd_done_en = new("notif_cmd_done_en");
            this.notif_cmd_done_en.configure(this, 1, 0, "RW", 0, 'h0, 1, 1, 0);
            this.notif_msg_fifo_empty_en = new("notif_msg_fifo_empty_en");
            this.notif_msg_fifo_empty_en.configure(this, 1, 1, "RW", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(notif_cmd_done_en_bit_cg[bt]) notif_cmd_done_en_bit_cg[bt] = new();
                foreach(notif_msg_fifo_empty_en_bit_cg[bt]) notif_msg_fifo_empty_en_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : sha3_reg__notif_intr_en_t

    // Reg - sha3_reg::global_intr_t_agg_sts_dd3dcf0a
    class sha3_reg__global_intr_t_agg_sts_dd3dcf0a extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        sha3_reg__global_intr_t_agg_sts_dd3dcf0a_bit_cg agg_sts_bit_cg[1];
        sha3_reg__global_intr_t_agg_sts_dd3dcf0a_fld_cg fld_cg;
        rand uvm_reg_field agg_sts;

        function new(string name = "sha3_reg__global_intr_t_agg_sts_dd3dcf0a");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.agg_sts = new("agg_sts");
            this.agg_sts.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(agg_sts_bit_cg[bt]) agg_sts_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : sha3_reg__global_intr_t_agg_sts_dd3dcf0a

    // Reg - sha3_reg::global_intr_t_agg_sts_e6399b4a
    class sha3_reg__global_intr_t_agg_sts_e6399b4a extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        sha3_reg__global_intr_t_agg_sts_e6399b4a_bit_cg agg_sts_bit_cg[1];
        sha3_reg__global_intr_t_agg_sts_e6399b4a_fld_cg fld_cg;
        rand uvm_reg_field agg_sts;

        function new(string name = "sha3_reg__global_intr_t_agg_sts_e6399b4a");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.agg_sts = new("agg_sts");
            this.agg_sts.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(agg_sts_bit_cg[bt]) agg_sts_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : sha3_reg__global_intr_t_agg_sts_e6399b4a

    // Reg - sha3_reg::error_intr_t_error0_sts_28545624_error1_sts_40e0d3e1_error2_sts_b1cf2205_error3_sts_74a35378
    class sha3_reg__error_intr_t_error0_sts_28545624_error1_sts_40e0d3e1_error2_sts_b1cf2205_error3_sts_74a35378 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        sha3_reg__error_intr_t_error0_sts_28545624_error1_sts_40e0d3e1_error2_sts_b1cf2205_error3_sts_74a35378_bit_cg error0_sts_bit_cg[1];
        sha3_reg__error_intr_t_error0_sts_28545624_error1_sts_40e0d3e1_error2_sts_b1cf2205_error3_sts_74a35378_bit_cg error1_sts_bit_cg[1];
        sha3_reg__error_intr_t_error0_sts_28545624_error1_sts_40e0d3e1_error2_sts_b1cf2205_error3_sts_74a35378_bit_cg error2_sts_bit_cg[1];
        sha3_reg__error_intr_t_error0_sts_28545624_error1_sts_40e0d3e1_error2_sts_b1cf2205_error3_sts_74a35378_bit_cg error3_sts_bit_cg[1];
        sha3_reg__error_intr_t_error0_sts_28545624_error1_sts_40e0d3e1_error2_sts_b1cf2205_error3_sts_74a35378_fld_cg fld_cg;
        rand uvm_reg_field error0_sts;
        rand uvm_reg_field error1_sts;
        rand uvm_reg_field error2_sts;
        rand uvm_reg_field error3_sts;

        function new(string name = "sha3_reg__error_intr_t_error0_sts_28545624_error1_sts_40e0d3e1_error2_sts_b1cf2205_error3_sts_74a35378");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.error0_sts = new("error0_sts");
            this.error0_sts.configure(this, 1, 0, "W1C", 1, 'h0, 1, 1, 0);
            this.error1_sts = new("error1_sts");
            this.error1_sts.configure(this, 1, 1, "W1C", 1, 'h0, 1, 1, 0);
            this.error2_sts = new("error2_sts");
            this.error2_sts.configure(this, 1, 2, "W1C", 1, 'h0, 1, 1, 0);
            this.error3_sts = new("error3_sts");
            this.error3_sts.configure(this, 1, 3, "W1C", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(error0_sts_bit_cg[bt]) error0_sts_bit_cg[bt] = new();
                foreach(error1_sts_bit_cg[bt]) error1_sts_bit_cg[bt] = new();
                foreach(error2_sts_bit_cg[bt]) error2_sts_bit_cg[bt] = new();
                foreach(error3_sts_bit_cg[bt]) error3_sts_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : sha3_reg__error_intr_t_error0_sts_28545624_error1_sts_40e0d3e1_error2_sts_b1cf2205_error3_sts_74a35378

    // Reg - sha3_reg::notif_intr_t_notif_cmd_done_sts_1c68637e_notif_msg_fifo_empty_sts_df694e73
    class sha3_reg__notif_intr_t_notif_cmd_done_sts_1c68637e_notif_msg_fifo_empty_sts_df694e73 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        sha3_reg__notif_intr_t_notif_cmd_done_sts_1c68637e_notif_msg_fifo_empty_sts_df694e73_bit_cg notif_cmd_done_sts_bit_cg[1];
        sha3_reg__notif_intr_t_notif_cmd_done_sts_1c68637e_notif_msg_fifo_empty_sts_df694e73_bit_cg notif_msg_fifo_empty_sts_bit_cg[1];
        sha3_reg__notif_intr_t_notif_cmd_done_sts_1c68637e_notif_msg_fifo_empty_sts_df694e73_fld_cg fld_cg;
        rand uvm_reg_field notif_cmd_done_sts;
        rand uvm_reg_field notif_msg_fifo_empty_sts;

        function new(string name = "sha3_reg__notif_intr_t_notif_cmd_done_sts_1c68637e_notif_msg_fifo_empty_sts_df694e73");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.notif_cmd_done_sts = new("notif_cmd_done_sts");
            this.notif_cmd_done_sts.configure(this, 1, 0, "W1C", 1, 'h0, 1, 1, 0);
            this.notif_msg_fifo_empty_sts = new("notif_msg_fifo_empty_sts");
            this.notif_msg_fifo_empty_sts.configure(this, 1, 1, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(notif_cmd_done_sts_bit_cg[bt]) notif_cmd_done_sts_bit_cg[bt] = new();
                foreach(notif_msg_fifo_empty_sts_bit_cg[bt]) notif_msg_fifo_empty_sts_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : sha3_reg__notif_intr_t_notif_cmd_done_sts_1c68637e_notif_msg_fifo_empty_sts_df694e73

    // Reg - sha3_reg::error_intr_trig_t
    class sha3_reg__error_intr_trig_t extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        sha3_reg__error_intr_trig_t_bit_cg error0_trig_bit_cg[1];
        sha3_reg__error_intr_trig_t_bit_cg error1_trig_bit_cg[1];
        sha3_reg__error_intr_trig_t_bit_cg error2_trig_bit_cg[1];
        sha3_reg__error_intr_trig_t_bit_cg error3_trig_bit_cg[1];
        sha3_reg__error_intr_trig_t_fld_cg fld_cg;
        rand uvm_reg_field error0_trig;
        rand uvm_reg_field error1_trig;
        rand uvm_reg_field error2_trig;
        rand uvm_reg_field error3_trig;

        function new(string name = "sha3_reg__error_intr_trig_t");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.error0_trig = new("error0_trig");
            this.error0_trig.configure(this, 1, 0, "W1S", 0, 'h0, 1, 1, 0);
            this.error1_trig = new("error1_trig");
            this.error1_trig.configure(this, 1, 1, "W1S", 0, 'h0, 1, 1, 0);
            this.error2_trig = new("error2_trig");
            this.error2_trig.configure(this, 1, 2, "W1S", 0, 'h0, 1, 1, 0);
            this.error3_trig = new("error3_trig");
            this.error3_trig.configure(this, 1, 3, "W1S", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(error0_trig_bit_cg[bt]) error0_trig_bit_cg[bt] = new();
                foreach(error1_trig_bit_cg[bt]) error1_trig_bit_cg[bt] = new();
                foreach(error2_trig_bit_cg[bt]) error2_trig_bit_cg[bt] = new();
                foreach(error3_trig_bit_cg[bt]) error3_trig_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : sha3_reg__error_intr_trig_t

    // Reg - sha3_reg::notif_intr_trig_t
    class sha3_reg__notif_intr_trig_t extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        sha3_reg__notif_intr_trig_t_bit_cg notif_cmd_done_trig_bit_cg[1];
        sha3_reg__notif_intr_trig_t_bit_cg notif_msg_fifo_empty_trig_bit_cg[1];
        sha3_reg__notif_intr_trig_t_fld_cg fld_cg;
        rand uvm_reg_field notif_cmd_done_trig;
        rand uvm_reg_field notif_msg_fifo_empty_trig;

        function new(string name = "sha3_reg__notif_intr_trig_t");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.notif_cmd_done_trig = new("notif_cmd_done_trig");
            this.notif_cmd_done_trig.configure(this, 1, 0, "W1S", 0, 'h0, 1, 1, 0);
            this.notif_msg_fifo_empty_trig = new("notif_msg_fifo_empty_trig");
            this.notif_msg_fifo_empty_trig.configure(this, 1, 1, "W1S", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(notif_cmd_done_trig_bit_cg[bt]) notif_cmd_done_trig_bit_cg[bt] = new();
                foreach(notif_msg_fifo_empty_trig_bit_cg[bt]) notif_msg_fifo_empty_trig_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : sha3_reg__notif_intr_trig_t

    // Reg - sha3_reg::intr_count_t_cnt_35ace267
    class sha3_reg__intr_count_t_cnt_35ace267 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        sha3_reg__intr_count_t_cnt_35ace267_bit_cg cnt_bit_cg[32];
        sha3_reg__intr_count_t_cnt_35ace267_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "sha3_reg__intr_count_t_cnt_35ace267");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : sha3_reg__intr_count_t_cnt_35ace267

    // Reg - sha3_reg::intr_count_t_cnt_73c42c28
    class sha3_reg__intr_count_t_cnt_73c42c28 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        sha3_reg__intr_count_t_cnt_73c42c28_bit_cg cnt_bit_cg[32];
        sha3_reg__intr_count_t_cnt_73c42c28_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "sha3_reg__intr_count_t_cnt_73c42c28");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : sha3_reg__intr_count_t_cnt_73c42c28

    // Reg - sha3_reg::intr_count_t_cnt_d8af96ff
    class sha3_reg__intr_count_t_cnt_d8af96ff extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        sha3_reg__intr_count_t_cnt_d8af96ff_bit_cg cnt_bit_cg[32];
        sha3_reg__intr_count_t_cnt_d8af96ff_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "sha3_reg__intr_count_t_cnt_d8af96ff");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : sha3_reg__intr_count_t_cnt_d8af96ff

    // Reg - sha3_reg::intr_count_t_cnt_9bd7f809
    class sha3_reg__intr_count_t_cnt_9bd7f809 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        sha3_reg__intr_count_t_cnt_9bd7f809_bit_cg cnt_bit_cg[32];
        sha3_reg__intr_count_t_cnt_9bd7f809_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "sha3_reg__intr_count_t_cnt_9bd7f809");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : sha3_reg__intr_count_t_cnt_9bd7f809

    // Reg - sha3_reg::intr_count_t_cnt_be67d6d5
    class sha3_reg__intr_count_t_cnt_be67d6d5 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        sha3_reg__intr_count_t_cnt_be67d6d5_bit_cg cnt_bit_cg[32];
        sha3_reg__intr_count_t_cnt_be67d6d5_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "sha3_reg__intr_count_t_cnt_be67d6d5");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : sha3_reg__intr_count_t_cnt_be67d6d5

    // Reg - sha3_reg::intr_count_incr_t_pulse_37026c97
    class sha3_reg__intr_count_incr_t_pulse_37026c97 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        sha3_reg__intr_count_incr_t_pulse_37026c97_bit_cg pulse_bit_cg[1];
        sha3_reg__intr_count_incr_t_pulse_37026c97_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "sha3_reg__intr_count_incr_t_pulse_37026c97");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : sha3_reg__intr_count_incr_t_pulse_37026c97

    // Reg - sha3_reg::intr_count_incr_t_pulse_d860d977
    class sha3_reg__intr_count_incr_t_pulse_d860d977 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        sha3_reg__intr_count_incr_t_pulse_d860d977_bit_cg pulse_bit_cg[1];
        sha3_reg__intr_count_incr_t_pulse_d860d977_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "sha3_reg__intr_count_incr_t_pulse_d860d977");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : sha3_reg__intr_count_incr_t_pulse_d860d977

    // Reg - sha3_reg::intr_count_incr_t_pulse_87b45fe7
    class sha3_reg__intr_count_incr_t_pulse_87b45fe7 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        sha3_reg__intr_count_incr_t_pulse_87b45fe7_bit_cg pulse_bit_cg[1];
        sha3_reg__intr_count_incr_t_pulse_87b45fe7_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "sha3_reg__intr_count_incr_t_pulse_87b45fe7");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : sha3_reg__intr_count_incr_t_pulse_87b45fe7

    // Reg - sha3_reg::intr_count_incr_t_pulse_c1689ee6
    class sha3_reg__intr_count_incr_t_pulse_c1689ee6 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        sha3_reg__intr_count_incr_t_pulse_c1689ee6_bit_cg pulse_bit_cg[1];
        sha3_reg__intr_count_incr_t_pulse_c1689ee6_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "sha3_reg__intr_count_incr_t_pulse_c1689ee6");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : sha3_reg__intr_count_incr_t_pulse_c1689ee6

    // Reg - sha3_reg::intr_count_incr_t_pulse_6173128e
    class sha3_reg__intr_count_incr_t_pulse_6173128e extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        sha3_reg__intr_count_incr_t_pulse_6173128e_bit_cg pulse_bit_cg[1];
        sha3_reg__intr_count_incr_t_pulse_6173128e_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "sha3_reg__intr_count_incr_t_pulse_6173128e");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : sha3_reg__intr_count_incr_t_pulse_6173128e

    // Regfile - sha3_reg::intr_block_t
    class sha3_reg__intr_block_t extends uvm_reg_block;
        rand sha3_reg__global_intr_en_t global_intr_en_r;
        rand sha3_reg__error_intr_en_t error_intr_en_r;
        rand sha3_reg__notif_intr_en_t notif_intr_en_r;
        rand sha3_reg__global_intr_t_agg_sts_dd3dcf0a error_global_intr_r;
        rand sha3_reg__global_intr_t_agg_sts_e6399b4a notif_global_intr_r;
        rand sha3_reg__error_intr_t_error0_sts_28545624_error1_sts_40e0d3e1_error2_sts_b1cf2205_error3_sts_74a35378 error_internal_intr_r;
        rand sha3_reg__notif_intr_t_notif_cmd_done_sts_1c68637e_notif_msg_fifo_empty_sts_df694e73 notif_internal_intr_r;
        rand sha3_reg__error_intr_trig_t error_intr_trig_r;
        rand sha3_reg__notif_intr_trig_t notif_intr_trig_r;
        rand sha3_reg__intr_count_t_cnt_35ace267 error0_intr_count_r;
        rand sha3_reg__intr_count_t_cnt_73c42c28 error1_intr_count_r;
        rand sha3_reg__intr_count_t_cnt_d8af96ff error2_intr_count_r;
        rand sha3_reg__intr_count_t_cnt_9bd7f809 error3_intr_count_r;
        rand sha3_reg__intr_count_t_cnt_be67d6d5 notif_cmd_done_intr_count_r;
        rand sha3_reg__intr_count_incr_t_pulse_37026c97 error0_intr_count_incr_r;
        rand sha3_reg__intr_count_incr_t_pulse_d860d977 error1_intr_count_incr_r;
        rand sha3_reg__intr_count_incr_t_pulse_87b45fe7 error2_intr_count_incr_r;
        rand sha3_reg__intr_count_incr_t_pulse_c1689ee6 error3_intr_count_incr_r;
        rand sha3_reg__intr_count_incr_t_pulse_6173128e notif_cmd_done_intr_count_incr_r;

        function new(string name = "sha3_reg__intr_block_t");
            super.new(name);
        endfunction : new

        virtual function void build();
            this.default_map = create_map("reg_map", 0, 4, UVM_NO_ENDIAN);
            this.global_intr_en_r = new("global_intr_en_r");
            this.global_intr_en_r.configure(this);

            this.global_intr_en_r.build();
            this.default_map.add_reg(this.global_intr_en_r, 'h0);
            this.error_intr_en_r = new("error_intr_en_r");
            this.error_intr_en_r.configure(this);

            this.error_intr_en_r.build();
            this.default_map.add_reg(this.error_intr_en_r, 'h4);
            this.notif_intr_en_r = new("notif_intr_en_r");
            this.notif_intr_en_r.configure(this);

            this.notif_intr_en_r.build();
            this.default_map.add_reg(this.notif_intr_en_r, 'h8);
            this.error_global_intr_r = new("error_global_intr_r");
            this.error_global_intr_r.configure(this);

            this.error_global_intr_r.build();
            this.default_map.add_reg(this.error_global_intr_r, 'hc);
            this.notif_global_intr_r = new("notif_global_intr_r");
            this.notif_global_intr_r.configure(this);

            this.notif_global_intr_r.build();
            this.default_map.add_reg(this.notif_global_intr_r, 'h10);
            this.error_internal_intr_r = new("error_internal_intr_r");
            this.error_internal_intr_r.configure(this);

            this.error_internal_intr_r.build();
            this.default_map.add_reg(this.error_internal_intr_r, 'h14);
            this.notif_internal_intr_r = new("notif_internal_intr_r");
            this.notif_internal_intr_r.configure(this);

            this.notif_internal_intr_r.build();
            this.default_map.add_reg(this.notif_internal_intr_r, 'h18);
            this.error_intr_trig_r = new("error_intr_trig_r");
            this.error_intr_trig_r.configure(this);

            this.error_intr_trig_r.build();
            this.default_map.add_reg(this.error_intr_trig_r, 'h1c);
            this.notif_intr_trig_r = new("notif_intr_trig_r");
            this.notif_intr_trig_r.configure(this);

            this.notif_intr_trig_r.build();
            this.default_map.add_reg(this.notif_intr_trig_r, 'h20);
            this.error0_intr_count_r = new("error0_intr_count_r");
            this.error0_intr_count_r.configure(this);

            this.error0_intr_count_r.build();
            this.default_map.add_reg(this.error0_intr_count_r, 'h100);
            this.error1_intr_count_r = new("error1_intr_count_r");
            this.error1_intr_count_r.configure(this);

            this.error1_intr_count_r.build();
            this.default_map.add_reg(this.error1_intr_count_r, 'h104);
            this.error2_intr_count_r = new("error2_intr_count_r");
            this.error2_intr_count_r.configure(this);

            this.error2_intr_count_r.build();
            this.default_map.add_reg(this.error2_intr_count_r, 'h108);
            this.error3_intr_count_r = new("error3_intr_count_r");
            this.error3_intr_count_r.configure(this);

            this.error3_intr_count_r.build();
            this.default_map.add_reg(this.error3_intr_count_r, 'h10c);
            this.notif_cmd_done_intr_count_r = new("notif_cmd_done_intr_count_r");
            this.notif_cmd_done_intr_count_r.configure(this);

            this.notif_cmd_done_intr_count_r.build();
            this.default_map.add_reg(this.notif_cmd_done_intr_count_r, 'h180);
            this.error0_intr_count_incr_r = new("error0_intr_count_incr_r");
            this.error0_intr_count_incr_r.configure(this);

            this.error0_intr_count_incr_r.build();
            this.default_map.add_reg(this.error0_intr_count_incr_r, 'h200);
            this.error1_intr_count_incr_r = new("error1_intr_count_incr_r");
            this.error1_intr_count_incr_r.configure(this);

            this.error1_intr_count_incr_r.build();
            this.default_map.add_reg(this.error1_intr_count_incr_r, 'h204);
            this.error2_intr_count_incr_r = new("error2_intr_count_incr_r");
            this.error2_intr_count_incr_r.configure(this);

            this.error2_intr_count_incr_r.build();
            this.default_map.add_reg(this.error2_intr_count_incr_r, 'h208);
            this.error3_intr_count_incr_r = new("error3_intr_count_incr_r");
            this.error3_intr_count_incr_r.configure(this);

            this.error3_intr_count_incr_r.build();
            this.default_map.add_reg(this.error3_intr_count_incr_r, 'h20c);
            this.notif_cmd_done_intr_count_incr_r = new("notif_cmd_done_intr_count_incr_r");
            this.notif_cmd_done_intr_count_incr_r.configure(this);

            this.notif_cmd_done_intr_count_incr_r.build();
            this.default_map.add_reg(this.notif_cmd_done_intr_count_incr_r, 'h210);
        endfunction : build
    endclass : sha3_reg__intr_block_t

    // Mem - sha3_reg::MSG_FIFO
    class sha3_reg__MSG_FIFO extends uvm_reg_block;
        rand uvm_mem m_mem;
        
        function new(string name = "sha3_reg__MSG_FIFO");
            super.new(name);
        endfunction : new

        virtual function void build();
            this.default_map = create_map("reg_map", 0, 4.0, UVM_NO_ENDIAN);
            this.m_mem = new("m_mem", 64, 32, "RW");
            this.m_mem.configure(this);
            this.default_map.add_mem(this.m_mem, 0);
        endfunction : build
    endclass : sha3_reg__MSG_FIFO

    // Addrmap - sha3_reg
    class sha3_reg extends uvm_reg_block;
        rand sha3_reg__SHA3_NAME SHA3_NAME[2];
        rand sha3_reg__SHA3_VERSION SHA3_VERSION[2];
        rand sha3_reg__ALERT_TEST ALERT_TEST;
        rand sha3_reg__CFG_REGWEN CFG_REGWEN;
        rand sha3_reg__CFG_SHADOWED CFG_SHADOWED;
        rand sha3_reg__CMD CMD;
        rand sha3_reg__STATUS STATUS;
        rand sha3_reg__ERR_CODE ERR_CODE;
        rand sha3_reg__STATE STATE;
        rand sha3_reg__intr_block_t intr_block_rf;
        rand sha3_reg__MSG_FIFO MSG_FIFO;

        function new(string name = "sha3_reg");
            super.new(name);
        endfunction : new

        virtual function void build();
            this.default_map = create_map("reg_map", 0, 4, UVM_NO_ENDIAN);
            foreach(this.SHA3_NAME[i0]) begin
                this.SHA3_NAME[i0] = new($sformatf("SHA3_NAME[%0d]", i0));
                this.SHA3_NAME[i0].configure(this);
                
                this.SHA3_NAME[i0].build();
                this.default_map.add_reg(this.SHA3_NAME[i0], 'h0 + i0*'h4);
            end
            foreach(this.SHA3_VERSION[i0]) begin
                this.SHA3_VERSION[i0] = new($sformatf("SHA3_VERSION[%0d]", i0));
                this.SHA3_VERSION[i0].configure(this);
                
                this.SHA3_VERSION[i0].build();
                this.default_map.add_reg(this.SHA3_VERSION[i0], 'h8 + i0*'h4);
            end
            this.ALERT_TEST = new("ALERT_TEST");
            this.ALERT_TEST.configure(this);

            this.ALERT_TEST.build();
            this.default_map.add_reg(this.ALERT_TEST, 'h1c);
            this.CFG_REGWEN = new("CFG_REGWEN");
            this.CFG_REGWEN.configure(this);

            this.CFG_REGWEN.build();
            this.default_map.add_reg(this.CFG_REGWEN, 'h20);
            this.CFG_SHADOWED = new("CFG_SHADOWED");
            this.CFG_SHADOWED.configure(this);

            this.CFG_SHADOWED.build();
            this.default_map.add_reg(this.CFG_SHADOWED, 'h24);
            this.CMD = new("CMD");
            this.CMD.configure(this);

            this.CMD.build();
            this.default_map.add_reg(this.CMD, 'h28);
            this.STATUS = new("STATUS");
            this.STATUS.configure(this);

            this.STATUS.build();
            this.default_map.add_reg(this.STATUS, 'h2c);
            this.ERR_CODE = new("ERR_CODE");
            this.ERR_CODE.configure(this);

            this.ERR_CODE.build();
            this.default_map.add_reg(this.ERR_CODE, 'hd0);
            this.STATE = new("STATE");
            this.STATE.configure(this);
            this.STATE.build();
            this.default_map.add_submap(this.STATE.default_map, 'h200);
            this.intr_block_rf = new("intr_block_rf");
            this.intr_block_rf.configure(this);
            this.intr_block_rf.build();
            this.default_map.add_submap(this.intr_block_rf.default_map, 'h400);
            this.MSG_FIFO = new("MSG_FIFO");
            this.MSG_FIFO.configure(this);
            this.MSG_FIFO.build();
            this.default_map.add_submap(this.MSG_FIFO.default_map, 'hc00);
        endfunction : build
    endclass : sha3_reg

    `include "sha3_reg_sample.svh"
endpackage: sha3_reg_uvm
