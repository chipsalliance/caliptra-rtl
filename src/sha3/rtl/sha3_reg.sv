// Generated by PeakRDL-regblock - A free and open-source SystemVerilog generator
//  https://github.com/SystemRDL/PeakRDL-regblock

module sha3_reg (
        input wire clk,
        input wire rst,

        input wire s_cpuif_req,
        input wire s_cpuif_req_is_wr,
        input wire [11:0] s_cpuif_addr,
        input wire [31:0] s_cpuif_wr_data,
        input wire [31:0] s_cpuif_wr_biten,
        output wire s_cpuif_req_stall_wr,
        output wire s_cpuif_req_stall_rd,
        output wire s_cpuif_rd_ack,
        output wire s_cpuif_rd_err,
        output wire [31:0] s_cpuif_rd_data,
        output wire s_cpuif_wr_ack,
        output wire s_cpuif_wr_err,

        input sha3_reg_pkg::sha3_reg__in_t hwif_in,
        output sha3_reg_pkg::sha3_reg__out_t hwif_out
    );

    //--------------------------------------------------------------------------
    // CPU Bus interface logic
    //--------------------------------------------------------------------------
    logic cpuif_req;
    logic cpuif_req_is_wr;
    logic [11:0] cpuif_addr;
    logic [31:0] cpuif_wr_data;
    logic [31:0] cpuif_wr_biten;
    logic cpuif_req_stall_wr;
    logic cpuif_req_stall_rd;

    logic cpuif_rd_ack;
    logic cpuif_rd_err;
    logic [31:0] cpuif_rd_data;

    logic cpuif_wr_ack;
    logic cpuif_wr_err;

    assign cpuif_req = s_cpuif_req;
    assign cpuif_req_is_wr = s_cpuif_req_is_wr;
    assign cpuif_addr = s_cpuif_addr;
    assign cpuif_wr_data = s_cpuif_wr_data;
    assign cpuif_wr_biten = s_cpuif_wr_biten;
    assign s_cpuif_req_stall_wr = cpuif_req_stall_wr;
    assign s_cpuif_req_stall_rd = cpuif_req_stall_rd;
    assign s_cpuif_rd_ack = cpuif_rd_ack;
    assign s_cpuif_rd_err = cpuif_rd_err;
    assign s_cpuif_rd_data = cpuif_rd_data;
    assign s_cpuif_wr_ack = cpuif_wr_ack;
    assign s_cpuif_wr_err = cpuif_wr_err;

    logic cpuif_req_masked;
    logic external_req;
    logic external_pending;
    logic external_wr_ack;
    logic external_rd_ack;
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            external_pending <= '0;
        end else begin
            if(external_req & ~external_wr_ack & ~external_rd_ack) external_pending <= '1;
            else if(external_wr_ack | external_rd_ack) external_pending <= '0;
            assert(!external_wr_ack || (external_pending | external_req))
                else $error("An external wr_ack strobe was asserted when no external request was active");
            assert(!external_rd_ack || (external_pending | external_req))
                else $error("An external rd_ack strobe was asserted when no external request was active");
        end
    end

    // Read & write latencies are balanced. Stalls not required
    // except if external
    assign cpuif_req_stall_rd = external_pending;
    assign cpuif_req_stall_wr = external_pending;
    assign cpuif_req_masked = cpuif_req
                            & !(!cpuif_req_is_wr & cpuif_req_stall_rd)
                            & !(cpuif_req_is_wr & cpuif_req_stall_wr);

    //--------------------------------------------------------------------------
    // Address Decode
    //--------------------------------------------------------------------------
    typedef struct packed{
        logic [2-1:0]SHA3_NAME;
        logic [2-1:0]SHA3_VERSION;
        logic ALERT_TEST;
        logic CFG_REGWEN;
        logic CFG_SHADOWED;
        logic CMD;
        logic STATUS;
        logic ERR_CODE;
        logic STATE;
        struct packed{
            logic global_intr_en_r;
            logic error_intr_en_r;
            logic notif_intr_en_r;
            logic error_global_intr_r;
            logic notif_global_intr_r;
            logic error_internal_intr_r;
            logic notif_internal_intr_r;
            logic error_intr_trig_r;
            logic notif_intr_trig_r;
            logic error0_intr_count_r;
            logic error1_intr_count_r;
            logic error2_intr_count_r;
            logic error3_intr_count_r;
            logic notif_cmd_done_intr_count_r;
            logic error0_intr_count_incr_r;
            logic error1_intr_count_incr_r;
            logic error2_intr_count_incr_r;
            logic error3_intr_count_incr_r;
            logic notif_cmd_done_intr_count_incr_r;
        } intr_block_rf;
        logic MSG_FIFO;
    } decoded_reg_strb_t;
    decoded_reg_strb_t decoded_reg_strb;
    logic decoded_strb_is_external;

    logic [11:0] decoded_addr;

    logic decoded_req;
    logic decoded_req_is_wr;
    logic [31:0] decoded_wr_data;
    logic [31:0] decoded_wr_biten;

    always_comb begin
        automatic logic is_external;
        is_external = '0;
        for(int i0=0; i0<2; i0++) begin
            decoded_reg_strb.SHA3_NAME[i0] = cpuif_req_masked & (cpuif_addr == 12'h0 + i0*12'h4);
        end
        for(int i0=0; i0<2; i0++) begin
            decoded_reg_strb.SHA3_VERSION[i0] = cpuif_req_masked & (cpuif_addr == 12'h8 + i0*12'h4);
        end
        decoded_reg_strb.ALERT_TEST = cpuif_req_masked & (cpuif_addr == 12'h1c);
        decoded_reg_strb.CFG_REGWEN = cpuif_req_masked & (cpuif_addr == 12'h20);
        decoded_reg_strb.CFG_SHADOWED = cpuif_req_masked & (cpuif_addr == 12'h24);
        is_external |= cpuif_req_masked & (cpuif_addr == 12'h24);
        decoded_reg_strb.CMD = cpuif_req_masked & (cpuif_addr == 12'h28);
        decoded_reg_strb.STATUS = cpuif_req_masked & (cpuif_addr == 12'h2c);
        decoded_reg_strb.ERR_CODE = cpuif_req_masked & (cpuif_addr == 12'hd0);
        decoded_reg_strb.STATE = cpuif_req_masked & (cpuif_addr >= 12'h200) & (cpuif_addr <= 12'h200 + 12'hff);
        is_external |= cpuif_req_masked & (cpuif_addr >= 12'h200) & (cpuif_addr <= 12'h200 + 12'hff);
        decoded_reg_strb.intr_block_rf.global_intr_en_r = cpuif_req_masked & (cpuif_addr == 12'h400);
        decoded_reg_strb.intr_block_rf.error_intr_en_r = cpuif_req_masked & (cpuif_addr == 12'h404);
        decoded_reg_strb.intr_block_rf.notif_intr_en_r = cpuif_req_masked & (cpuif_addr == 12'h408);
        decoded_reg_strb.intr_block_rf.error_global_intr_r = cpuif_req_masked & (cpuif_addr == 12'h40c);
        decoded_reg_strb.intr_block_rf.notif_global_intr_r = cpuif_req_masked & (cpuif_addr == 12'h410);
        decoded_reg_strb.intr_block_rf.error_internal_intr_r = cpuif_req_masked & (cpuif_addr == 12'h414);
        decoded_reg_strb.intr_block_rf.notif_internal_intr_r = cpuif_req_masked & (cpuif_addr == 12'h418);
        decoded_reg_strb.intr_block_rf.error_intr_trig_r = cpuif_req_masked & (cpuif_addr == 12'h41c);
        decoded_reg_strb.intr_block_rf.notif_intr_trig_r = cpuif_req_masked & (cpuif_addr == 12'h420);
        decoded_reg_strb.intr_block_rf.error0_intr_count_r = cpuif_req_masked & (cpuif_addr == 12'h500);
        decoded_reg_strb.intr_block_rf.error1_intr_count_r = cpuif_req_masked & (cpuif_addr == 12'h504);
        decoded_reg_strb.intr_block_rf.error2_intr_count_r = cpuif_req_masked & (cpuif_addr == 12'h508);
        decoded_reg_strb.intr_block_rf.error3_intr_count_r = cpuif_req_masked & (cpuif_addr == 12'h50c);
        decoded_reg_strb.intr_block_rf.notif_cmd_done_intr_count_r = cpuif_req_masked & (cpuif_addr == 12'h580);
        decoded_reg_strb.intr_block_rf.error0_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 12'h600);
        decoded_reg_strb.intr_block_rf.error1_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 12'h604);
        decoded_reg_strb.intr_block_rf.error2_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 12'h608);
        decoded_reg_strb.intr_block_rf.error3_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 12'h60c);
        decoded_reg_strb.intr_block_rf.notif_cmd_done_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 12'h610);
        decoded_reg_strb.MSG_FIFO = cpuif_req_masked & (cpuif_addr >= 12'hc00) & (cpuif_addr <= 12'hc00 + 12'hff);
        is_external |= cpuif_req_masked & (cpuif_addr >= 12'hc00) & (cpuif_addr <= 12'hc00 + 12'hff);
        decoded_strb_is_external = is_external;
        external_req = is_external;
    end

    // Pass down signals to next stage
    assign decoded_addr = cpuif_addr;

    assign decoded_req = cpuif_req_masked;
    assign decoded_req_is_wr = cpuif_req_is_wr;
    assign decoded_wr_data = cpuif_wr_data;
    assign decoded_wr_biten = cpuif_wr_biten;

    //--------------------------------------------------------------------------
    // Field logic
    //--------------------------------------------------------------------------
    typedef struct packed{
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } en;
        } CFG_REGWEN;
        struct packed{
            struct packed{
                logic [5:0] next;
                logic load_next;
            } cmd;
            struct packed{
                logic next;
                logic load_next;
            } err_processed;
        } CMD;
        struct packed{
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } error_en;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_en;
            } global_intr_en_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } error0_en;
                struct packed{
                    logic next;
                    logic load_next;
                } error1_en;
                struct packed{
                    logic next;
                    logic load_next;
                } error2_en;
                struct packed{
                    logic next;
                    logic load_next;
                } error3_en;
            } error_intr_en_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } notif_cmd_done_en;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_msg_fifo_empty_en;
            } notif_intr_en_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } agg_sts;
            } error_global_intr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } agg_sts;
            } notif_global_intr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } error0_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } error1_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } error2_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } error3_sts;
            } error_internal_intr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } notif_cmd_done_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_msg_fifo_empty_sts;
            } notif_internal_intr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } error0_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } error1_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } error2_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } error3_trig;
            } error_intr_trig_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } notif_cmd_done_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_msg_fifo_empty_trig;
            } notif_intr_trig_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error0_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error1_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error2_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error3_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } notif_cmd_done_intr_count_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error0_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error1_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error2_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error3_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } notif_cmd_done_intr_count_incr_r;
        } intr_block_rf;
    } field_combo_t;
    field_combo_t field_combo;

    typedef struct packed{
        struct packed{
            struct packed{
                logic value;
            } en;
        } CFG_REGWEN;
        struct packed{
            struct packed{
                logic [5:0] value;
            } cmd;
            struct packed{
                logic value;
            } err_processed;
        } CMD;
        struct packed{
            struct packed{
                struct packed{
                    logic value;
                } error_en;
                struct packed{
                    logic value;
                } notif_en;
            } global_intr_en_r;
            struct packed{
                struct packed{
                    logic value;
                } error0_en;
                struct packed{
                    logic value;
                } error1_en;
                struct packed{
                    logic value;
                } error2_en;
                struct packed{
                    logic value;
                } error3_en;
            } error_intr_en_r;
            struct packed{
                struct packed{
                    logic value;
                } notif_cmd_done_en;
                struct packed{
                    logic value;
                } notif_msg_fifo_empty_en;
            } notif_intr_en_r;
            struct packed{
                struct packed{
                    logic value;
                } agg_sts;
            } error_global_intr_r;
            struct packed{
                struct packed{
                    logic value;
                } agg_sts;
            } notif_global_intr_r;
            struct packed{
                struct packed{
                    logic value;
                } error0_sts;
                struct packed{
                    logic value;
                } error1_sts;
                struct packed{
                    logic value;
                } error2_sts;
                struct packed{
                    logic value;
                } error3_sts;
            } error_internal_intr_r;
            struct packed{
                struct packed{
                    logic value;
                } notif_cmd_done_sts;
                struct packed{
                    logic value;
                } notif_msg_fifo_empty_sts;
            } notif_internal_intr_r;
            struct packed{
                struct packed{
                    logic value;
                } error0_trig;
                struct packed{
                    logic value;
                } error1_trig;
                struct packed{
                    logic value;
                } error2_trig;
                struct packed{
                    logic value;
                } error3_trig;
            } error_intr_trig_r;
            struct packed{
                struct packed{
                    logic value;
                } notif_cmd_done_trig;
                struct packed{
                    logic value;
                } notif_msg_fifo_empty_trig;
            } notif_intr_trig_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error0_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error1_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error2_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error3_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } notif_cmd_done_intr_count_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error0_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error1_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error2_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error3_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } notif_cmd_done_intr_count_incr_r;
        } intr_block_rf;
    } field_storage_t;
    field_storage_t field_storage;

    // Field: sha3_reg.CFG_REGWEN.en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.CFG_REGWEN.en.value;
        load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.CFG_REGWEN.en.next;
        load_next_c = '1;
        field_combo.CFG_REGWEN.en.next = next_c;
        field_combo.CFG_REGWEN.en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.CFG_REGWEN.en.value <= 1'h1;
        end else if(field_combo.CFG_REGWEN.en.load_next) begin
            field_storage.CFG_REGWEN.en.value <= field_combo.CFG_REGWEN.en.next;
        end
    end
    assign hwif_out.CFG_REGWEN.en.value = field_storage.CFG_REGWEN.en.value;

    assign hwif_out.CFG_SHADOWED.req = decoded_reg_strb.CFG_SHADOWED;
    assign hwif_out.CFG_SHADOWED.req_is_wr = decoded_req_is_wr;
    assign hwif_out.CFG_SHADOWED.wr_data = decoded_wr_data;
    assign hwif_out.CFG_SHADOWED.wr_biten = decoded_wr_biten;
    // Field: sha3_reg.CMD.cmd
    always_comb begin
        automatic logic [5:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.CMD.cmd.value;
        load_next_c = '0;
        if(decoded_reg_strb.CMD && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.CMD.cmd.value & ~(decoded_wr_data[5:0] & decoded_wr_biten[5:0]);
            load_next_c = '1;
        end
        field_combo.CMD.cmd.next = next_c;
        field_combo.CMD.cmd.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.CMD.cmd.value <= 6'h0;
        end else if(field_combo.CMD.cmd.load_next) begin
            field_storage.CMD.cmd.value <= field_combo.CMD.cmd.next;
        end
    end
    assign hwif_out.CMD.cmd.value = field_storage.CMD.cmd.value;
    // Field: sha3_reg.CMD.err_processed
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.CMD.err_processed.value;
        load_next_c = '0;
        if(decoded_reg_strb.CMD && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.CMD.err_processed.value & ~(decoded_wr_data[10:10] & decoded_wr_biten[10:10]);
            load_next_c = '1;
        end
        field_combo.CMD.err_processed.next = next_c;
        field_combo.CMD.err_processed.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.CMD.err_processed.value <= 1'h0;
        end else if(field_combo.CMD.err_processed.load_next) begin
            field_storage.CMD.err_processed.value <= field_combo.CMD.err_processed.next;
        end
    end
    assign hwif_out.CMD.err_processed.value = field_storage.CMD.err_processed.value;
    assign hwif_out.STATE.req = decoded_reg_strb.STATE;
    assign hwif_out.STATE.addr = decoded_addr[8:0];
    assign hwif_out.STATE.req_is_wr = decoded_req_is_wr;
    assign hwif_out.STATE.wr_data = decoded_wr_data;
    assign hwif_out.STATE.wr_biten = decoded_wr_biten;
    // Field: sha3_reg.intr_block_rf.global_intr_en_r.error_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.global_intr_en_r.error_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.global_intr_en_r && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.intr_block_rf.global_intr_en_r.error_en.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.global_intr_en_r.error_en.next = next_c;
        field_combo.intr_block_rf.global_intr_en_r.error_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.global_intr_en_r.error_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.global_intr_en_r.error_en.load_next) begin
            field_storage.intr_block_rf.global_intr_en_r.error_en.value <= field_combo.intr_block_rf.global_intr_en_r.error_en.next;
        end
    end
    // Field: sha3_reg.intr_block_rf.global_intr_en_r.notif_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.global_intr_en_r.notif_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.global_intr_en_r && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.intr_block_rf.global_intr_en_r.notif_en.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.global_intr_en_r.notif_en.next = next_c;
        field_combo.intr_block_rf.global_intr_en_r.notif_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.global_intr_en_r.notif_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.global_intr_en_r.notif_en.load_next) begin
            field_storage.intr_block_rf.global_intr_en_r.notif_en.value <= field_combo.intr_block_rf.global_intr_en_r.notif_en.next;
        end
    end
    // Field: sha3_reg.intr_block_rf.error_intr_en_r.error0_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_intr_en_r.error0_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_en_r && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.intr_block_rf.error_intr_en_r.error0_en.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_en_r.error0_en.next = next_c;
        field_combo.intr_block_rf.error_intr_en_r.error0_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error_intr_en_r.error0_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_intr_en_r.error0_en.load_next) begin
            field_storage.intr_block_rf.error_intr_en_r.error0_en.value <= field_combo.intr_block_rf.error_intr_en_r.error0_en.next;
        end
    end
    // Field: sha3_reg.intr_block_rf.error_intr_en_r.error1_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_intr_en_r.error1_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_en_r && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.intr_block_rf.error_intr_en_r.error1_en.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_en_r.error1_en.next = next_c;
        field_combo.intr_block_rf.error_intr_en_r.error1_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error_intr_en_r.error1_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_intr_en_r.error1_en.load_next) begin
            field_storage.intr_block_rf.error_intr_en_r.error1_en.value <= field_combo.intr_block_rf.error_intr_en_r.error1_en.next;
        end
    end
    // Field: sha3_reg.intr_block_rf.error_intr_en_r.error2_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_intr_en_r.error2_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_en_r && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.intr_block_rf.error_intr_en_r.error2_en.value & ~decoded_wr_biten[2:2]) | (decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_en_r.error2_en.next = next_c;
        field_combo.intr_block_rf.error_intr_en_r.error2_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error_intr_en_r.error2_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_intr_en_r.error2_en.load_next) begin
            field_storage.intr_block_rf.error_intr_en_r.error2_en.value <= field_combo.intr_block_rf.error_intr_en_r.error2_en.next;
        end
    end
    // Field: sha3_reg.intr_block_rf.error_intr_en_r.error3_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_intr_en_r.error3_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_en_r && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.intr_block_rf.error_intr_en_r.error3_en.value & ~decoded_wr_biten[3:3]) | (decoded_wr_data[3:3] & decoded_wr_biten[3:3]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_en_r.error3_en.next = next_c;
        field_combo.intr_block_rf.error_intr_en_r.error3_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error_intr_en_r.error3_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_intr_en_r.error3_en.load_next) begin
            field_storage.intr_block_rf.error_intr_en_r.error3_en.value <= field_combo.intr_block_rf.error_intr_en_r.error3_en.next;
        end
    end
    // Field: sha3_reg.intr_block_rf.notif_intr_en_r.notif_cmd_done_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_intr_en_r.notif_cmd_done_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_intr_en_r && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.intr_block_rf.notif_intr_en_r.notif_cmd_done_en.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_intr_en_r.notif_cmd_done_en.next = next_c;
        field_combo.intr_block_rf.notif_intr_en_r.notif_cmd_done_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.notif_intr_en_r.notif_cmd_done_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_intr_en_r.notif_cmd_done_en.load_next) begin
            field_storage.intr_block_rf.notif_intr_en_r.notif_cmd_done_en.value <= field_combo.intr_block_rf.notif_intr_en_r.notif_cmd_done_en.next;
        end
    end
    // Field: sha3_reg.intr_block_rf.notif_intr_en_r.notif_msg_fifo_empty_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_intr_en_r.notif_msg_fifo_empty_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_intr_en_r && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.intr_block_rf.notif_intr_en_r.notif_msg_fifo_empty_en.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_intr_en_r.notif_msg_fifo_empty_en.next = next_c;
        field_combo.intr_block_rf.notif_intr_en_r.notif_msg_fifo_empty_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.notif_intr_en_r.notif_msg_fifo_empty_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_intr_en_r.notif_msg_fifo_empty_en.load_next) begin
            field_storage.intr_block_rf.notif_intr_en_r.notif_msg_fifo_empty_en.value <= field_combo.intr_block_rf.notif_intr_en_r.notif_msg_fifo_empty_en.next;
        end
    end
    // Field: sha3_reg.intr_block_rf.error_global_intr_r.agg_sts
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_global_intr_r.agg_sts.value;
        load_next_c = '0;
        
        // HW Write
        next_c = hwif_out.intr_block_rf.error_internal_intr_r.intr;
        load_next_c = '1;
        field_combo.intr_block_rf.error_global_intr_r.agg_sts.next = next_c;
        field_combo.intr_block_rf.error_global_intr_r.agg_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error_global_intr_r.agg_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_global_intr_r.agg_sts.load_next) begin
            field_storage.intr_block_rf.error_global_intr_r.agg_sts.value <= field_combo.intr_block_rf.error_global_intr_r.agg_sts.next;
        end
    end
    assign hwif_out.intr_block_rf.error_global_intr_r.intr =
        |(field_storage.intr_block_rf.error_global_intr_r.agg_sts.value & field_storage.intr_block_rf.global_intr_en_r.error_en.value);
    // Field: sha3_reg.intr_block_rf.notif_global_intr_r.agg_sts
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_global_intr_r.agg_sts.value;
        load_next_c = '0;
        
        // HW Write
        next_c = hwif_out.intr_block_rf.notif_internal_intr_r.intr;
        load_next_c = '1;
        field_combo.intr_block_rf.notif_global_intr_r.agg_sts.next = next_c;
        field_combo.intr_block_rf.notif_global_intr_r.agg_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.notif_global_intr_r.agg_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_global_intr_r.agg_sts.load_next) begin
            field_storage.intr_block_rf.notif_global_intr_r.agg_sts.value <= field_combo.intr_block_rf.notif_global_intr_r.agg_sts.next;
        end
    end
    assign hwif_out.intr_block_rf.notif_global_intr_r.intr =
        |(field_storage.intr_block_rf.notif_global_intr_r.agg_sts.value & field_storage.intr_block_rf.global_intr_en_r.notif_en.value);
    // Field: sha3_reg.intr_block_rf.error_internal_intr_r.error0_sts
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_internal_intr_r.error0_sts.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error0_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error0_sts.value | field_storage.intr_block_rf.error_intr_trig_r.error0_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error0_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error_internal_intr_r && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error0_sts.value & ~(decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_internal_intr_r.error0_sts.next = next_c;
        field_combo.intr_block_rf.error_internal_intr_r.error0_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.error_reset_b) begin
        if(~hwif_in.error_reset_b) begin
            field_storage.intr_block_rf.error_internal_intr_r.error0_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_internal_intr_r.error0_sts.load_next) begin
            field_storage.intr_block_rf.error_internal_intr_r.error0_sts.value <= field_combo.intr_block_rf.error_internal_intr_r.error0_sts.next;
        end
    end
    // Field: sha3_reg.intr_block_rf.error_internal_intr_r.error1_sts
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_internal_intr_r.error1_sts.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error1_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error1_sts.value | field_storage.intr_block_rf.error_intr_trig_r.error1_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error1_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error_internal_intr_r && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error1_sts.value & ~(decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_internal_intr_r.error1_sts.next = next_c;
        field_combo.intr_block_rf.error_internal_intr_r.error1_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.error_reset_b) begin
        if(~hwif_in.error_reset_b) begin
            field_storage.intr_block_rf.error_internal_intr_r.error1_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_internal_intr_r.error1_sts.load_next) begin
            field_storage.intr_block_rf.error_internal_intr_r.error1_sts.value <= field_combo.intr_block_rf.error_internal_intr_r.error1_sts.next;
        end
    end
    // Field: sha3_reg.intr_block_rf.error_internal_intr_r.error2_sts
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_internal_intr_r.error2_sts.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error2_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error2_sts.value | field_storage.intr_block_rf.error_intr_trig_r.error2_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error2_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error_internal_intr_r && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error2_sts.value & ~(decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_internal_intr_r.error2_sts.next = next_c;
        field_combo.intr_block_rf.error_internal_intr_r.error2_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.error_reset_b) begin
        if(~hwif_in.error_reset_b) begin
            field_storage.intr_block_rf.error_internal_intr_r.error2_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_internal_intr_r.error2_sts.load_next) begin
            field_storage.intr_block_rf.error_internal_intr_r.error2_sts.value <= field_combo.intr_block_rf.error_internal_intr_r.error2_sts.next;
        end
    end
    // Field: sha3_reg.intr_block_rf.error_internal_intr_r.error3_sts
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_internal_intr_r.error3_sts.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error3_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error3_sts.value | field_storage.intr_block_rf.error_intr_trig_r.error3_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error3_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error_internal_intr_r && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error3_sts.value & ~(decoded_wr_data[3:3] & decoded_wr_biten[3:3]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_internal_intr_r.error3_sts.next = next_c;
        field_combo.intr_block_rf.error_internal_intr_r.error3_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.error_reset_b) begin
        if(~hwif_in.error_reset_b) begin
            field_storage.intr_block_rf.error_internal_intr_r.error3_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_internal_intr_r.error3_sts.load_next) begin
            field_storage.intr_block_rf.error_internal_intr_r.error3_sts.value <= field_combo.intr_block_rf.error_internal_intr_r.error3_sts.next;
        end
    end
    assign hwif_out.intr_block_rf.error_internal_intr_r.intr =
        |(field_storage.intr_block_rf.error_internal_intr_r.error0_sts.value & field_storage.intr_block_rf.error_intr_en_r.error0_en.value)
        || |(field_storage.intr_block_rf.error_internal_intr_r.error1_sts.value & field_storage.intr_block_rf.error_intr_en_r.error1_en.value)
        || |(field_storage.intr_block_rf.error_internal_intr_r.error2_sts.value & field_storage.intr_block_rf.error_intr_en_r.error2_en.value)
        || |(field_storage.intr_block_rf.error_internal_intr_r.error3_sts.value & field_storage.intr_block_rf.error_intr_en_r.error3_en.value);
    // Field: sha3_reg.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.value | field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.notif_internal_intr_r && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.value & ~(decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.next = next_c;
        field_combo.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.load_next) begin
            field_storage.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.value <= field_combo.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.next;
        end
    end
    // Field: sha3_reg.intr_block_rf.notif_internal_intr_r.notif_msg_fifo_empty_sts
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif_msg_fifo_empty_sts.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.notif_intr_trig_r.notif_msg_fifo_empty_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif_msg_fifo_empty_sts.value | field_storage.intr_block_rf.notif_intr_trig_r.notif_msg_fifo_empty_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif_internal_intr_r.notif_msg_fifo_empty_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_internal_intr_r.notif_msg_fifo_empty_sts.next = next_c;
        field_combo.intr_block_rf.notif_internal_intr_r.notif_msg_fifo_empty_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.notif_internal_intr_r.notif_msg_fifo_empty_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_internal_intr_r.notif_msg_fifo_empty_sts.load_next) begin
            field_storage.intr_block_rf.notif_internal_intr_r.notif_msg_fifo_empty_sts.value <= field_combo.intr_block_rf.notif_internal_intr_r.notif_msg_fifo_empty_sts.next;
        end
    end
    assign hwif_out.intr_block_rf.notif_internal_intr_r.intr =
        |(field_storage.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.value & field_storage.intr_block_rf.notif_intr_en_r.notif_cmd_done_en.value)
        || |(field_storage.intr_block_rf.notif_internal_intr_r.notif_msg_fifo_empty_sts.value & field_storage.intr_block_rf.notif_intr_en_r.notif_msg_fifo_empty_en.value);
    // Field: sha3_reg.intr_block_rf.error_intr_trig_r.error0_trig
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_intr_trig_r.error0_trig.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_trig_r && decoded_req_is_wr) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error0_trig.value | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_trig_r.error0_trig.next = next_c;
        field_combo.intr_block_rf.error_intr_trig_r.error0_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error_intr_trig_r.error0_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_intr_trig_r.error0_trig.load_next) begin
            field_storage.intr_block_rf.error_intr_trig_r.error0_trig.value <= field_combo.intr_block_rf.error_intr_trig_r.error0_trig.next;
        end
    end
    // Field: sha3_reg.intr_block_rf.error_intr_trig_r.error1_trig
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_intr_trig_r.error1_trig.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_trig_r && decoded_req_is_wr) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error1_trig.value | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_trig_r.error1_trig.next = next_c;
        field_combo.intr_block_rf.error_intr_trig_r.error1_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error_intr_trig_r.error1_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_intr_trig_r.error1_trig.load_next) begin
            field_storage.intr_block_rf.error_intr_trig_r.error1_trig.value <= field_combo.intr_block_rf.error_intr_trig_r.error1_trig.next;
        end
    end
    // Field: sha3_reg.intr_block_rf.error_intr_trig_r.error2_trig
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_intr_trig_r.error2_trig.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_trig_r && decoded_req_is_wr) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error2_trig.value | (decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_trig_r.error2_trig.next = next_c;
        field_combo.intr_block_rf.error_intr_trig_r.error2_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error_intr_trig_r.error2_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_intr_trig_r.error2_trig.load_next) begin
            field_storage.intr_block_rf.error_intr_trig_r.error2_trig.value <= field_combo.intr_block_rf.error_intr_trig_r.error2_trig.next;
        end
    end
    // Field: sha3_reg.intr_block_rf.error_intr_trig_r.error3_trig
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_intr_trig_r.error3_trig.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_trig_r && decoded_req_is_wr) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error3_trig.value | (decoded_wr_data[3:3] & decoded_wr_biten[3:3]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_trig_r.error3_trig.next = next_c;
        field_combo.intr_block_rf.error_intr_trig_r.error3_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error_intr_trig_r.error3_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_intr_trig_r.error3_trig.load_next) begin
            field_storage.intr_block_rf.error_intr_trig_r.error3_trig.value <= field_combo.intr_block_rf.error_intr_trig_r.error3_trig.next;
        end
    end
    // Field: sha3_reg.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_intr_trig_r && decoded_req_is_wr) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.value | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.next = next_c;
        field_combo.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.load_next) begin
            field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.value <= field_combo.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.next;
        end
    end
    // Field: sha3_reg.intr_block_rf.notif_intr_trig_r.notif_msg_fifo_empty_trig
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif_msg_fifo_empty_trig.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_intr_trig_r && decoded_req_is_wr) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif_msg_fifo_empty_trig.value | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_intr_trig_r.notif_msg_fifo_empty_trig.next = next_c;
        field_combo.intr_block_rf.notif_intr_trig_r.notif_msg_fifo_empty_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.notif_intr_trig_r.notif_msg_fifo_empty_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_intr_trig_r.notif_msg_fifo_empty_trig.load_next) begin
            field_storage.intr_block_rf.notif_intr_trig_r.notif_msg_fifo_empty_trig.value <= field_combo.intr_block_rf.notif_intr_trig_r.notif_msg_fifo_empty_trig.next;
        end
    end
    // Field: sha3_reg.intr_block_rf.error0_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error0_intr_count_r.cnt.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error0_intr_count_r && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.intr_block_rf.error0_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error0_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error0_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error0_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.error0_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error0_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error0_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error0_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.error_reset_b) begin
        if(~hwif_in.error_reset_b) begin
            field_storage.intr_block_rf.error0_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.error0_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error0_intr_count_r.cnt.value <= field_combo.intr_block_rf.error0_intr_count_r.cnt.next;
        end
    end
    // Field: sha3_reg.intr_block_rf.error1_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error1_intr_count_r.cnt.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_count_r && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.intr_block_rf.error1_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error1_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error1_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.error1_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error1_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error1_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.error_reset_b) begin
        if(~hwif_in.error_reset_b) begin
            field_storage.intr_block_rf.error1_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.error1_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error1_intr_count_r.cnt.value <= field_combo.intr_block_rf.error1_intr_count_r.cnt.next;
        end
    end
    // Field: sha3_reg.intr_block_rf.error2_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error2_intr_count_r.cnt.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error2_intr_count_r && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.intr_block_rf.error2_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error2_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error2_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error2_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.error2_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error2_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error2_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error2_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.error_reset_b) begin
        if(~hwif_in.error_reset_b) begin
            field_storage.intr_block_rf.error2_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.error2_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error2_intr_count_r.cnt.value <= field_combo.intr_block_rf.error2_intr_count_r.cnt.next;
        end
    end
    // Field: sha3_reg.intr_block_rf.error3_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error3_intr_count_r.cnt.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error3_intr_count_r && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.intr_block_rf.error3_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error3_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error3_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error3_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.error3_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error3_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error3_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error3_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.error_reset_b) begin
        if(~hwif_in.error_reset_b) begin
            field_storage.intr_block_rf.error3_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.error3_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error3_intr_count_r.cnt.value <= field_combo.intr_block_rf.error3_intr_count_r.cnt.next;
        end
    end
    // Field: sha3_reg.intr_block_rf.notif_cmd_done_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_cmd_done_intr_count_r.cnt.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_cmd_done_intr_count_r && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.intr_block_rf.notif_cmd_done_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_cmd_done_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.notif_cmd_done_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.notif_cmd_done_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.notif_cmd_done_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_cmd_done_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.notif_cmd_done_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.notif_cmd_done_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.notif_cmd_done_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.notif_cmd_done_intr_count_r.cnt.value <= field_combo.intr_block_rf.notif_cmd_done_intr_count_r.cnt.next;
        end
    end
    // Field: sha3_reg.intr_block_rf.error0_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error0_intr_count_incr_r.pulse.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error0_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error0_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error0_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error0_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error0_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error0_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error0_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error0_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.error0_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error0_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error0_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error0_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error0_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error0_intr_count_incr_r.pulse.next;
        end
    end
    // Field: sha3_reg.intr_block_rf.error1_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error1_intr_count_incr_r.pulse.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error1_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error1_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error1_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error1_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error1_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error1_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error1_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error1_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.error1_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error1_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error1_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error1_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error1_intr_count_incr_r.pulse.next;
        end
    end
    // Field: sha3_reg.intr_block_rf.error2_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error2_intr_count_incr_r.pulse.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error2_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error2_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error2_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error2_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error2_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error2_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error2_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error2_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.error2_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error2_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error2_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error2_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error2_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error2_intr_count_incr_r.pulse.next;
        end
    end
    // Field: sha3_reg.intr_block_rf.error3_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error3_intr_count_incr_r.pulse.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error3_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error3_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error3_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error3_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error3_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error3_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error3_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error3_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.error3_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error3_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error3_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error3_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error3_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error3_intr_count_incr_r.pulse.next;
        end
    end
    // Field: sha3_reg.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.next;
        end
    end
    assign hwif_out.MSG_FIFO.req = decoded_reg_strb.MSG_FIFO;
    assign hwif_out.MSG_FIFO.addr = decoded_addr[8:0];
    assign hwif_out.MSG_FIFO.req_is_wr = decoded_req_is_wr;
    assign hwif_out.MSG_FIFO.wr_data = decoded_wr_data;
    assign hwif_out.MSG_FIFO.wr_biten = decoded_wr_biten;

    //--------------------------------------------------------------------------
    // Write response
    //--------------------------------------------------------------------------
    always_comb begin
        automatic logic wr_ack;
        wr_ack = '0;
        wr_ack |= hwif_in.CFG_SHADOWED.wr_ack;
        wr_ack |= hwif_in.STATE.wr_ack;
        wr_ack |= hwif_in.MSG_FIFO.wr_ack;
        external_wr_ack = wr_ack;
    end
    assign cpuif_wr_ack = external_wr_ack | (decoded_req & decoded_req_is_wr & ~decoded_strb_is_external);
    // Writes are always granted with no error response
    assign cpuif_wr_err = '0;

    //--------------------------------------------------------------------------
    // Readback
    //--------------------------------------------------------------------------
    logic readback_external_rd_ack_c;
    always_comb begin
        automatic logic rd_ack;
        rd_ack = '0;
        rd_ack |= hwif_in.CFG_SHADOWED.rd_ack;
        rd_ack |= hwif_in.STATE.rd_ack;
        rd_ack |= hwif_in.MSG_FIFO.rd_ack;
        readback_external_rd_ack_c = rd_ack;
    end

    logic readback_external_rd_ack;

    assign readback_external_rd_ack = readback_external_rd_ack_c;

    logic readback_err;
    logic readback_done;
    logic [31:0] readback_data;

    // Assign readback values to a flattened array
    logic [30-1:0][31:0] readback_array;
    for(genvar i0=0; i0<2; i0++) begin
        assign readback_array[i0*1 + 0][31:0] = (decoded_reg_strb.SHA3_NAME[i0] && !decoded_req_is_wr) ? hwif_in.SHA3_NAME[i0].NAME.next : '0;
    end
    for(genvar i0=0; i0<2; i0++) begin
        assign readback_array[i0*1 + 2][31:0] = (decoded_reg_strb.SHA3_VERSION[i0] && !decoded_req_is_wr) ? hwif_in.SHA3_VERSION[i0].VERSION.next : '0;
    end
    assign readback_array[4][0:0] = (decoded_reg_strb.CFG_REGWEN && !decoded_req_is_wr) ? field_storage.CFG_REGWEN.en.value : '0;
    assign readback_array[4][31:1] = '0;
    assign readback_array[5] = hwif_in.CFG_SHADOWED.rd_ack ? hwif_in.CFG_SHADOWED.rd_data : '0;
    assign readback_array[6][5:0] = (decoded_reg_strb.CMD && !decoded_req_is_wr) ? field_storage.CMD.cmd.value : '0;
    assign readback_array[6][9:6] = '0;
    assign readback_array[6][10:10] = (decoded_reg_strb.CMD && !decoded_req_is_wr) ? field_storage.CMD.err_processed.value : '0;
    assign readback_array[6][31:11] = '0;
    assign readback_array[7][0:0] = (decoded_reg_strb.STATUS && !decoded_req_is_wr) ? hwif_in.STATUS.sha3_idle.next : '0;
    assign readback_array[7][1:1] = (decoded_reg_strb.STATUS && !decoded_req_is_wr) ? hwif_in.STATUS.sha3_absorb.next : '0;
    assign readback_array[7][2:2] = (decoded_reg_strb.STATUS && !decoded_req_is_wr) ? hwif_in.STATUS.sha3_squeeze.next : '0;
    assign readback_array[7][7:3] = '0;
    assign readback_array[7][12:8] = (decoded_reg_strb.STATUS && !decoded_req_is_wr) ? hwif_in.STATUS.fifo_depth.next : '0;
    assign readback_array[7][13:13] = '0;
    assign readback_array[7][14:14] = (decoded_reg_strb.STATUS && !decoded_req_is_wr) ? hwif_in.STATUS.fifo_empty.next : '0;
    assign readback_array[7][15:15] = (decoded_reg_strb.STATUS && !decoded_req_is_wr) ? hwif_in.STATUS.fifo_full.next : '0;
    assign readback_array[7][16:16] = (decoded_reg_strb.STATUS && !decoded_req_is_wr) ? hwif_in.STATUS.ALERT_FATAL_FAULT.next : '0;
    assign readback_array[7][17:17] = (decoded_reg_strb.STATUS && !decoded_req_is_wr) ? hwif_in.STATUS.ALERT_RECOV_CTRL_UPDATE_ERR.next : '0;
    assign readback_array[7][31:18] = '0;
    assign readback_array[8][31:0] = (decoded_reg_strb.ERR_CODE && !decoded_req_is_wr) ? hwif_in.ERR_CODE.ERR_CODE.next : '0;
    assign readback_array[9] = hwif_in.STATE.rd_ack ? hwif_in.STATE.rd_data : '0;
    assign readback_array[10][0:0] = (decoded_reg_strb.intr_block_rf.global_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.global_intr_en_r.error_en.value : '0;
    assign readback_array[10][1:1] = (decoded_reg_strb.intr_block_rf.global_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.global_intr_en_r.notif_en.value : '0;
    assign readback_array[10][31:2] = '0;
    assign readback_array[11][0:0] = (decoded_reg_strb.intr_block_rf.error_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_en_r.error0_en.value : '0;
    assign readback_array[11][1:1] = (decoded_reg_strb.intr_block_rf.error_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_en_r.error1_en.value : '0;
    assign readback_array[11][2:2] = (decoded_reg_strb.intr_block_rf.error_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_en_r.error2_en.value : '0;
    assign readback_array[11][3:3] = (decoded_reg_strb.intr_block_rf.error_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_en_r.error3_en.value : '0;
    assign readback_array[11][31:4] = '0;
    assign readback_array[12][0:0] = (decoded_reg_strb.intr_block_rf.notif_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_intr_en_r.notif_cmd_done_en.value : '0;
    assign readback_array[12][1:1] = (decoded_reg_strb.intr_block_rf.notif_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_intr_en_r.notif_msg_fifo_empty_en.value : '0;
    assign readback_array[12][31:2] = '0;
    assign readback_array[13][0:0] = (decoded_reg_strb.intr_block_rf.error_global_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_global_intr_r.agg_sts.value : '0;
    assign readback_array[13][31:1] = '0;
    assign readback_array[14][0:0] = (decoded_reg_strb.intr_block_rf.notif_global_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_global_intr_r.agg_sts.value : '0;
    assign readback_array[14][31:1] = '0;
    assign readback_array[15][0:0] = (decoded_reg_strb.intr_block_rf.error_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_internal_intr_r.error0_sts.value : '0;
    assign readback_array[15][1:1] = (decoded_reg_strb.intr_block_rf.error_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_internal_intr_r.error1_sts.value : '0;
    assign readback_array[15][2:2] = (decoded_reg_strb.intr_block_rf.error_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_internal_intr_r.error2_sts.value : '0;
    assign readback_array[15][3:3] = (decoded_reg_strb.intr_block_rf.error_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_internal_intr_r.error3_sts.value : '0;
    assign readback_array[15][31:4] = '0;
    assign readback_array[16][0:0] = (decoded_reg_strb.intr_block_rf.notif_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.value : '0;
    assign readback_array[16][1:1] = (decoded_reg_strb.intr_block_rf.notif_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_internal_intr_r.notif_msg_fifo_empty_sts.value : '0;
    assign readback_array[16][31:2] = '0;
    assign readback_array[17][0:0] = (decoded_reg_strb.intr_block_rf.error_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_trig_r.error0_trig.value : '0;
    assign readback_array[17][1:1] = (decoded_reg_strb.intr_block_rf.error_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_trig_r.error1_trig.value : '0;
    assign readback_array[17][2:2] = (decoded_reg_strb.intr_block_rf.error_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_trig_r.error2_trig.value : '0;
    assign readback_array[17][3:3] = (decoded_reg_strb.intr_block_rf.error_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_trig_r.error3_trig.value : '0;
    assign readback_array[17][31:4] = '0;
    assign readback_array[18][0:0] = (decoded_reg_strb.intr_block_rf.notif_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.value : '0;
    assign readback_array[18][1:1] = (decoded_reg_strb.intr_block_rf.notif_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_intr_trig_r.notif_msg_fifo_empty_trig.value : '0;
    assign readback_array[18][31:2] = '0;
    assign readback_array[19][31:0] = (decoded_reg_strb.intr_block_rf.error0_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error0_intr_count_r.cnt.value : '0;
    assign readback_array[20][31:0] = (decoded_reg_strb.intr_block_rf.error1_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_count_r.cnt.value : '0;
    assign readback_array[21][31:0] = (decoded_reg_strb.intr_block_rf.error2_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error2_intr_count_r.cnt.value : '0;
    assign readback_array[22][31:0] = (decoded_reg_strb.intr_block_rf.error3_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error3_intr_count_r.cnt.value : '0;
    assign readback_array[23][31:0] = (decoded_reg_strb.intr_block_rf.notif_cmd_done_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_cmd_done_intr_count_r.cnt.value : '0;
    assign readback_array[24][0:0] = (decoded_reg_strb.intr_block_rf.error0_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error0_intr_count_incr_r.pulse.value : '0;
    assign readback_array[24][31:1] = '0;
    assign readback_array[25][0:0] = (decoded_reg_strb.intr_block_rf.error1_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_count_incr_r.pulse.value : '0;
    assign readback_array[25][31:1] = '0;
    assign readback_array[26][0:0] = (decoded_reg_strb.intr_block_rf.error2_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error2_intr_count_incr_r.pulse.value : '0;
    assign readback_array[26][31:1] = '0;
    assign readback_array[27][0:0] = (decoded_reg_strb.intr_block_rf.error3_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error3_intr_count_incr_r.pulse.value : '0;
    assign readback_array[27][31:1] = '0;
    assign readback_array[28][0:0] = (decoded_reg_strb.intr_block_rf.notif_cmd_done_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.value : '0;
    assign readback_array[28][31:1] = '0;
    assign readback_array[29] = hwif_in.MSG_FIFO.rd_ack ? hwif_in.MSG_FIFO.rd_data : '0;

    // Reduce the array
    always_comb begin
        automatic logic [31:0] readback_data_var;
        readback_done = decoded_req & ~decoded_req_is_wr & ~decoded_strb_is_external;
        readback_err = '0;
        readback_data_var = '0;
        for(int i=0; i<30; i++) readback_data_var |= readback_array[i];
        readback_data = readback_data_var;
    end

    assign external_rd_ack = readback_external_rd_ack;
    assign cpuif_rd_ack = readback_done | readback_external_rd_ack;
    assign cpuif_rd_data = readback_data;
    assign cpuif_rd_err = readback_err;

`CALIPTRA_ASSERT_KNOWN(ERR_HWIF_IN, hwif_in, clk, !hwif_in.error_reset_b)

endmodule
