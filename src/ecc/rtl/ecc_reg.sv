// Generated by PeakRDL-regblock - A free and open-source SystemVerilog generator
//  https://github.com/SystemRDL/PeakRDL-regblock

module ecc_reg (
        input wire clk,
        input wire rst,

        input wire s_cpuif_req,
        input wire s_cpuif_req_is_wr,
        input wire [11:0] s_cpuif_addr,
        input wire [31:0] s_cpuif_wr_data,
        output wire s_cpuif_req_stall_wr,
        output wire s_cpuif_req_stall_rd,
        output wire s_cpuif_rd_ack,
        output wire s_cpuif_rd_err,
        output wire [31:0] s_cpuif_rd_data,
        output wire s_cpuif_wr_ack,
        output wire s_cpuif_wr_err,

        input ecc_reg_pkg::ecc_reg__in_t hwif_in,
        output ecc_reg_pkg::ecc_reg__out_t hwif_out
    );

    //--------------------------------------------------------------------------
    // CPU Bus interface logic
    //--------------------------------------------------------------------------
    logic cpuif_req;
    logic cpuif_req_is_wr;
    logic [11:0] cpuif_addr;
    logic [31:0] cpuif_wr_data;
    logic cpuif_req_stall_wr;
    logic cpuif_req_stall_rd;

    logic cpuif_rd_ack;
    logic cpuif_rd_err;
    logic [31:0] cpuif_rd_data;

    logic cpuif_wr_ack;
    logic cpuif_wr_err;

    assign cpuif_req = s_cpuif_req;
    assign cpuif_req_is_wr = s_cpuif_req_is_wr;
    assign cpuif_addr = s_cpuif_addr;
    assign cpuif_wr_data = s_cpuif_wr_data;
    assign s_cpuif_req_stall_wr = cpuif_req_stall_wr;
    assign s_cpuif_req_stall_rd = cpuif_req_stall_rd;
    assign s_cpuif_rd_ack = cpuif_rd_ack;
    assign s_cpuif_rd_err = cpuif_rd_err;
    assign s_cpuif_rd_data = cpuif_rd_data;
    assign s_cpuif_wr_ack = cpuif_wr_ack;
    assign s_cpuif_wr_err = cpuif_wr_err;

    logic cpuif_req_masked;

    // Read & write latencies are balanced. Stalls not required
    assign cpuif_req_stall_rd = '0;
    assign cpuif_req_stall_wr = '0;
    assign cpuif_req_masked = cpuif_req;

    //--------------------------------------------------------------------------
    // Address Decode
    //--------------------------------------------------------------------------
    typedef struct {
        logic ecc_NAME[2];
        logic ecc_VERSION[2];
        logic ecc_CTRL;
        logic ecc_STATUS;
        logic ecc_SCACONFIG;
        logic ecc_SEED[12];
        logic ecc_MSG[12];
        logic ecc_PRIVKEY[12];
        logic ecc_PUBKEY_X[12];
        logic ecc_PUBKEY_Y[12];
        logic ecc_SIGN_R[12];
        logic ecc_SIGN_S[12];
        logic ecc_VERIFY_R[12];
        logic ecc_IV[12];
        struct {
            logic global_intr_en_r;
            logic error_intr_en_r;
            logic notif_intr_en_r;
            logic error_global_intr_r;
            logic notif_global_intr_r;
            logic error_internal_intr_r;
            logic notif_internal_intr_r;
            logic error_intr_trig_r;
            logic notif_intr_trig_r;
            logic error_internal_intr_count_r;
            logic notif_cmd_done_intr_count_r;
            logic error_internal_intr_count_incr_r;
            logic notif_cmd_done_intr_count_incr_r;
        } intr_block_rf;
    } decoded_reg_strb_t;
    decoded_reg_strb_t decoded_reg_strb;
    logic decoded_req;
    logic decoded_req_is_wr;
    logic [31:0] decoded_wr_data;

    always_comb begin
        for(int i0=0; i0<2; i0++) begin
            decoded_reg_strb.ecc_NAME[i0] = cpuif_req_masked & (cpuif_addr == 'h0 + i0*'h4);
        end
        for(int i0=0; i0<2; i0++) begin
            decoded_reg_strb.ecc_VERSION[i0] = cpuif_req_masked & (cpuif_addr == 'h8 + i0*'h4);
        end
        decoded_reg_strb.ecc_CTRL = cpuif_req_masked & (cpuif_addr == 'h10);
        decoded_reg_strb.ecc_STATUS = cpuif_req_masked & (cpuif_addr == 'h18);
        decoded_reg_strb.ecc_SCACONFIG = cpuif_req_masked & (cpuif_addr == 'h20);
        for(int i0=0; i0<12; i0++) begin
            decoded_reg_strb.ecc_SEED[i0] = cpuif_req_masked & (cpuif_addr == 'h80 + i0*'h4);
        end
        for(int i0=0; i0<12; i0++) begin
            decoded_reg_strb.ecc_MSG[i0] = cpuif_req_masked & (cpuif_addr == 'h100 + i0*'h4);
        end
        for(int i0=0; i0<12; i0++) begin
            decoded_reg_strb.ecc_PRIVKEY[i0] = cpuif_req_masked & (cpuif_addr == 'h180 + i0*'h4);
        end
        for(int i0=0; i0<12; i0++) begin
            decoded_reg_strb.ecc_PUBKEY_X[i0] = cpuif_req_masked & (cpuif_addr == 'h200 + i0*'h4);
        end
        for(int i0=0; i0<12; i0++) begin
            decoded_reg_strb.ecc_PUBKEY_Y[i0] = cpuif_req_masked & (cpuif_addr == 'h280 + i0*'h4);
        end
        for(int i0=0; i0<12; i0++) begin
            decoded_reg_strb.ecc_SIGN_R[i0] = cpuif_req_masked & (cpuif_addr == 'h300 + i0*'h4);
        end
        for(int i0=0; i0<12; i0++) begin
            decoded_reg_strb.ecc_SIGN_S[i0] = cpuif_req_masked & (cpuif_addr == 'h380 + i0*'h4);
        end
        for(int i0=0; i0<12; i0++) begin
            decoded_reg_strb.ecc_VERIFY_R[i0] = cpuif_req_masked & (cpuif_addr == 'h400 + i0*'h4);
        end
        for(int i0=0; i0<12; i0++) begin
            decoded_reg_strb.ecc_IV[i0] = cpuif_req_masked & (cpuif_addr == 'h480 + i0*'h4);
        end
        decoded_reg_strb.intr_block_rf.global_intr_en_r = cpuif_req_masked & (cpuif_addr == 'h800);
        decoded_reg_strb.intr_block_rf.error_intr_en_r = cpuif_req_masked & (cpuif_addr == 'h804);
        decoded_reg_strb.intr_block_rf.notif_intr_en_r = cpuif_req_masked & (cpuif_addr == 'h808);
        decoded_reg_strb.intr_block_rf.error_global_intr_r = cpuif_req_masked & (cpuif_addr == 'h80c);
        decoded_reg_strb.intr_block_rf.notif_global_intr_r = cpuif_req_masked & (cpuif_addr == 'h810);
        decoded_reg_strb.intr_block_rf.error_internal_intr_r = cpuif_req_masked & (cpuif_addr == 'h814);
        decoded_reg_strb.intr_block_rf.notif_internal_intr_r = cpuif_req_masked & (cpuif_addr == 'h818);
        decoded_reg_strb.intr_block_rf.error_intr_trig_r = cpuif_req_masked & (cpuif_addr == 'h81c);
        decoded_reg_strb.intr_block_rf.notif_intr_trig_r = cpuif_req_masked & (cpuif_addr == 'h820);
        decoded_reg_strb.intr_block_rf.error_internal_intr_count_r = cpuif_req_masked & (cpuif_addr == 'h900);
        decoded_reg_strb.intr_block_rf.notif_cmd_done_intr_count_r = cpuif_req_masked & (cpuif_addr == 'h980);
        decoded_reg_strb.intr_block_rf.error_internal_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 'ha00);
        decoded_reg_strb.intr_block_rf.notif_cmd_done_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 'ha04);
    end

    // Pass down signals to next stage
    assign decoded_req = cpuif_req_masked;
    assign decoded_req_is_wr = cpuif_req_is_wr;
    assign decoded_wr_data = cpuif_wr_data;

    // Writes are always granted with no error response
    assign cpuif_wr_ack = decoded_req & decoded_req_is_wr;
    assign cpuif_wr_err = '0;

    //--------------------------------------------------------------------------
    // Field logic
    //--------------------------------------------------------------------------
    typedef struct {
        struct {
            struct {
                logic [1:0] next;
                logic load_next;
            } CTRL;
        } ecc_CTRL;
        struct {
            struct {
                logic [3:0] next;
                logic load_next;
            } SCACONFIG;
        } ecc_SCACONFIG;
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } SEED;
        } ecc_SEED[12];
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } MSG;
        } ecc_MSG[12];
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } PRIVKEY;
        } ecc_PRIVKEY[12];
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } PUBKEY_X;
        } ecc_PUBKEY_X[12];
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } PUBKEY_Y;
        } ecc_PUBKEY_Y[12];
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } SIGN_R;
        } ecc_SIGN_R[12];
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } SIGN_S;
        } ecc_SIGN_S[12];
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } VERIFY_R;
        } ecc_VERIFY_R[12];
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } IV;
        } ecc_IV[12];
        struct {
            struct {
                struct {
                    logic next;
                    logic load_next;
                } error_en;
                struct {
                    logic next;
                    logic load_next;
                } notif_en;
            } global_intr_en_r;
            struct {
                struct {
                    logic next;
                    logic load_next;
                } error_internal_en;
            } error_intr_en_r;
            struct {
                struct {
                    logic next;
                    logic load_next;
                } notif_cmd_done_en;
            } notif_intr_en_r;
            struct {
                struct {
                    logic next;
                    logic load_next;
                } agg_sts;
            } error_global_intr_r;
            struct {
                struct {
                    logic next;
                    logic load_next;
                } agg_sts;
            } notif_global_intr_r;
            struct {
                struct {
                    logic next;
                    logic load_next;
                } error_internal_sts;
            } error_internal_intr_r;
            struct {
                struct {
                    logic next;
                    logic load_next;
                } notif_cmd_done_sts;
            } notif_internal_intr_r;
            struct {
                struct {
                    logic next;
                    logic load_next;
                } error_internal_trig;
            } error_intr_trig_r;
            struct {
                struct {
                    logic next;
                    logic load_next;
                } notif_cmd_done_trig;
            } notif_intr_trig_r;
            struct {
                struct {
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error_internal_intr_count_r;
            struct {
                struct {
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } notif_cmd_done_intr_count_r;
            struct {
                struct {
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error_internal_intr_count_incr_r;
            struct {
                struct {
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } notif_cmd_done_intr_count_incr_r;
        } intr_block_rf;
    } field_combo_t;
    field_combo_t field_combo;

    typedef struct {
        struct {
            struct {
                logic [1:0] value;
            } CTRL;
        } ecc_CTRL;
        struct {
            struct {
                logic [3:0] value;
            } SCACONFIG;
        } ecc_SCACONFIG;
        struct {
            struct {
                logic [31:0] value;
            } SEED;
        } ecc_SEED[12];
        struct {
            struct {
                logic [31:0] value;
            } MSG;
        } ecc_MSG[12];
        struct {
            struct {
                logic [31:0] value;
            } PRIVKEY;
        } ecc_PRIVKEY[12];
        struct {
            struct {
                logic [31:0] value;
            } PUBKEY_X;
        } ecc_PUBKEY_X[12];
        struct {
            struct {
                logic [31:0] value;
            } PUBKEY_Y;
        } ecc_PUBKEY_Y[12];
        struct {
            struct {
                logic [31:0] value;
            } SIGN_R;
        } ecc_SIGN_R[12];
        struct {
            struct {
                logic [31:0] value;
            } SIGN_S;
        } ecc_SIGN_S[12];
        struct {
            struct {
                logic [31:0] value;
            } VERIFY_R;
        } ecc_VERIFY_R[12];
        struct {
            struct {
                logic [31:0] value;
            } IV;
        } ecc_IV[12];
        struct {
            struct {
                struct {
                    logic value;
                } error_en;
                struct {
                    logic value;
                } notif_en;
            } global_intr_en_r;
            struct {
                struct {
                    logic value;
                } error_internal_en;
            } error_intr_en_r;
            struct {
                struct {
                    logic value;
                } notif_cmd_done_en;
            } notif_intr_en_r;
            struct {
                struct {
                    logic value;
                } agg_sts;
            } error_global_intr_r;
            struct {
                struct {
                    logic value;
                } agg_sts;
            } notif_global_intr_r;
            struct {
                struct {
                    logic value;
                } error_internal_sts;
            } error_internal_intr_r;
            struct {
                struct {
                    logic value;
                } notif_cmd_done_sts;
            } notif_internal_intr_r;
            struct {
                struct {
                    logic value;
                } error_internal_trig;
            } error_intr_trig_r;
            struct {
                struct {
                    logic value;
                } notif_cmd_done_trig;
            } notif_intr_trig_r;
            struct {
                struct {
                    logic [31:0] value;
                } cnt;
            } error_internal_intr_count_r;
            struct {
                struct {
                    logic [31:0] value;
                } cnt;
            } notif_cmd_done_intr_count_r;
            struct {
                struct {
                    logic value;
                } pulse;
            } error_internal_intr_count_incr_r;
            struct {
                struct {
                    logic value;
                } pulse;
            } notif_cmd_done_intr_count_incr_r;
        } intr_block_rf;
    } field_storage_t;
    field_storage_t field_storage;

    // Field: ecc_reg.ecc_CTRL.CTRL
    always_comb begin
        automatic logic [1:0] next_c = field_storage.ecc_CTRL.CTRL.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.ecc_CTRL && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[1:0];
            load_next_c = '1;
        end else if(1) begin // HW Write
            next_c = hwif_in.ecc_CTRL.CTRL.next;
            load_next_c = '1;
        end
        field_combo.ecc_CTRL.CTRL.next = next_c;
        field_combo.ecc_CTRL.CTRL.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.ecc_CTRL.CTRL.value <= 'h0;
        end else if(field_combo.ecc_CTRL.CTRL.load_next) begin
            field_storage.ecc_CTRL.CTRL.value <= field_combo.ecc_CTRL.CTRL.next;
        end
    end
    assign hwif_out.ecc_CTRL.CTRL.value = field_storage.ecc_CTRL.CTRL.value;
    // Field: ecc_reg.ecc_SCACONFIG.SCACONFIG
    always_comb begin
        automatic logic [3:0] next_c = field_storage.ecc_SCACONFIG.SCACONFIG.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.ecc_SCACONFIG && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[3:0];
            load_next_c = '1;
        end else if(1) begin // HW Write
            next_c = hwif_in.ecc_SCACONFIG.SCACONFIG.next;
            load_next_c = '1;
        end
        field_combo.ecc_SCACONFIG.SCACONFIG.next = next_c;
        field_combo.ecc_SCACONFIG.SCACONFIG.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.ecc_SCACONFIG.SCACONFIG.value <= 'h0;
        end else if(field_combo.ecc_SCACONFIG.SCACONFIG.load_next) begin
            field_storage.ecc_SCACONFIG.SCACONFIG.value <= field_combo.ecc_SCACONFIG.SCACONFIG.next;
        end
    end
    assign hwif_out.ecc_SCACONFIG.SCACONFIG.value = field_storage.ecc_SCACONFIG.SCACONFIG.value;
    for(genvar i0=0; i0<12; i0++) begin
        // Field: ecc_reg.ecc_SEED[].SEED
        always_comb begin
            automatic logic [31:0] next_c = field_storage.ecc_SEED[i0].SEED.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.ecc_SEED[i0] && decoded_req_is_wr) begin // SW write
                next_c = decoded_wr_data[31:0];
                load_next_c = '1;
            end
            field_combo.ecc_SEED[i0].SEED.next = next_c;
            field_combo.ecc_SEED[i0].SEED.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.reset_b) begin
            if(~hwif_in.reset_b) begin
                field_storage.ecc_SEED[i0].SEED.value <= 'h0;
            end else if(field_combo.ecc_SEED[i0].SEED.load_next) begin
                field_storage.ecc_SEED[i0].SEED.value <= field_combo.ecc_SEED[i0].SEED.next;
            end
        end
        assign hwif_out.ecc_SEED[i0].SEED.value = field_storage.ecc_SEED[i0].SEED.value;
    end
    for(genvar i0=0; i0<12; i0++) begin
        // Field: ecc_reg.ecc_MSG[].MSG
        always_comb begin
            automatic logic [31:0] next_c = field_storage.ecc_MSG[i0].MSG.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.ecc_MSG[i0] && decoded_req_is_wr) begin // SW write
                next_c = decoded_wr_data[31:0];
                load_next_c = '1;
            end
            field_combo.ecc_MSG[i0].MSG.next = next_c;
            field_combo.ecc_MSG[i0].MSG.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.reset_b) begin
            if(~hwif_in.reset_b) begin
                field_storage.ecc_MSG[i0].MSG.value <= 'h0;
            end else if(field_combo.ecc_MSG[i0].MSG.load_next) begin
                field_storage.ecc_MSG[i0].MSG.value <= field_combo.ecc_MSG[i0].MSG.next;
            end
        end
        assign hwif_out.ecc_MSG[i0].MSG.value = field_storage.ecc_MSG[i0].MSG.value;
    end
    for(genvar i0=0; i0<12; i0++) begin
        // Field: ecc_reg.ecc_PRIVKEY[].PRIVKEY
        always_comb begin
            automatic logic [31:0] next_c = field_storage.ecc_PRIVKEY[i0].PRIVKEY.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.ecc_PRIVKEY[i0] && decoded_req_is_wr) begin // SW write
                next_c = decoded_wr_data[31:0];
                load_next_c = '1;
            end else if(1) begin // HW Write
                next_c = hwif_in.ecc_PRIVKEY[i0].PRIVKEY.next;
                load_next_c = '1;
            end
            field_combo.ecc_PRIVKEY[i0].PRIVKEY.next = next_c;
            field_combo.ecc_PRIVKEY[i0].PRIVKEY.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.reset_b) begin
            if(~hwif_in.reset_b) begin
                field_storage.ecc_PRIVKEY[i0].PRIVKEY.value <= 'h0;
            end else if(field_combo.ecc_PRIVKEY[i0].PRIVKEY.load_next) begin
                field_storage.ecc_PRIVKEY[i0].PRIVKEY.value <= field_combo.ecc_PRIVKEY[i0].PRIVKEY.next;
            end
        end
        assign hwif_out.ecc_PRIVKEY[i0].PRIVKEY.value = field_storage.ecc_PRIVKEY[i0].PRIVKEY.value;
    end
    for(genvar i0=0; i0<12; i0++) begin
        // Field: ecc_reg.ecc_PUBKEY_X[].PUBKEY_X
        always_comb begin
            automatic logic [31:0] next_c = field_storage.ecc_PUBKEY_X[i0].PUBKEY_X.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.ecc_PUBKEY_X[i0] && decoded_req_is_wr) begin // SW write
                next_c = decoded_wr_data[31:0];
                load_next_c = '1;
            end else if(1) begin // HW Write
                next_c = hwif_in.ecc_PUBKEY_X[i0].PUBKEY_X.next;
                load_next_c = '1;
            end
            field_combo.ecc_PUBKEY_X[i0].PUBKEY_X.next = next_c;
            field_combo.ecc_PUBKEY_X[i0].PUBKEY_X.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.reset_b) begin
            if(~hwif_in.reset_b) begin
                field_storage.ecc_PUBKEY_X[i0].PUBKEY_X.value <= 'h0;
            end else if(field_combo.ecc_PUBKEY_X[i0].PUBKEY_X.load_next) begin
                field_storage.ecc_PUBKEY_X[i0].PUBKEY_X.value <= field_combo.ecc_PUBKEY_X[i0].PUBKEY_X.next;
            end
        end
        assign hwif_out.ecc_PUBKEY_X[i0].PUBKEY_X.value = field_storage.ecc_PUBKEY_X[i0].PUBKEY_X.value;
    end
    for(genvar i0=0; i0<12; i0++) begin
        // Field: ecc_reg.ecc_PUBKEY_Y[].PUBKEY_Y
        always_comb begin
            automatic logic [31:0] next_c = field_storage.ecc_PUBKEY_Y[i0].PUBKEY_Y.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.ecc_PUBKEY_Y[i0] && decoded_req_is_wr) begin // SW write
                next_c = decoded_wr_data[31:0];
                load_next_c = '1;
            end else if(1) begin // HW Write
                next_c = hwif_in.ecc_PUBKEY_Y[i0].PUBKEY_Y.next;
                load_next_c = '1;
            end
            field_combo.ecc_PUBKEY_Y[i0].PUBKEY_Y.next = next_c;
            field_combo.ecc_PUBKEY_Y[i0].PUBKEY_Y.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.reset_b) begin
            if(~hwif_in.reset_b) begin
                field_storage.ecc_PUBKEY_Y[i0].PUBKEY_Y.value <= 'h0;
            end else if(field_combo.ecc_PUBKEY_Y[i0].PUBKEY_Y.load_next) begin
                field_storage.ecc_PUBKEY_Y[i0].PUBKEY_Y.value <= field_combo.ecc_PUBKEY_Y[i0].PUBKEY_Y.next;
            end
        end
        assign hwif_out.ecc_PUBKEY_Y[i0].PUBKEY_Y.value = field_storage.ecc_PUBKEY_Y[i0].PUBKEY_Y.value;
    end
    for(genvar i0=0; i0<12; i0++) begin
        // Field: ecc_reg.ecc_SIGN_R[].SIGN_R
        always_comb begin
            automatic logic [31:0] next_c = field_storage.ecc_SIGN_R[i0].SIGN_R.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.ecc_SIGN_R[i0] && decoded_req_is_wr) begin // SW write
                next_c = decoded_wr_data[31:0];
                load_next_c = '1;
            end else if(1) begin // HW Write
                next_c = hwif_in.ecc_SIGN_R[i0].SIGN_R.next;
                load_next_c = '1;
            end
            field_combo.ecc_SIGN_R[i0].SIGN_R.next = next_c;
            field_combo.ecc_SIGN_R[i0].SIGN_R.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.reset_b) begin
            if(~hwif_in.reset_b) begin
                field_storage.ecc_SIGN_R[i0].SIGN_R.value <= 'h0;
            end else if(field_combo.ecc_SIGN_R[i0].SIGN_R.load_next) begin
                field_storage.ecc_SIGN_R[i0].SIGN_R.value <= field_combo.ecc_SIGN_R[i0].SIGN_R.next;
            end
        end
        assign hwif_out.ecc_SIGN_R[i0].SIGN_R.value = field_storage.ecc_SIGN_R[i0].SIGN_R.value;
    end
    for(genvar i0=0; i0<12; i0++) begin
        // Field: ecc_reg.ecc_SIGN_S[].SIGN_S
        always_comb begin
            automatic logic [31:0] next_c = field_storage.ecc_SIGN_S[i0].SIGN_S.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.ecc_SIGN_S[i0] && decoded_req_is_wr) begin // SW write
                next_c = decoded_wr_data[31:0];
                load_next_c = '1;
            end else if(1) begin // HW Write
                next_c = hwif_in.ecc_SIGN_S[i0].SIGN_S.next;
                load_next_c = '1;
            end
            field_combo.ecc_SIGN_S[i0].SIGN_S.next = next_c;
            field_combo.ecc_SIGN_S[i0].SIGN_S.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.reset_b) begin
            if(~hwif_in.reset_b) begin
                field_storage.ecc_SIGN_S[i0].SIGN_S.value <= 'h0;
            end else if(field_combo.ecc_SIGN_S[i0].SIGN_S.load_next) begin
                field_storage.ecc_SIGN_S[i0].SIGN_S.value <= field_combo.ecc_SIGN_S[i0].SIGN_S.next;
            end
        end
        assign hwif_out.ecc_SIGN_S[i0].SIGN_S.value = field_storage.ecc_SIGN_S[i0].SIGN_S.value;
    end
    for(genvar i0=0; i0<12; i0++) begin
        // Field: ecc_reg.ecc_VERIFY_R[].VERIFY_R
        always_comb begin
            automatic logic [31:0] next_c = field_storage.ecc_VERIFY_R[i0].VERIFY_R.value;
            automatic logic load_next_c = '0;
            if(1) begin // HW Write
                next_c = hwif_in.ecc_VERIFY_R[i0].VERIFY_R.next;
                load_next_c = '1;
            end
            field_combo.ecc_VERIFY_R[i0].VERIFY_R.next = next_c;
            field_combo.ecc_VERIFY_R[i0].VERIFY_R.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.reset_b) begin
            if(~hwif_in.reset_b) begin
                field_storage.ecc_VERIFY_R[i0].VERIFY_R.value <= 'h0;
            end else if(field_combo.ecc_VERIFY_R[i0].VERIFY_R.load_next) begin
                field_storage.ecc_VERIFY_R[i0].VERIFY_R.value <= field_combo.ecc_VERIFY_R[i0].VERIFY_R.next;
            end
        end
        assign hwif_out.ecc_VERIFY_R[i0].VERIFY_R.value = field_storage.ecc_VERIFY_R[i0].VERIFY_R.value;
    end
    for(genvar i0=0; i0<12; i0++) begin
        // Field: ecc_reg.ecc_IV[].IV
        always_comb begin
            automatic logic [31:0] next_c = field_storage.ecc_IV[i0].IV.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.ecc_IV[i0] && decoded_req_is_wr) begin // SW write
                next_c = decoded_wr_data[31:0];
                load_next_c = '1;
            end
            field_combo.ecc_IV[i0].IV.next = next_c;
            field_combo.ecc_IV[i0].IV.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.reset_b) begin
            if(~hwif_in.reset_b) begin
                field_storage.ecc_IV[i0].IV.value <= 'h0;
            end else if(field_combo.ecc_IV[i0].IV.load_next) begin
                field_storage.ecc_IV[i0].IV.value <= field_combo.ecc_IV[i0].IV.next;
            end
        end
        assign hwif_out.ecc_IV[i0].IV.value = field_storage.ecc_IV[i0].IV.value;
    end
    // Field: ecc_reg.intr_block_rf.global_intr_en_r.error_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.global_intr_en_r.error_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.global_intr_en_r && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[0:0];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.global_intr_en_r.error_en.next = next_c;
        field_combo.intr_block_rf.global_intr_en_r.error_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.global_intr_en_r.error_en.value <= 'h0;
        end else if(field_combo.intr_block_rf.global_intr_en_r.error_en.load_next) begin
            field_storage.intr_block_rf.global_intr_en_r.error_en.value <= field_combo.intr_block_rf.global_intr_en_r.error_en.next;
        end
    end
    // Field: ecc_reg.intr_block_rf.global_intr_en_r.notif_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.global_intr_en_r.notif_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.global_intr_en_r && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[1:1];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.global_intr_en_r.notif_en.next = next_c;
        field_combo.intr_block_rf.global_intr_en_r.notif_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.global_intr_en_r.notif_en.value <= 'h0;
        end else if(field_combo.intr_block_rf.global_intr_en_r.notif_en.load_next) begin
            field_storage.intr_block_rf.global_intr_en_r.notif_en.value <= field_combo.intr_block_rf.global_intr_en_r.notif_en.next;
        end
    end
    // Field: ecc_reg.intr_block_rf.error_intr_en_r.error_internal_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_intr_en_r.error_internal_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_en_r && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[0:0];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_en_r.error_internal_en.next = next_c;
        field_combo.intr_block_rf.error_intr_en_r.error_internal_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error_intr_en_r.error_internal_en.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_intr_en_r.error_internal_en.load_next) begin
            field_storage.intr_block_rf.error_intr_en_r.error_internal_en.value <= field_combo.intr_block_rf.error_intr_en_r.error_internal_en.next;
        end
    end
    // Field: ecc_reg.intr_block_rf.notif_intr_en_r.notif_cmd_done_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_intr_en_r.notif_cmd_done_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_intr_en_r && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[0:0];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_intr_en_r.notif_cmd_done_en.next = next_c;
        field_combo.intr_block_rf.notif_intr_en_r.notif_cmd_done_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.notif_intr_en_r.notif_cmd_done_en.value <= 'h0;
        end else if(field_combo.intr_block_rf.notif_intr_en_r.notif_cmd_done_en.load_next) begin
            field_storage.intr_block_rf.notif_intr_en_r.notif_cmd_done_en.value <= field_combo.intr_block_rf.notif_intr_en_r.notif_cmd_done_en.next;
        end
    end
    // Field: ecc_reg.intr_block_rf.error_global_intr_r.agg_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_global_intr_r.agg_sts.value;
        automatic logic load_next_c = '0;
        if(1) begin // HW Write
            next_c = hwif_out.intr_block_rf.error_internal_intr_r.intr;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_global_intr_r.agg_sts.next = next_c;
        field_combo.intr_block_rf.error_global_intr_r.agg_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error_global_intr_r.agg_sts.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_global_intr_r.agg_sts.load_next) begin
            field_storage.intr_block_rf.error_global_intr_r.agg_sts.value <= field_combo.intr_block_rf.error_global_intr_r.agg_sts.next;
        end
    end
    assign hwif_out.intr_block_rf.error_global_intr_r.intr =
        |(field_storage.intr_block_rf.error_global_intr_r.agg_sts.value & field_storage.intr_block_rf.global_intr_en_r.error_en.value);
    // Field: ecc_reg.intr_block_rf.notif_global_intr_r.agg_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_global_intr_r.agg_sts.value;
        automatic logic load_next_c = '0;
        if(1) begin // HW Write
            next_c = hwif_out.intr_block_rf.notif_internal_intr_r.intr;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_global_intr_r.agg_sts.next = next_c;
        field_combo.intr_block_rf.notif_global_intr_r.agg_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.notif_global_intr_r.agg_sts.value <= 'h0;
        end else if(field_combo.intr_block_rf.notif_global_intr_r.agg_sts.load_next) begin
            field_storage.intr_block_rf.notif_global_intr_r.agg_sts.value <= field_combo.intr_block_rf.notif_global_intr_r.agg_sts.next;
        end
    end
    assign hwif_out.intr_block_rf.notif_global_intr_r.intr =
        |(field_storage.intr_block_rf.notif_global_intr_r.agg_sts.value & field_storage.intr_block_rf.global_intr_en_r.notif_en.value);
    // Field: ecc_reg.intr_block_rf.error_internal_intr_r.error_internal_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_internal_intr_r.error_internal_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error_internal_trig.value) begin // stickybit
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error_internal_sts.value | field_storage.intr_block_rf.error_intr_trig_r.error_internal_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error_internal_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error_internal_intr_r && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error_internal_sts.value & ~decoded_wr_data[0:0];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_internal_intr_r.error_internal_sts.next = next_c;
        field_combo.intr_block_rf.error_internal_intr_r.error_internal_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.hard_reset_b) begin
        if(~hwif_in.hard_reset_b) begin
            field_storage.intr_block_rf.error_internal_intr_r.error_internal_sts.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_internal_intr_r.error_internal_sts.load_next) begin
            field_storage.intr_block_rf.error_internal_intr_r.error_internal_sts.value <= field_combo.intr_block_rf.error_internal_intr_r.error_internal_sts.next;
        end
    end
    assign hwif_out.intr_block_rf.error_internal_intr_r.intr =
        |(field_storage.intr_block_rf.error_internal_intr_r.error_internal_sts.value & field_storage.intr_block_rf.error_intr_en_r.error_internal_en.value);
    // Field: ecc_reg.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.value) begin // stickybit
            next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.value | field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.notif_internal_intr_r && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.value & ~decoded_wr_data[0:0];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.next = next_c;
        field_combo.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.value <= 'h0;
        end else if(field_combo.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.load_next) begin
            field_storage.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.value <= field_combo.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.next;
        end
    end
    assign hwif_out.intr_block_rf.notif_internal_intr_r.intr =
        |(field_storage.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.value & field_storage.intr_block_rf.notif_intr_en_r.notif_cmd_done_en.value);
    // Field: ecc_reg.intr_block_rf.error_intr_trig_r.error_internal_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_intr_trig_r.error_internal_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_trig_r && decoded_req_is_wr) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error_internal_trig.value | decoded_wr_data[0:0];
            load_next_c = '1;
        end else if(1) begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_trig_r.error_internal_trig.next = next_c;
        field_combo.intr_block_rf.error_intr_trig_r.error_internal_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error_intr_trig_r.error_internal_trig.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_intr_trig_r.error_internal_trig.load_next) begin
            field_storage.intr_block_rf.error_intr_trig_r.error_internal_trig.value <= field_combo.intr_block_rf.error_intr_trig_r.error_internal_trig.next;
        end
    end
    // Field: ecc_reg.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_intr_trig_r && decoded_req_is_wr) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.value | decoded_wr_data[0:0];
            load_next_c = '1;
        end else if(1) begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.next = next_c;
        field_combo.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.value <= 'h0;
        end else if(field_combo.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.load_next) begin
            field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.value <= field_combo.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.next;
        end
    end
    // Field: ecc_reg.intr_block_rf.error_internal_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.error_internal_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_internal_intr_count_r && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[31:0];
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_internal_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 'h1) > 'hffffffff) begin // up-counter saturated
                next_c = 'hffffffff;
            end else begin
                next_c = next_c + 'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_internal_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error_internal_intr_count_r.cnt.value >= 'hffffffff);
        field_combo.intr_block_rf.error_internal_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error_internal_intr_count_r.cnt.value >= 'hffffffff);
        if(next_c > 'hffffffff) begin
            next_c = 'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_internal_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error_internal_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.hard_reset_b) begin
        if(~hwif_in.hard_reset_b) begin
            field_storage.intr_block_rf.error_internal_intr_count_r.cnt.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_internal_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error_internal_intr_count_r.cnt.value <= field_combo.intr_block_rf.error_internal_intr_count_r.cnt.next;
        end
    end
    // Field: ecc_reg.intr_block_rf.notif_cmd_done_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.notif_cmd_done_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_cmd_done_intr_count_r && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[31:0];
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 'h1) > 'hffffffff) begin // up-counter saturated
                next_c = 'hffffffff;
            end else begin
                next_c = next_c + 'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_cmd_done_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.notif_cmd_done_intr_count_r.cnt.value >= 'hffffffff);
        field_combo.intr_block_rf.notif_cmd_done_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.notif_cmd_done_intr_count_r.cnt.value >= 'hffffffff);
        if(next_c > 'hffffffff) begin
            next_c = 'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_cmd_done_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.notif_cmd_done_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.notif_cmd_done_intr_count_r.cnt.value <= 'h0;
        end else if(field_combo.intr_block_rf.notif_cmd_done_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.notif_cmd_done_intr_count_r.cnt.value <= field_combo.intr_block_rf.notif_cmd_done_intr_count_r.cnt.next;
        end
    end
    // Field: ecc_reg.intr_block_rf.error_internal_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_internal_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error_internal_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error_internal_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error_internal_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_internal_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error_internal_intr_count_incr_r.pulse.underflow = (next_c < ('h1));
            next_c = next_c - 'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error_internal_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error_internal_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error_internal_intr_count_incr_r.pulse.value <= 'd0);
        field_combo.intr_block_rf.error_internal_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error_internal_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error_internal_intr_count_incr_r.pulse.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_internal_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error_internal_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error_internal_intr_count_incr_r.pulse.next;
        end
    end
    // Field: ecc_reg.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.underflow = (next_c < ('h1));
            next_c = next_c - 'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.value <= 'd0);
        field_combo.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.value <= 'h0;
        end else if(field_combo.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.next;
        end
    end

    //--------------------------------------------------------------------------
    // Readback
    //--------------------------------------------------------------------------
    logic readback_err;
    logic readback_done;
    logic [31:0] readback_data;
    
    // Assign readback values to a flattened array
    logic [31:0] readback_array[128];
    for(genvar i0=0; i0<2; i0++) begin
        assign readback_array[i0*1 + 0][31:0] = (decoded_reg_strb.ecc_NAME[i0] && !decoded_req_is_wr) ? hwif_in.ecc_NAME[i0].NAME.next : '0;
    end
    for(genvar i0=0; i0<2; i0++) begin
        assign readback_array[i0*1 + 2][31:0] = (decoded_reg_strb.ecc_VERSION[i0] && !decoded_req_is_wr) ? hwif_in.ecc_VERSION[i0].VERSION.next : '0;
    end
    assign readback_array[4][1:0] = (decoded_reg_strb.ecc_CTRL && !decoded_req_is_wr) ? field_storage.ecc_CTRL.CTRL.value : '0;
    assign readback_array[4][31:2] = '0;
    assign readback_array[5][1:0] = (decoded_reg_strb.ecc_STATUS && !decoded_req_is_wr) ? hwif_in.ecc_STATUS.STATUS.next : '0;
    assign readback_array[5][31:2] = '0;
    assign readback_array[6][3:0] = (decoded_reg_strb.ecc_SCACONFIG && !decoded_req_is_wr) ? field_storage.ecc_SCACONFIG.SCACONFIG.value : '0;
    assign readback_array[6][31:4] = '0;
    for(genvar i0=0; i0<12; i0++) begin
        assign readback_array[i0*1 + 7][31:0] = (decoded_reg_strb.ecc_SEED[i0] && !decoded_req_is_wr) ? field_storage.ecc_SEED[i0].SEED.value : '0;
    end
    for(genvar i0=0; i0<12; i0++) begin
        assign readback_array[i0*1 + 19][31:0] = (decoded_reg_strb.ecc_MSG[i0] && !decoded_req_is_wr) ? field_storage.ecc_MSG[i0].MSG.value : '0;
    end
    for(genvar i0=0; i0<12; i0++) begin
        assign readback_array[i0*1 + 31][31:0] = (decoded_reg_strb.ecc_PRIVKEY[i0] && !decoded_req_is_wr) ? field_storage.ecc_PRIVKEY[i0].PRIVKEY.value : '0;
    end
    for(genvar i0=0; i0<12; i0++) begin
        assign readback_array[i0*1 + 43][31:0] = (decoded_reg_strb.ecc_PUBKEY_X[i0] && !decoded_req_is_wr) ? field_storage.ecc_PUBKEY_X[i0].PUBKEY_X.value : '0;
    end
    for(genvar i0=0; i0<12; i0++) begin
        assign readback_array[i0*1 + 55][31:0] = (decoded_reg_strb.ecc_PUBKEY_Y[i0] && !decoded_req_is_wr) ? field_storage.ecc_PUBKEY_Y[i0].PUBKEY_Y.value : '0;
    end
    for(genvar i0=0; i0<12; i0++) begin
        assign readback_array[i0*1 + 67][31:0] = (decoded_reg_strb.ecc_SIGN_R[i0] && !decoded_req_is_wr) ? field_storage.ecc_SIGN_R[i0].SIGN_R.value : '0;
    end
    for(genvar i0=0; i0<12; i0++) begin
        assign readback_array[i0*1 + 79][31:0] = (decoded_reg_strb.ecc_SIGN_S[i0] && !decoded_req_is_wr) ? field_storage.ecc_SIGN_S[i0].SIGN_S.value : '0;
    end
    for(genvar i0=0; i0<12; i0++) begin
        assign readback_array[i0*1 + 91][31:0] = (decoded_reg_strb.ecc_VERIFY_R[i0] && !decoded_req_is_wr) ? field_storage.ecc_VERIFY_R[i0].VERIFY_R.value : '0;
    end
    for(genvar i0=0; i0<12; i0++) begin
        assign readback_array[i0*1 + 103][31:0] = (decoded_reg_strb.ecc_IV[i0] && !decoded_req_is_wr) ? field_storage.ecc_IV[i0].IV.value : '0;
    end
    assign readback_array[115][0:0] = (decoded_reg_strb.intr_block_rf.global_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.global_intr_en_r.error_en.value : '0;
    assign readback_array[115][1:1] = (decoded_reg_strb.intr_block_rf.global_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.global_intr_en_r.notif_en.value : '0;
    assign readback_array[115][31:2] = '0;
    assign readback_array[116][0:0] = (decoded_reg_strb.intr_block_rf.error_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_en_r.error_internal_en.value : '0;
    assign readback_array[116][31:1] = '0;
    assign readback_array[117][0:0] = (decoded_reg_strb.intr_block_rf.notif_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_intr_en_r.notif_cmd_done_en.value : '0;
    assign readback_array[117][31:1] = '0;
    assign readback_array[118][0:0] = (decoded_reg_strb.intr_block_rf.error_global_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_global_intr_r.agg_sts.value : '0;
    assign readback_array[118][31:1] = '0;
    assign readback_array[119][0:0] = (decoded_reg_strb.intr_block_rf.notif_global_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_global_intr_r.agg_sts.value : '0;
    assign readback_array[119][31:1] = '0;
    assign readback_array[120][0:0] = (decoded_reg_strb.intr_block_rf.error_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_internal_intr_r.error_internal_sts.value : '0;
    assign readback_array[120][31:1] = '0;
    assign readback_array[121][0:0] = (decoded_reg_strb.intr_block_rf.notif_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.value : '0;
    assign readback_array[121][31:1] = '0;
    assign readback_array[122][0:0] = (decoded_reg_strb.intr_block_rf.error_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_trig_r.error_internal_trig.value : '0;
    assign readback_array[122][31:1] = '0;
    assign readback_array[123][0:0] = (decoded_reg_strb.intr_block_rf.notif_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.value : '0;
    assign readback_array[123][31:1] = '0;
    assign readback_array[124][31:0] = (decoded_reg_strb.intr_block_rf.error_internal_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_internal_intr_count_r.cnt.value : '0;
    assign readback_array[125][31:0] = (decoded_reg_strb.intr_block_rf.notif_cmd_done_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_cmd_done_intr_count_r.cnt.value : '0;
    assign readback_array[126][0:0] = (decoded_reg_strb.intr_block_rf.error_internal_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_internal_intr_count_incr_r.pulse.value : '0;
    assign readback_array[126][31:1] = '0;
    assign readback_array[127][0:0] = (decoded_reg_strb.intr_block_rf.notif_cmd_done_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.value : '0;
    assign readback_array[127][31:1] = '0;


    // Reduce the array
    always_comb begin
        automatic logic [31:0] readback_data_var;
        readback_done = decoded_req & ~decoded_req_is_wr;
        readback_err = '0;
        readback_data_var = '0;
        for(int i=0; i<128; i++) readback_data_var |= readback_array[i];
        readback_data = readback_data_var;
    end


    assign cpuif_rd_ack = readback_done;
    assign cpuif_rd_data = readback_data;
    assign cpuif_rd_err = readback_err;


endmodule