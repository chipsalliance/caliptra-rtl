// Generated by PeakRDL-regblock - A free and open-source SystemVerilog generator
//  https://github.com/SystemRDL/PeakRDL-regblock

module ecc_reg (
        input wire clk,
        input wire rst,

        input wire s_cpuif_req,
        input wire s_cpuif_req_is_wr,
        input wire [11:0] s_cpuif_addr,
        input wire [31:0] s_cpuif_wr_data,
        output wire s_cpuif_req_stall_wr,
        output wire s_cpuif_req_stall_rd,
        output wire s_cpuif_rd_ack,
        output wire s_cpuif_rd_err,
        output wire [31:0] s_cpuif_rd_data,
        output wire s_cpuif_wr_ack,
        output wire s_cpuif_wr_err,

        input ecc_reg_pkg::ecc_reg__in_t hwif_in,
        output ecc_reg_pkg::ecc_reg__out_t hwif_out
    );

    //--------------------------------------------------------------------------
    // CPU Bus interface logic
    //--------------------------------------------------------------------------
    logic cpuif_req;
    logic cpuif_req_is_wr;
    logic [11:0] cpuif_addr;
    logic [31:0] cpuif_wr_data;
    logic cpuif_req_stall_wr;
    logic cpuif_req_stall_rd;

    logic cpuif_rd_ack;
    logic cpuif_rd_err;
    logic [31:0] cpuif_rd_data;

    logic cpuif_wr_ack;
    logic cpuif_wr_err;

    assign cpuif_req = s_cpuif_req;
    assign cpuif_req_is_wr = s_cpuif_req_is_wr;
    assign cpuif_addr = s_cpuif_addr;
    assign cpuif_wr_data = s_cpuif_wr_data;
    assign s_cpuif_req_stall_wr = cpuif_req_stall_wr;
    assign s_cpuif_req_stall_rd = cpuif_req_stall_rd;
    assign s_cpuif_rd_ack = cpuif_rd_ack;
    assign s_cpuif_rd_err = cpuif_rd_err;
    assign s_cpuif_rd_data = cpuif_rd_data;
    assign s_cpuif_wr_ack = cpuif_wr_ack;
    assign s_cpuif_wr_err = cpuif_wr_err;

    logic cpuif_req_masked;

    // Read & write latencies are balanced. Stalls not required
    assign cpuif_req_stall_rd = '0;
    assign cpuif_req_stall_wr = '0;
    assign cpuif_req_masked = cpuif_req;

    //--------------------------------------------------------------------------
    // Address Decode
    //--------------------------------------------------------------------------
    typedef struct packed{
        logic [2-1:0]ECC_NAME;
        logic [2-1:0]ECC_VERSION;
        logic ECC_CTRL;
        logic ECC_STATUS;
        logic ECC_SCACONFIG;
        logic [12-1:0]ECC_SEED;
        logic [12-1:0]ECC_MSG;
        logic [12-1:0]ECC_PRIVKEY;
        logic [12-1:0]ECC_PUBKEY_X;
        logic [12-1:0]ECC_PUBKEY_Y;
        logic [12-1:0]ECC_SIGN_R;
        logic [12-1:0]ECC_SIGN_S;
        logic [12-1:0]ECC_VERIFY_R;
        logic [12-1:0]ECC_IV;
        logic [12-1:0]ECC_NONCE;
        logic ecc_kv_rd_pkey_ctrl;
        logic ecc_kv_rd_pkey_status;
        logic ecc_kv_rd_seed_ctrl;
        logic ecc_kv_rd_seed_status;
        logic ecc_kv_rd_msg_ctrl;
        logic ecc_kv_rd_msg_status;
        logic ecc_kv_wr_pkey_ctrl;
        logic ecc_kv_wr_pkey_status;
        struct packed{
            logic global_intr_en_r;
            logic error_intr_en_r;
            logic notif_intr_en_r;
            logic error_global_intr_r;
            logic notif_global_intr_r;
            logic error_internal_intr_r;
            logic notif_internal_intr_r;
            logic error_intr_trig_r;
            logic notif_intr_trig_r;
            logic error_internal_intr_count_r;
            logic notif_cmd_done_intr_count_r;
            logic error_internal_intr_count_incr_r;
            logic notif_cmd_done_intr_count_incr_r;
        } intr_block_rf;
    } decoded_reg_strb_t;
    decoded_reg_strb_t decoded_reg_strb;
    logic decoded_req;
    logic decoded_req_is_wr;
    logic [31:0] decoded_wr_data;

    always_comb begin
        for(int i0=0; i0<2; i0++) begin
            decoded_reg_strb.ECC_NAME[i0] = cpuif_req_masked & (cpuif_addr == 'h0 + i0*'h4);
        end
        for(int i0=0; i0<2; i0++) begin
            decoded_reg_strb.ECC_VERSION[i0] = cpuif_req_masked & (cpuif_addr == 'h8 + i0*'h4);
        end
        decoded_reg_strb.ECC_CTRL = cpuif_req_masked & (cpuif_addr == 'h10);
        decoded_reg_strb.ECC_STATUS = cpuif_req_masked & (cpuif_addr == 'h18);
        decoded_reg_strb.ECC_SCACONFIG = cpuif_req_masked & (cpuif_addr == 'h20);
        for(int i0=0; i0<12; i0++) begin
            decoded_reg_strb.ECC_SEED[i0] = cpuif_req_masked & (cpuif_addr == 'h80 + i0*'h4);
        end
        for(int i0=0; i0<12; i0++) begin
            decoded_reg_strb.ECC_MSG[i0] = cpuif_req_masked & (cpuif_addr == 'h100 + i0*'h4);
        end
        for(int i0=0; i0<12; i0++) begin
            decoded_reg_strb.ECC_PRIVKEY[i0] = cpuif_req_masked & (cpuif_addr == 'h180 + i0*'h4);
        end
        for(int i0=0; i0<12; i0++) begin
            decoded_reg_strb.ECC_PUBKEY_X[i0] = cpuif_req_masked & (cpuif_addr == 'h200 + i0*'h4);
        end
        for(int i0=0; i0<12; i0++) begin
            decoded_reg_strb.ECC_PUBKEY_Y[i0] = cpuif_req_masked & (cpuif_addr == 'h280 + i0*'h4);
        end
        for(int i0=0; i0<12; i0++) begin
            decoded_reg_strb.ECC_SIGN_R[i0] = cpuif_req_masked & (cpuif_addr == 'h300 + i0*'h4);
        end
        for(int i0=0; i0<12; i0++) begin
            decoded_reg_strb.ECC_SIGN_S[i0] = cpuif_req_masked & (cpuif_addr == 'h380 + i0*'h4);
        end
        for(int i0=0; i0<12; i0++) begin
            decoded_reg_strb.ECC_VERIFY_R[i0] = cpuif_req_masked & (cpuif_addr == 'h400 + i0*'h4);
        end
        for(int i0=0; i0<12; i0++) begin
            decoded_reg_strb.ECC_IV[i0] = cpuif_req_masked & (cpuif_addr == 'h480 + i0*'h4);
        end
        for(int i0=0; i0<12; i0++) begin
            decoded_reg_strb.ECC_NONCE[i0] = cpuif_req_masked & (cpuif_addr == 'h500 + i0*'h4);
        end
        decoded_reg_strb.ecc_kv_rd_pkey_ctrl = cpuif_req_masked & (cpuif_addr == 'h600);
        decoded_reg_strb.ecc_kv_rd_pkey_status = cpuif_req_masked & (cpuif_addr == 'h604);
        decoded_reg_strb.ecc_kv_rd_seed_ctrl = cpuif_req_masked & (cpuif_addr == 'h608);
        decoded_reg_strb.ecc_kv_rd_seed_status = cpuif_req_masked & (cpuif_addr == 'h60c);
        decoded_reg_strb.ecc_kv_rd_msg_ctrl = cpuif_req_masked & (cpuif_addr == 'h610);
        decoded_reg_strb.ecc_kv_rd_msg_status = cpuif_req_masked & (cpuif_addr == 'h614);
        decoded_reg_strb.ecc_kv_wr_pkey_ctrl = cpuif_req_masked & (cpuif_addr == 'h618);
        decoded_reg_strb.ecc_kv_wr_pkey_status = cpuif_req_masked & (cpuif_addr == 'h61c);
        decoded_reg_strb.intr_block_rf.global_intr_en_r = cpuif_req_masked & (cpuif_addr == 'h800);
        decoded_reg_strb.intr_block_rf.error_intr_en_r = cpuif_req_masked & (cpuif_addr == 'h804);
        decoded_reg_strb.intr_block_rf.notif_intr_en_r = cpuif_req_masked & (cpuif_addr == 'h808);
        decoded_reg_strb.intr_block_rf.error_global_intr_r = cpuif_req_masked & (cpuif_addr == 'h80c);
        decoded_reg_strb.intr_block_rf.notif_global_intr_r = cpuif_req_masked & (cpuif_addr == 'h810);
        decoded_reg_strb.intr_block_rf.error_internal_intr_r = cpuif_req_masked & (cpuif_addr == 'h814);
        decoded_reg_strb.intr_block_rf.notif_internal_intr_r = cpuif_req_masked & (cpuif_addr == 'h818);
        decoded_reg_strb.intr_block_rf.error_intr_trig_r = cpuif_req_masked & (cpuif_addr == 'h81c);
        decoded_reg_strb.intr_block_rf.notif_intr_trig_r = cpuif_req_masked & (cpuif_addr == 'h820);
        decoded_reg_strb.intr_block_rf.error_internal_intr_count_r = cpuif_req_masked & (cpuif_addr == 'h900);
        decoded_reg_strb.intr_block_rf.notif_cmd_done_intr_count_r = cpuif_req_masked & (cpuif_addr == 'h980);
        decoded_reg_strb.intr_block_rf.error_internal_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 'ha00);
        decoded_reg_strb.intr_block_rf.notif_cmd_done_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 'ha04);
    end

    // Pass down signals to next stage
    assign decoded_req = cpuif_req_masked;
    assign decoded_req_is_wr = cpuif_req_is_wr;
    assign decoded_wr_data = cpuif_wr_data;

    // Writes are always granted with no error response
    assign cpuif_wr_ack = decoded_req & decoded_req_is_wr;
    assign cpuif_wr_err = '0;

    //--------------------------------------------------------------------------
    // Field logic
    //--------------------------------------------------------------------------
    typedef struct packed{
        struct packed{
            struct packed{
                logic [1:0] next;
                logic load_next;
            } CTRL;
            struct packed{
                logic next;
                logic load_next;
            } ZEROIZE;
            struct packed{
                logic next;
                logic load_next;
            } PCR_SIGN;
        } ECC_CTRL;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } POINT_RND_EN;
            struct packed{
                logic next;
                logic load_next;
            } MASK_SIGN_EN;
            struct packed{
                logic next;
                logic load_next;
            } SCALAR_RND_EN;
        } ECC_SCACONFIG;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } SEED;
        } [12-1:0]ECC_SEED;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } MSG;
        } [12-1:0]ECC_MSG;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } PRIVKEY;
        } [12-1:0]ECC_PRIVKEY;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } PUBKEY_X;
        } [12-1:0]ECC_PUBKEY_X;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } PUBKEY_Y;
        } [12-1:0]ECC_PUBKEY_Y;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } SIGN_R;
        } [12-1:0]ECC_SIGN_R;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } SIGN_S;
        } [12-1:0]ECC_SIGN_S;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } VERIFY_R;
        } [12-1:0]ECC_VERIFY_R;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } IV;
        } [12-1:0]ECC_IV;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } NONCE;
        } [12-1:0]ECC_NONCE;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } read_en;
            struct packed{
                logic [4:0] next;
                logic load_next;
            } read_entry;
            struct packed{
                logic next;
                logic load_next;
            } pcr_hash_extend;
            struct packed{
                logic [24:0] next;
                logic load_next;
            } rsvd;
        } ecc_kv_rd_pkey_ctrl;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } VALID;
        } ecc_kv_rd_pkey_status;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } read_en;
            struct packed{
                logic [4:0] next;
                logic load_next;
            } read_entry;
            struct packed{
                logic next;
                logic load_next;
            } pcr_hash_extend;
            struct packed{
                logic [24:0] next;
                logic load_next;
            } rsvd;
        } ecc_kv_rd_seed_ctrl;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } VALID;
        } ecc_kv_rd_seed_status;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } read_en;
            struct packed{
                logic [4:0] next;
                logic load_next;
            } read_entry;
            struct packed{
                logic next;
                logic load_next;
            } pcr_hash_extend;
            struct packed{
                logic [24:0] next;
                logic load_next;
            } rsvd;
        } ecc_kv_rd_msg_ctrl;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } VALID;
        } ecc_kv_rd_msg_status;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } write_en;
            struct packed{
                logic [4:0] next;
                logic load_next;
            } write_entry;
            struct packed{
                logic next;
                logic load_next;
            } hmac_key_dest_valid;
            struct packed{
                logic next;
                logic load_next;
            } hmac_block_dest_valid;
            struct packed{
                logic next;
                logic load_next;
            } sha_block_dest_valid;
            struct packed{
                logic next;
                logic load_next;
            } ecc_pkey_dest_valid;
            struct packed{
                logic next;
                logic load_next;
            } ecc_seed_dest_valid;
            struct packed{
                logic next;
                logic load_next;
            } ecc_msg_dest_valid;
            struct packed{
                logic [19:0] next;
                logic load_next;
            } rsvd;
        } ecc_kv_wr_pkey_ctrl;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } VALID;
        } ecc_kv_wr_pkey_status;
        struct packed{
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } error_en;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_en;
            } global_intr_en_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } error_internal_en;
            } error_intr_en_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } notif_cmd_done_en;
            } notif_intr_en_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } agg_sts;
            } error_global_intr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } agg_sts;
            } notif_global_intr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } error_internal_sts;
            } error_internal_intr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } notif_cmd_done_sts;
            } notif_internal_intr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } error_internal_trig;
            } error_intr_trig_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } notif_cmd_done_trig;
            } notif_intr_trig_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error_internal_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } notif_cmd_done_intr_count_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error_internal_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } notif_cmd_done_intr_count_incr_r;
        } intr_block_rf;
    } field_combo_t;
    field_combo_t field_combo;

    typedef struct packed{
        struct packed{
            struct packed{
                logic [1:0] value;
            } CTRL;
            struct packed{
                logic value;
            } ZEROIZE;
            struct packed{
                logic value;
            } PCR_SIGN;
        } ECC_CTRL;
        struct packed{
            struct packed{
                logic value;
            } POINT_RND_EN;
            struct packed{
                logic value;
            } MASK_SIGN_EN;
            struct packed{
                logic value;
            } SCALAR_RND_EN;
        } ECC_SCACONFIG;
        struct packed{
            struct packed{
                logic [31:0] value;
            } SEED;
        } [12-1:0]ECC_SEED;
        struct packed{
            struct packed{
                logic [31:0] value;
            } MSG;
        } [12-1:0]ECC_MSG;
        struct packed{
            struct packed{
                logic [31:0] value;
            } PRIVKEY;
        } [12-1:0]ECC_PRIVKEY;
        struct packed{
            struct packed{
                logic [31:0] value;
            } PUBKEY_X;
        } [12-1:0]ECC_PUBKEY_X;
        struct packed{
            struct packed{
                logic [31:0] value;
            } PUBKEY_Y;
        } [12-1:0]ECC_PUBKEY_Y;
        struct packed{
            struct packed{
                logic [31:0] value;
            } SIGN_R;
        } [12-1:0]ECC_SIGN_R;
        struct packed{
            struct packed{
                logic [31:0] value;
            } SIGN_S;
        } [12-1:0]ECC_SIGN_S;
        struct packed{
            struct packed{
                logic [31:0] value;
            } VERIFY_R;
        } [12-1:0]ECC_VERIFY_R;
        struct packed{
            struct packed{
                logic [31:0] value;
            } IV;
        } [12-1:0]ECC_IV;
        struct packed{
            struct packed{
                logic [31:0] value;
            } NONCE;
        } [12-1:0]ECC_NONCE;
        struct packed{
            struct packed{
                logic value;
            } read_en;
            struct packed{
                logic [4:0] value;
            } read_entry;
            struct packed{
                logic value;
            } pcr_hash_extend;
            struct packed{
                logic [24:0] value;
            } rsvd;
        } ecc_kv_rd_pkey_ctrl;
        struct packed{
            struct packed{
                logic value;
            } VALID;
        } ecc_kv_rd_pkey_status;
        struct packed{
            struct packed{
                logic value;
            } read_en;
            struct packed{
                logic [4:0] value;
            } read_entry;
            struct packed{
                logic value;
            } pcr_hash_extend;
            struct packed{
                logic [24:0] value;
            } rsvd;
        } ecc_kv_rd_seed_ctrl;
        struct packed{
            struct packed{
                logic value;
            } VALID;
        } ecc_kv_rd_seed_status;
        struct packed{
            struct packed{
                logic value;
            } read_en;
            struct packed{
                logic [4:0] value;
            } read_entry;
            struct packed{
                logic value;
            } pcr_hash_extend;
            struct packed{
                logic [24:0] value;
            } rsvd;
        } ecc_kv_rd_msg_ctrl;
        struct packed{
            struct packed{
                logic value;
            } VALID;
        } ecc_kv_rd_msg_status;
        struct packed{
            struct packed{
                logic value;
            } write_en;
            struct packed{
                logic [4:0] value;
            } write_entry;
            struct packed{
                logic value;
            } hmac_key_dest_valid;
            struct packed{
                logic value;
            } hmac_block_dest_valid;
            struct packed{
                logic value;
            } sha_block_dest_valid;
            struct packed{
                logic value;
            } ecc_pkey_dest_valid;
            struct packed{
                logic value;
            } ecc_seed_dest_valid;
            struct packed{
                logic value;
            } ecc_msg_dest_valid;
            struct packed{
                logic [19:0] value;
            } rsvd;
        } ecc_kv_wr_pkey_ctrl;
        struct packed{
            struct packed{
                logic value;
            } VALID;
        } ecc_kv_wr_pkey_status;
        struct packed{
            struct packed{
                struct packed{
                    logic value;
                } error_en;
                struct packed{
                    logic value;
                } notif_en;
            } global_intr_en_r;
            struct packed{
                struct packed{
                    logic value;
                } error_internal_en;
            } error_intr_en_r;
            struct packed{
                struct packed{
                    logic value;
                } notif_cmd_done_en;
            } notif_intr_en_r;
            struct packed{
                struct packed{
                    logic value;
                } agg_sts;
            } error_global_intr_r;
            struct packed{
                struct packed{
                    logic value;
                } agg_sts;
            } notif_global_intr_r;
            struct packed{
                struct packed{
                    logic value;
                } error_internal_sts;
            } error_internal_intr_r;
            struct packed{
                struct packed{
                    logic value;
                } notif_cmd_done_sts;
            } notif_internal_intr_r;
            struct packed{
                struct packed{
                    logic value;
                } error_internal_trig;
            } error_intr_trig_r;
            struct packed{
                struct packed{
                    logic value;
                } notif_cmd_done_trig;
            } notif_intr_trig_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error_internal_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } notif_cmd_done_intr_count_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error_internal_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } notif_cmd_done_intr_count_incr_r;
        } intr_block_rf;
    } field_storage_t;
    field_storage_t field_storage;

    // Field: ecc_reg.ECC_CTRL.CTRL
    always_comb begin
        automatic logic [1:0] next_c = field_storage.ECC_CTRL.CTRL.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.ECC_CTRL && decoded_req_is_wr && hwif_in.ecc_ready) begin // SW write
            next_c = decoded_wr_data[1:0];
            load_next_c = '1;
        end else if(hwif_in.ECC_CTRL.CTRL.hwclr) begin // HW Clear
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.ECC_CTRL.CTRL.next = next_c;
        field_combo.ECC_CTRL.CTRL.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.ECC_CTRL.CTRL.value <= 'h0;
        end else if(field_combo.ECC_CTRL.CTRL.load_next) begin
            field_storage.ECC_CTRL.CTRL.value <= field_combo.ECC_CTRL.CTRL.next;
        end
    end
    assign hwif_out.ECC_CTRL.CTRL.value = field_storage.ECC_CTRL.CTRL.value;
    // Field: ecc_reg.ECC_CTRL.ZEROIZE
    always_comb begin
        automatic logic [0:0] next_c = field_storage.ECC_CTRL.ZEROIZE.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.ECC_CTRL && decoded_req_is_wr && hwif_in.ecc_ready) begin // SW write
            next_c = decoded_wr_data[2:2];
            load_next_c = '1;
        end else if(1) begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.ECC_CTRL.ZEROIZE.next = next_c;
        field_combo.ECC_CTRL.ZEROIZE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.ECC_CTRL.ZEROIZE.value <= 'h0;
        end else if(field_combo.ECC_CTRL.ZEROIZE.load_next) begin
            field_storage.ECC_CTRL.ZEROIZE.value <= field_combo.ECC_CTRL.ZEROIZE.next;
        end
    end
    assign hwif_out.ECC_CTRL.ZEROIZE.value = field_storage.ECC_CTRL.ZEROIZE.value;
    // Field: ecc_reg.ECC_CTRL.PCR_SIGN
    always_comb begin
        automatic logic [0:0] next_c = field_storage.ECC_CTRL.PCR_SIGN.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.ECC_CTRL && decoded_req_is_wr && hwif_in.ecc_ready) begin // SW write
            next_c = decoded_wr_data[3:3];
            load_next_c = '1;
        end else if(hwif_in.ECC_CTRL.PCR_SIGN.hwclr) begin // HW Clear
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.ECC_CTRL.PCR_SIGN.next = next_c;
        field_combo.ECC_CTRL.PCR_SIGN.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.ECC_CTRL.PCR_SIGN.value <= 'h0;
        end else if(field_combo.ECC_CTRL.PCR_SIGN.load_next) begin
            field_storage.ECC_CTRL.PCR_SIGN.value <= field_combo.ECC_CTRL.PCR_SIGN.next;
        end
    end
    assign hwif_out.ECC_CTRL.PCR_SIGN.value = field_storage.ECC_CTRL.PCR_SIGN.value;
    // Field: ecc_reg.ECC_SCACONFIG.POINT_RND_EN
    always_comb begin
        automatic logic [0:0] next_c = field_storage.ECC_SCACONFIG.POINT_RND_EN.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.ECC_SCACONFIG && decoded_req_is_wr && hwif_in.ecc_ready) begin // SW write
            next_c = decoded_wr_data[0:0];
            load_next_c = '1;
        end
        field_combo.ECC_SCACONFIG.POINT_RND_EN.next = next_c;
        field_combo.ECC_SCACONFIG.POINT_RND_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.ECC_SCACONFIG.POINT_RND_EN.value <= 'h1;
        end else if(field_combo.ECC_SCACONFIG.POINT_RND_EN.load_next) begin
            field_storage.ECC_SCACONFIG.POINT_RND_EN.value <= field_combo.ECC_SCACONFIG.POINT_RND_EN.next;
        end
    end
    assign hwif_out.ECC_SCACONFIG.POINT_RND_EN.value = field_storage.ECC_SCACONFIG.POINT_RND_EN.value;
    // Field: ecc_reg.ECC_SCACONFIG.MASK_SIGN_EN
    always_comb begin
        automatic logic [0:0] next_c = field_storage.ECC_SCACONFIG.MASK_SIGN_EN.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.ECC_SCACONFIG && decoded_req_is_wr && hwif_in.ecc_ready) begin // SW write
            next_c = decoded_wr_data[1:1];
            load_next_c = '1;
        end
        field_combo.ECC_SCACONFIG.MASK_SIGN_EN.next = next_c;
        field_combo.ECC_SCACONFIG.MASK_SIGN_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.ECC_SCACONFIG.MASK_SIGN_EN.value <= 'h1;
        end else if(field_combo.ECC_SCACONFIG.MASK_SIGN_EN.load_next) begin
            field_storage.ECC_SCACONFIG.MASK_SIGN_EN.value <= field_combo.ECC_SCACONFIG.MASK_SIGN_EN.next;
        end
    end
    assign hwif_out.ECC_SCACONFIG.MASK_SIGN_EN.value = field_storage.ECC_SCACONFIG.MASK_SIGN_EN.value;
    // Field: ecc_reg.ECC_SCACONFIG.SCALAR_RND_EN
    always_comb begin
        automatic logic [0:0] next_c = field_storage.ECC_SCACONFIG.SCALAR_RND_EN.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.ECC_SCACONFIG && decoded_req_is_wr && hwif_in.ecc_ready) begin // SW write
            next_c = decoded_wr_data[2:2];
            load_next_c = '1;
        end
        field_combo.ECC_SCACONFIG.SCALAR_RND_EN.next = next_c;
        field_combo.ECC_SCACONFIG.SCALAR_RND_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.ECC_SCACONFIG.SCALAR_RND_EN.value <= 'h1;
        end else if(field_combo.ECC_SCACONFIG.SCALAR_RND_EN.load_next) begin
            field_storage.ECC_SCACONFIG.SCALAR_RND_EN.value <= field_combo.ECC_SCACONFIG.SCALAR_RND_EN.next;
        end
    end
    assign hwif_out.ECC_SCACONFIG.SCALAR_RND_EN.value = field_storage.ECC_SCACONFIG.SCALAR_RND_EN.value;
    for(genvar i0=0; i0<12; i0++) begin
        // Field: ecc_reg.ECC_SEED[].SEED
        always_comb begin
            automatic logic [31:0] next_c = field_storage.ECC_SEED[i0].SEED.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.ECC_SEED[i0] && decoded_req_is_wr && hwif_in.ecc_ready) begin // SW write
                next_c = decoded_wr_data[31:0];
                load_next_c = '1;
            end else if(hwif_in.ECC_SEED[i0].SEED.we) begin // HW Write - we
                next_c = hwif_in.ECC_SEED[i0].SEED.next;
                load_next_c = '1;
            end else if(hwif_in.ECC_SEED[i0].SEED.hwclr) begin // HW Clear
                next_c = '0;
                load_next_c = '1;
            end
            field_combo.ECC_SEED[i0].SEED.next = next_c;
            field_combo.ECC_SEED[i0].SEED.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.reset_b) begin
            if(~hwif_in.reset_b) begin
                field_storage.ECC_SEED[i0].SEED.value <= 'h0;
            end else if(field_combo.ECC_SEED[i0].SEED.load_next) begin
                field_storage.ECC_SEED[i0].SEED.value <= field_combo.ECC_SEED[i0].SEED.next;
            end
        end
        assign hwif_out.ECC_SEED[i0].SEED.value = field_storage.ECC_SEED[i0].SEED.value;
    end
    for(genvar i0=0; i0<12; i0++) begin
        // Field: ecc_reg.ECC_MSG[].MSG
        always_comb begin
            automatic logic [31:0] next_c = field_storage.ECC_MSG[i0].MSG.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.ECC_MSG[i0] && decoded_req_is_wr && hwif_in.ecc_ready) begin // SW write
                next_c = decoded_wr_data[31:0];
                load_next_c = '1;
            end else if(hwif_in.ECC_MSG[i0].MSG.we) begin // HW Write - we
                next_c = hwif_in.ECC_MSG[i0].MSG.next;
                load_next_c = '1;
            end else if(hwif_in.ECC_MSG[i0].MSG.hwclr) begin // HW Clear
                next_c = '0;
                load_next_c = '1;
            end
            field_combo.ECC_MSG[i0].MSG.next = next_c;
            field_combo.ECC_MSG[i0].MSG.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.reset_b) begin
            if(~hwif_in.reset_b) begin
                field_storage.ECC_MSG[i0].MSG.value <= 'h0;
            end else if(field_combo.ECC_MSG[i0].MSG.load_next) begin
                field_storage.ECC_MSG[i0].MSG.value <= field_combo.ECC_MSG[i0].MSG.next;
            end
        end
        assign hwif_out.ECC_MSG[i0].MSG.value = field_storage.ECC_MSG[i0].MSG.value;
    end
    for(genvar i0=0; i0<12; i0++) begin
        // Field: ecc_reg.ECC_PRIVKEY[].PRIVKEY
        always_comb begin
            automatic logic [31:0] next_c = field_storage.ECC_PRIVKEY[i0].PRIVKEY.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.ECC_PRIVKEY[i0] && decoded_req_is_wr && hwif_in.ecc_ready) begin // SW write
                next_c = decoded_wr_data[31:0];
                load_next_c = '1;
            end else if(hwif_in.ECC_PRIVKEY[i0].PRIVKEY.we) begin // HW Write - we
                next_c = hwif_in.ECC_PRIVKEY[i0].PRIVKEY.next;
                load_next_c = '1;
            end else if(hwif_in.ECC_PRIVKEY[i0].PRIVKEY.hwclr) begin // HW Clear
                next_c = '0;
                load_next_c = '1;
            end
            field_combo.ECC_PRIVKEY[i0].PRIVKEY.next = next_c;
            field_combo.ECC_PRIVKEY[i0].PRIVKEY.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.reset_b) begin
            if(~hwif_in.reset_b) begin
                field_storage.ECC_PRIVKEY[i0].PRIVKEY.value <= 'h0;
            end else if(field_combo.ECC_PRIVKEY[i0].PRIVKEY.load_next) begin
                field_storage.ECC_PRIVKEY[i0].PRIVKEY.value <= field_combo.ECC_PRIVKEY[i0].PRIVKEY.next;
            end
        end
        assign hwif_out.ECC_PRIVKEY[i0].PRIVKEY.value = field_storage.ECC_PRIVKEY[i0].PRIVKEY.value;
    end
    for(genvar i0=0; i0<12; i0++) begin
        // Field: ecc_reg.ECC_PUBKEY_X[].PUBKEY_X
        always_comb begin
            automatic logic [31:0] next_c = field_storage.ECC_PUBKEY_X[i0].PUBKEY_X.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.ECC_PUBKEY_X[i0] && decoded_req_is_wr && hwif_in.ecc_ready) begin // SW write
                next_c = decoded_wr_data[31:0];
                load_next_c = '1;
            end else if(hwif_in.ECC_PUBKEY_X[i0].PUBKEY_X.we) begin // HW Write - we
                next_c = hwif_in.ECC_PUBKEY_X[i0].PUBKEY_X.next;
                load_next_c = '1;
            end else if(hwif_in.ECC_PUBKEY_X[i0].PUBKEY_X.hwclr) begin // HW Clear
                next_c = '0;
                load_next_c = '1;
            end
            field_combo.ECC_PUBKEY_X[i0].PUBKEY_X.next = next_c;
            field_combo.ECC_PUBKEY_X[i0].PUBKEY_X.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.reset_b) begin
            if(~hwif_in.reset_b) begin
                field_storage.ECC_PUBKEY_X[i0].PUBKEY_X.value <= 'h0;
            end else if(field_combo.ECC_PUBKEY_X[i0].PUBKEY_X.load_next) begin
                field_storage.ECC_PUBKEY_X[i0].PUBKEY_X.value <= field_combo.ECC_PUBKEY_X[i0].PUBKEY_X.next;
            end
        end
        assign hwif_out.ECC_PUBKEY_X[i0].PUBKEY_X.value = field_storage.ECC_PUBKEY_X[i0].PUBKEY_X.value;
    end
    for(genvar i0=0; i0<12; i0++) begin
        // Field: ecc_reg.ECC_PUBKEY_Y[].PUBKEY_Y
        always_comb begin
            automatic logic [31:0] next_c = field_storage.ECC_PUBKEY_Y[i0].PUBKEY_Y.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.ECC_PUBKEY_Y[i0] && decoded_req_is_wr && hwif_in.ecc_ready) begin // SW write
                next_c = decoded_wr_data[31:0];
                load_next_c = '1;
            end else if(hwif_in.ECC_PUBKEY_Y[i0].PUBKEY_Y.we) begin // HW Write - we
                next_c = hwif_in.ECC_PUBKEY_Y[i0].PUBKEY_Y.next;
                load_next_c = '1;
            end else if(hwif_in.ECC_PUBKEY_Y[i0].PUBKEY_Y.hwclr) begin // HW Clear
                next_c = '0;
                load_next_c = '1;
            end
            field_combo.ECC_PUBKEY_Y[i0].PUBKEY_Y.next = next_c;
            field_combo.ECC_PUBKEY_Y[i0].PUBKEY_Y.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.reset_b) begin
            if(~hwif_in.reset_b) begin
                field_storage.ECC_PUBKEY_Y[i0].PUBKEY_Y.value <= 'h0;
            end else if(field_combo.ECC_PUBKEY_Y[i0].PUBKEY_Y.load_next) begin
                field_storage.ECC_PUBKEY_Y[i0].PUBKEY_Y.value <= field_combo.ECC_PUBKEY_Y[i0].PUBKEY_Y.next;
            end
        end
        assign hwif_out.ECC_PUBKEY_Y[i0].PUBKEY_Y.value = field_storage.ECC_PUBKEY_Y[i0].PUBKEY_Y.value;
    end
    for(genvar i0=0; i0<12; i0++) begin
        // Field: ecc_reg.ECC_SIGN_R[].SIGN_R
        always_comb begin
            automatic logic [31:0] next_c = field_storage.ECC_SIGN_R[i0].SIGN_R.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.ECC_SIGN_R[i0] && decoded_req_is_wr && hwif_in.ecc_ready) begin // SW write
                next_c = decoded_wr_data[31:0];
                load_next_c = '1;
            end else if(hwif_in.ECC_SIGN_R[i0].SIGN_R.we) begin // HW Write - we
                next_c = hwif_in.ECC_SIGN_R[i0].SIGN_R.next;
                load_next_c = '1;
            end else if(hwif_in.ECC_SIGN_R[i0].SIGN_R.hwclr) begin // HW Clear
                next_c = '0;
                load_next_c = '1;
            end
            field_combo.ECC_SIGN_R[i0].SIGN_R.next = next_c;
            field_combo.ECC_SIGN_R[i0].SIGN_R.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.reset_b) begin
            if(~hwif_in.reset_b) begin
                field_storage.ECC_SIGN_R[i0].SIGN_R.value <= 'h0;
            end else if(field_combo.ECC_SIGN_R[i0].SIGN_R.load_next) begin
                field_storage.ECC_SIGN_R[i0].SIGN_R.value <= field_combo.ECC_SIGN_R[i0].SIGN_R.next;
            end
        end
        assign hwif_out.ECC_SIGN_R[i0].SIGN_R.value = field_storage.ECC_SIGN_R[i0].SIGN_R.value;
    end
    for(genvar i0=0; i0<12; i0++) begin
        // Field: ecc_reg.ECC_SIGN_S[].SIGN_S
        always_comb begin
            automatic logic [31:0] next_c = field_storage.ECC_SIGN_S[i0].SIGN_S.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.ECC_SIGN_S[i0] && decoded_req_is_wr && hwif_in.ecc_ready) begin // SW write
                next_c = decoded_wr_data[31:0];
                load_next_c = '1;
            end else if(hwif_in.ECC_SIGN_S[i0].SIGN_S.we) begin // HW Write - we
                next_c = hwif_in.ECC_SIGN_S[i0].SIGN_S.next;
                load_next_c = '1;
            end else if(hwif_in.ECC_SIGN_S[i0].SIGN_S.hwclr) begin // HW Clear
                next_c = '0;
                load_next_c = '1;
            end
            field_combo.ECC_SIGN_S[i0].SIGN_S.next = next_c;
            field_combo.ECC_SIGN_S[i0].SIGN_S.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.reset_b) begin
            if(~hwif_in.reset_b) begin
                field_storage.ECC_SIGN_S[i0].SIGN_S.value <= 'h0;
            end else if(field_combo.ECC_SIGN_S[i0].SIGN_S.load_next) begin
                field_storage.ECC_SIGN_S[i0].SIGN_S.value <= field_combo.ECC_SIGN_S[i0].SIGN_S.next;
            end
        end
        assign hwif_out.ECC_SIGN_S[i0].SIGN_S.value = field_storage.ECC_SIGN_S[i0].SIGN_S.value;
    end
    for(genvar i0=0; i0<12; i0++) begin
        // Field: ecc_reg.ECC_VERIFY_R[].VERIFY_R
        always_comb begin
            automatic logic [31:0] next_c = field_storage.ECC_VERIFY_R[i0].VERIFY_R.value;
            automatic logic load_next_c = '0;
            if(hwif_in.ECC_VERIFY_R[i0].VERIFY_R.we) begin // HW Write - we
                next_c = hwif_in.ECC_VERIFY_R[i0].VERIFY_R.next;
                load_next_c = '1;
            end else if(hwif_in.ECC_VERIFY_R[i0].VERIFY_R.hwclr) begin // HW Clear
                next_c = '0;
                load_next_c = '1;
            end
            field_combo.ECC_VERIFY_R[i0].VERIFY_R.next = next_c;
            field_combo.ECC_VERIFY_R[i0].VERIFY_R.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.reset_b) begin
            if(~hwif_in.reset_b) begin
                field_storage.ECC_VERIFY_R[i0].VERIFY_R.value <= 'h0;
            end else if(field_combo.ECC_VERIFY_R[i0].VERIFY_R.load_next) begin
                field_storage.ECC_VERIFY_R[i0].VERIFY_R.value <= field_combo.ECC_VERIFY_R[i0].VERIFY_R.next;
            end
        end
        assign hwif_out.ECC_VERIFY_R[i0].VERIFY_R.value = field_storage.ECC_VERIFY_R[i0].VERIFY_R.value;
    end
    for(genvar i0=0; i0<12; i0++) begin
        // Field: ecc_reg.ECC_IV[].IV
        always_comb begin
            automatic logic [31:0] next_c = field_storage.ECC_IV[i0].IV.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.ECC_IV[i0] && decoded_req_is_wr && hwif_in.ecc_ready) begin // SW write
                next_c = decoded_wr_data[31:0];
                load_next_c = '1;
            end else if(hwif_in.ECC_IV[i0].IV.hwclr) begin // HW Clear
                next_c = '0;
                load_next_c = '1;
            end
            field_combo.ECC_IV[i0].IV.next = next_c;
            field_combo.ECC_IV[i0].IV.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.reset_b) begin
            if(~hwif_in.reset_b) begin
                field_storage.ECC_IV[i0].IV.value <= 'h0;
            end else if(field_combo.ECC_IV[i0].IV.load_next) begin
                field_storage.ECC_IV[i0].IV.value <= field_combo.ECC_IV[i0].IV.next;
            end
        end
        assign hwif_out.ECC_IV[i0].IV.value = field_storage.ECC_IV[i0].IV.value;
    end
    for(genvar i0=0; i0<12; i0++) begin
        // Field: ecc_reg.ECC_NONCE[].NONCE
        always_comb begin
            automatic logic [31:0] next_c = field_storage.ECC_NONCE[i0].NONCE.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.ECC_NONCE[i0] && decoded_req_is_wr && hwif_in.ecc_ready) begin // SW write
                next_c = decoded_wr_data[31:0];
                load_next_c = '1;
            end else if(hwif_in.ECC_NONCE[i0].NONCE.hwclr) begin // HW Clear
                next_c = '0;
                load_next_c = '1;
            end
            field_combo.ECC_NONCE[i0].NONCE.next = next_c;
            field_combo.ECC_NONCE[i0].NONCE.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.reset_b) begin
            if(~hwif_in.reset_b) begin
                field_storage.ECC_NONCE[i0].NONCE.value <= 'h0;
            end else if(field_combo.ECC_NONCE[i0].NONCE.load_next) begin
                field_storage.ECC_NONCE[i0].NONCE.value <= field_combo.ECC_NONCE[i0].NONCE.next;
            end
        end
        assign hwif_out.ECC_NONCE[i0].NONCE.value = field_storage.ECC_NONCE[i0].NONCE.value;
    end
    // Field: ecc_reg.ecc_kv_rd_pkey_ctrl.read_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.ecc_kv_rd_pkey_ctrl.read_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.ecc_kv_rd_pkey_ctrl && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[0:0];
            load_next_c = '1;
        end else if(hwif_in.ecc_kv_rd_pkey_ctrl.read_en.hwclr) begin // HW Clear
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.ecc_kv_rd_pkey_ctrl.read_en.next = next_c;
        field_combo.ecc_kv_rd_pkey_ctrl.read_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.ecc_kv_rd_pkey_ctrl.read_en.value <= 'h0;
        end else if(field_combo.ecc_kv_rd_pkey_ctrl.read_en.load_next) begin
            field_storage.ecc_kv_rd_pkey_ctrl.read_en.value <= field_combo.ecc_kv_rd_pkey_ctrl.read_en.next;
        end
    end
    assign hwif_out.ecc_kv_rd_pkey_ctrl.read_en.value = field_storage.ecc_kv_rd_pkey_ctrl.read_en.value;
    // Field: ecc_reg.ecc_kv_rd_pkey_ctrl.read_entry
    always_comb begin
        automatic logic [4:0] next_c = field_storage.ecc_kv_rd_pkey_ctrl.read_entry.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.ecc_kv_rd_pkey_ctrl && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[5:1];
            load_next_c = '1;
        end
        field_combo.ecc_kv_rd_pkey_ctrl.read_entry.next = next_c;
        field_combo.ecc_kv_rd_pkey_ctrl.read_entry.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.ecc_kv_rd_pkey_ctrl.read_entry.value <= 'h0;
        end else if(field_combo.ecc_kv_rd_pkey_ctrl.read_entry.load_next) begin
            field_storage.ecc_kv_rd_pkey_ctrl.read_entry.value <= field_combo.ecc_kv_rd_pkey_ctrl.read_entry.next;
        end
    end
    assign hwif_out.ecc_kv_rd_pkey_ctrl.read_entry.value = field_storage.ecc_kv_rd_pkey_ctrl.read_entry.value;
    // Field: ecc_reg.ecc_kv_rd_pkey_ctrl.pcr_hash_extend
    always_comb begin
        automatic logic [0:0] next_c = field_storage.ecc_kv_rd_pkey_ctrl.pcr_hash_extend.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.ecc_kv_rd_pkey_ctrl && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[6:6];
            load_next_c = '1;
        end
        field_combo.ecc_kv_rd_pkey_ctrl.pcr_hash_extend.next = next_c;
        field_combo.ecc_kv_rd_pkey_ctrl.pcr_hash_extend.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.ecc_kv_rd_pkey_ctrl.pcr_hash_extend.value <= 'h0;
        end else if(field_combo.ecc_kv_rd_pkey_ctrl.pcr_hash_extend.load_next) begin
            field_storage.ecc_kv_rd_pkey_ctrl.pcr_hash_extend.value <= field_combo.ecc_kv_rd_pkey_ctrl.pcr_hash_extend.next;
        end
    end
    assign hwif_out.ecc_kv_rd_pkey_ctrl.pcr_hash_extend.value = field_storage.ecc_kv_rd_pkey_ctrl.pcr_hash_extend.value;
    // Field: ecc_reg.ecc_kv_rd_pkey_ctrl.rsvd
    always_comb begin
        automatic logic [24:0] next_c = field_storage.ecc_kv_rd_pkey_ctrl.rsvd.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.ecc_kv_rd_pkey_ctrl && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[31:7];
            load_next_c = '1;
        end
        field_combo.ecc_kv_rd_pkey_ctrl.rsvd.next = next_c;
        field_combo.ecc_kv_rd_pkey_ctrl.rsvd.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.ecc_kv_rd_pkey_ctrl.rsvd.value <= 'h0;
        end else if(field_combo.ecc_kv_rd_pkey_ctrl.rsvd.load_next) begin
            field_storage.ecc_kv_rd_pkey_ctrl.rsvd.value <= field_combo.ecc_kv_rd_pkey_ctrl.rsvd.next;
        end
    end
    assign hwif_out.ecc_kv_rd_pkey_ctrl.rsvd.value = field_storage.ecc_kv_rd_pkey_ctrl.rsvd.value;
    // Field: ecc_reg.ecc_kv_rd_pkey_status.VALID
    always_comb begin
        automatic logic [0:0] next_c = field_storage.ecc_kv_rd_pkey_status.VALID.value;
        automatic logic load_next_c = '0;
        if(hwif_in.ecc_kv_rd_pkey_status.VALID.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(hwif_in.ecc_kv_rd_pkey_status.VALID.hwclr) begin // HW Clear
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.ecc_kv_rd_pkey_status.VALID.next = next_c;
        field_combo.ecc_kv_rd_pkey_status.VALID.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.ecc_kv_rd_pkey_status.VALID.value <= 'h0;
        end else if(field_combo.ecc_kv_rd_pkey_status.VALID.load_next) begin
            field_storage.ecc_kv_rd_pkey_status.VALID.value <= field_combo.ecc_kv_rd_pkey_status.VALID.next;
        end
    end
    // Field: ecc_reg.ecc_kv_rd_seed_ctrl.read_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.ecc_kv_rd_seed_ctrl.read_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.ecc_kv_rd_seed_ctrl && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[0:0];
            load_next_c = '1;
        end else if(hwif_in.ecc_kv_rd_seed_ctrl.read_en.hwclr) begin // HW Clear
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.ecc_kv_rd_seed_ctrl.read_en.next = next_c;
        field_combo.ecc_kv_rd_seed_ctrl.read_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.ecc_kv_rd_seed_ctrl.read_en.value <= 'h0;
        end else if(field_combo.ecc_kv_rd_seed_ctrl.read_en.load_next) begin
            field_storage.ecc_kv_rd_seed_ctrl.read_en.value <= field_combo.ecc_kv_rd_seed_ctrl.read_en.next;
        end
    end
    assign hwif_out.ecc_kv_rd_seed_ctrl.read_en.value = field_storage.ecc_kv_rd_seed_ctrl.read_en.value;
    // Field: ecc_reg.ecc_kv_rd_seed_ctrl.read_entry
    always_comb begin
        automatic logic [4:0] next_c = field_storage.ecc_kv_rd_seed_ctrl.read_entry.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.ecc_kv_rd_seed_ctrl && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[5:1];
            load_next_c = '1;
        end
        field_combo.ecc_kv_rd_seed_ctrl.read_entry.next = next_c;
        field_combo.ecc_kv_rd_seed_ctrl.read_entry.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.ecc_kv_rd_seed_ctrl.read_entry.value <= 'h0;
        end else if(field_combo.ecc_kv_rd_seed_ctrl.read_entry.load_next) begin
            field_storage.ecc_kv_rd_seed_ctrl.read_entry.value <= field_combo.ecc_kv_rd_seed_ctrl.read_entry.next;
        end
    end
    assign hwif_out.ecc_kv_rd_seed_ctrl.read_entry.value = field_storage.ecc_kv_rd_seed_ctrl.read_entry.value;
    // Field: ecc_reg.ecc_kv_rd_seed_ctrl.pcr_hash_extend
    always_comb begin
        automatic logic [0:0] next_c = field_storage.ecc_kv_rd_seed_ctrl.pcr_hash_extend.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.ecc_kv_rd_seed_ctrl && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[6:6];
            load_next_c = '1;
        end
        field_combo.ecc_kv_rd_seed_ctrl.pcr_hash_extend.next = next_c;
        field_combo.ecc_kv_rd_seed_ctrl.pcr_hash_extend.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.ecc_kv_rd_seed_ctrl.pcr_hash_extend.value <= 'h0;
        end else if(field_combo.ecc_kv_rd_seed_ctrl.pcr_hash_extend.load_next) begin
            field_storage.ecc_kv_rd_seed_ctrl.pcr_hash_extend.value <= field_combo.ecc_kv_rd_seed_ctrl.pcr_hash_extend.next;
        end
    end
    assign hwif_out.ecc_kv_rd_seed_ctrl.pcr_hash_extend.value = field_storage.ecc_kv_rd_seed_ctrl.pcr_hash_extend.value;
    // Field: ecc_reg.ecc_kv_rd_seed_ctrl.rsvd
    always_comb begin
        automatic logic [24:0] next_c = field_storage.ecc_kv_rd_seed_ctrl.rsvd.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.ecc_kv_rd_seed_ctrl && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[31:7];
            load_next_c = '1;
        end
        field_combo.ecc_kv_rd_seed_ctrl.rsvd.next = next_c;
        field_combo.ecc_kv_rd_seed_ctrl.rsvd.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.ecc_kv_rd_seed_ctrl.rsvd.value <= 'h0;
        end else if(field_combo.ecc_kv_rd_seed_ctrl.rsvd.load_next) begin
            field_storage.ecc_kv_rd_seed_ctrl.rsvd.value <= field_combo.ecc_kv_rd_seed_ctrl.rsvd.next;
        end
    end
    assign hwif_out.ecc_kv_rd_seed_ctrl.rsvd.value = field_storage.ecc_kv_rd_seed_ctrl.rsvd.value;
    // Field: ecc_reg.ecc_kv_rd_seed_status.VALID
    always_comb begin
        automatic logic [0:0] next_c = field_storage.ecc_kv_rd_seed_status.VALID.value;
        automatic logic load_next_c = '0;
        if(hwif_in.ecc_kv_rd_seed_status.VALID.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(hwif_in.ecc_kv_rd_seed_status.VALID.hwclr) begin // HW Clear
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.ecc_kv_rd_seed_status.VALID.next = next_c;
        field_combo.ecc_kv_rd_seed_status.VALID.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.ecc_kv_rd_seed_status.VALID.value <= 'h0;
        end else if(field_combo.ecc_kv_rd_seed_status.VALID.load_next) begin
            field_storage.ecc_kv_rd_seed_status.VALID.value <= field_combo.ecc_kv_rd_seed_status.VALID.next;
        end
    end
    // Field: ecc_reg.ecc_kv_rd_msg_ctrl.read_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.ecc_kv_rd_msg_ctrl.read_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.ecc_kv_rd_msg_ctrl && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[0:0];
            load_next_c = '1;
        end else if(hwif_in.ecc_kv_rd_msg_ctrl.read_en.hwclr) begin // HW Clear
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.ecc_kv_rd_msg_ctrl.read_en.next = next_c;
        field_combo.ecc_kv_rd_msg_ctrl.read_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.ecc_kv_rd_msg_ctrl.read_en.value <= 'h0;
        end else if(field_combo.ecc_kv_rd_msg_ctrl.read_en.load_next) begin
            field_storage.ecc_kv_rd_msg_ctrl.read_en.value <= field_combo.ecc_kv_rd_msg_ctrl.read_en.next;
        end
    end
    assign hwif_out.ecc_kv_rd_msg_ctrl.read_en.value = field_storage.ecc_kv_rd_msg_ctrl.read_en.value;
    // Field: ecc_reg.ecc_kv_rd_msg_ctrl.read_entry
    always_comb begin
        automatic logic [4:0] next_c = field_storage.ecc_kv_rd_msg_ctrl.read_entry.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.ecc_kv_rd_msg_ctrl && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[5:1];
            load_next_c = '1;
        end
        field_combo.ecc_kv_rd_msg_ctrl.read_entry.next = next_c;
        field_combo.ecc_kv_rd_msg_ctrl.read_entry.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.ecc_kv_rd_msg_ctrl.read_entry.value <= 'h0;
        end else if(field_combo.ecc_kv_rd_msg_ctrl.read_entry.load_next) begin
            field_storage.ecc_kv_rd_msg_ctrl.read_entry.value <= field_combo.ecc_kv_rd_msg_ctrl.read_entry.next;
        end
    end
    assign hwif_out.ecc_kv_rd_msg_ctrl.read_entry.value = field_storage.ecc_kv_rd_msg_ctrl.read_entry.value;
    // Field: ecc_reg.ecc_kv_rd_msg_ctrl.pcr_hash_extend
    always_comb begin
        automatic logic [0:0] next_c = field_storage.ecc_kv_rd_msg_ctrl.pcr_hash_extend.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.ecc_kv_rd_msg_ctrl && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[6:6];
            load_next_c = '1;
        end
        field_combo.ecc_kv_rd_msg_ctrl.pcr_hash_extend.next = next_c;
        field_combo.ecc_kv_rd_msg_ctrl.pcr_hash_extend.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.ecc_kv_rd_msg_ctrl.pcr_hash_extend.value <= 'h0;
        end else if(field_combo.ecc_kv_rd_msg_ctrl.pcr_hash_extend.load_next) begin
            field_storage.ecc_kv_rd_msg_ctrl.pcr_hash_extend.value <= field_combo.ecc_kv_rd_msg_ctrl.pcr_hash_extend.next;
        end
    end
    assign hwif_out.ecc_kv_rd_msg_ctrl.pcr_hash_extend.value = field_storage.ecc_kv_rd_msg_ctrl.pcr_hash_extend.value;
    // Field: ecc_reg.ecc_kv_rd_msg_ctrl.rsvd
    always_comb begin
        automatic logic [24:0] next_c = field_storage.ecc_kv_rd_msg_ctrl.rsvd.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.ecc_kv_rd_msg_ctrl && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[31:7];
            load_next_c = '1;
        end
        field_combo.ecc_kv_rd_msg_ctrl.rsvd.next = next_c;
        field_combo.ecc_kv_rd_msg_ctrl.rsvd.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.ecc_kv_rd_msg_ctrl.rsvd.value <= 'h0;
        end else if(field_combo.ecc_kv_rd_msg_ctrl.rsvd.load_next) begin
            field_storage.ecc_kv_rd_msg_ctrl.rsvd.value <= field_combo.ecc_kv_rd_msg_ctrl.rsvd.next;
        end
    end
    assign hwif_out.ecc_kv_rd_msg_ctrl.rsvd.value = field_storage.ecc_kv_rd_msg_ctrl.rsvd.value;
    // Field: ecc_reg.ecc_kv_rd_msg_status.VALID
    always_comb begin
        automatic logic [0:0] next_c = field_storage.ecc_kv_rd_msg_status.VALID.value;
        automatic logic load_next_c = '0;
        if(hwif_in.ecc_kv_rd_msg_status.VALID.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(hwif_in.ecc_kv_rd_msg_status.VALID.hwclr) begin // HW Clear
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.ecc_kv_rd_msg_status.VALID.next = next_c;
        field_combo.ecc_kv_rd_msg_status.VALID.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.ecc_kv_rd_msg_status.VALID.value <= 'h0;
        end else if(field_combo.ecc_kv_rd_msg_status.VALID.load_next) begin
            field_storage.ecc_kv_rd_msg_status.VALID.value <= field_combo.ecc_kv_rd_msg_status.VALID.next;
        end
    end
    // Field: ecc_reg.ecc_kv_wr_pkey_ctrl.write_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.ecc_kv_wr_pkey_ctrl.write_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.ecc_kv_wr_pkey_ctrl && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[0:0];
            load_next_c = '1;
        end else if(hwif_in.ecc_kv_wr_pkey_ctrl.write_en.hwclr) begin // HW Clear
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.ecc_kv_wr_pkey_ctrl.write_en.next = next_c;
        field_combo.ecc_kv_wr_pkey_ctrl.write_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.ecc_kv_wr_pkey_ctrl.write_en.value <= 'h0;
        end else if(field_combo.ecc_kv_wr_pkey_ctrl.write_en.load_next) begin
            field_storage.ecc_kv_wr_pkey_ctrl.write_en.value <= field_combo.ecc_kv_wr_pkey_ctrl.write_en.next;
        end
    end
    assign hwif_out.ecc_kv_wr_pkey_ctrl.write_en.value = field_storage.ecc_kv_wr_pkey_ctrl.write_en.value;
    // Field: ecc_reg.ecc_kv_wr_pkey_ctrl.write_entry
    always_comb begin
        automatic logic [4:0] next_c = field_storage.ecc_kv_wr_pkey_ctrl.write_entry.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.ecc_kv_wr_pkey_ctrl && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[5:1];
            load_next_c = '1;
        end
        field_combo.ecc_kv_wr_pkey_ctrl.write_entry.next = next_c;
        field_combo.ecc_kv_wr_pkey_ctrl.write_entry.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.ecc_kv_wr_pkey_ctrl.write_entry.value <= 'h0;
        end else if(field_combo.ecc_kv_wr_pkey_ctrl.write_entry.load_next) begin
            field_storage.ecc_kv_wr_pkey_ctrl.write_entry.value <= field_combo.ecc_kv_wr_pkey_ctrl.write_entry.next;
        end
    end
    assign hwif_out.ecc_kv_wr_pkey_ctrl.write_entry.value = field_storage.ecc_kv_wr_pkey_ctrl.write_entry.value;
    // Field: ecc_reg.ecc_kv_wr_pkey_ctrl.hmac_key_dest_valid
    always_comb begin
        automatic logic [0:0] next_c = field_storage.ecc_kv_wr_pkey_ctrl.hmac_key_dest_valid.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.ecc_kv_wr_pkey_ctrl && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[6:6];
            load_next_c = '1;
        end
        field_combo.ecc_kv_wr_pkey_ctrl.hmac_key_dest_valid.next = next_c;
        field_combo.ecc_kv_wr_pkey_ctrl.hmac_key_dest_valid.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.ecc_kv_wr_pkey_ctrl.hmac_key_dest_valid.value <= 'h0;
        end else if(field_combo.ecc_kv_wr_pkey_ctrl.hmac_key_dest_valid.load_next) begin
            field_storage.ecc_kv_wr_pkey_ctrl.hmac_key_dest_valid.value <= field_combo.ecc_kv_wr_pkey_ctrl.hmac_key_dest_valid.next;
        end
    end
    assign hwif_out.ecc_kv_wr_pkey_ctrl.hmac_key_dest_valid.value = field_storage.ecc_kv_wr_pkey_ctrl.hmac_key_dest_valid.value;
    // Field: ecc_reg.ecc_kv_wr_pkey_ctrl.hmac_block_dest_valid
    always_comb begin
        automatic logic [0:0] next_c = field_storage.ecc_kv_wr_pkey_ctrl.hmac_block_dest_valid.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.ecc_kv_wr_pkey_ctrl && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[7:7];
            load_next_c = '1;
        end
        field_combo.ecc_kv_wr_pkey_ctrl.hmac_block_dest_valid.next = next_c;
        field_combo.ecc_kv_wr_pkey_ctrl.hmac_block_dest_valid.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.ecc_kv_wr_pkey_ctrl.hmac_block_dest_valid.value <= 'h0;
        end else if(field_combo.ecc_kv_wr_pkey_ctrl.hmac_block_dest_valid.load_next) begin
            field_storage.ecc_kv_wr_pkey_ctrl.hmac_block_dest_valid.value <= field_combo.ecc_kv_wr_pkey_ctrl.hmac_block_dest_valid.next;
        end
    end
    assign hwif_out.ecc_kv_wr_pkey_ctrl.hmac_block_dest_valid.value = field_storage.ecc_kv_wr_pkey_ctrl.hmac_block_dest_valid.value;
    // Field: ecc_reg.ecc_kv_wr_pkey_ctrl.sha_block_dest_valid
    always_comb begin
        automatic logic [0:0] next_c = field_storage.ecc_kv_wr_pkey_ctrl.sha_block_dest_valid.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.ecc_kv_wr_pkey_ctrl && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[8:8];
            load_next_c = '1;
        end
        field_combo.ecc_kv_wr_pkey_ctrl.sha_block_dest_valid.next = next_c;
        field_combo.ecc_kv_wr_pkey_ctrl.sha_block_dest_valid.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.ecc_kv_wr_pkey_ctrl.sha_block_dest_valid.value <= 'h0;
        end else if(field_combo.ecc_kv_wr_pkey_ctrl.sha_block_dest_valid.load_next) begin
            field_storage.ecc_kv_wr_pkey_ctrl.sha_block_dest_valid.value <= field_combo.ecc_kv_wr_pkey_ctrl.sha_block_dest_valid.next;
        end
    end
    assign hwif_out.ecc_kv_wr_pkey_ctrl.sha_block_dest_valid.value = field_storage.ecc_kv_wr_pkey_ctrl.sha_block_dest_valid.value;
    // Field: ecc_reg.ecc_kv_wr_pkey_ctrl.ecc_pkey_dest_valid
    always_comb begin
        automatic logic [0:0] next_c = field_storage.ecc_kv_wr_pkey_ctrl.ecc_pkey_dest_valid.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.ecc_kv_wr_pkey_ctrl && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[9:9];
            load_next_c = '1;
        end
        field_combo.ecc_kv_wr_pkey_ctrl.ecc_pkey_dest_valid.next = next_c;
        field_combo.ecc_kv_wr_pkey_ctrl.ecc_pkey_dest_valid.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.ecc_kv_wr_pkey_ctrl.ecc_pkey_dest_valid.value <= 'h0;
        end else if(field_combo.ecc_kv_wr_pkey_ctrl.ecc_pkey_dest_valid.load_next) begin
            field_storage.ecc_kv_wr_pkey_ctrl.ecc_pkey_dest_valid.value <= field_combo.ecc_kv_wr_pkey_ctrl.ecc_pkey_dest_valid.next;
        end
    end
    assign hwif_out.ecc_kv_wr_pkey_ctrl.ecc_pkey_dest_valid.value = field_storage.ecc_kv_wr_pkey_ctrl.ecc_pkey_dest_valid.value;
    // Field: ecc_reg.ecc_kv_wr_pkey_ctrl.ecc_seed_dest_valid
    always_comb begin
        automatic logic [0:0] next_c = field_storage.ecc_kv_wr_pkey_ctrl.ecc_seed_dest_valid.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.ecc_kv_wr_pkey_ctrl && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[10:10];
            load_next_c = '1;
        end
        field_combo.ecc_kv_wr_pkey_ctrl.ecc_seed_dest_valid.next = next_c;
        field_combo.ecc_kv_wr_pkey_ctrl.ecc_seed_dest_valid.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.ecc_kv_wr_pkey_ctrl.ecc_seed_dest_valid.value <= 'h0;
        end else if(field_combo.ecc_kv_wr_pkey_ctrl.ecc_seed_dest_valid.load_next) begin
            field_storage.ecc_kv_wr_pkey_ctrl.ecc_seed_dest_valid.value <= field_combo.ecc_kv_wr_pkey_ctrl.ecc_seed_dest_valid.next;
        end
    end
    assign hwif_out.ecc_kv_wr_pkey_ctrl.ecc_seed_dest_valid.value = field_storage.ecc_kv_wr_pkey_ctrl.ecc_seed_dest_valid.value;
    // Field: ecc_reg.ecc_kv_wr_pkey_ctrl.ecc_msg_dest_valid
    always_comb begin
        automatic logic [0:0] next_c = field_storage.ecc_kv_wr_pkey_ctrl.ecc_msg_dest_valid.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.ecc_kv_wr_pkey_ctrl && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[11:11];
            load_next_c = '1;
        end
        field_combo.ecc_kv_wr_pkey_ctrl.ecc_msg_dest_valid.next = next_c;
        field_combo.ecc_kv_wr_pkey_ctrl.ecc_msg_dest_valid.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.ecc_kv_wr_pkey_ctrl.ecc_msg_dest_valid.value <= 'h0;
        end else if(field_combo.ecc_kv_wr_pkey_ctrl.ecc_msg_dest_valid.load_next) begin
            field_storage.ecc_kv_wr_pkey_ctrl.ecc_msg_dest_valid.value <= field_combo.ecc_kv_wr_pkey_ctrl.ecc_msg_dest_valid.next;
        end
    end
    assign hwif_out.ecc_kv_wr_pkey_ctrl.ecc_msg_dest_valid.value = field_storage.ecc_kv_wr_pkey_ctrl.ecc_msg_dest_valid.value;
    // Field: ecc_reg.ecc_kv_wr_pkey_ctrl.rsvd
    always_comb begin
        automatic logic [19:0] next_c = field_storage.ecc_kv_wr_pkey_ctrl.rsvd.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.ecc_kv_wr_pkey_ctrl && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[31:12];
            load_next_c = '1;
        end
        field_combo.ecc_kv_wr_pkey_ctrl.rsvd.next = next_c;
        field_combo.ecc_kv_wr_pkey_ctrl.rsvd.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.ecc_kv_wr_pkey_ctrl.rsvd.value <= 'h0;
        end else if(field_combo.ecc_kv_wr_pkey_ctrl.rsvd.load_next) begin
            field_storage.ecc_kv_wr_pkey_ctrl.rsvd.value <= field_combo.ecc_kv_wr_pkey_ctrl.rsvd.next;
        end
    end
    assign hwif_out.ecc_kv_wr_pkey_ctrl.rsvd.value = field_storage.ecc_kv_wr_pkey_ctrl.rsvd.value;
    // Field: ecc_reg.ecc_kv_wr_pkey_status.VALID
    always_comb begin
        automatic logic [0:0] next_c = field_storage.ecc_kv_wr_pkey_status.VALID.value;
        automatic logic load_next_c = '0;
        if(hwif_in.ecc_kv_wr_pkey_status.VALID.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(hwif_in.ecc_kv_wr_pkey_status.VALID.hwclr) begin // HW Clear
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.ecc_kv_wr_pkey_status.VALID.next = next_c;
        field_combo.ecc_kv_wr_pkey_status.VALID.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.ecc_kv_wr_pkey_status.VALID.value <= 'h0;
        end else if(field_combo.ecc_kv_wr_pkey_status.VALID.load_next) begin
            field_storage.ecc_kv_wr_pkey_status.VALID.value <= field_combo.ecc_kv_wr_pkey_status.VALID.next;
        end
    end
    // Field: ecc_reg.intr_block_rf.global_intr_en_r.error_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.global_intr_en_r.error_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.global_intr_en_r && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[0:0];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.global_intr_en_r.error_en.next = next_c;
        field_combo.intr_block_rf.global_intr_en_r.error_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.global_intr_en_r.error_en.value <= 'h0;
        end else if(field_combo.intr_block_rf.global_intr_en_r.error_en.load_next) begin
            field_storage.intr_block_rf.global_intr_en_r.error_en.value <= field_combo.intr_block_rf.global_intr_en_r.error_en.next;
        end
    end
    // Field: ecc_reg.intr_block_rf.global_intr_en_r.notif_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.global_intr_en_r.notif_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.global_intr_en_r && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[1:1];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.global_intr_en_r.notif_en.next = next_c;
        field_combo.intr_block_rf.global_intr_en_r.notif_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.global_intr_en_r.notif_en.value <= 'h0;
        end else if(field_combo.intr_block_rf.global_intr_en_r.notif_en.load_next) begin
            field_storage.intr_block_rf.global_intr_en_r.notif_en.value <= field_combo.intr_block_rf.global_intr_en_r.notif_en.next;
        end
    end
    // Field: ecc_reg.intr_block_rf.error_intr_en_r.error_internal_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_intr_en_r.error_internal_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_en_r && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[0:0];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_en_r.error_internal_en.next = next_c;
        field_combo.intr_block_rf.error_intr_en_r.error_internal_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error_intr_en_r.error_internal_en.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_intr_en_r.error_internal_en.load_next) begin
            field_storage.intr_block_rf.error_intr_en_r.error_internal_en.value <= field_combo.intr_block_rf.error_intr_en_r.error_internal_en.next;
        end
    end
    // Field: ecc_reg.intr_block_rf.notif_intr_en_r.notif_cmd_done_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_intr_en_r.notif_cmd_done_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_intr_en_r && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[0:0];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_intr_en_r.notif_cmd_done_en.next = next_c;
        field_combo.intr_block_rf.notif_intr_en_r.notif_cmd_done_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.notif_intr_en_r.notif_cmd_done_en.value <= 'h0;
        end else if(field_combo.intr_block_rf.notif_intr_en_r.notif_cmd_done_en.load_next) begin
            field_storage.intr_block_rf.notif_intr_en_r.notif_cmd_done_en.value <= field_combo.intr_block_rf.notif_intr_en_r.notif_cmd_done_en.next;
        end
    end
    // Field: ecc_reg.intr_block_rf.error_global_intr_r.agg_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_global_intr_r.agg_sts.value;
        automatic logic load_next_c = '0;
        if(1) begin // HW Write
            next_c = hwif_out.intr_block_rf.error_internal_intr_r.intr;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_global_intr_r.agg_sts.next = next_c;
        field_combo.intr_block_rf.error_global_intr_r.agg_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error_global_intr_r.agg_sts.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_global_intr_r.agg_sts.load_next) begin
            field_storage.intr_block_rf.error_global_intr_r.agg_sts.value <= field_combo.intr_block_rf.error_global_intr_r.agg_sts.next;
        end
    end
    assign hwif_out.intr_block_rf.error_global_intr_r.intr =
        |(field_storage.intr_block_rf.error_global_intr_r.agg_sts.value & field_storage.intr_block_rf.global_intr_en_r.error_en.value);
    // Field: ecc_reg.intr_block_rf.notif_global_intr_r.agg_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_global_intr_r.agg_sts.value;
        automatic logic load_next_c = '0;
        if(1) begin // HW Write
            next_c = hwif_out.intr_block_rf.notif_internal_intr_r.intr;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_global_intr_r.agg_sts.next = next_c;
        field_combo.intr_block_rf.notif_global_intr_r.agg_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.notif_global_intr_r.agg_sts.value <= 'h0;
        end else if(field_combo.intr_block_rf.notif_global_intr_r.agg_sts.load_next) begin
            field_storage.intr_block_rf.notif_global_intr_r.agg_sts.value <= field_combo.intr_block_rf.notif_global_intr_r.agg_sts.next;
        end
    end
    assign hwif_out.intr_block_rf.notif_global_intr_r.intr =
        |(field_storage.intr_block_rf.notif_global_intr_r.agg_sts.value & field_storage.intr_block_rf.global_intr_en_r.notif_en.value);
    // Field: ecc_reg.intr_block_rf.error_internal_intr_r.error_internal_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_internal_intr_r.error_internal_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error_internal_trig.value) begin // stickybit
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error_internal_sts.value | field_storage.intr_block_rf.error_intr_trig_r.error_internal_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error_internal_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error_internal_intr_r && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error_internal_sts.value & ~decoded_wr_data[0:0];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_internal_intr_r.error_internal_sts.next = next_c;
        field_combo.intr_block_rf.error_internal_intr_r.error_internal_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.hard_reset_b) begin
        if(~hwif_in.hard_reset_b) begin
            field_storage.intr_block_rf.error_internal_intr_r.error_internal_sts.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_internal_intr_r.error_internal_sts.load_next) begin
            field_storage.intr_block_rf.error_internal_intr_r.error_internal_sts.value <= field_combo.intr_block_rf.error_internal_intr_r.error_internal_sts.next;
        end
    end
    assign hwif_out.intr_block_rf.error_internal_intr_r.intr =
        |(field_storage.intr_block_rf.error_internal_intr_r.error_internal_sts.value & field_storage.intr_block_rf.error_intr_en_r.error_internal_en.value);
    // Field: ecc_reg.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.value) begin // stickybit
            next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.value | field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.notif_internal_intr_r && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.value & ~decoded_wr_data[0:0];
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.next = next_c;
        field_combo.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.value <= 'h0;
        end else if(field_combo.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.load_next) begin
            field_storage.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.value <= field_combo.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.next;
        end
    end
    assign hwif_out.intr_block_rf.notif_internal_intr_r.intr =
        |(field_storage.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.value & field_storage.intr_block_rf.notif_intr_en_r.notif_cmd_done_en.value);
    // Field: ecc_reg.intr_block_rf.error_intr_trig_r.error_internal_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_intr_trig_r.error_internal_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_trig_r && decoded_req_is_wr) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error_internal_trig.value | decoded_wr_data[0:0];
            load_next_c = '1;
        end else if(1) begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_trig_r.error_internal_trig.next = next_c;
        field_combo.intr_block_rf.error_intr_trig_r.error_internal_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error_intr_trig_r.error_internal_trig.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_intr_trig_r.error_internal_trig.load_next) begin
            field_storage.intr_block_rf.error_intr_trig_r.error_internal_trig.value <= field_combo.intr_block_rf.error_intr_trig_r.error_internal_trig.next;
        end
    end
    // Field: ecc_reg.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_intr_trig_r && decoded_req_is_wr) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.value | decoded_wr_data[0:0];
            load_next_c = '1;
        end else if(1) begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.next = next_c;
        field_combo.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.value <= 'h0;
        end else if(field_combo.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.load_next) begin
            field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.value <= field_combo.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.next;
        end
    end
    // Field: ecc_reg.intr_block_rf.error_internal_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.error_internal_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_internal_intr_count_r && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[31:0];
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_internal_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 'h1) > 'hffffffff) begin // up-counter saturated
                next_c = 'hffffffff;
            end else begin
                next_c = next_c + 'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_internal_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error_internal_intr_count_r.cnt.value >= 'hffffffff);
        field_combo.intr_block_rf.error_internal_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error_internal_intr_count_r.cnt.value >= 'hffffffff);
        if(next_c > 'hffffffff) begin
            next_c = 'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_internal_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error_internal_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.hard_reset_b) begin
        if(~hwif_in.hard_reset_b) begin
            field_storage.intr_block_rf.error_internal_intr_count_r.cnt.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_internal_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error_internal_intr_count_r.cnt.value <= field_combo.intr_block_rf.error_internal_intr_count_r.cnt.next;
        end
    end
    // Field: ecc_reg.intr_block_rf.notif_cmd_done_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.notif_cmd_done_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_cmd_done_intr_count_r && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[31:0];
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 'h1) > 'hffffffff) begin // up-counter saturated
                next_c = 'hffffffff;
            end else begin
                next_c = next_c + 'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_cmd_done_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.notif_cmd_done_intr_count_r.cnt.value >= 'hffffffff);
        field_combo.intr_block_rf.notif_cmd_done_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.notif_cmd_done_intr_count_r.cnt.value >= 'hffffffff);
        if(next_c > 'hffffffff) begin
            next_c = 'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_cmd_done_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.notif_cmd_done_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.notif_cmd_done_intr_count_r.cnt.value <= 'h0;
        end else if(field_combo.intr_block_rf.notif_cmd_done_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.notif_cmd_done_intr_count_r.cnt.value <= field_combo.intr_block_rf.notif_cmd_done_intr_count_r.cnt.next;
        end
    end
    // Field: ecc_reg.intr_block_rf.error_internal_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_internal_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error_internal_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error_internal_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error_internal_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_internal_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error_internal_intr_count_incr_r.pulse.underflow = (next_c < ('h1));
            next_c = next_c - 'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error_internal_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error_internal_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error_internal_intr_count_incr_r.pulse.value <= 'd0);
        field_combo.intr_block_rf.error_internal_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error_internal_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error_internal_intr_count_incr_r.pulse.value <= 'h0;
        end else if(field_combo.intr_block_rf.error_internal_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error_internal_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error_internal_intr_count_incr_r.pulse.next;
        end
    end
    // Field: ecc_reg.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.underflow = (next_c < ('h1));
            next_c = next_c - 'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.value <= 'd0);
        field_combo.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.value <= 'h0;
        end else if(field_combo.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.next;
        end
    end

    //--------------------------------------------------------------------------
    // Readback
    //--------------------------------------------------------------------------
    logic readback_err;
    logic readback_done;
    logic [31:0] readback_data;
    
    // Assign readback values to a flattened array
    logic [98-1:0][31:0] readback_array;
    for(genvar i0=0; i0<2; i0++) begin
        assign readback_array[i0*1 + 0][31:0] = (decoded_reg_strb.ECC_NAME[i0] && !decoded_req_is_wr) ? hwif_in.ECC_NAME[i0].NAME.next : '0;
    end
    for(genvar i0=0; i0<2; i0++) begin
        assign readback_array[i0*1 + 2][31:0] = (decoded_reg_strb.ECC_VERSION[i0] && !decoded_req_is_wr) ? hwif_in.ECC_VERSION[i0].VERSION.next : '0;
    end
    assign readback_array[4][0:0] = (decoded_reg_strb.ECC_STATUS && !decoded_req_is_wr) ? hwif_in.ECC_STATUS.READY.next : '0;
    assign readback_array[4][1:1] = (decoded_reg_strb.ECC_STATUS && !decoded_req_is_wr) ? hwif_in.ECC_STATUS.VALID.next : '0;
    assign readback_array[4][31:2] = '0;
    for(genvar i0=0; i0<12; i0++) begin
        assign readback_array[i0*1 + 5][31:0] = (decoded_reg_strb.ECC_PRIVKEY[i0] && !decoded_req_is_wr) ? field_storage.ECC_PRIVKEY[i0].PRIVKEY.value : '0;
    end
    for(genvar i0=0; i0<12; i0++) begin
        assign readback_array[i0*1 + 17][31:0] = (decoded_reg_strb.ECC_PUBKEY_X[i0] && !decoded_req_is_wr) ? field_storage.ECC_PUBKEY_X[i0].PUBKEY_X.value : '0;
    end
    for(genvar i0=0; i0<12; i0++) begin
        assign readback_array[i0*1 + 29][31:0] = (decoded_reg_strb.ECC_PUBKEY_Y[i0] && !decoded_req_is_wr) ? field_storage.ECC_PUBKEY_Y[i0].PUBKEY_Y.value : '0;
    end
    for(genvar i0=0; i0<12; i0++) begin
        assign readback_array[i0*1 + 41][31:0] = (decoded_reg_strb.ECC_SIGN_R[i0] && !decoded_req_is_wr) ? field_storage.ECC_SIGN_R[i0].SIGN_R.value : '0;
    end
    for(genvar i0=0; i0<12; i0++) begin
        assign readback_array[i0*1 + 53][31:0] = (decoded_reg_strb.ECC_SIGN_S[i0] && !decoded_req_is_wr) ? field_storage.ECC_SIGN_S[i0].SIGN_S.value : '0;
    end
    for(genvar i0=0; i0<12; i0++) begin
        assign readback_array[i0*1 + 65][31:0] = (decoded_reg_strb.ECC_VERIFY_R[i0] && !decoded_req_is_wr) ? field_storage.ECC_VERIFY_R[i0].VERIFY_R.value : '0;
    end
    assign readback_array[77][0:0] = (decoded_reg_strb.ecc_kv_rd_pkey_ctrl && !decoded_req_is_wr) ? field_storage.ecc_kv_rd_pkey_ctrl.read_en.value : '0;
    assign readback_array[77][5:1] = (decoded_reg_strb.ecc_kv_rd_pkey_ctrl && !decoded_req_is_wr) ? field_storage.ecc_kv_rd_pkey_ctrl.read_entry.value : '0;
    assign readback_array[77][6:6] = (decoded_reg_strb.ecc_kv_rd_pkey_ctrl && !decoded_req_is_wr) ? field_storage.ecc_kv_rd_pkey_ctrl.pcr_hash_extend.value : '0;
    assign readback_array[77][31:7] = (decoded_reg_strb.ecc_kv_rd_pkey_ctrl && !decoded_req_is_wr) ? field_storage.ecc_kv_rd_pkey_ctrl.rsvd.value : '0;
    assign readback_array[78][0:0] = (decoded_reg_strb.ecc_kv_rd_pkey_status && !decoded_req_is_wr) ? hwif_in.ecc_kv_rd_pkey_status.READY.next : '0;
    assign readback_array[78][1:1] = (decoded_reg_strb.ecc_kv_rd_pkey_status && !decoded_req_is_wr) ? field_storage.ecc_kv_rd_pkey_status.VALID.value : '0;
    assign readback_array[78][9:2] = (decoded_reg_strb.ecc_kv_rd_pkey_status && !decoded_req_is_wr) ? hwif_in.ecc_kv_rd_pkey_status.ERROR.next : '0;
    assign readback_array[78][31:10] = '0;
    assign readback_array[79][0:0] = (decoded_reg_strb.ecc_kv_rd_seed_ctrl && !decoded_req_is_wr) ? field_storage.ecc_kv_rd_seed_ctrl.read_en.value : '0;
    assign readback_array[79][5:1] = (decoded_reg_strb.ecc_kv_rd_seed_ctrl && !decoded_req_is_wr) ? field_storage.ecc_kv_rd_seed_ctrl.read_entry.value : '0;
    assign readback_array[79][6:6] = (decoded_reg_strb.ecc_kv_rd_seed_ctrl && !decoded_req_is_wr) ? field_storage.ecc_kv_rd_seed_ctrl.pcr_hash_extend.value : '0;
    assign readback_array[79][31:7] = (decoded_reg_strb.ecc_kv_rd_seed_ctrl && !decoded_req_is_wr) ? field_storage.ecc_kv_rd_seed_ctrl.rsvd.value : '0;
    assign readback_array[80][0:0] = (decoded_reg_strb.ecc_kv_rd_seed_status && !decoded_req_is_wr) ? hwif_in.ecc_kv_rd_seed_status.READY.next : '0;
    assign readback_array[80][1:1] = (decoded_reg_strb.ecc_kv_rd_seed_status && !decoded_req_is_wr) ? field_storage.ecc_kv_rd_seed_status.VALID.value : '0;
    assign readback_array[80][9:2] = (decoded_reg_strb.ecc_kv_rd_seed_status && !decoded_req_is_wr) ? hwif_in.ecc_kv_rd_seed_status.ERROR.next : '0;
    assign readback_array[80][31:10] = '0;
    assign readback_array[81][0:0] = (decoded_reg_strb.ecc_kv_rd_msg_ctrl && !decoded_req_is_wr) ? field_storage.ecc_kv_rd_msg_ctrl.read_en.value : '0;
    assign readback_array[81][5:1] = (decoded_reg_strb.ecc_kv_rd_msg_ctrl && !decoded_req_is_wr) ? field_storage.ecc_kv_rd_msg_ctrl.read_entry.value : '0;
    assign readback_array[81][6:6] = (decoded_reg_strb.ecc_kv_rd_msg_ctrl && !decoded_req_is_wr) ? field_storage.ecc_kv_rd_msg_ctrl.pcr_hash_extend.value : '0;
    assign readback_array[81][31:7] = (decoded_reg_strb.ecc_kv_rd_msg_ctrl && !decoded_req_is_wr) ? field_storage.ecc_kv_rd_msg_ctrl.rsvd.value : '0;
    assign readback_array[82][0:0] = (decoded_reg_strb.ecc_kv_rd_msg_status && !decoded_req_is_wr) ? hwif_in.ecc_kv_rd_msg_status.READY.next : '0;
    assign readback_array[82][1:1] = (decoded_reg_strb.ecc_kv_rd_msg_status && !decoded_req_is_wr) ? field_storage.ecc_kv_rd_msg_status.VALID.value : '0;
    assign readback_array[82][9:2] = (decoded_reg_strb.ecc_kv_rd_msg_status && !decoded_req_is_wr) ? hwif_in.ecc_kv_rd_msg_status.ERROR.next : '0;
    assign readback_array[82][31:10] = '0;
    assign readback_array[83][0:0] = (decoded_reg_strb.ecc_kv_wr_pkey_ctrl && !decoded_req_is_wr) ? field_storage.ecc_kv_wr_pkey_ctrl.write_en.value : '0;
    assign readback_array[83][5:1] = (decoded_reg_strb.ecc_kv_wr_pkey_ctrl && !decoded_req_is_wr) ? field_storage.ecc_kv_wr_pkey_ctrl.write_entry.value : '0;
    assign readback_array[83][6:6] = (decoded_reg_strb.ecc_kv_wr_pkey_ctrl && !decoded_req_is_wr) ? field_storage.ecc_kv_wr_pkey_ctrl.hmac_key_dest_valid.value : '0;
    assign readback_array[83][7:7] = (decoded_reg_strb.ecc_kv_wr_pkey_ctrl && !decoded_req_is_wr) ? field_storage.ecc_kv_wr_pkey_ctrl.hmac_block_dest_valid.value : '0;
    assign readback_array[83][8:8] = (decoded_reg_strb.ecc_kv_wr_pkey_ctrl && !decoded_req_is_wr) ? field_storage.ecc_kv_wr_pkey_ctrl.sha_block_dest_valid.value : '0;
    assign readback_array[83][9:9] = (decoded_reg_strb.ecc_kv_wr_pkey_ctrl && !decoded_req_is_wr) ? field_storage.ecc_kv_wr_pkey_ctrl.ecc_pkey_dest_valid.value : '0;
    assign readback_array[83][10:10] = (decoded_reg_strb.ecc_kv_wr_pkey_ctrl && !decoded_req_is_wr) ? field_storage.ecc_kv_wr_pkey_ctrl.ecc_seed_dest_valid.value : '0;
    assign readback_array[83][11:11] = (decoded_reg_strb.ecc_kv_wr_pkey_ctrl && !decoded_req_is_wr) ? field_storage.ecc_kv_wr_pkey_ctrl.ecc_msg_dest_valid.value : '0;
    assign readback_array[83][31:12] = (decoded_reg_strb.ecc_kv_wr_pkey_ctrl && !decoded_req_is_wr) ? field_storage.ecc_kv_wr_pkey_ctrl.rsvd.value : '0;
    assign readback_array[84][0:0] = (decoded_reg_strb.ecc_kv_wr_pkey_status && !decoded_req_is_wr) ? hwif_in.ecc_kv_wr_pkey_status.READY.next : '0;
    assign readback_array[84][1:1] = (decoded_reg_strb.ecc_kv_wr_pkey_status && !decoded_req_is_wr) ? field_storage.ecc_kv_wr_pkey_status.VALID.value : '0;
    assign readback_array[84][9:2] = (decoded_reg_strb.ecc_kv_wr_pkey_status && !decoded_req_is_wr) ? hwif_in.ecc_kv_wr_pkey_status.ERROR.next : '0;
    assign readback_array[84][31:10] = '0;
    assign readback_array[85][0:0] = (decoded_reg_strb.intr_block_rf.global_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.global_intr_en_r.error_en.value : '0;
    assign readback_array[85][1:1] = (decoded_reg_strb.intr_block_rf.global_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.global_intr_en_r.notif_en.value : '0;
    assign readback_array[85][31:2] = '0;
    assign readback_array[86][0:0] = (decoded_reg_strb.intr_block_rf.error_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_en_r.error_internal_en.value : '0;
    assign readback_array[86][31:1] = '0;
    assign readback_array[87][0:0] = (decoded_reg_strb.intr_block_rf.notif_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_intr_en_r.notif_cmd_done_en.value : '0;
    assign readback_array[87][31:1] = '0;
    assign readback_array[88][0:0] = (decoded_reg_strb.intr_block_rf.error_global_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_global_intr_r.agg_sts.value : '0;
    assign readback_array[88][31:1] = '0;
    assign readback_array[89][0:0] = (decoded_reg_strb.intr_block_rf.notif_global_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_global_intr_r.agg_sts.value : '0;
    assign readback_array[89][31:1] = '0;
    assign readback_array[90][0:0] = (decoded_reg_strb.intr_block_rf.error_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_internal_intr_r.error_internal_sts.value : '0;
    assign readback_array[90][31:1] = '0;
    assign readback_array[91][0:0] = (decoded_reg_strb.intr_block_rf.notif_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.value : '0;
    assign readback_array[91][31:1] = '0;
    assign readback_array[92][0:0] = (decoded_reg_strb.intr_block_rf.error_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_trig_r.error_internal_trig.value : '0;
    assign readback_array[92][31:1] = '0;
    assign readback_array[93][0:0] = (decoded_reg_strb.intr_block_rf.notif_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.value : '0;
    assign readback_array[93][31:1] = '0;
    assign readback_array[94][31:0] = (decoded_reg_strb.intr_block_rf.error_internal_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_internal_intr_count_r.cnt.value : '0;
    assign readback_array[95][31:0] = (decoded_reg_strb.intr_block_rf.notif_cmd_done_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_cmd_done_intr_count_r.cnt.value : '0;
    assign readback_array[96][0:0] = (decoded_reg_strb.intr_block_rf.error_internal_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_internal_intr_count_incr_r.pulse.value : '0;
    assign readback_array[96][31:1] = '0;
    assign readback_array[97][0:0] = (decoded_reg_strb.intr_block_rf.notif_cmd_done_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.value : '0;
    assign readback_array[97][31:1] = '0;


    // Reduce the array
    always_comb begin
        automatic logic [31:0] readback_data_var;
        readback_done = decoded_req & ~decoded_req_is_wr;
        readback_err = '0;
        readback_data_var = '0;
        for(int i=0; i<98; i++) readback_data_var |= readback_array[i];
        readback_data = readback_data_var;
    end


    assign cpuif_rd_ack = readback_done;
    assign cpuif_rd_data = readback_data;
    assign cpuif_rd_err = readback_err;


endmodule