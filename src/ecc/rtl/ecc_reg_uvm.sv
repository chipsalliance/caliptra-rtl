
// This file was autogenerated by PeakRDL-uvm
package ecc_reg_uvm;
    `include "uvm_macros.svh"
    import uvm_pkg::*;
    `include "ecc_reg_covergroups.svh"
    // Reg - ecc_reg::ECC_NAME
    class ecc_reg__ECC_NAME extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        ecc_reg__ECC_NAME_bit_cg NAME_bit_cg[32];
        ecc_reg__ECC_NAME_fld_cg fld_cg;
        rand uvm_reg_field NAME;

        function new(string name = "ecc_reg__ECC_NAME");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.NAME = new("NAME");
            this.NAME.configure(this, 32, 0, "RO", 1, 'h0, 0, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(NAME_bit_cg[bt]) NAME_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : ecc_reg__ECC_NAME

    // Reg - ecc_reg::ECC_VERSION
    class ecc_reg__ECC_VERSION extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        ecc_reg__ECC_VERSION_bit_cg VERSION_bit_cg[32];
        ecc_reg__ECC_VERSION_fld_cg fld_cg;
        rand uvm_reg_field VERSION;

        function new(string name = "ecc_reg__ECC_VERSION");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.VERSION = new("VERSION");
            this.VERSION.configure(this, 32, 0, "RO", 1, 'h0, 0, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(VERSION_bit_cg[bt]) VERSION_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : ecc_reg__ECC_VERSION

    // Reg - ecc_reg::ECC_CTRL
    class ecc_reg__ECC_CTRL extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        ecc_reg__ECC_CTRL_bit_cg CTRL_bit_cg[3];
        ecc_reg__ECC_CTRL_bit_cg ZEROIZE_bit_cg[1];
        ecc_reg__ECC_CTRL_bit_cg PCR_SIGN_bit_cg[1];
        ecc_reg__ECC_CTRL_fld_cg fld_cg;
        rand uvm_reg_field CTRL;
        rand uvm_reg_field ZEROIZE;
        rand uvm_reg_field PCR_SIGN;

        function new(string name = "ecc_reg__ECC_CTRL");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.CTRL = new("CTRL");
            this.CTRL.configure(this, 3, 0, "WO", 1, 'h0, 1, 1, 0);
            this.ZEROIZE = new("ZEROIZE");
            this.ZEROIZE.configure(this, 1, 3, "WO", 0, 'h0, 1, 1, 0);
            this.PCR_SIGN = new("PCR_SIGN");
            this.PCR_SIGN.configure(this, 1, 4, "WO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(CTRL_bit_cg[bt]) CTRL_bit_cg[bt] = new();
                foreach(ZEROIZE_bit_cg[bt]) ZEROIZE_bit_cg[bt] = new();
                foreach(PCR_SIGN_bit_cg[bt]) PCR_SIGN_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : ecc_reg__ECC_CTRL

    // Reg - ecc_reg::ECC_STATUS
    class ecc_reg__ECC_STATUS extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        ecc_reg__ECC_STATUS_bit_cg READY_bit_cg[1];
        ecc_reg__ECC_STATUS_bit_cg VALID_bit_cg[1];
        ecc_reg__ECC_STATUS_fld_cg fld_cg;
        rand uvm_reg_field READY;
        rand uvm_reg_field VALID;

        function new(string name = "ecc_reg__ECC_STATUS");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.READY = new("READY");
            this.READY.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            this.VALID = new("VALID");
            this.VALID.configure(this, 1, 1, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(READY_bit_cg[bt]) READY_bit_cg[bt] = new();
                foreach(VALID_bit_cg[bt]) VALID_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : ecc_reg__ECC_STATUS

    // Reg - ecc_reg::ECC_SEED
    class ecc_reg__ECC_SEED extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        ecc_reg__ECC_SEED_bit_cg SEED_bit_cg[32];
        ecc_reg__ECC_SEED_fld_cg fld_cg;
        rand uvm_reg_field SEED;

        function new(string name = "ecc_reg__ECC_SEED");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.SEED = new("SEED");
            this.SEED.configure(this, 32, 0, "WO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(SEED_bit_cg[bt]) SEED_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : ecc_reg__ECC_SEED

    // Reg - ecc_reg::ECC_MSG
    class ecc_reg__ECC_MSG extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        ecc_reg__ECC_MSG_bit_cg MSG_bit_cg[32];
        ecc_reg__ECC_MSG_fld_cg fld_cg;
        rand uvm_reg_field MSG;

        function new(string name = "ecc_reg__ECC_MSG");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.MSG = new("MSG");
            this.MSG.configure(this, 32, 0, "WO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(MSG_bit_cg[bt]) MSG_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : ecc_reg__ECC_MSG

    // Reg - ecc_reg::ECC_PRIVKEY_OUT
    class ecc_reg__ECC_PRIVKEY_OUT extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        ecc_reg__ECC_PRIVKEY_OUT_bit_cg PRIVKEY_OUT_bit_cg[32];
        ecc_reg__ECC_PRIVKEY_OUT_fld_cg fld_cg;
        rand uvm_reg_field PRIVKEY_OUT;

        function new(string name = "ecc_reg__ECC_PRIVKEY_OUT");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.PRIVKEY_OUT = new("PRIVKEY_OUT");
            this.PRIVKEY_OUT.configure(this, 32, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(PRIVKEY_OUT_bit_cg[bt]) PRIVKEY_OUT_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : ecc_reg__ECC_PRIVKEY_OUT

    // Reg - ecc_reg::ECC_PUBKEY_X
    class ecc_reg__ECC_PUBKEY_X extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        ecc_reg__ECC_PUBKEY_X_bit_cg PUBKEY_X_bit_cg[32];
        ecc_reg__ECC_PUBKEY_X_fld_cg fld_cg;
        rand uvm_reg_field PUBKEY_X;

        function new(string name = "ecc_reg__ECC_PUBKEY_X");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.PUBKEY_X = new("PUBKEY_X");
            this.PUBKEY_X.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(PUBKEY_X_bit_cg[bt]) PUBKEY_X_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : ecc_reg__ECC_PUBKEY_X

    // Reg - ecc_reg::ECC_PUBKEY_Y
    class ecc_reg__ECC_PUBKEY_Y extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        ecc_reg__ECC_PUBKEY_Y_bit_cg PUBKEY_Y_bit_cg[32];
        ecc_reg__ECC_PUBKEY_Y_fld_cg fld_cg;
        rand uvm_reg_field PUBKEY_Y;

        function new(string name = "ecc_reg__ECC_PUBKEY_Y");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.PUBKEY_Y = new("PUBKEY_Y");
            this.PUBKEY_Y.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(PUBKEY_Y_bit_cg[bt]) PUBKEY_Y_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : ecc_reg__ECC_PUBKEY_Y

    // Reg - ecc_reg::ECC_SIGN_R
    class ecc_reg__ECC_SIGN_R extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        ecc_reg__ECC_SIGN_R_bit_cg SIGN_R_bit_cg[32];
        ecc_reg__ECC_SIGN_R_fld_cg fld_cg;
        rand uvm_reg_field SIGN_R;

        function new(string name = "ecc_reg__ECC_SIGN_R");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.SIGN_R = new("SIGN_R");
            this.SIGN_R.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(SIGN_R_bit_cg[bt]) SIGN_R_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : ecc_reg__ECC_SIGN_R

    // Reg - ecc_reg::ECC_SIGN_S
    class ecc_reg__ECC_SIGN_S extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        ecc_reg__ECC_SIGN_S_bit_cg SIGN_S_bit_cg[32];
        ecc_reg__ECC_SIGN_S_fld_cg fld_cg;
        rand uvm_reg_field SIGN_S;

        function new(string name = "ecc_reg__ECC_SIGN_S");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.SIGN_S = new("SIGN_S");
            this.SIGN_S.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(SIGN_S_bit_cg[bt]) SIGN_S_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : ecc_reg__ECC_SIGN_S

    // Reg - ecc_reg::ECC_VERIFY_R
    class ecc_reg__ECC_VERIFY_R extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        ecc_reg__ECC_VERIFY_R_bit_cg VERIFY_R_bit_cg[32];
        ecc_reg__ECC_VERIFY_R_fld_cg fld_cg;
        rand uvm_reg_field VERIFY_R;

        function new(string name = "ecc_reg__ECC_VERIFY_R");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.VERIFY_R = new("VERIFY_R");
            this.VERIFY_R.configure(this, 32, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(VERIFY_R_bit_cg[bt]) VERIFY_R_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : ecc_reg__ECC_VERIFY_R

    // Reg - ecc_reg::ECC_IV
    class ecc_reg__ECC_IV extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        ecc_reg__ECC_IV_bit_cg IV_bit_cg[32];
        ecc_reg__ECC_IV_fld_cg fld_cg;
        rand uvm_reg_field IV;

        function new(string name = "ecc_reg__ECC_IV");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.IV = new("IV");
            this.IV.configure(this, 32, 0, "WO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(IV_bit_cg[bt]) IV_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : ecc_reg__ECC_IV

    // Reg - ecc_reg::ECC_NONCE
    class ecc_reg__ECC_NONCE extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        ecc_reg__ECC_NONCE_bit_cg NONCE_bit_cg[32];
        ecc_reg__ECC_NONCE_fld_cg fld_cg;
        rand uvm_reg_field NONCE;

        function new(string name = "ecc_reg__ECC_NONCE");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.NONCE = new("NONCE");
            this.NONCE.configure(this, 32, 0, "WO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(NONCE_bit_cg[bt]) NONCE_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : ecc_reg__ECC_NONCE

    // Reg - ecc_reg::ECC_PRIVKEY_IN
    class ecc_reg__ECC_PRIVKEY_IN extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        ecc_reg__ECC_PRIVKEY_IN_bit_cg PRIVKEY_IN_bit_cg[32];
        ecc_reg__ECC_PRIVKEY_IN_fld_cg fld_cg;
        rand uvm_reg_field PRIVKEY_IN;

        function new(string name = "ecc_reg__ECC_PRIVKEY_IN");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.PRIVKEY_IN = new("PRIVKEY_IN");
            this.PRIVKEY_IN.configure(this, 32, 0, "WO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(PRIVKEY_IN_bit_cg[bt]) PRIVKEY_IN_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : ecc_reg__ECC_PRIVKEY_IN

    // Reg - ecc_reg::ECC_DH_SHARED_KEY
    class ecc_reg__ECC_DH_SHARED_KEY extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        ecc_reg__ECC_DH_SHARED_KEY_bit_cg DH_SHARED_KEY_bit_cg[32];
        ecc_reg__ECC_DH_SHARED_KEY_fld_cg fld_cg;
        rand uvm_reg_field DH_SHARED_KEY;

        function new(string name = "ecc_reg__ECC_DH_SHARED_KEY");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.DH_SHARED_KEY = new("DH_SHARED_KEY");
            this.DH_SHARED_KEY.configure(this, 32, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(DH_SHARED_KEY_bit_cg[bt]) DH_SHARED_KEY_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : ecc_reg__ECC_DH_SHARED_KEY

    // Reg - kv_read_ctrl_reg
    class kv_read_ctrl_reg extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        kv_read_ctrl_reg_bit_cg read_en_bit_cg[1];
        kv_read_ctrl_reg_bit_cg read_entry_bit_cg[5];
        kv_read_ctrl_reg_bit_cg pcr_hash_extend_bit_cg[1];
        kv_read_ctrl_reg_bit_cg rsvd_bit_cg[25];
        kv_read_ctrl_reg_fld_cg fld_cg;
        rand uvm_reg_field read_en;
        rand uvm_reg_field read_entry;
        rand uvm_reg_field pcr_hash_extend;
        rand uvm_reg_field rsvd;

        function new(string name = "kv_read_ctrl_reg");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.read_en = new("read_en");
            this.read_en.configure(this, 1, 0, "RW", 1, 'h0, 1, 1, 0);
            this.read_entry = new("read_entry");
            this.read_entry.configure(this, 5, 1, "RW", 0, 'h0, 1, 1, 0);
            this.pcr_hash_extend = new("pcr_hash_extend");
            this.pcr_hash_extend.configure(this, 1, 6, "RW", 0, 'h0, 1, 1, 0);
            this.rsvd = new("rsvd");
            this.rsvd.configure(this, 25, 7, "RW", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(read_en_bit_cg[bt]) read_en_bit_cg[bt] = new();
                foreach(read_entry_bit_cg[bt]) read_entry_bit_cg[bt] = new();
                foreach(pcr_hash_extend_bit_cg[bt]) pcr_hash_extend_bit_cg[bt] = new();
                foreach(rsvd_bit_cg[bt]) rsvd_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : kv_read_ctrl_reg

    // Reg - kv_status_reg
    class kv_status_reg extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        kv_status_reg_bit_cg READY_bit_cg[1];
        kv_status_reg_bit_cg VALID_bit_cg[1];
        kv_status_reg_bit_cg ERROR_bit_cg[8];
        kv_status_reg_fld_cg fld_cg;
        rand uvm_reg_field READY;
        rand uvm_reg_field VALID;
        rand uvm_reg_field ERROR;

        function new(string name = "kv_status_reg");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.READY = new("READY");
            this.READY.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            this.VALID = new("VALID");
            this.VALID.configure(this, 1, 1, "RO", 1, 'h0, 1, 1, 0);
            this.ERROR = new("ERROR");
            this.ERROR.configure(this, 8, 2, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(READY_bit_cg[bt]) READY_bit_cg[bt] = new();
                foreach(VALID_bit_cg[bt]) VALID_bit_cg[bt] = new();
                foreach(ERROR_bit_cg[bt]) ERROR_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : kv_status_reg

    // Reg - kv_write_ctrl_reg
    class kv_write_ctrl_reg extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        kv_write_ctrl_reg_bit_cg write_en_bit_cg[1];
        kv_write_ctrl_reg_bit_cg write_entry_bit_cg[5];
        kv_write_ctrl_reg_bit_cg hmac_key_dest_valid_bit_cg[1];
        kv_write_ctrl_reg_bit_cg hmac_block_dest_valid_bit_cg[1];
        kv_write_ctrl_reg_bit_cg sha_block_dest_valid_bit_cg[1];
        kv_write_ctrl_reg_bit_cg ecc_pkey_dest_valid_bit_cg[1];
        kv_write_ctrl_reg_bit_cg ecc_seed_dest_valid_bit_cg[1];
        kv_write_ctrl_reg_bit_cg rsvd_bit_cg[21];
        kv_write_ctrl_reg_fld_cg fld_cg;
        rand uvm_reg_field write_en;
        rand uvm_reg_field write_entry;
        rand uvm_reg_field hmac_key_dest_valid;
        rand uvm_reg_field hmac_block_dest_valid;
        rand uvm_reg_field sha_block_dest_valid;
        rand uvm_reg_field ecc_pkey_dest_valid;
        rand uvm_reg_field ecc_seed_dest_valid;
        rand uvm_reg_field rsvd;

        function new(string name = "kv_write_ctrl_reg");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.write_en = new("write_en");
            this.write_en.configure(this, 1, 0, "RW", 1, 'h0, 1, 1, 0);
            this.write_entry = new("write_entry");
            this.write_entry.configure(this, 5, 1, "RW", 0, 'h0, 1, 1, 0);
            this.hmac_key_dest_valid = new("hmac_key_dest_valid");
            this.hmac_key_dest_valid.configure(this, 1, 6, "RW", 0, 'h0, 1, 1, 0);
            this.hmac_block_dest_valid = new("hmac_block_dest_valid");
            this.hmac_block_dest_valid.configure(this, 1, 7, "RW", 0, 'h0, 1, 1, 0);
            this.sha_block_dest_valid = new("sha_block_dest_valid");
            this.sha_block_dest_valid.configure(this, 1, 8, "RW", 0, 'h0, 1, 1, 0);
            this.ecc_pkey_dest_valid = new("ecc_pkey_dest_valid");
            this.ecc_pkey_dest_valid.configure(this, 1, 9, "RW", 0, 'h0, 1, 1, 0);
            this.ecc_seed_dest_valid = new("ecc_seed_dest_valid");
            this.ecc_seed_dest_valid.configure(this, 1, 10, "RW", 0, 'h0, 1, 1, 0);
            this.rsvd = new("rsvd");
            this.rsvd.configure(this, 21, 11, "RW", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(write_en_bit_cg[bt]) write_en_bit_cg[bt] = new();
                foreach(write_entry_bit_cg[bt]) write_entry_bit_cg[bt] = new();
                foreach(hmac_key_dest_valid_bit_cg[bt]) hmac_key_dest_valid_bit_cg[bt] = new();
                foreach(hmac_block_dest_valid_bit_cg[bt]) hmac_block_dest_valid_bit_cg[bt] = new();
                foreach(sha_block_dest_valid_bit_cg[bt]) sha_block_dest_valid_bit_cg[bt] = new();
                foreach(ecc_pkey_dest_valid_bit_cg[bt]) ecc_pkey_dest_valid_bit_cg[bt] = new();
                foreach(ecc_seed_dest_valid_bit_cg[bt]) ecc_seed_dest_valid_bit_cg[bt] = new();
                foreach(rsvd_bit_cg[bt]) rsvd_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : kv_write_ctrl_reg

    // Reg - ecc_reg::intr_block_t::global_intr_en_t
    class ecc_reg__intr_block_t__global_intr_en_t extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        ecc_reg__intr_block_t__global_intr_en_t_bit_cg error_en_bit_cg[1];
        ecc_reg__intr_block_t__global_intr_en_t_bit_cg notif_en_bit_cg[1];
        ecc_reg__intr_block_t__global_intr_en_t_fld_cg fld_cg;
        rand uvm_reg_field error_en;
        rand uvm_reg_field notif_en;

        function new(string name = "ecc_reg__intr_block_t__global_intr_en_t");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.error_en = new("error_en");
            this.error_en.configure(this, 1, 0, "RW", 0, 'h0, 1, 1, 0);
            this.notif_en = new("notif_en");
            this.notif_en.configure(this, 1, 1, "RW", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(error_en_bit_cg[bt]) error_en_bit_cg[bt] = new();
                foreach(notif_en_bit_cg[bt]) notif_en_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : ecc_reg__intr_block_t__global_intr_en_t

    // Reg - ecc_reg::intr_block_t::error_intr_en_t
    class ecc_reg__intr_block_t__error_intr_en_t extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        ecc_reg__intr_block_t__error_intr_en_t_bit_cg error_internal_en_bit_cg[1];
        ecc_reg__intr_block_t__error_intr_en_t_fld_cg fld_cg;
        rand uvm_reg_field error_internal_en;

        function new(string name = "ecc_reg__intr_block_t__error_intr_en_t");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.error_internal_en = new("error_internal_en");
            this.error_internal_en.configure(this, 1, 0, "RW", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(error_internal_en_bit_cg[bt]) error_internal_en_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : ecc_reg__intr_block_t__error_intr_en_t

    // Reg - ecc_reg::intr_block_t::notif_intr_en_t
    class ecc_reg__intr_block_t__notif_intr_en_t extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        ecc_reg__intr_block_t__notif_intr_en_t_bit_cg notif_cmd_done_en_bit_cg[1];
        ecc_reg__intr_block_t__notif_intr_en_t_fld_cg fld_cg;
        rand uvm_reg_field notif_cmd_done_en;

        function new(string name = "ecc_reg__intr_block_t__notif_intr_en_t");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.notif_cmd_done_en = new("notif_cmd_done_en");
            this.notif_cmd_done_en.configure(this, 1, 0, "RW", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(notif_cmd_done_en_bit_cg[bt]) notif_cmd_done_en_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : ecc_reg__intr_block_t__notif_intr_en_t

    // Reg - ecc_reg::intr_block_t::global_intr_t_agg_sts_dd3dcf0a
    class ecc_reg__intr_block_t__global_intr_t_agg_sts_dd3dcf0a extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        ecc_reg__intr_block_t__global_intr_t_agg_sts_dd3dcf0a_bit_cg agg_sts_bit_cg[1];
        ecc_reg__intr_block_t__global_intr_t_agg_sts_dd3dcf0a_fld_cg fld_cg;
        rand uvm_reg_field agg_sts;

        function new(string name = "ecc_reg__intr_block_t__global_intr_t_agg_sts_dd3dcf0a");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.agg_sts = new("agg_sts");
            this.agg_sts.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(agg_sts_bit_cg[bt]) agg_sts_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : ecc_reg__intr_block_t__global_intr_t_agg_sts_dd3dcf0a

    // Reg - ecc_reg::intr_block_t::global_intr_t_agg_sts_e6399b4a
    class ecc_reg__intr_block_t__global_intr_t_agg_sts_e6399b4a extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        ecc_reg__intr_block_t__global_intr_t_agg_sts_e6399b4a_bit_cg agg_sts_bit_cg[1];
        ecc_reg__intr_block_t__global_intr_t_agg_sts_e6399b4a_fld_cg fld_cg;
        rand uvm_reg_field agg_sts;

        function new(string name = "ecc_reg__intr_block_t__global_intr_t_agg_sts_e6399b4a");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.agg_sts = new("agg_sts");
            this.agg_sts.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(agg_sts_bit_cg[bt]) agg_sts_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : ecc_reg__intr_block_t__global_intr_t_agg_sts_e6399b4a

    // Reg - ecc_reg::intr_block_t::error_intr_t_error_internal_sts_83adab02
    class ecc_reg__intr_block_t__error_intr_t_error_internal_sts_83adab02 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        ecc_reg__intr_block_t__error_intr_t_error_internal_sts_83adab02_bit_cg error_internal_sts_bit_cg[1];
        ecc_reg__intr_block_t__error_intr_t_error_internal_sts_83adab02_fld_cg fld_cg;
        rand uvm_reg_field error_internal_sts;

        function new(string name = "ecc_reg__intr_block_t__error_intr_t_error_internal_sts_83adab02");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.error_internal_sts = new("error_internal_sts");
            this.error_internal_sts.configure(this, 1, 0, "W1C", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(error_internal_sts_bit_cg[bt]) error_internal_sts_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : ecc_reg__intr_block_t__error_intr_t_error_internal_sts_83adab02

    // Reg - ecc_reg::intr_block_t::notif_intr_t_notif_cmd_done_sts_1c68637e
    class ecc_reg__intr_block_t__notif_intr_t_notif_cmd_done_sts_1c68637e extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        ecc_reg__intr_block_t__notif_intr_t_notif_cmd_done_sts_1c68637e_bit_cg notif_cmd_done_sts_bit_cg[1];
        ecc_reg__intr_block_t__notif_intr_t_notif_cmd_done_sts_1c68637e_fld_cg fld_cg;
        rand uvm_reg_field notif_cmd_done_sts;

        function new(string name = "ecc_reg__intr_block_t__notif_intr_t_notif_cmd_done_sts_1c68637e");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.notif_cmd_done_sts = new("notif_cmd_done_sts");
            this.notif_cmd_done_sts.configure(this, 1, 0, "W1C", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(notif_cmd_done_sts_bit_cg[bt]) notif_cmd_done_sts_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : ecc_reg__intr_block_t__notif_intr_t_notif_cmd_done_sts_1c68637e

    // Reg - ecc_reg::intr_block_t::error_intr_trig_t
    class ecc_reg__intr_block_t__error_intr_trig_t extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        ecc_reg__intr_block_t__error_intr_trig_t_bit_cg error_internal_trig_bit_cg[1];
        ecc_reg__intr_block_t__error_intr_trig_t_fld_cg fld_cg;
        rand uvm_reg_field error_internal_trig;

        function new(string name = "ecc_reg__intr_block_t__error_intr_trig_t");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.error_internal_trig = new("error_internal_trig");
            this.error_internal_trig.configure(this, 1, 0, "W1S", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(error_internal_trig_bit_cg[bt]) error_internal_trig_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : ecc_reg__intr_block_t__error_intr_trig_t

    // Reg - ecc_reg::intr_block_t::notif_intr_trig_t
    class ecc_reg__intr_block_t__notif_intr_trig_t extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        ecc_reg__intr_block_t__notif_intr_trig_t_bit_cg notif_cmd_done_trig_bit_cg[1];
        ecc_reg__intr_block_t__notif_intr_trig_t_fld_cg fld_cg;
        rand uvm_reg_field notif_cmd_done_trig;

        function new(string name = "ecc_reg__intr_block_t__notif_intr_trig_t");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.notif_cmd_done_trig = new("notif_cmd_done_trig");
            this.notif_cmd_done_trig.configure(this, 1, 0, "W1S", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(notif_cmd_done_trig_bit_cg[bt]) notif_cmd_done_trig_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : ecc_reg__intr_block_t__notif_intr_trig_t

    // Reg - ecc_reg::intr_block_t::intr_count_t_cnt_60ddff93
    class ecc_reg__intr_block_t__intr_count_t_cnt_60ddff93 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        ecc_reg__intr_block_t__intr_count_t_cnt_60ddff93_bit_cg cnt_bit_cg[32];
        ecc_reg__intr_block_t__intr_count_t_cnt_60ddff93_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "ecc_reg__intr_block_t__intr_count_t_cnt_60ddff93");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : ecc_reg__intr_block_t__intr_count_t_cnt_60ddff93

    // Reg - ecc_reg::intr_block_t::intr_count_t_cnt_be67d6d5
    class ecc_reg__intr_block_t__intr_count_t_cnt_be67d6d5 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        ecc_reg__intr_block_t__intr_count_t_cnt_be67d6d5_bit_cg cnt_bit_cg[32];
        ecc_reg__intr_block_t__intr_count_t_cnt_be67d6d5_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "ecc_reg__intr_block_t__intr_count_t_cnt_be67d6d5");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : ecc_reg__intr_block_t__intr_count_t_cnt_be67d6d5

    // Reg - ecc_reg::intr_block_t::intr_count_incr_t_pulse_15e6ed7e
    class ecc_reg__intr_block_t__intr_count_incr_t_pulse_15e6ed7e extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        ecc_reg__intr_block_t__intr_count_incr_t_pulse_15e6ed7e_bit_cg pulse_bit_cg[1];
        ecc_reg__intr_block_t__intr_count_incr_t_pulse_15e6ed7e_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "ecc_reg__intr_block_t__intr_count_incr_t_pulse_15e6ed7e");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : ecc_reg__intr_block_t__intr_count_incr_t_pulse_15e6ed7e

    // Reg - ecc_reg::intr_block_t::intr_count_incr_t_pulse_6173128e
    class ecc_reg__intr_block_t__intr_count_incr_t_pulse_6173128e extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        ecc_reg__intr_block_t__intr_count_incr_t_pulse_6173128e_bit_cg pulse_bit_cg[1];
        ecc_reg__intr_block_t__intr_count_incr_t_pulse_6173128e_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "ecc_reg__intr_block_t__intr_count_incr_t_pulse_6173128e");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : ecc_reg__intr_block_t__intr_count_incr_t_pulse_6173128e

    // Regfile - ecc_reg::intr_block_t
    class ecc_reg__intr_block_t extends uvm_reg_block;
        rand ecc_reg__intr_block_t__global_intr_en_t global_intr_en_r;
        rand ecc_reg__intr_block_t__error_intr_en_t error_intr_en_r;
        rand ecc_reg__intr_block_t__notif_intr_en_t notif_intr_en_r;
        rand ecc_reg__intr_block_t__global_intr_t_agg_sts_dd3dcf0a error_global_intr_r;
        rand ecc_reg__intr_block_t__global_intr_t_agg_sts_e6399b4a notif_global_intr_r;
        rand ecc_reg__intr_block_t__error_intr_t_error_internal_sts_83adab02 error_internal_intr_r;
        rand ecc_reg__intr_block_t__notif_intr_t_notif_cmd_done_sts_1c68637e notif_internal_intr_r;
        rand ecc_reg__intr_block_t__error_intr_trig_t error_intr_trig_r;
        rand ecc_reg__intr_block_t__notif_intr_trig_t notif_intr_trig_r;
        rand ecc_reg__intr_block_t__intr_count_t_cnt_60ddff93 error_internal_intr_count_r;
        rand ecc_reg__intr_block_t__intr_count_t_cnt_be67d6d5 notif_cmd_done_intr_count_r;
        rand ecc_reg__intr_block_t__intr_count_incr_t_pulse_15e6ed7e error_internal_intr_count_incr_r;
        rand ecc_reg__intr_block_t__intr_count_incr_t_pulse_6173128e notif_cmd_done_intr_count_incr_r;

        function new(string name = "ecc_reg__intr_block_t");
            super.new(name);
        endfunction : new

        virtual function void build();
            this.default_map = create_map("reg_map", 0, 4, UVM_NO_ENDIAN);
            this.global_intr_en_r = new("global_intr_en_r");
            this.global_intr_en_r.configure(this);

            this.global_intr_en_r.build();
            this.default_map.add_reg(this.global_intr_en_r, 'h0);
            this.error_intr_en_r = new("error_intr_en_r");
            this.error_intr_en_r.configure(this);

            this.error_intr_en_r.build();
            this.default_map.add_reg(this.error_intr_en_r, 'h4);
            this.notif_intr_en_r = new("notif_intr_en_r");
            this.notif_intr_en_r.configure(this);

            this.notif_intr_en_r.build();
            this.default_map.add_reg(this.notif_intr_en_r, 'h8);
            this.error_global_intr_r = new("error_global_intr_r");
            this.error_global_intr_r.configure(this);

            this.error_global_intr_r.build();
            this.default_map.add_reg(this.error_global_intr_r, 'hc);
            this.notif_global_intr_r = new("notif_global_intr_r");
            this.notif_global_intr_r.configure(this);

            this.notif_global_intr_r.build();
            this.default_map.add_reg(this.notif_global_intr_r, 'h10);
            this.error_internal_intr_r = new("error_internal_intr_r");
            this.error_internal_intr_r.configure(this);

            this.error_internal_intr_r.build();
            this.default_map.add_reg(this.error_internal_intr_r, 'h14);
            this.notif_internal_intr_r = new("notif_internal_intr_r");
            this.notif_internal_intr_r.configure(this);

            this.notif_internal_intr_r.build();
            this.default_map.add_reg(this.notif_internal_intr_r, 'h18);
            this.error_intr_trig_r = new("error_intr_trig_r");
            this.error_intr_trig_r.configure(this);

            this.error_intr_trig_r.build();
            this.default_map.add_reg(this.error_intr_trig_r, 'h1c);
            this.notif_intr_trig_r = new("notif_intr_trig_r");
            this.notif_intr_trig_r.configure(this);

            this.notif_intr_trig_r.build();
            this.default_map.add_reg(this.notif_intr_trig_r, 'h20);
            this.error_internal_intr_count_r = new("error_internal_intr_count_r");
            this.error_internal_intr_count_r.configure(this);

            this.error_internal_intr_count_r.build();
            this.default_map.add_reg(this.error_internal_intr_count_r, 'h100);
            this.notif_cmd_done_intr_count_r = new("notif_cmd_done_intr_count_r");
            this.notif_cmd_done_intr_count_r.configure(this);

            this.notif_cmd_done_intr_count_r.build();
            this.default_map.add_reg(this.notif_cmd_done_intr_count_r, 'h180);
            this.error_internal_intr_count_incr_r = new("error_internal_intr_count_incr_r");
            this.error_internal_intr_count_incr_r.configure(this);

            this.error_internal_intr_count_incr_r.build();
            this.default_map.add_reg(this.error_internal_intr_count_incr_r, 'h200);
            this.notif_cmd_done_intr_count_incr_r = new("notif_cmd_done_intr_count_incr_r");
            this.notif_cmd_done_intr_count_incr_r.configure(this);

            this.notif_cmd_done_intr_count_incr_r.build();
            this.default_map.add_reg(this.notif_cmd_done_intr_count_incr_r, 'h204);
        endfunction : build
    endclass : ecc_reg__intr_block_t

    // Addrmap - ecc_reg
    class ecc_reg extends uvm_reg_block;
        rand ecc_reg__ECC_NAME ECC_NAME[2];
        rand ecc_reg__ECC_VERSION ECC_VERSION[2];
        rand ecc_reg__ECC_CTRL ECC_CTRL;
        rand ecc_reg__ECC_STATUS ECC_STATUS;
        rand ecc_reg__ECC_SEED ECC_SEED[12];
        rand ecc_reg__ECC_MSG ECC_MSG[12];
        rand ecc_reg__ECC_PRIVKEY_OUT ECC_PRIVKEY_OUT[12];
        rand ecc_reg__ECC_PUBKEY_X ECC_PUBKEY_X[12];
        rand ecc_reg__ECC_PUBKEY_Y ECC_PUBKEY_Y[12];
        rand ecc_reg__ECC_SIGN_R ECC_SIGN_R[12];
        rand ecc_reg__ECC_SIGN_S ECC_SIGN_S[12];
        rand ecc_reg__ECC_VERIFY_R ECC_VERIFY_R[12];
        rand ecc_reg__ECC_IV ECC_IV[12];
        rand ecc_reg__ECC_NONCE ECC_NONCE[12];
        rand ecc_reg__ECC_PRIVKEY_IN ECC_PRIVKEY_IN[12];
        rand ecc_reg__ECC_DH_SHARED_KEY ECC_DH_SHARED_KEY[12];
        rand kv_read_ctrl_reg ecc_kv_rd_pkey_ctrl;
        rand kv_status_reg ecc_kv_rd_pkey_status;
        rand kv_read_ctrl_reg ecc_kv_rd_seed_ctrl;
        rand kv_status_reg ecc_kv_rd_seed_status;
        rand kv_write_ctrl_reg ecc_kv_wr_pkey_ctrl;
        rand kv_status_reg ecc_kv_wr_pkey_status;
        rand ecc_reg__intr_block_t intr_block_rf;

        function new(string name = "ecc_reg");
            super.new(name);
        endfunction : new

        virtual function void build();
            this.default_map = create_map("reg_map", 0, 4, UVM_NO_ENDIAN);
            foreach(this.ECC_NAME[i0]) begin
                this.ECC_NAME[i0] = new($sformatf("ECC_NAME[%0d]", i0));
                this.ECC_NAME[i0].configure(this);
                
                this.ECC_NAME[i0].build();
                this.default_map.add_reg(this.ECC_NAME[i0], 'h0 + i0*'h4);
            end
            foreach(this.ECC_VERSION[i0]) begin
                this.ECC_VERSION[i0] = new($sformatf("ECC_VERSION[%0d]", i0));
                this.ECC_VERSION[i0].configure(this);
                
                this.ECC_VERSION[i0].build();
                this.default_map.add_reg(this.ECC_VERSION[i0], 'h8 + i0*'h4);
            end
            this.ECC_CTRL = new("ECC_CTRL");
            this.ECC_CTRL.configure(this);

            this.ECC_CTRL.build();
            this.default_map.add_reg(this.ECC_CTRL, 'h10);
            this.ECC_STATUS = new("ECC_STATUS");
            this.ECC_STATUS.configure(this);

            this.ECC_STATUS.build();
            this.default_map.add_reg(this.ECC_STATUS, 'h18);
            foreach(this.ECC_SEED[i0]) begin
                this.ECC_SEED[i0] = new($sformatf("ECC_SEED[%0d]", i0));
                this.ECC_SEED[i0].configure(this);
                
                this.ECC_SEED[i0].build();
                this.default_map.add_reg(this.ECC_SEED[i0], 'h80 + i0*'h4);
            end
            foreach(this.ECC_MSG[i0]) begin
                this.ECC_MSG[i0] = new($sformatf("ECC_MSG[%0d]", i0));
                this.ECC_MSG[i0].configure(this);
                
                this.ECC_MSG[i0].build();
                this.default_map.add_reg(this.ECC_MSG[i0], 'h100 + i0*'h4);
            end
            foreach(this.ECC_PRIVKEY_OUT[i0]) begin
                this.ECC_PRIVKEY_OUT[i0] = new($sformatf("ECC_PRIVKEY_OUT[%0d]", i0));
                this.ECC_PRIVKEY_OUT[i0].configure(this);
                
                this.ECC_PRIVKEY_OUT[i0].build();
                this.default_map.add_reg(this.ECC_PRIVKEY_OUT[i0], 'h180 + i0*'h4);
            end
            foreach(this.ECC_PUBKEY_X[i0]) begin
                this.ECC_PUBKEY_X[i0] = new($sformatf("ECC_PUBKEY_X[%0d]", i0));
                this.ECC_PUBKEY_X[i0].configure(this);
                
                this.ECC_PUBKEY_X[i0].build();
                this.default_map.add_reg(this.ECC_PUBKEY_X[i0], 'h200 + i0*'h4);
            end
            foreach(this.ECC_PUBKEY_Y[i0]) begin
                this.ECC_PUBKEY_Y[i0] = new($sformatf("ECC_PUBKEY_Y[%0d]", i0));
                this.ECC_PUBKEY_Y[i0].configure(this);
                
                this.ECC_PUBKEY_Y[i0].build();
                this.default_map.add_reg(this.ECC_PUBKEY_Y[i0], 'h280 + i0*'h4);
            end
            foreach(this.ECC_SIGN_R[i0]) begin
                this.ECC_SIGN_R[i0] = new($sformatf("ECC_SIGN_R[%0d]", i0));
                this.ECC_SIGN_R[i0].configure(this);
                
                this.ECC_SIGN_R[i0].build();
                this.default_map.add_reg(this.ECC_SIGN_R[i0], 'h300 + i0*'h4);
            end
            foreach(this.ECC_SIGN_S[i0]) begin
                this.ECC_SIGN_S[i0] = new($sformatf("ECC_SIGN_S[%0d]", i0));
                this.ECC_SIGN_S[i0].configure(this);
                
                this.ECC_SIGN_S[i0].build();
                this.default_map.add_reg(this.ECC_SIGN_S[i0], 'h380 + i0*'h4);
            end
            foreach(this.ECC_VERIFY_R[i0]) begin
                this.ECC_VERIFY_R[i0] = new($sformatf("ECC_VERIFY_R[%0d]", i0));
                this.ECC_VERIFY_R[i0].configure(this);
                
                this.ECC_VERIFY_R[i0].build();
                this.default_map.add_reg(this.ECC_VERIFY_R[i0], 'h400 + i0*'h4);
            end
            foreach(this.ECC_IV[i0]) begin
                this.ECC_IV[i0] = new($sformatf("ECC_IV[%0d]", i0));
                this.ECC_IV[i0].configure(this);
                
                this.ECC_IV[i0].build();
                this.default_map.add_reg(this.ECC_IV[i0], 'h480 + i0*'h4);
            end
            foreach(this.ECC_NONCE[i0]) begin
                this.ECC_NONCE[i0] = new($sformatf("ECC_NONCE[%0d]", i0));
                this.ECC_NONCE[i0].configure(this);
                
                this.ECC_NONCE[i0].build();
                this.default_map.add_reg(this.ECC_NONCE[i0], 'h500 + i0*'h4);
            end
            foreach(this.ECC_PRIVKEY_IN[i0]) begin
                this.ECC_PRIVKEY_IN[i0] = new($sformatf("ECC_PRIVKEY_IN[%0d]", i0));
                this.ECC_PRIVKEY_IN[i0].configure(this);
                
                this.ECC_PRIVKEY_IN[i0].build();
                this.default_map.add_reg(this.ECC_PRIVKEY_IN[i0], 'h580 + i0*'h4);
            end
            foreach(this.ECC_DH_SHARED_KEY[i0]) begin
                this.ECC_DH_SHARED_KEY[i0] = new($sformatf("ECC_DH_SHARED_KEY[%0d]", i0));
                this.ECC_DH_SHARED_KEY[i0].configure(this);
                
                this.ECC_DH_SHARED_KEY[i0].build();
                this.default_map.add_reg(this.ECC_DH_SHARED_KEY[i0], 'h600 + i0*'h4);
            end
            this.ecc_kv_rd_pkey_ctrl = new("ecc_kv_rd_pkey_ctrl");
            this.ecc_kv_rd_pkey_ctrl.configure(this);

            this.ecc_kv_rd_pkey_ctrl.build();
            this.default_map.add_reg(this.ecc_kv_rd_pkey_ctrl, 'h700);
            this.ecc_kv_rd_pkey_status = new("ecc_kv_rd_pkey_status");
            this.ecc_kv_rd_pkey_status.configure(this);

            this.ecc_kv_rd_pkey_status.build();
            this.default_map.add_reg(this.ecc_kv_rd_pkey_status, 'h704);
            this.ecc_kv_rd_seed_ctrl = new("ecc_kv_rd_seed_ctrl");
            this.ecc_kv_rd_seed_ctrl.configure(this);

            this.ecc_kv_rd_seed_ctrl.build();
            this.default_map.add_reg(this.ecc_kv_rd_seed_ctrl, 'h708);
            this.ecc_kv_rd_seed_status = new("ecc_kv_rd_seed_status");
            this.ecc_kv_rd_seed_status.configure(this);

            this.ecc_kv_rd_seed_status.build();
            this.default_map.add_reg(this.ecc_kv_rd_seed_status, 'h70c);
            this.ecc_kv_wr_pkey_ctrl = new("ecc_kv_wr_pkey_ctrl");
            this.ecc_kv_wr_pkey_ctrl.configure(this);

            this.ecc_kv_wr_pkey_ctrl.build();
            this.default_map.add_reg(this.ecc_kv_wr_pkey_ctrl, 'h710);
            this.ecc_kv_wr_pkey_status = new("ecc_kv_wr_pkey_status");
            this.ecc_kv_wr_pkey_status.configure(this);

            this.ecc_kv_wr_pkey_status.build();
            this.default_map.add_reg(this.ecc_kv_wr_pkey_status, 'h714);
            this.intr_block_rf = new("intr_block_rf");
            this.intr_block_rf.configure(this);
            this.intr_block_rf.build();
            this.default_map.add_submap(this.intr_block_rf.default_map, 'h800);
        endfunction : build
    endclass : ecc_reg

    `include "ecc_reg_sample.svh"
endpackage: ecc_reg_uvm
