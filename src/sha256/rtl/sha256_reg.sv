// Generated by PeakRDL-regblock - A free and open-source SystemVerilog generator
//  https://github.com/SystemRDL/PeakRDL-regblock

module sha256_reg (
        input wire clk,
        input wire rst,

        input wire s_cpuif_req,
        input wire s_cpuif_req_is_wr,
        input wire [8:0] s_cpuif_addr,
        input wire [31:0] s_cpuif_wr_data,
        output wire s_cpuif_req_stall_wr,
        output wire s_cpuif_req_stall_rd,
        output wire s_cpuif_rd_ack,
        output wire s_cpuif_rd_err,
        output wire [31:0] s_cpuif_rd_data,
        output wire s_cpuif_wr_ack,
        output wire s_cpuif_wr_err,

        input sha256_reg_pkg::sha256_reg__in_t hwif_in,
        output sha256_reg_pkg::sha256_reg__out_t hwif_out
    );

    //--------------------------------------------------------------------------
    // CPU Bus interface logic
    //--------------------------------------------------------------------------
    logic cpuif_req;
    logic cpuif_req_is_wr;
    logic [8:0] cpuif_addr;
    logic [31:0] cpuif_wr_data;
    logic cpuif_req_stall_wr;
    logic cpuif_req_stall_rd;

    logic cpuif_rd_ack;
    logic cpuif_rd_err;
    logic [31:0] cpuif_rd_data;

    logic cpuif_wr_ack;
    logic cpuif_wr_err;

    assign cpuif_req = s_cpuif_req;
    assign cpuif_req_is_wr = s_cpuif_req_is_wr;
    assign cpuif_addr = s_cpuif_addr;
    assign cpuif_wr_data = s_cpuif_wr_data;
    assign s_cpuif_req_stall_wr = cpuif_req_stall_wr;
    assign s_cpuif_req_stall_rd = cpuif_req_stall_rd;
    assign s_cpuif_rd_ack = cpuif_rd_ack;
    assign s_cpuif_rd_err = cpuif_rd_err;
    assign s_cpuif_rd_data = cpuif_rd_data;
    assign s_cpuif_wr_ack = cpuif_wr_ack;
    assign s_cpuif_wr_err = cpuif_wr_err;

    logic cpuif_req_masked;

    // Read & write latencies are balanced. Stalls not required
    assign cpuif_req_stall_rd = '0;
    assign cpuif_req_stall_wr = '0;
    assign cpuif_req_masked = cpuif_req;

    //--------------------------------------------------------------------------
    // Address Decode
    //--------------------------------------------------------------------------
    typedef struct {
        logic SHA256_NAME[2];
        logic SHA256_VERSION[2];
        logic SHA256_CTRL;
        logic SHA256_STATUS;
        logic SHA256_BLOCK[16];
        logic SHA256_DIGEST[8];
    } decoded_reg_strb_t;
    decoded_reg_strb_t decoded_reg_strb;
    logic decoded_req;
    logic decoded_req_is_wr;
    logic [31:0] decoded_wr_data;

    always_comb begin
        for(int i0=0; i0<2; i0++) begin
            decoded_reg_strb.SHA256_NAME[i0] = cpuif_req_masked & (cpuif_addr == 'h0 + i0*'h4);
        end
        for(int i0=0; i0<2; i0++) begin
            decoded_reg_strb.SHA256_VERSION[i0] = cpuif_req_masked & (cpuif_addr == 'h8 + i0*'h4);
        end
        decoded_reg_strb.SHA256_CTRL = cpuif_req_masked & (cpuif_addr == 'h10);
        decoded_reg_strb.SHA256_STATUS = cpuif_req_masked & (cpuif_addr == 'h18);
        for(int i0=0; i0<16; i0++) begin
            decoded_reg_strb.SHA256_BLOCK[i0] = cpuif_req_masked & (cpuif_addr == 'h80 + i0*'h4);
        end
        for(int i0=0; i0<8; i0++) begin
            decoded_reg_strb.SHA256_DIGEST[i0] = cpuif_req_masked & (cpuif_addr == 'h100 + i0*'h4);
        end
    end

    // Pass down signals to next stage
    assign decoded_req = cpuif_req_masked;
    assign decoded_req_is_wr = cpuif_req_is_wr;
    assign decoded_wr_data = cpuif_wr_data;

    // Writes are always granted with no error response
    assign cpuif_wr_ack = decoded_req & decoded_req_is_wr;
    assign cpuif_wr_err = '0;

    //--------------------------------------------------------------------------
    // Field logic
    //--------------------------------------------------------------------------
    typedef struct {
        struct {
            struct {
                logic next;
                logic load_next;
            } INIT;
            struct {
                logic next;
                logic load_next;
            } NEXT;
            struct {
                logic next;
                logic load_next;
            } MODE;
        } SHA256_CTRL;
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } BLOCK;
        } SHA256_BLOCK[16];
    } field_combo_t;
    field_combo_t field_combo;

    typedef struct {
        struct {
            struct {
                logic value;
            } INIT;
            struct {
                logic value;
            } NEXT;
            struct {
                logic value;
            } MODE;
        } SHA256_CTRL;
        struct {
            struct {
                logic [31:0] value;
            } BLOCK;
        } SHA256_BLOCK[16];
    } field_storage_t;
    field_storage_t field_storage;

    // Field: sha256_reg.SHA256_CTRL.INIT
    always_comb begin
        automatic logic [0:0] next_c = field_storage.SHA256_CTRL.INIT.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.SHA256_CTRL && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[0:0];
            load_next_c = '1;
        end else if(1) begin // HW Write
            next_c = hwif_in.SHA256_CTRL.INIT.next;
            load_next_c = '1;
        end
        field_combo.SHA256_CTRL.INIT.next = next_c;
        field_combo.SHA256_CTRL.INIT.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.SHA256_CTRL.INIT.value <= 'h0;
        end else if(field_combo.SHA256_CTRL.INIT.load_next) begin
            field_storage.SHA256_CTRL.INIT.value <= field_combo.SHA256_CTRL.INIT.next;
        end
    end
    assign hwif_out.SHA256_CTRL.INIT.value = field_storage.SHA256_CTRL.INIT.value;
    // Field: sha256_reg.SHA256_CTRL.NEXT
    always_comb begin
        automatic logic [0:0] next_c = field_storage.SHA256_CTRL.NEXT.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.SHA256_CTRL && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[1:1];
            load_next_c = '1;
        end else if(1) begin // HW Write
            next_c = hwif_in.SHA256_CTRL.NEXT.next;
            load_next_c = '1;
        end
        field_combo.SHA256_CTRL.NEXT.next = next_c;
        field_combo.SHA256_CTRL.NEXT.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.SHA256_CTRL.NEXT.value <= 'h0;
        end else if(field_combo.SHA256_CTRL.NEXT.load_next) begin
            field_storage.SHA256_CTRL.NEXT.value <= field_combo.SHA256_CTRL.NEXT.next;
        end
    end
    assign hwif_out.SHA256_CTRL.NEXT.value = field_storage.SHA256_CTRL.NEXT.value;
    // Field: sha256_reg.SHA256_CTRL.MODE
    always_comb begin
        automatic logic [0:0] next_c = field_storage.SHA256_CTRL.MODE.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.SHA256_CTRL && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[2:2];
            load_next_c = '1;
        end else if(1) begin // HW Write
            next_c = hwif_in.SHA256_CTRL.MODE.next;
            load_next_c = '1;
        end
        field_combo.SHA256_CTRL.MODE.next = next_c;
        field_combo.SHA256_CTRL.MODE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.SHA256_CTRL.MODE.value <= 'h1;
        end else if(field_combo.SHA256_CTRL.MODE.load_next) begin
            field_storage.SHA256_CTRL.MODE.value <= field_combo.SHA256_CTRL.MODE.next;
        end
    end
    assign hwif_out.SHA256_CTRL.MODE.value = field_storage.SHA256_CTRL.MODE.value;
    for(genvar i0=0; i0<16; i0++) begin
        // Field: sha256_reg.SHA256_BLOCK[].BLOCK
        always_comb begin
            automatic logic [31:0] next_c = field_storage.SHA256_BLOCK[i0].BLOCK.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.SHA256_BLOCK[i0] && decoded_req_is_wr) begin // SW write
                next_c = decoded_wr_data[31:0];
                load_next_c = '1;
            end
            field_combo.SHA256_BLOCK[i0].BLOCK.next = next_c;
            field_combo.SHA256_BLOCK[i0].BLOCK.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.reset_b) begin
            if(~hwif_in.reset_b) begin
                field_storage.SHA256_BLOCK[i0].BLOCK.value <= 'h0;
            end else if(field_combo.SHA256_BLOCK[i0].BLOCK.load_next) begin
                field_storage.SHA256_BLOCK[i0].BLOCK.value <= field_combo.SHA256_BLOCK[i0].BLOCK.next;
            end
        end
        assign hwif_out.SHA256_BLOCK[i0].BLOCK.value = field_storage.SHA256_BLOCK[i0].BLOCK.value;
    end

    //--------------------------------------------------------------------------
    // Readback
    //--------------------------------------------------------------------------
    logic readback_err;
    logic readback_done;
    logic [31:0] readback_data;
    
    // Assign readback values to a flattened array
    logic [31:0] readback_array[13];
    for(genvar i0=0; i0<2; i0++) begin
        assign readback_array[i0*1 + 0][31:0] = (decoded_reg_strb.SHA256_NAME[i0] && !decoded_req_is_wr) ? hwif_in.SHA256_NAME[i0].NAME.next : '0;
    end
    for(genvar i0=0; i0<2; i0++) begin
        assign readback_array[i0*1 + 2][31:0] = (decoded_reg_strb.SHA256_VERSION[i0] && !decoded_req_is_wr) ? hwif_in.SHA256_VERSION[i0].VERSION.next : '0;
    end
    assign readback_array[4][0:0] = (decoded_reg_strb.SHA256_STATUS && !decoded_req_is_wr) ? hwif_in.SHA256_STATUS.READY.next : '0;
    assign readback_array[4][1:1] = (decoded_reg_strb.SHA256_STATUS && !decoded_req_is_wr) ? hwif_in.SHA256_STATUS.VALID.next : '0;
    assign readback_array[4][31:2] = '0;
    for(genvar i0=0; i0<8; i0++) begin
        assign readback_array[i0*1 + 5][31:0] = (decoded_reg_strb.SHA256_DIGEST[i0] && !decoded_req_is_wr) ? hwif_in.SHA256_DIGEST[i0].DIGEST.next : '0;
    end


    // Reduce the array
    always_comb begin
        automatic logic [31:0] readback_data_var;
        readback_done = decoded_req & ~decoded_req_is_wr;
        readback_err = '0;
        readback_data_var = '0;
        for(int i=0; i<13; i++) readback_data_var |= readback_array[i];
        readback_data = readback_data_var;
    end


    assign cpuif_rd_ack = readback_done;
    assign cpuif_rd_data = readback_data;
    assign cpuif_rd_err = readback_err;


endmodule