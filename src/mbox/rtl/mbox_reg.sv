// Generated by PeakRDL-regblock - A free and open-source SystemVerilog generator
//  https://github.com/SystemRDL/PeakRDL-regblock

module mbox_reg (
        input wire clk,
        input wire rst,

        input wire s_cpuif_req,
        input wire s_cpuif_req_is_wr,
        input wire [8:0] s_cpuif_addr,
        input wire [31:0] s_cpuif_wr_data,
        output wire s_cpuif_req_stall_wr,
        output wire s_cpuif_req_stall_rd,
        output wire s_cpuif_rd_ack,
        output wire s_cpuif_rd_err,
        output wire [31:0] s_cpuif_rd_data,
        output wire s_cpuif_wr_ack,
        output wire s_cpuif_wr_err,

        input mbox_reg_pkg::mbox_reg__in_t hwif_in,
        output mbox_reg_pkg::mbox_reg__out_t hwif_out
    );

    //--------------------------------------------------------------------------
    // CPU Bus interface logic
    //--------------------------------------------------------------------------
    logic cpuif_req;
    logic cpuif_req_is_wr;
    logic [8:0] cpuif_addr;
    logic [31:0] cpuif_wr_data;
    logic cpuif_req_stall_wr;
    logic cpuif_req_stall_rd;

    logic cpuif_rd_ack;
    logic cpuif_rd_err;
    logic [31:0] cpuif_rd_data;

    logic cpuif_wr_ack;
    logic cpuif_wr_err;

    assign cpuif_req = s_cpuif_req;
    assign cpuif_req_is_wr = s_cpuif_req_is_wr;
    assign cpuif_addr = s_cpuif_addr;
    assign cpuif_wr_data = s_cpuif_wr_data;
    assign s_cpuif_req_stall_wr = cpuif_req_stall_wr;
    assign s_cpuif_req_stall_rd = cpuif_req_stall_rd;
    assign s_cpuif_rd_ack = cpuif_rd_ack;
    assign s_cpuif_rd_err = cpuif_rd_err;
    assign s_cpuif_rd_data = cpuif_rd_data;
    assign s_cpuif_wr_ack = cpuif_wr_ack;
    assign s_cpuif_wr_err = cpuif_wr_err;

    logic cpuif_req_masked;

    // Read & write latencies are balanced. Stalls not required
    assign cpuif_req_stall_rd = '0;
    assign cpuif_req_stall_wr = '0;
    assign cpuif_req_masked = cpuif_req;

    //--------------------------------------------------------------------------
    // Address Decode
    //--------------------------------------------------------------------------
    typedef struct {
        logic HW_ERROR_FATAL;
        logic HW_ERROR_NON_FATAL;
        logic FW_ERROR_FATAL;
        logic FW_ERROR_NON_FATAL;
        logic HW_ERROR_ENC;
        logic FW_ERROR_ENC;
        logic BOOT_STATUS;
        logic FLOW_STATUS;
        logic uds_seed[12];
        logic field_entropy[32];
        logic key_manifest_pk_hash_0[12];
        logic key_manifest_pk_hash_1[12];
        logic key_manifest_pk_hash_2[12];
        logic key_manifest_pk_hash_3[12];
        logic key_manifest_pk_hash_mask;
        logic key_manifest_svn;
        logic boot_loader_svn;
        logic runtime_svn[4];
        logic anti_rollback_disable;
        logic ieee_idevid_cert_chain;
    } decoded_reg_strb_t;
    decoded_reg_strb_t decoded_reg_strb;
    logic decoded_req;
    logic decoded_req_is_wr;
    logic [31:0] decoded_wr_data;

    always_comb begin
        decoded_reg_strb.HW_ERROR_FATAL = cpuif_req_masked & (cpuif_addr == 'h0);
        decoded_reg_strb.HW_ERROR_NON_FATAL = cpuif_req_masked & (cpuif_addr == 'h4);
        decoded_reg_strb.FW_ERROR_FATAL = cpuif_req_masked & (cpuif_addr == 'h8);
        decoded_reg_strb.FW_ERROR_NON_FATAL = cpuif_req_masked & (cpuif_addr == 'hc);
        decoded_reg_strb.HW_ERROR_ENC = cpuif_req_masked & (cpuif_addr == 'h10);
        decoded_reg_strb.FW_ERROR_ENC = cpuif_req_masked & (cpuif_addr == 'h14);
        decoded_reg_strb.BOOT_STATUS = cpuif_req_masked & (cpuif_addr == 'h18);
        decoded_reg_strb.FLOW_STATUS = cpuif_req_masked & (cpuif_addr == 'h1c);
        for(int i0=0; i0<12; i0++) begin
            decoded_reg_strb.uds_seed[i0] = cpuif_req_masked & (cpuif_addr == 'h20 + i0*'h4);
        end
        for(int i0=0; i0<32; i0++) begin
            decoded_reg_strb.field_entropy[i0] = cpuif_req_masked & (cpuif_addr == 'h50 + i0*'h4);
        end
        for(int i0=0; i0<12; i0++) begin
            decoded_reg_strb.key_manifest_pk_hash_0[i0] = cpuif_req_masked & (cpuif_addr == 'hd0 + i0*'h4);
        end
        for(int i0=0; i0<12; i0++) begin
            decoded_reg_strb.key_manifest_pk_hash_1[i0] = cpuif_req_masked & (cpuif_addr == 'h100 + i0*'h4);
        end
        for(int i0=0; i0<12; i0++) begin
            decoded_reg_strb.key_manifest_pk_hash_2[i0] = cpuif_req_masked & (cpuif_addr == 'h130 + i0*'h4);
        end
        for(int i0=0; i0<12; i0++) begin
            decoded_reg_strb.key_manifest_pk_hash_3[i0] = cpuif_req_masked & (cpuif_addr == 'h160 + i0*'h4);
        end
        decoded_reg_strb.key_manifest_pk_hash_mask = cpuif_req_masked & (cpuif_addr == 'h190);
        decoded_reg_strb.key_manifest_svn = cpuif_req_masked & (cpuif_addr == 'h194);
        decoded_reg_strb.boot_loader_svn = cpuif_req_masked & (cpuif_addr == 'h198);
        for(int i0=0; i0<4; i0++) begin
            decoded_reg_strb.runtime_svn[i0] = cpuif_req_masked & (cpuif_addr == 'h19c + i0*'h4);
        end
        decoded_reg_strb.anti_rollback_disable = cpuif_req_masked & (cpuif_addr == 'h1ac);
        decoded_reg_strb.ieee_idevid_cert_chain = cpuif_req_masked & (cpuif_addr == 'h1b0);
    end

    // Pass down signals to next stage
    assign decoded_req = cpuif_req_masked;
    assign decoded_req_is_wr = cpuif_req_is_wr;
    assign decoded_wr_data = cpuif_wr_data;

    // Writes are always granted with no error response
    assign cpuif_wr_ack = decoded_req & decoded_req_is_wr;
    assign cpuif_wr_err = '0;

    //--------------------------------------------------------------------------
    // Field logic
    //--------------------------------------------------------------------------
    typedef struct {
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } error_code;
        } HW_ERROR_FATAL;
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } error_code;
        } HW_ERROR_NON_FATAL;
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } error_code;
        } FW_ERROR_FATAL;
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } error_code;
        } FW_ERROR_NON_FATAL;
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } error_code;
        } HW_ERROR_ENC;
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } error_code;
        } FW_ERROR_ENC;
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } status;
        } BOOT_STATUS;
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } status;
        } FLOW_STATUS;
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } seed;
        } uds_seed[12];
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } seed;
        } field_entropy[32];
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } hash;
        } key_manifest_pk_hash_0[12];
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } hash;
        } key_manifest_pk_hash_1[12];
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } hash;
        } key_manifest_pk_hash_2[12];
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } hash;
        } key_manifest_pk_hash_3[12];
        struct {
            struct {
                logic [3:0] next;
                logic load_next;
            } mask;
        } key_manifest_pk_hash_mask;
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } svn;
        } key_manifest_svn;
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } svn;
        } boot_loader_svn;
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } svn;
        } runtime_svn[4];
        struct {
            struct {
                logic next;
                logic load_next;
            } dis;
        } anti_rollback_disable;
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } cert;
        } ieee_idevid_cert_chain;
    } field_combo_t;
    field_combo_t field_combo;

    typedef struct {
        struct {
            struct {
                logic [31:0] value;
            } error_code;
        } HW_ERROR_FATAL;
        struct {
            struct {
                logic [31:0] value;
            } error_code;
        } HW_ERROR_NON_FATAL;
        struct {
            struct {
                logic [31:0] value;
            } error_code;
        } FW_ERROR_FATAL;
        struct {
            struct {
                logic [31:0] value;
            } error_code;
        } FW_ERROR_NON_FATAL;
        struct {
            struct {
                logic [31:0] value;
            } error_code;
        } HW_ERROR_ENC;
        struct {
            struct {
                logic [31:0] value;
            } error_code;
        } FW_ERROR_ENC;
        struct {
            struct {
                logic [31:0] value;
            } status;
        } BOOT_STATUS;
        struct {
            struct {
                logic [31:0] value;
            } status;
        } FLOW_STATUS;
        struct {
            struct {
                logic [31:0] value;
            } seed;
        } uds_seed[12];
        struct {
            struct {
                logic [31:0] value;
            } seed;
        } field_entropy[32];
        struct {
            struct {
                logic [31:0] value;
            } hash;
        } key_manifest_pk_hash_0[12];
        struct {
            struct {
                logic [31:0] value;
            } hash;
        } key_manifest_pk_hash_1[12];
        struct {
            struct {
                logic [31:0] value;
            } hash;
        } key_manifest_pk_hash_2[12];
        struct {
            struct {
                logic [31:0] value;
            } hash;
        } key_manifest_pk_hash_3[12];
        struct {
            struct {
                logic [3:0] value;
            } mask;
        } key_manifest_pk_hash_mask;
        struct {
            struct {
                logic [31:0] value;
            } svn;
        } key_manifest_svn;
        struct {
            struct {
                logic [31:0] value;
            } svn;
        } boot_loader_svn;
        struct {
            struct {
                logic [31:0] value;
            } svn;
        } runtime_svn[4];
        struct {
            struct {
                logic value;
            } dis;
        } anti_rollback_disable;
        struct {
            struct {
                logic [31:0] value;
            } cert;
        } ieee_idevid_cert_chain;
    } field_storage_t;
    field_storage_t field_storage;

    // Field: mbox_reg.HW_ERROR_FATAL.error_code
    always_comb begin
        automatic logic [31:0] next_c = field_storage.HW_ERROR_FATAL.error_code.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.HW_ERROR_FATAL && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = decoded_wr_data[31:0];
            load_next_c = '1;
        end
        field_combo.HW_ERROR_FATAL.error_code.next = next_c;
        field_combo.HW_ERROR_FATAL.error_code.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.HW_ERROR_FATAL.error_code.load_next) begin
            field_storage.HW_ERROR_FATAL.error_code.value <= field_combo.HW_ERROR_FATAL.error_code.next;
        end
    end
    // Field: mbox_reg.HW_ERROR_NON_FATAL.error_code
    always_comb begin
        automatic logic [31:0] next_c = field_storage.HW_ERROR_NON_FATAL.error_code.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.HW_ERROR_NON_FATAL && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = decoded_wr_data[31:0];
            load_next_c = '1;
        end
        field_combo.HW_ERROR_NON_FATAL.error_code.next = next_c;
        field_combo.HW_ERROR_NON_FATAL.error_code.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.HW_ERROR_NON_FATAL.error_code.load_next) begin
            field_storage.HW_ERROR_NON_FATAL.error_code.value <= field_combo.HW_ERROR_NON_FATAL.error_code.next;
        end
    end
    // Field: mbox_reg.FW_ERROR_FATAL.error_code
    always_comb begin
        automatic logic [31:0] next_c = field_storage.FW_ERROR_FATAL.error_code.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.FW_ERROR_FATAL && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = decoded_wr_data[31:0];
            load_next_c = '1;
        end
        field_combo.FW_ERROR_FATAL.error_code.next = next_c;
        field_combo.FW_ERROR_FATAL.error_code.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.FW_ERROR_FATAL.error_code.load_next) begin
            field_storage.FW_ERROR_FATAL.error_code.value <= field_combo.FW_ERROR_FATAL.error_code.next;
        end
    end
    // Field: mbox_reg.FW_ERROR_NON_FATAL.error_code
    always_comb begin
        automatic logic [31:0] next_c = field_storage.FW_ERROR_NON_FATAL.error_code.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.FW_ERROR_NON_FATAL && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = decoded_wr_data[31:0];
            load_next_c = '1;
        end
        field_combo.FW_ERROR_NON_FATAL.error_code.next = next_c;
        field_combo.FW_ERROR_NON_FATAL.error_code.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.FW_ERROR_NON_FATAL.error_code.load_next) begin
            field_storage.FW_ERROR_NON_FATAL.error_code.value <= field_combo.FW_ERROR_NON_FATAL.error_code.next;
        end
    end
    // Field: mbox_reg.HW_ERROR_ENC.error_code
    always_comb begin
        automatic logic [31:0] next_c = field_storage.HW_ERROR_ENC.error_code.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.HW_ERROR_ENC && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = decoded_wr_data[31:0];
            load_next_c = '1;
        end
        field_combo.HW_ERROR_ENC.error_code.next = next_c;
        field_combo.HW_ERROR_ENC.error_code.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.HW_ERROR_ENC.error_code.load_next) begin
            field_storage.HW_ERROR_ENC.error_code.value <= field_combo.HW_ERROR_ENC.error_code.next;
        end
    end
    // Field: mbox_reg.FW_ERROR_ENC.error_code
    always_comb begin
        automatic logic [31:0] next_c = field_storage.FW_ERROR_ENC.error_code.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.FW_ERROR_ENC && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = decoded_wr_data[31:0];
            load_next_c = '1;
        end
        field_combo.FW_ERROR_ENC.error_code.next = next_c;
        field_combo.FW_ERROR_ENC.error_code.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.FW_ERROR_ENC.error_code.load_next) begin
            field_storage.FW_ERROR_ENC.error_code.value <= field_combo.FW_ERROR_ENC.error_code.next;
        end
    end
    // Field: mbox_reg.BOOT_STATUS.status
    always_comb begin
        automatic logic [31:0] next_c = field_storage.BOOT_STATUS.status.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.BOOT_STATUS && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = decoded_wr_data[31:0];
            load_next_c = '1;
        end
        field_combo.BOOT_STATUS.status.next = next_c;
        field_combo.BOOT_STATUS.status.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.BOOT_STATUS.status.load_next) begin
            field_storage.BOOT_STATUS.status.value <= field_combo.BOOT_STATUS.status.next;
        end
    end
    // Field: mbox_reg.FLOW_STATUS.status
    always_comb begin
        automatic logic [31:0] next_c = field_storage.FLOW_STATUS.status.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.FLOW_STATUS && decoded_req_is_wr && !(hwif_in.soc_req)) begin // SW write
            next_c = decoded_wr_data[31:0];
            load_next_c = '1;
        end
        field_combo.FLOW_STATUS.status.next = next_c;
        field_combo.FLOW_STATUS.status.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.FLOW_STATUS.status.load_next) begin
            field_storage.FLOW_STATUS.status.value <= field_combo.FLOW_STATUS.status.next;
        end
    end
    for(genvar i0=0; i0<12; i0++) begin
        // Field: mbox_reg.uds_seed[].seed
        always_comb begin
            automatic logic [31:0] next_c = field_storage.uds_seed[i0].seed.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.uds_seed[i0] && decoded_req_is_wr) begin // SW write
                next_c = decoded_wr_data[31:0];
                load_next_c = '1;
            end else if(hwif_in.uds_seed[i0].seed.hwclr) begin // HW Clear
                next_c = '0;
                load_next_c = '1;
            end
            field_combo.uds_seed[i0].seed.next = next_c;
            field_combo.uds_seed[i0].seed.load_next = load_next_c;
        end
        always_ff @(posedge clk) begin
            if(field_combo.uds_seed[i0].seed.load_next) begin
                field_storage.uds_seed[i0].seed.value <= field_combo.uds_seed[i0].seed.next;
            end
        end
        assign hwif_out.uds_seed[i0].seed.value = field_storage.uds_seed[i0].seed.value;
    end
    for(genvar i0=0; i0<32; i0++) begin
        // Field: mbox_reg.field_entropy[].seed
        always_comb begin
            automatic logic [31:0] next_c = field_storage.field_entropy[i0].seed.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.field_entropy[i0] && decoded_req_is_wr) begin // SW write
                next_c = decoded_wr_data[31:0];
                load_next_c = '1;
            end else if(hwif_in.field_entropy[i0].seed.hwclr) begin // HW Clear
                next_c = '0;
                load_next_c = '1;
            end
            field_combo.field_entropy[i0].seed.next = next_c;
            field_combo.field_entropy[i0].seed.load_next = load_next_c;
        end
        always_ff @(posedge clk) begin
            if(field_combo.field_entropy[i0].seed.load_next) begin
                field_storage.field_entropy[i0].seed.value <= field_combo.field_entropy[i0].seed.next;
            end
        end
        assign hwif_out.field_entropy[i0].seed.value = field_storage.field_entropy[i0].seed.value;
    end
    for(genvar i0=0; i0<12; i0++) begin
        // Field: mbox_reg.key_manifest_pk_hash_0[].hash
        always_comb begin
            automatic logic [31:0] next_c = field_storage.key_manifest_pk_hash_0[i0].hash.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.key_manifest_pk_hash_0[i0] && decoded_req_is_wr) begin // SW write
                next_c = decoded_wr_data[31:0];
                load_next_c = '1;
            end
            field_combo.key_manifest_pk_hash_0[i0].hash.next = next_c;
            field_combo.key_manifest_pk_hash_0[i0].hash.load_next = load_next_c;
        end
        always_ff @(posedge clk) begin
            if(field_combo.key_manifest_pk_hash_0[i0].hash.load_next) begin
                field_storage.key_manifest_pk_hash_0[i0].hash.value <= field_combo.key_manifest_pk_hash_0[i0].hash.next;
            end
        end
    end
    for(genvar i0=0; i0<12; i0++) begin
        // Field: mbox_reg.key_manifest_pk_hash_1[].hash
        always_comb begin
            automatic logic [31:0] next_c = field_storage.key_manifest_pk_hash_1[i0].hash.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.key_manifest_pk_hash_1[i0] && decoded_req_is_wr) begin // SW write
                next_c = decoded_wr_data[31:0];
                load_next_c = '1;
            end
            field_combo.key_manifest_pk_hash_1[i0].hash.next = next_c;
            field_combo.key_manifest_pk_hash_1[i0].hash.load_next = load_next_c;
        end
        always_ff @(posedge clk) begin
            if(field_combo.key_manifest_pk_hash_1[i0].hash.load_next) begin
                field_storage.key_manifest_pk_hash_1[i0].hash.value <= field_combo.key_manifest_pk_hash_1[i0].hash.next;
            end
        end
    end
    for(genvar i0=0; i0<12; i0++) begin
        // Field: mbox_reg.key_manifest_pk_hash_2[].hash
        always_comb begin
            automatic logic [31:0] next_c = field_storage.key_manifest_pk_hash_2[i0].hash.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.key_manifest_pk_hash_2[i0] && decoded_req_is_wr) begin // SW write
                next_c = decoded_wr_data[31:0];
                load_next_c = '1;
            end
            field_combo.key_manifest_pk_hash_2[i0].hash.next = next_c;
            field_combo.key_manifest_pk_hash_2[i0].hash.load_next = load_next_c;
        end
        always_ff @(posedge clk) begin
            if(field_combo.key_manifest_pk_hash_2[i0].hash.load_next) begin
                field_storage.key_manifest_pk_hash_2[i0].hash.value <= field_combo.key_manifest_pk_hash_2[i0].hash.next;
            end
        end
    end
    for(genvar i0=0; i0<12; i0++) begin
        // Field: mbox_reg.key_manifest_pk_hash_3[].hash
        always_comb begin
            automatic logic [31:0] next_c = field_storage.key_manifest_pk_hash_3[i0].hash.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.key_manifest_pk_hash_3[i0] && decoded_req_is_wr) begin // SW write
                next_c = decoded_wr_data[31:0];
                load_next_c = '1;
            end
            field_combo.key_manifest_pk_hash_3[i0].hash.next = next_c;
            field_combo.key_manifest_pk_hash_3[i0].hash.load_next = load_next_c;
        end
        always_ff @(posedge clk) begin
            if(field_combo.key_manifest_pk_hash_3[i0].hash.load_next) begin
                field_storage.key_manifest_pk_hash_3[i0].hash.value <= field_combo.key_manifest_pk_hash_3[i0].hash.next;
            end
        end
    end
    // Field: mbox_reg.key_manifest_pk_hash_mask.mask
    always_comb begin
        automatic logic [3:0] next_c = field_storage.key_manifest_pk_hash_mask.mask.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.key_manifest_pk_hash_mask && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[3:0];
            load_next_c = '1;
        end
        field_combo.key_manifest_pk_hash_mask.mask.next = next_c;
        field_combo.key_manifest_pk_hash_mask.mask.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.key_manifest_pk_hash_mask.mask.load_next) begin
            field_storage.key_manifest_pk_hash_mask.mask.value <= field_combo.key_manifest_pk_hash_mask.mask.next;
        end
    end
    // Field: mbox_reg.key_manifest_svn.svn
    always_comb begin
        automatic logic [31:0] next_c = field_storage.key_manifest_svn.svn.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.key_manifest_svn && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[31:0];
            load_next_c = '1;
        end
        field_combo.key_manifest_svn.svn.next = next_c;
        field_combo.key_manifest_svn.svn.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.key_manifest_svn.svn.load_next) begin
            field_storage.key_manifest_svn.svn.value <= field_combo.key_manifest_svn.svn.next;
        end
    end
    // Field: mbox_reg.boot_loader_svn.svn
    always_comb begin
        automatic logic [31:0] next_c = field_storage.boot_loader_svn.svn.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.boot_loader_svn && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[31:0];
            load_next_c = '1;
        end
        field_combo.boot_loader_svn.svn.next = next_c;
        field_combo.boot_loader_svn.svn.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.boot_loader_svn.svn.load_next) begin
            field_storage.boot_loader_svn.svn.value <= field_combo.boot_loader_svn.svn.next;
        end
    end
    for(genvar i0=0; i0<4; i0++) begin
        // Field: mbox_reg.runtime_svn[].svn
        always_comb begin
            automatic logic [31:0] next_c = field_storage.runtime_svn[i0].svn.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.runtime_svn[i0] && decoded_req_is_wr) begin // SW write
                next_c = decoded_wr_data[31:0];
                load_next_c = '1;
            end
            field_combo.runtime_svn[i0].svn.next = next_c;
            field_combo.runtime_svn[i0].svn.load_next = load_next_c;
        end
        always_ff @(posedge clk) begin
            if(field_combo.runtime_svn[i0].svn.load_next) begin
                field_storage.runtime_svn[i0].svn.value <= field_combo.runtime_svn[i0].svn.next;
            end
        end
    end
    // Field: mbox_reg.anti_rollback_disable.dis
    always_comb begin
        automatic logic [0:0] next_c = field_storage.anti_rollback_disable.dis.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.anti_rollback_disable && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[0:0];
            load_next_c = '1;
        end
        field_combo.anti_rollback_disable.dis.next = next_c;
        field_combo.anti_rollback_disable.dis.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.anti_rollback_disable.dis.load_next) begin
            field_storage.anti_rollback_disable.dis.value <= field_combo.anti_rollback_disable.dis.next;
        end
    end
    // Field: mbox_reg.ieee_idevid_cert_chain.cert
    always_comb begin
        automatic logic [31:0] next_c = field_storage.ieee_idevid_cert_chain.cert.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.ieee_idevid_cert_chain && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[31:0];
            load_next_c = '1;
        end
        field_combo.ieee_idevid_cert_chain.cert.next = next_c;
        field_combo.ieee_idevid_cert_chain.cert.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.ieee_idevid_cert_chain.cert.load_next) begin
            field_storage.ieee_idevid_cert_chain.cert.value <= field_combo.ieee_idevid_cert_chain.cert.next;
        end
    end

    //--------------------------------------------------------------------------
    // Readback
    //--------------------------------------------------------------------------
    logic readback_err;
    logic readback_done;
    logic [31:0] readback_data;
    
    // Assign readback values to a flattened array
    logic [31:0] readback_array[65];
    assign readback_array[0][31:0] = (decoded_reg_strb.HW_ERROR_FATAL && !decoded_req_is_wr) ? field_storage.HW_ERROR_FATAL.error_code.value : '0;
    assign readback_array[1][31:0] = (decoded_reg_strb.HW_ERROR_NON_FATAL && !decoded_req_is_wr) ? field_storage.HW_ERROR_NON_FATAL.error_code.value : '0;
    assign readback_array[2][31:0] = (decoded_reg_strb.FW_ERROR_FATAL && !decoded_req_is_wr) ? field_storage.FW_ERROR_FATAL.error_code.value : '0;
    assign readback_array[3][31:0] = (decoded_reg_strb.FW_ERROR_NON_FATAL && !decoded_req_is_wr) ? field_storage.FW_ERROR_NON_FATAL.error_code.value : '0;
    assign readback_array[4][31:0] = (decoded_reg_strb.HW_ERROR_ENC && !decoded_req_is_wr) ? field_storage.HW_ERROR_ENC.error_code.value : '0;
    assign readback_array[5][31:0] = (decoded_reg_strb.FW_ERROR_ENC && !decoded_req_is_wr) ? field_storage.FW_ERROR_ENC.error_code.value : '0;
    assign readback_array[6][31:0] = (decoded_reg_strb.BOOT_STATUS && !decoded_req_is_wr) ? field_storage.BOOT_STATUS.status.value : '0;
    assign readback_array[7][31:0] = (decoded_reg_strb.FLOW_STATUS && !decoded_req_is_wr) ? field_storage.FLOW_STATUS.status.value : '0;
    for(genvar i0=0; i0<12; i0++) begin
        assign readback_array[i0*1 + 8][31:0] = (decoded_reg_strb.key_manifest_pk_hash_0[i0] && !decoded_req_is_wr) ? field_storage.key_manifest_pk_hash_0[i0].hash.value : '0;
    end
    for(genvar i0=0; i0<12; i0++) begin
        assign readback_array[i0*1 + 20][31:0] = (decoded_reg_strb.key_manifest_pk_hash_1[i0] && !decoded_req_is_wr) ? field_storage.key_manifest_pk_hash_1[i0].hash.value : '0;
    end
    for(genvar i0=0; i0<12; i0++) begin
        assign readback_array[i0*1 + 32][31:0] = (decoded_reg_strb.key_manifest_pk_hash_2[i0] && !decoded_req_is_wr) ? field_storage.key_manifest_pk_hash_2[i0].hash.value : '0;
    end
    for(genvar i0=0; i0<12; i0++) begin
        assign readback_array[i0*1 + 44][31:0] = (decoded_reg_strb.key_manifest_pk_hash_3[i0] && !decoded_req_is_wr) ? field_storage.key_manifest_pk_hash_3[i0].hash.value : '0;
    end
    assign readback_array[56][3:0] = (decoded_reg_strb.key_manifest_pk_hash_mask && !decoded_req_is_wr) ? field_storage.key_manifest_pk_hash_mask.mask.value : '0;
    assign readback_array[56][31:4] = '0;
    assign readback_array[57][31:0] = (decoded_reg_strb.key_manifest_svn && !decoded_req_is_wr) ? field_storage.key_manifest_svn.svn.value : '0;
    assign readback_array[58][31:0] = (decoded_reg_strb.boot_loader_svn && !decoded_req_is_wr) ? field_storage.boot_loader_svn.svn.value : '0;
    for(genvar i0=0; i0<4; i0++) begin
        assign readback_array[i0*1 + 59][31:0] = (decoded_reg_strb.runtime_svn[i0] && !decoded_req_is_wr) ? field_storage.runtime_svn[i0].svn.value : '0;
    end
    assign readback_array[63][0:0] = (decoded_reg_strb.anti_rollback_disable && !decoded_req_is_wr) ? field_storage.anti_rollback_disable.dis.value : '0;
    assign readback_array[63][31:1] = '0;
    assign readback_array[64][31:0] = (decoded_reg_strb.ieee_idevid_cert_chain && !decoded_req_is_wr) ? field_storage.ieee_idevid_cert_chain.cert.value : '0;


    // Reduce the array
    always_comb begin
        automatic logic [31:0] readback_data_var;
        readback_done = decoded_req & ~decoded_req_is_wr;
        readback_err = '0;
        readback_data_var = '0;
        for(int i=0; i<65; i++) readback_data_var |= readback_array[i];
        readback_data = readback_data_var;
    end


    assign cpuif_rd_ack = readback_done;
    assign cpuif_rd_data = readback_data;
    assign cpuif_rd_err = readback_err;


endmodule